- case: project_decorator_validity
  main: |
    from metaflow import FlowSpec, project

    @project
    class MyFlow(FlowSpec):
      ...

    @project("project_name")
    class MyFlow2(FlowSpec):
      ...

    @project(foo="bar")
    class MyFlow3(FlowSpec):
      ...

    @project(name="project_name")
    class NotAFlow(object):
      ...

    @project(name="project_name")
    def not_a_flow_function():
      ...

    @project(name="project_name")
    class CorrectFlow(FlowSpec):
      ...
  out: |
    main:3: error: Argument 1 to "project" has incompatible type "type[MyFlow]"; expected "str"  [arg-type]
    main:4: error: Too many positional arguments for "project"  [misc]
    main:7: error: Too many positional arguments for "project"  [misc]
    main:11: error: Unexpected keyword argument "foo" for "project"  [call-arg]
    main:16: error: Value of type variable "FlowSpecDerived" of function cannot be "NotAFlow"  [type-var]
    main:19: error: Argument 1 has incompatible type "Callable[[], Any]"; expected "type[Any]"  [arg-type]

- case: pypi_base_decorator_validity
  main: |
    from metaflow import FlowSpec, pypi_base

    @pypi_base
    class MyFlow(FlowSpec):
      ...

    @pypi_base({'scikit-learn': '1.3.1'})
    class MyFlow2(FlowSpec):
      ...

    @pypi_base(foo={'scikit-learn': '1.3.1'})
    class MyFlow3(FlowSpec):
      ...

    @pypi_base(packages={'scikit-learn': '1.3.1'})
    class NotAFlow(object):
      ...

    @pypi_base(packages={'scikit-learn': '1.3.1'})
    def not_a_flow_function():
      ...

    @pypi_base(packages={'scikit-learn': '1.3.1'})
    class CorrectFlow(FlowSpec):
      ...
  out: |
    main:7: error: No overload variant of "pypi_base" matches argument type "dict[str, str]"  [call-overload]
    main:7: note: Possible overload variants:
    main:7: note:     def pypi_base(*, packages: dict[str, str] = ..., python: str | None = ...) -> Callable[[type[FlowSpecDerived]], type[FlowSpecDerived]]
    main:7: note:     def [FlowSpecDerived <: FlowSpec] pypi_base(f: type[FlowSpecDerived]) -> type[FlowSpecDerived]
    main:11: error: No overload variant of "pypi_base" matches argument type "dict[str, str]"  [call-overload]
    main:11: note: Possible overload variants:
    main:11: note:     def pypi_base(*, packages: dict[str, str] = ..., python: str | None = ...) -> Callable[[type[FlowSpecDerived]], type[FlowSpecDerived]]
    main:11: note:     def [FlowSpecDerived <: FlowSpec] pypi_base(f: type[FlowSpecDerived]) -> type[FlowSpecDerived]
    main:16: error: Value of type variable "FlowSpecDerived" of function cannot be "NotAFlow"  [type-var]
    main:19: error: Argument 1 has incompatible type "Callable[[], Any]"; expected "type[Any]"  [arg-type]

- case: conda_base_decorator_validity
  main: |
    from metaflow import FlowSpec, conda_base

    @conda_base
    class MyFlow(FlowSpec):
      ...

    @conda_base({'scikit-learn': '1.3.1'})
    class MyFlow2(FlowSpec):
      ...

    @conda_base(foo={'scikit-learn': '1.3.1'})
    class MyFlow3(FlowSpec):
      ...

    @conda_base(libraries={'scikit-learn': '1.3.1'})
    class NotAFlow(object):
      ...

    @conda_base(libraries={'scikit-learn': '1.3.1'})
    def not_a_flow_function():
      ...

    @conda_base(libraries={'scikit-learn': '1.3.1'})
    class CorrectFlow(FlowSpec):
      ...
  out: |
    main:7: error: No overload variant of "conda_base" matches argument type "dict[str, str]"  [call-overload]
    main:7: note: Possible overload variants:
    main:7: note:     def conda_base(*, packages: dict[str, str] = ..., libraries: dict[str, str] = ..., python: str | None = ..., disabled: bool = ...) -> Callable[[type[FlowSpecDerived]], type[FlowSpecDerived]]
    main:7: note:     def [FlowSpecDerived <: FlowSpec] conda_base(f: type[FlowSpecDerived]) -> type[FlowSpecDerived]
    main:11: error: No overload variant of "conda_base" matches argument type "dict[str, str]"  [call-overload]
    main:11: note: Possible overload variants:
    main:11: note:     def conda_base(*, packages: dict[str, str] = ..., libraries: dict[str, str] = ..., python: str | None = ..., disabled: bool = ...) -> Callable[[type[FlowSpecDerived]], type[FlowSpecDerived]]
    main:11: note:     def [FlowSpecDerived <: FlowSpec] conda_base(f: type[FlowSpecDerived]) -> type[FlowSpecDerived]
    main:16: error: Value of type variable "FlowSpecDerived" of function cannot be "NotAFlow"  [type-var]
    main:19: error: Argument 1 has incompatible type "Callable[[], Any]"; expected "type[Any]"  [arg-type]

- case: schedule_decorator_validity
  main: |
    from metaflow import FlowSpec, schedule

    @schedule
    class MyFlow(FlowSpec):
      ...

    @schedule(True)
    class MyFlow2(FlowSpec):
      ...

    @schedule(foo=True)
    class MyFlow3(FlowSpec):
      ...

    @schedule(daily=True)
    class NotAFlow(object):
      ...

    @schedule(daily=True)
    def not_a_flow_function():
      ...

    @schedule(daily=True)
    class CorrectFlow(FlowSpec):
      ...
  out: |
    main:7: error: No overload variant of "schedule" matches argument type "bool"  [call-overload]
    main:7: note: Possible overload variants:
    main:7: note:     def schedule(*, hourly: bool = ..., daily: bool = ..., weekly: bool = ..., cron: str | None = ..., timezone: str | None = ...) -> Callable[[type[FlowSpecDerived]], type[FlowSpecDerived]]
    main:7: note:     def [FlowSpecDerived <: FlowSpec] schedule(f: type[FlowSpecDerived]) -> type[FlowSpecDerived]
    main:11: error: No overload variant of "schedule" matches argument type "bool"  [call-overload]
    main:11: note: Possible overload variants:
    main:11: note:     def schedule(*, hourly: bool = ..., daily: bool = ..., weekly: bool = ..., cron: str | None = ..., timezone: str | None = ...) -> Callable[[type[FlowSpecDerived]], type[FlowSpecDerived]]
    main:11: note:     def [FlowSpecDerived <: FlowSpec] schedule(f: type[FlowSpecDerived]) -> type[FlowSpecDerived]
    main:16: error: Value of type variable "FlowSpecDerived" of function cannot be "NotAFlow"  [type-var]
    main:19: error: Argument 1 has incompatible type "Callable[[], Any]"; expected "type[Any]"  [arg-type]

- case: trigger_decorator_validity
  main: |
    from metaflow import FlowSpec, trigger

    @trigger
    class MyFlow(FlowSpec):
      ...

    @trigger('bar')
    class MyFlow2(FlowSpec):
      ...

    @trigger(foo='bar')
    class MyFlow3(FlowSpec):
      ...

    @trigger(event='bar')
    class NotAFlow(object):
      ...

    @trigger(event='bar')
    def not_a_flow_function():
      ...

    @trigger(event='bar')
    class CorrectFlow(FlowSpec):
      ...
  out: |
    main:7: error: No overload variant of "trigger" matches argument type "str"  [call-overload]
    main:7: note: Possible overload variants:
    main:7: note:     def trigger(*, event: str | dict[str, Any] | None = ..., events: list[str | dict[str, Any]] = ..., options: dict[str, Any] = ...) -> Callable[[type[FlowSpecDerived]], type[FlowSpecDerived]]
    main:7: note:     def [FlowSpecDerived <: FlowSpec] trigger(f: type[FlowSpecDerived]) -> type[FlowSpecDerived]
    main:11: error: No overload variant of "trigger" matches argument type "str"  [call-overload]
    main:11: note: Possible overload variants:
    main:11: note:     def trigger(*, event: str | dict[str, Any] | None = ..., events: list[str | dict[str, Any]] = ..., options: dict[str, Any] = ...) -> Callable[[type[FlowSpecDerived]], type[FlowSpecDerived]]
    main:11: note:     def [FlowSpecDerived <: FlowSpec] trigger(f: type[FlowSpecDerived]) -> type[FlowSpecDerived]
    main:16: error: Value of type variable "FlowSpecDerived" of function cannot be "NotAFlow"  [type-var]
    main:19: error: Argument 1 has incompatible type "Callable[[], Any]"; expected "type[Any]"  [arg-type]

- case: trigger_on_finish_decorator_validity
  main: |
    from metaflow import FlowSpec, trigger_on_finish

    @trigger_on_finish
    class MyFlow(FlowSpec):
      ...

    @trigger_on_finish('bar')
    class MyFlow2(FlowSpec):
      ...

    @trigger_on_finish(foo='bar')
    class MyFlow3(FlowSpec):
      ...

    @trigger_on_finish(flow='bar')
    class NotAFlow(object):
      ...

    @trigger_on_finish(flow='bar')
    def not_a_flow_function():
      ...

    @trigger_on_finish(flow='bar')
    class CorrectFlow(FlowSpec):
      ...
  out: |
    main:7: error: No overload variant of "trigger_on_finish" matches argument type "str"  [call-overload]
    main:7: note: Possible overload variants:
    main:7: note:     def trigger_on_finish(*, flow: str | dict[str, str] | None = ..., flows: list[str | dict[str, str]] = ..., options: dict[str, Any] = ...) -> Callable[[type[FlowSpecDerived]], type[FlowSpecDerived]]
    main:7: note:     def [FlowSpecDerived <: FlowSpec] trigger_on_finish(f: type[FlowSpecDerived]) -> type[FlowSpecDerived]
    main:11: error: No overload variant of "trigger_on_finish" matches argument type "str"  [call-overload]
    main:11: note: Possible overload variants:
    main:11: note:     def trigger_on_finish(*, flow: str | dict[str, str] | None = ..., flows: list[str | dict[str, str]] = ..., options: dict[str, Any] = ...) -> Callable[[type[FlowSpecDerived]], type[FlowSpecDerived]]
    main:11: note:     def [FlowSpecDerived <: FlowSpec] trigger_on_finish(f: type[FlowSpecDerived]) -> type[FlowSpecDerived]
    main:16: error: Value of type variable "FlowSpecDerived" of function cannot be "NotAFlow"  [type-var]
    main:19: error: Argument 1 has incompatible type "Callable[[], Any]"; expected "type[Any]"  [arg-type]

- case: step_decorator_validity
  main: |
    from metaflow import FlowSpec, step

    @step
    class MyFlow(FlowSpec):
      ...

    class MyFlow2(FlowSpec):
      @step()
      def no_arg_for_step(self):
        ...

      @step
      def too_many_args(self, a, b):
        ...

      @step
      def too_few_args():
        ...

      @step
      @staticmethod
      def static_method_not_ok(a: int):
        ...

      @step
      @classmethod
      def class_method_not_ok(cls):
        ...

      @step
      def linear_step_ok(self):
        ...

      @step
      def join_step_ok(self, inputs):
        ...

    @step
    def typed_func_not_ok(a: int):
      ...
  out: |
    main:3: error: Argument 1 to "step" has incompatible type "type[MyFlow]"; expected "Callable[[Any], None]"  [arg-type]
    main:8: error: All overload variants of "step" require at least one argument  [call-overload]
    main:8: note: Possible overload variants:
    main:8: note:     def [FlowSpecDerived <: FlowSpec] step(f: Callable[[FlowSpecDerived], None]) -> Callable[[FlowSpecDerived, StepFlag], None]
    main:8: note:     def [FlowSpecDerived <: FlowSpec] step(f: Callable[[FlowSpecDerived, Any], None]) -> Callable[[FlowSpecDerived, Any, StepFlag], None]
    main:12: error: Argument 1 to "step" has incompatible type "Callable[[MyFlow2, Any, Any], Any]"; expected "Callable[[MyFlow2], None]"  [arg-type]
    main:16: error: Argument 1 to "step" has incompatible type "Callable[[], Any]"; expected "Callable[[Never], None]"  [arg-type]
    main:17: error: Method must have at least one argument. Did you forget the "self" argument?  [misc]
    main:20: error: Value of type variable "FlowSpecDerived" of "step" cannot be "int"  [type-var]
    main:25: error: Value of type variable "FlowSpecDerived" of "step" cannot be "type[MyFlow2]"  [type-var]
    main:38: error: Value of type variable "FlowSpecDerived" of "step" cannot be "int"  [type-var]

- case: decorator_order
  main: |
    from metaflow import FlowSpec, step, retry, catch

    class MyFlow(FlowSpec):
      @retry(times=3)
      def missing_step(self):
        ...

      @step
      @retry(times=3)
      def wrong_order(self):
        ...

      @retry(times=3)
      @step
      def ok_step(self):
        ...

      @catch
      @retry(times=3)
      @step
      def ok_stack(self):
        ...
  out: |
    main:4: error: Argument 1 has incompatible type "Callable[[MyFlow], Any]"; expected "Callable[[Never, StepFlag], None] | Callable[[Never, Any, StepFlag], None]"  [arg-type]
    main:8: error: Argument 1 has incompatible type "Callable[[MyFlow], Any]"; expected "Callable[[Never, StepFlag], None] | Callable[[Never, Any, StepFlag], None]"  [arg-type]
    main:8: error: Argument 1 to "step" has incompatible type "Callable[[Never, StepFlag], None] | Callable[[Never, Any, StepFlag], None]"; expected "Callable[[Never], None]"  [arg-type]

- case: batch_decorator_validity
  main: |
    from metaflow import FlowSpec, step, batch

    @batch
    class NonFlowDecorator(FlowSpec):
      ...

    @batch(cpu=1)
    class NonFlowDecorator2(FlowSpec):
      ...

    class MyFlow(FlowSpec):
      @batch(1)
      @step
      def need_kwarg(self):
        ...

      @batch(foo=1)
      @step
      def wrong_kwarg(self):
        ...

      @batch
      def wrong_without_step(self):
        ...

      @batch
      @step
      def ok_no_arg(self):
        ...

      @batch(cpu=1)
      @step
      def ok_with_arg(self):
        ...
  out: |
    main:3: error: Argument 1 to "batch" has incompatible type "type[NonFlowDecorator]"; expected "Callable[[Any, StepFlag], None]"  [arg-type]
    main:7: error: Argument 1 has incompatible type "type[NonFlowDecorator2]"; expected "Callable[[Never, StepFlag], None] | Callable[[Never, Any, StepFlag], None]"  [arg-type]
    main:12: error: No overload variant of "batch" matches argument type "int"  [call-overload]
    main:12: note: Possible overload variants:
    main:12: note:     def batch(*, cpu: int = ..., gpu: int = ..., memory: int = ..., image: str | None = ..., queue: str = ..., iam_role: str = ..., execution_role: str = ..., shared_memory: int | None = ..., max_swap: int | None = ..., swappiness: int | None = ..., use_tmpfs: bool = ..., tmpfs_tempdir: bool = ..., tmpfs_size: int | None = ..., tmpfs_path: str | None = ..., inferentia: int = ..., efa: int = ...) -> Callable[[Callable[[FlowSpecDerived, StepFlag], None] | Callable[[FlowSpecDerived, Any, StepFlag], None]], Callable[[FlowSpecDerived, StepFlag], None] | Callable[[FlowSpecDerived, Any, StepFlag], None]]
    main:12: note:     def [FlowSpecDerived <: FlowSpec] batch(f: Callable[[FlowSpecDerived, StepFlag], None]) -> Callable[[FlowSpecDerived, StepFlag], None]
    main:12: note:     def [FlowSpecDerived <: FlowSpec] batch(f: Callable[[FlowSpecDerived, Any, StepFlag], None]) -> Callable[[FlowSpecDerived, Any, StepFlag], None]
    main:17: error: No overload variant of "batch" matches argument type "int"  [call-overload]
    main:17: note: Possible overload variants:
    main:17: note:     def batch(*, cpu: int = ..., gpu: int = ..., memory: int = ..., image: str | None = ..., queue: str = ..., iam_role: str = ..., execution_role: str = ..., shared_memory: int | None = ..., max_swap: int | None = ..., swappiness: int | None = ..., use_tmpfs: bool = ..., tmpfs_tempdir: bool = ..., tmpfs_size: int | None = ..., tmpfs_path: str | None = ..., inferentia: int = ..., efa: int = ...) -> Callable[[Callable[[FlowSpecDerived, StepFlag], None] | Callable[[FlowSpecDerived, Any, StepFlag], None]], Callable[[FlowSpecDerived, StepFlag], None] | Callable[[FlowSpecDerived, Any, StepFlag], None]]
    main:17: note:     def [FlowSpecDerived <: FlowSpec] batch(f: Callable[[FlowSpecDerived, StepFlag], None]) -> Callable[[FlowSpecDerived, StepFlag], None]
    main:17: note:     def [FlowSpecDerived <: FlowSpec] batch(f: Callable[[FlowSpecDerived, Any, StepFlag], None]) -> Callable[[FlowSpecDerived, Any, StepFlag], None]
    main:22: error: Argument 1 to "batch" has incompatible type "Callable[[MyFlow], Any]"; expected "Callable[[MyFlow, StepFlag], None]"  [arg-type]

- case: kubernetes_decorator_validity
  main: |
    from metaflow import FlowSpec, step, kubernetes

    @kubernetes
    class NonFlowDecorator(FlowSpec):
      ...

    @kubernetes(cpu=1)
    class NonFlowDecorator2(FlowSpec):
      ...

    class MyFlow(FlowSpec):
      @kubernetes(1)
      @step
      def need_kwarg(self):
        ...

      @kubernetes(foo=1)
      @step
      def wrong_kwarg(self):
        ...

      @kubernetes
      def wrong_without_step(self):
        ...

      @kubernetes
      @step
      def ok_no_arg(self):
        ...

      @kubernetes(cpu=1)
      @step
      def ok_with_arg(self):
        ...
  out: |
    main:3: error: Argument 1 to "kubernetes" has incompatible type "type[NonFlowDecorator]"; expected "Callable[[Any, StepFlag], None]"  [arg-type]
    main:7: error: Argument 1 has incompatible type "type[NonFlowDecorator2]"; expected "Callable[[Never, StepFlag], None] | Callable[[Never, Any, StepFlag], None]"  [arg-type]
    main:12: error: No overload variant of "kubernetes" matches argument type "int"  [call-overload]
    main:12: note: Possible overload variants:
    main:12: note:     def kubernetes(*, cpu: int = ..., memory: int = ..., disk: int = ..., image: str | None = ..., image_pull_policy: str = ..., service_account: str = ..., secrets: list[str] | None = ..., namespace: str = ..., gpu: int | None = ..., gpu_vendor: str = ..., tolerations: list[str] = ..., use_tmpfs: bool = ..., tmpfs_tempdir: bool = ..., tmpfs_size: int | None = ..., tmpfs_path: str | None = ..., persistent_volume_claims: dict[str, str] | None = ...) -> Callable[[Callable[[FlowSpecDerived, StepFlag], None] | Callable[[FlowSpecDerived, Any, StepFlag], None]], Callable[[FlowSpecDerived, StepFlag], None] | Callable[[FlowSpecDerived, Any, StepFlag], None]]
    main:12: note:     def [FlowSpecDerived <: FlowSpec] kubernetes(f: Callable[[FlowSpecDerived, StepFlag], None]) -> Callable[[FlowSpecDerived, StepFlag], None]
    main:12: note:     def [FlowSpecDerived <: FlowSpec] kubernetes(f: Callable[[FlowSpecDerived, Any, StepFlag], None]) -> Callable[[FlowSpecDerived, Any, StepFlag], None]
    main:17: error: No overload variant of "kubernetes" matches argument type "int"  [call-overload]
    main:17: note: Possible overload variants:
    main:17: note:     def kubernetes(*, cpu: int = ..., memory: int = ..., disk: int = ..., image: str | None = ..., image_pull_policy: str = ..., service_account: str = ..., secrets: list[str] | None = ..., namespace: str = ..., gpu: int | None = ..., gpu_vendor: str = ..., tolerations: list[str] = ..., use_tmpfs: bool = ..., tmpfs_tempdir: bool = ..., tmpfs_size: int | None = ..., tmpfs_path: str | None = ..., persistent_volume_claims: dict[str, str] | None = ...) -> Callable[[Callable[[FlowSpecDerived, StepFlag], None] | Callable[[FlowSpecDerived, Any, StepFlag], None]], Callable[[FlowSpecDerived, StepFlag], None] | Callable[[FlowSpecDerived, Any, StepFlag], None]]
    main:17: note:     def [FlowSpecDerived <: FlowSpec] kubernetes(f: Callable[[FlowSpecDerived, StepFlag], None]) -> Callable[[FlowSpecDerived, StepFlag], None]
    main:17: note:     def [FlowSpecDerived <: FlowSpec] kubernetes(f: Callable[[FlowSpecDerived, Any, StepFlag], None]) -> Callable[[FlowSpecDerived, Any, StepFlag], None]
    main:22: error: Argument 1 to "kubernetes" has incompatible type "Callable[[MyFlow], Any]"; expected "Callable[[MyFlow, StepFlag], None]"  [arg-type]

- case: environment_decorator_validity
  main: |
    from metaflow import FlowSpec, step, environment

    @environment
    class NonFlowDecorator(FlowSpec):
      ...

    @environment(vars={"LOG_LEVEL": "info"})
    class NonFlowDecorator2(FlowSpec):
      ...

    class MyFlow(FlowSpec):
      @environment({"LOG_LEVEL": "info"})
      @step
      def need_kwarg(self):
        ...

      @environment(foo={"LOG_LEVEL": "info"})
      @step
      def wrong_kwarg(self):
        ...

      @environment
      def wrong_without_step(self):
        ...

      @environment
      @step
      def ok_no_arg(self):
        ...

      @environment(vars={"LOG_LEVEL": "info"})
      @step
      def ok_with_arg(self):
        ...
  out: |
    main:3: error: Argument 1 to "environment" has incompatible type "type[NonFlowDecorator]"; expected "Callable[[Any, StepFlag], None]"  [arg-type]
    main:7: error: Argument 1 has incompatible type "type[NonFlowDecorator2]"; expected "Callable[[Never, StepFlag], None] | Callable[[Never, Any, StepFlag], None]"  [arg-type]
    main:12: error: No overload variant of "environment" matches argument type "dict[str, str]"  [call-overload]
    main:12: note: Possible overload variants:
    main:12: note:     def environment(*, vars: dict[str, str] = ...) -> Callable[[Callable[[FlowSpecDerived, StepFlag], None] | Callable[[FlowSpecDerived, Any, StepFlag], None]], Callable[[FlowSpecDerived, StepFlag], None] | Callable[[FlowSpecDerived, Any, StepFlag], None]]
    main:12: note:     def [FlowSpecDerived <: FlowSpec] environment(f: Callable[[FlowSpecDerived, StepFlag], None]) -> Callable[[FlowSpecDerived, StepFlag], None]
    main:12: note:     def [FlowSpecDerived <: FlowSpec] environment(f: Callable[[FlowSpecDerived, Any, StepFlag], None]) -> Callable[[FlowSpecDerived, Any, StepFlag], None]
    main:17: error: No overload variant of "environment" matches argument type "dict[str, str]"  [call-overload]
    main:17: note: Possible overload variants:
    main:17: note:     def environment(*, vars: dict[str, str] = ...) -> Callable[[Callable[[FlowSpecDerived, StepFlag], None] | Callable[[FlowSpecDerived, Any, StepFlag], None]], Callable[[FlowSpecDerived, StepFlag], None] | Callable[[FlowSpecDerived, Any, StepFlag], None]]
    main:17: note:     def [FlowSpecDerived <: FlowSpec] environment(f: Callable[[FlowSpecDerived, StepFlag], None]) -> Callable[[FlowSpecDerived, StepFlag], None]
    main:17: note:     def [FlowSpecDerived <: FlowSpec] environment(f: Callable[[FlowSpecDerived, Any, StepFlag], None]) -> Callable[[FlowSpecDerived, Any, StepFlag], None]
    main:22: error: Argument 1 to "environment" has incompatible type "Callable[[MyFlow], Any]"; expected "Callable[[MyFlow, StepFlag], None]"  [arg-type]

- case: card_decorator_validity
  main: |
    from metaflow import FlowSpec, step, card

    @card
    class NonFlowDecorator(FlowSpec):
      ...

    @card(type='blank')
    class NonFlowDecorator2(FlowSpec):
      ...

    class MyFlow(FlowSpec):
      @card('blank')
      @step
      def need_kwarg(self):
        ...

      @card(foo='blank')
      @step
      def wrong_kwarg(self):
        ...

      @card
      def wrong_without_step(self):
        ...

      @card
      @step
      def ok_no_arg(self):
        ...

      @card(type='blank')
      @step
      def ok_with_arg(self):
        ...
  out: |
    main:3: error: Argument 1 to "card" has incompatible type "type[NonFlowDecorator]"; expected "Callable[[Any, StepFlag], None]"  [arg-type]
    main:7: error: Argument 1 has incompatible type "type[NonFlowDecorator2]"; expected "Callable[[Never, StepFlag], None] | Callable[[Never, Any, StepFlag], None]"  [arg-type]
    main:12: error: No overload variant of "card" matches argument type "str"  [call-overload]
    main:12: note: Possible overload variants:
    main:12: note:     def card(*, type: str = ..., id: str | None = ..., options: dict[str, Any] = ..., timeout: int = ...) -> Callable[[Callable[[FlowSpecDerived, StepFlag], None] | Callable[[FlowSpecDerived, Any, StepFlag], None]], Callable[[FlowSpecDerived, StepFlag], None] | Callable[[FlowSpecDerived, Any, StepFlag], None]]
    main:12: note:     def [FlowSpecDerived <: FlowSpec] card(f: Callable[[FlowSpecDerived, StepFlag], None]) -> Callable[[FlowSpecDerived, StepFlag], None]
    main:12: note:     def [FlowSpecDerived <: FlowSpec] card(f: Callable[[FlowSpecDerived, Any, StepFlag], None]) -> Callable[[FlowSpecDerived, Any, StepFlag], None]
    main:17: error: No overload variant of "card" matches argument type "str"  [call-overload]
    main:17: note: Possible overload variants:
    main:17: note:     def card(*, type: str = ..., id: str | None = ..., options: dict[str, Any] = ..., timeout: int = ...) -> Callable[[Callable[[FlowSpecDerived, StepFlag], None] | Callable[[FlowSpecDerived, Any, StepFlag], None]], Callable[[FlowSpecDerived, StepFlag], None] | Callable[[FlowSpecDerived, Any, StepFlag], None]]
    main:17: note:     def [FlowSpecDerived <: FlowSpec] card(f: Callable[[FlowSpecDerived, StepFlag], None]) -> Callable[[FlowSpecDerived, StepFlag], None]
    main:17: note:     def [FlowSpecDerived <: FlowSpec] card(f: Callable[[FlowSpecDerived, Any, StepFlag], None]) -> Callable[[FlowSpecDerived, Any, StepFlag], None]
    main:22: error: Argument 1 to "card" has incompatible type "Callable[[MyFlow], Any]"; expected "Callable[[MyFlow, StepFlag], None]"  [arg-type]

- case: catch_decorator_validity
  main: |
    from metaflow import FlowSpec, step, catch

    @catch
    class NonFlowDecorator(FlowSpec):
      ...

    @catch(var='divide_failed')
    class NonFlowDecorator2(FlowSpec):
      ...

    class MyFlow(FlowSpec):
      @catch('divide_failed')
      @step
      def need_kwarg(self):
        ...

      @catch(foo='divide_failed')
      @step
      def wrong_kwarg(self):
        ...

      @catch
      def wrong_without_step(self):
        ...

      @catch
      @step
      def ok_no_arg(self):
        ...

      @catch(var='divide_failed')
      @step
      def ok_with_arg(self):
        ...
  out: |
    main:3: error: Argument 1 to "catch" has incompatible type "type[NonFlowDecorator]"; expected "Callable[[Any, StepFlag], None]"  [arg-type]
    main:7: error: Argument 1 has incompatible type "type[NonFlowDecorator2]"; expected "Callable[[Never, StepFlag], None] | Callable[[Never, Any, StepFlag], None]"  [arg-type]
    main:12: error: No overload variant of "catch" matches argument type "str"  [call-overload]
    main:12: note: Possible overload variants:
    main:12: note:     def catch(*, var: str | None = ..., print_exception: bool = ...) -> Callable[[Callable[[FlowSpecDerived, StepFlag], None] | Callable[[FlowSpecDerived, Any, StepFlag], None]], Callable[[FlowSpecDerived, StepFlag], None] | Callable[[FlowSpecDerived, Any, StepFlag], None]]
    main:12: note:     def [FlowSpecDerived <: FlowSpec] catch(f: Callable[[FlowSpecDerived, StepFlag], None]) -> Callable[[FlowSpecDerived, StepFlag], None]
    main:12: note:     def [FlowSpecDerived <: FlowSpec] catch(f: Callable[[FlowSpecDerived, Any, StepFlag], None]) -> Callable[[FlowSpecDerived, Any, StepFlag], None]
    main:17: error: No overload variant of "catch" matches argument type "str"  [call-overload]
    main:17: note: Possible overload variants:
    main:17: note:     def catch(*, var: str | None = ..., print_exception: bool = ...) -> Callable[[Callable[[FlowSpecDerived, StepFlag], None] | Callable[[FlowSpecDerived, Any, StepFlag], None]], Callable[[FlowSpecDerived, StepFlag], None] | Callable[[FlowSpecDerived, Any, StepFlag], None]]
    main:17: note:     def [FlowSpecDerived <: FlowSpec] catch(f: Callable[[FlowSpecDerived, StepFlag], None]) -> Callable[[FlowSpecDerived, StepFlag], None]
    main:17: note:     def [FlowSpecDerived <: FlowSpec] catch(f: Callable[[FlowSpecDerived, Any, StepFlag], None]) -> Callable[[FlowSpecDerived, Any, StepFlag], None]
    main:22: error: Argument 1 to "catch" has incompatible type "Callable[[MyFlow], Any]"; expected "Callable[[MyFlow, StepFlag], None]"  [arg-type]

- case: pypi_decorator_validity
  main: |
    from metaflow import FlowSpec, step, pypi

    @pypi
    class NonFlowDecorator(FlowSpec):
      ...

    @pypi(packages={'scikit-learn': '1.3.1'})
    class NonFlowDecorator2(FlowSpec):
      ...

    class MyFlow(FlowSpec):
      @pypi({'scikit-learn': '1.3.1'})
      @step
      def need_kwarg(self):
        ...

      @pypi(foo={'scikit-learn': '1.3.1'})
      @step
      def wrong_kwarg(self):
        ...

      @pypi
      @step
      def ok_no_arg(self):
        ...

      @pypi
      def wrong_without_step(self):
        ...

      @pypi(packages={'scikit-learn': '1.3.1'})
      @step
      def ok_with_arg(self):
        ...
  out: |
    main:3: error: Argument 1 to "pypi" has incompatible type "type[NonFlowDecorator]"; expected "Callable[[Any, StepFlag], None]"  [arg-type]
    main:7: error: Argument 1 has incompatible type "type[NonFlowDecorator2]"; expected "Callable[[Never, StepFlag], None] | Callable[[Never, Any, StepFlag], None]"  [arg-type]
    main:12: error: No overload variant of "pypi" matches argument type "dict[str, str]"  [call-overload]
    main:12: note: Possible overload variants:
    main:12: note:     def pypi(*, packages: dict[str, str] = ..., python: str | None = ...) -> Callable[[Callable[[FlowSpecDerived, StepFlag], None] | Callable[[FlowSpecDerived, Any, StepFlag], None]], Callable[[FlowSpecDerived, StepFlag], None] | Callable[[FlowSpecDerived, Any, StepFlag], None]]
    main:12: note:     def [FlowSpecDerived <: FlowSpec] pypi(f: Callable[[FlowSpecDerived, StepFlag], None]) -> Callable[[FlowSpecDerived, StepFlag], None]
    main:12: note:     def [FlowSpecDerived <: FlowSpec] pypi(f: Callable[[FlowSpecDerived, Any, StepFlag], None]) -> Callable[[FlowSpecDerived, Any, StepFlag], None]
    main:17: error: No overload variant of "pypi" matches argument type "dict[str, str]"  [call-overload]
    main:17: note: Possible overload variants:
    main:17: note:     def pypi(*, packages: dict[str, str] = ..., python: str | None = ...) -> Callable[[Callable[[FlowSpecDerived, StepFlag], None] | Callable[[FlowSpecDerived, Any, StepFlag], None]], Callable[[FlowSpecDerived, StepFlag], None] | Callable[[FlowSpecDerived, Any, StepFlag], None]]
    main:17: note:     def [FlowSpecDerived <: FlowSpec] pypi(f: Callable[[FlowSpecDerived, StepFlag], None]) -> Callable[[FlowSpecDerived, StepFlag], None]
    main:17: note:     def [FlowSpecDerived <: FlowSpec] pypi(f: Callable[[FlowSpecDerived, Any, StepFlag], None]) -> Callable[[FlowSpecDerived, Any, StepFlag], None]
    main:27: error: Argument 1 to "pypi" has incompatible type "Callable[[MyFlow], Any]"; expected "Callable[[MyFlow, StepFlag], None]"  [arg-type]

- case: conda_decorator_validity
  main: |
    from metaflow import FlowSpec, step, conda

    @conda
    class NonFlowDecorator(FlowSpec):
      ...

    @conda(libraries={'scikit-learn': '1.3.1'})
    class NonFlowDecorator2(FlowSpec):
      ...

    class MyFlow(FlowSpec):
      @conda({'scikit-learn': '1.3.1'})
      @step
      def need_kwarg(self):
        ...

      @conda(foo={'scikit-learn': '1.3.1'})
      @step
      def wrong_kwarg(self):
        ...

      @conda
      @step
      def ok_no_arg(self):
        ...

      @conda
      def wrong_without_step(self):
        ...

      @conda(libraries={'scikit-learn': '1.3.1'})
      @step
      def ok_with_arg(self):
        ...
  out: |
    main:3: error: Argument 1 to "conda" has incompatible type "type[NonFlowDecorator]"; expected "Callable[[Any, StepFlag], None]"  [arg-type]
    main:7: error: Argument 1 has incompatible type "type[NonFlowDecorator2]"; expected "Callable[[Never, StepFlag], None] | Callable[[Never, Any, StepFlag], None]"  [arg-type]
    main:12: error: No overload variant of "conda" matches argument type "dict[str, str]"  [call-overload]
    main:12: note: Possible overload variants:
    main:12: note:     def conda(*, packages: dict[str, str] = ..., libraries: dict[str, str] = ..., python: str | None = ..., disabled: bool = ...) -> Callable[[Callable[[FlowSpecDerived, StepFlag], None] | Callable[[FlowSpecDerived, Any, StepFlag], None]], Callable[[FlowSpecDerived, StepFlag], None] | Callable[[FlowSpecDerived, Any, StepFlag], None]]
    main:12: note:     def [FlowSpecDerived <: FlowSpec] conda(f: Callable[[FlowSpecDerived, StepFlag], None]) -> Callable[[FlowSpecDerived, StepFlag], None]
    main:12: note:     def [FlowSpecDerived <: FlowSpec] conda(f: Callable[[FlowSpecDerived, Any, StepFlag], None]) -> Callable[[FlowSpecDerived, Any, StepFlag], None]
    main:17: error: No overload variant of "conda" matches argument type "dict[str, str]"  [call-overload]
    main:17: note: Possible overload variants:
    main:17: note:     def conda(*, packages: dict[str, str] = ..., libraries: dict[str, str] = ..., python: str | None = ..., disabled: bool = ...) -> Callable[[Callable[[FlowSpecDerived, StepFlag], None] | Callable[[FlowSpecDerived, Any, StepFlag], None]], Callable[[FlowSpecDerived, StepFlag], None] | Callable[[FlowSpecDerived, Any, StepFlag], None]]
    main:17: note:     def [FlowSpecDerived <: FlowSpec] conda(f: Callable[[FlowSpecDerived, StepFlag], None]) -> Callable[[FlowSpecDerived, StepFlag], None]
    main:17: note:     def [FlowSpecDerived <: FlowSpec] conda(f: Callable[[FlowSpecDerived, Any, StepFlag], None]) -> Callable[[FlowSpecDerived, Any, StepFlag], None]
    main:27: error: Argument 1 to "conda" has incompatible type "Callable[[MyFlow], Any]"; expected "Callable[[MyFlow, StepFlag], None]"  [arg-type]

- case: resources_decorator_validity
  main: |
    from metaflow import FlowSpec, step, resources

    @resources
    class NonFlowDecorator(FlowSpec):
      ...

    @resources(cpu=1)
    class NonFlowDecorator2(FlowSpec):
      ...

    class MyFlow(FlowSpec):
      @resources(1)
      @step
      def need_kwarg(self):
        ...

      @resources(foo=1)
      @step
      def wrong_kwarg(self):
        ...

      @resources
      def wrong_without_step(self):
        ...

      @resources
      @step
      def ok_no_arg(self):
        ...

      @resources(cpu=1)
      @step
      def ok_with_arg(self):
        ...
  out: |
    main:3: error: Argument 1 to "resources" has incompatible type "type[NonFlowDecorator]"; expected "Callable[[Any, StepFlag], None]"  [arg-type]
    main:7: error: Argument 1 has incompatible type "type[NonFlowDecorator2]"; expected "Callable[[Never, StepFlag], None] | Callable[[Never, Any, StepFlag], None]"  [arg-type]
    main:12: error: No overload variant of "resources" matches argument type "int"  [call-overload]
    main:12: note: Possible overload variants:
    main:12: note:     def resources(*, cpu: int = ..., gpu: int = ..., disk: int | None = ..., memory: int = ..., shared_memory: int | None = ...) -> Callable[[Callable[[FlowSpecDerived, StepFlag], None] | Callable[[FlowSpecDerived, Any, StepFlag], None]], Callable[[FlowSpecDerived, StepFlag], None] | Callable[[FlowSpecDerived, Any, StepFlag], None]]
    main:12: note:     def [FlowSpecDerived <: FlowSpec] resources(f: Callable[[FlowSpecDerived, StepFlag], None]) -> Callable[[FlowSpecDerived, StepFlag], None]
    main:12: note:     def [FlowSpecDerived <: FlowSpec] resources(f: Callable[[FlowSpecDerived, Any, StepFlag], None]) -> Callable[[FlowSpecDerived, Any, StepFlag], None]
    main:17: error: No overload variant of "resources" matches argument type "int"  [call-overload]
    main:17: note: Possible overload variants:
    main:17: note:     def resources(*, cpu: int = ..., gpu: int = ..., disk: int | None = ..., memory: int = ..., shared_memory: int | None = ...) -> Callable[[Callable[[FlowSpecDerived, StepFlag], None] | Callable[[FlowSpecDerived, Any, StepFlag], None]], Callable[[FlowSpecDerived, StepFlag], None] | Callable[[FlowSpecDerived, Any, StepFlag], None]]
    main:17: note:     def [FlowSpecDerived <: FlowSpec] resources(f: Callable[[FlowSpecDerived, StepFlag], None]) -> Callable[[FlowSpecDerived, StepFlag], None]
    main:17: note:     def [FlowSpecDerived <: FlowSpec] resources(f: Callable[[FlowSpecDerived, Any, StepFlag], None]) -> Callable[[FlowSpecDerived, Any, StepFlag], None]
    main:22: error: Argument 1 to "resources" has incompatible type "Callable[[MyFlow], Any]"; expected "Callable[[MyFlow, StepFlag], None]"  [arg-type]

- case: retry_decorator_validity
  main: |
    from metaflow import FlowSpec, step, retry

    @retry
    class NonFlowDecorator(FlowSpec):
      ...

    @retry(times=1)
    class NonFlowDecorator2(FlowSpec):
      ...

    class MyFlow(FlowSpec):
      @retry(1)
      @step
      def need_kwarg(self):
        ...

      @retry(foo=1)
      @step
      def wrong_kwarg(self):
        ...

      @retry
      def wrong_without_step(self):
        ...

      @retry
      @step
      def ok_no_arg(self):
        ...

      @retry(times=1)
      @step
      def ok_with_arg(self):
        ...
  out: |
    main:3: error: Argument 1 to "retry" has incompatible type "type[NonFlowDecorator]"; expected "Callable[[Any, StepFlag], None]"  [arg-type]
    main:7: error: Argument 1 has incompatible type "type[NonFlowDecorator2]"; expected "Callable[[Never, StepFlag], None] | Callable[[Never, Any, StepFlag], None]"  [arg-type]
    main:12: error: No overload variant of "retry" matches argument type "int"  [call-overload]
    main:12: note: Possible overload variants:
    main:12: note:     def retry(*, times: int = ..., minutes_between_retries: int = ...) -> Callable[[Callable[[FlowSpecDerived, StepFlag], None] | Callable[[FlowSpecDerived, Any, StepFlag], None]], Callable[[FlowSpecDerived, StepFlag], None] | Callable[[FlowSpecDerived, Any, StepFlag], None]]
    main:12: note:     def [FlowSpecDerived <: FlowSpec] retry(f: Callable[[FlowSpecDerived, StepFlag], None]) -> Callable[[FlowSpecDerived, StepFlag], None]
    main:12: note:     def [FlowSpecDerived <: FlowSpec] retry(f: Callable[[FlowSpecDerived, Any, StepFlag], None]) -> Callable[[FlowSpecDerived, Any, StepFlag], None]
    main:17: error: No overload variant of "retry" matches argument type "int"  [call-overload]
    main:17: note: Possible overload variants:
    main:17: note:     def retry(*, times: int = ..., minutes_between_retries: int = ...) -> Callable[[Callable[[FlowSpecDerived, StepFlag], None] | Callable[[FlowSpecDerived, Any, StepFlag], None]], Callable[[FlowSpecDerived, StepFlag], None] | Callable[[FlowSpecDerived, Any, StepFlag], None]]
    main:17: note:     def [FlowSpecDerived <: FlowSpec] retry(f: Callable[[FlowSpecDerived, StepFlag], None]) -> Callable[[FlowSpecDerived, StepFlag], None]
    main:17: note:     def [FlowSpecDerived <: FlowSpec] retry(f: Callable[[FlowSpecDerived, Any, StepFlag], None]) -> Callable[[FlowSpecDerived, Any, StepFlag], None]
    main:22: error: Argument 1 to "retry" has incompatible type "Callable[[MyFlow], Any]"; expected "Callable[[MyFlow, StepFlag], None]"  [arg-type]

- case: secrets_decorator_validity
  main: |
    from metaflow import FlowSpec, step, secrets

    @secrets
    class NonFlowDecorator(FlowSpec):
      ...

    @secrets(sources=['metaflow-example-password'])
    class NonFlowDecorator2(FlowSpec):
      ...

    class MyFlow(FlowSpec):
      @secrets(['metaflow-example-password'])
      @step
      def need_kwarg(self):
        ...

      @secrets(foo=['metaflow-example-password'])
      @step
      def wrong_kwarg(self):
        ...

      @secrets
      def wrong_without_step(self):
        ...

      @secrets
      @step
      def ok_no_arg(self):
        ...

      @secrets(sources=['metaflow-example-password'])
      @step
      def ok_with_arg(self):
        ...
  out: |
    main:3: error: Argument 1 to "secrets" has incompatible type "type[NonFlowDecorator]"; expected "Callable[[Any, StepFlag], None]"  [arg-type]
    main:7: error: Argument 1 has incompatible type "type[NonFlowDecorator2]"; expected "Callable[[Never, StepFlag], None] | Callable[[Never, Any, StepFlag], None]"  [arg-type]
    main:12: error: No overload variant of "secrets" matches argument type "list[str]"  [call-overload]
    main:12: note: Possible overload variants:
    main:12: note:     def secrets(*, sources: list[str | dict[str, Any]] = ...) -> Callable[[Callable[[FlowSpecDerived, StepFlag], None] | Callable[[FlowSpecDerived, Any, StepFlag], None]], Callable[[FlowSpecDerived, StepFlag], None] | Callable[[FlowSpecDerived, Any, StepFlag], None]]
    main:12: note:     def [FlowSpecDerived <: FlowSpec] secrets(f: Callable[[FlowSpecDerived, StepFlag], None]) -> Callable[[FlowSpecDerived, StepFlag], None]
    main:12: note:     def [FlowSpecDerived <: FlowSpec] secrets(f: Callable[[FlowSpecDerived, Any, StepFlag], None]) -> Callable[[FlowSpecDerived, Any, StepFlag], None]
    main:17: error: No overload variant of "secrets" matches argument type "list[str]"  [call-overload]
    main:17: note: Possible overload variants:
    main:17: note:     def secrets(*, sources: list[str | dict[str, Any]] = ...) -> Callable[[Callable[[FlowSpecDerived, StepFlag], None] | Callable[[FlowSpecDerived, Any, StepFlag], None]], Callable[[FlowSpecDerived, StepFlag], None] | Callable[[FlowSpecDerived, Any, StepFlag], None]]
    main:17: note:     def [FlowSpecDerived <: FlowSpec] secrets(f: Callable[[FlowSpecDerived, StepFlag], None]) -> Callable[[FlowSpecDerived, StepFlag], None]
    main:17: note:     def [FlowSpecDerived <: FlowSpec] secrets(f: Callable[[FlowSpecDerived, Any, StepFlag], None]) -> Callable[[FlowSpecDerived, Any, StepFlag], None]
    main:22: error: Argument 1 to "secrets" has incompatible type "Callable[[MyFlow], Any]"; expected "Callable[[MyFlow, StepFlag], None]"  [arg-type]

- case: timeout_decorator_validity
  main: |
    from metaflow import FlowSpec, step, timeout

    @timeout
    class NonFlowDecorator(FlowSpec):
      ...

    @timeout(seconds=30)
    class NonFlowDecorator2(FlowSpec):
      ...

    class MyFlow(FlowSpec):
      @timeout(30)
      @step
      def need_kwarg(self):
        ...

      @timeout(foo=30)
      @step
      def wrong_kwarg(self):
        ...

      @timeout
      def wrong_without_step(self):
        ...

      @timeout
      @step
      def ok_no_arg(self):
        ...

      @timeout(seconds=30)
      @step
      def ok_with_arg(self):
        ...
  out: |
    main:3: error: Argument 1 to "timeout" has incompatible type "type[NonFlowDecorator]"; expected "Callable[[Any, StepFlag], None]"  [arg-type]
    main:7: error: Argument 1 has incompatible type "type[NonFlowDecorator2]"; expected "Callable[[Never, StepFlag], None] | Callable[[Never, Any, StepFlag], None]"  [arg-type]
    main:12: error: No overload variant of "timeout" matches argument type "int"  [call-overload]
    main:12: note: Possible overload variants:
    main:12: note:     def timeout(*, seconds: int = ..., minutes: int = ..., hours: int = ...) -> Callable[[Callable[[FlowSpecDerived, StepFlag], None] | Callable[[FlowSpecDerived, Any, StepFlag], None]], Callable[[FlowSpecDerived, StepFlag], None] | Callable[[FlowSpecDerived, Any, StepFlag], None]]
    main:12: note:     def [FlowSpecDerived <: FlowSpec] timeout(f: Callable[[FlowSpecDerived, StepFlag], None]) -> Callable[[FlowSpecDerived, StepFlag], None]
    main:12: note:     def [FlowSpecDerived <: FlowSpec] timeout(f: Callable[[FlowSpecDerived, Any, StepFlag], None]) -> Callable[[FlowSpecDerived, Any, StepFlag], None]
    main:17: error: No overload variant of "timeout" matches argument type "int"  [call-overload]
    main:17: note: Possible overload variants:
    main:17: note:     def timeout(*, seconds: int = ..., minutes: int = ..., hours: int = ...) -> Callable[[Callable[[FlowSpecDerived, StepFlag], None] | Callable[[FlowSpecDerived, Any, StepFlag], None]], Callable[[FlowSpecDerived, StepFlag], None] | Callable[[FlowSpecDerived, Any, StepFlag], None]]
    main:17: note:     def [FlowSpecDerived <: FlowSpec] timeout(f: Callable[[FlowSpecDerived, StepFlag], None]) -> Callable[[FlowSpecDerived, StepFlag], None]
    main:17: note:     def [FlowSpecDerived <: FlowSpec] timeout(f: Callable[[FlowSpecDerived, Any, StepFlag], None]) -> Callable[[FlowSpecDerived, Any, StepFlag], None]
    main:22: error: Argument 1 to "timeout" has incompatible type "Callable[[MyFlow], Any]"; expected "Callable[[MyFlow, StepFlag], None]"  [arg-type]

- case: client_types
  main: |
    from metaflow import Flow, Run, Step, Task, DataArtifact

    reveal_type(Flow("flow_name"))
    reveal_type(Flow("flow_name")["run_id"])
    reveal_type(Flow("flow_name")["run_id"]["step_name"])
    reveal_type(Flow("flow_name")["run_id"]["step_name"]["task_name"])
    reveal_type(Flow("flow_name")["run_id"]["step_name"]["task_name"]["data_name"])

    Flow("flow_name")[0]
    Run("flow_name/run_id")[0]
    Step("flow_name/run_id/step_name")[0]
  out: |
    main:3: note: Revealed type is "metaflow.Flow"
    main:4: note: Revealed type is "metaflow.client.core.Run"
    main:5: note: Revealed type is "metaflow.client.core.Step"
    main:6: note: Revealed type is "metaflow.client.core.Task"
    main:7: note: Revealed type is "metaflow.client.core.DataArtifact"
    main:9: error: Invalid index type "int" for "Flow"; expected type "str"  [index]
    main:10: error: Invalid index type "int" for "Run"; expected type "str"  [index]
    main:11: error: Invalid index type "int" for "Step"; expected type "str"  [index]

- case: current_object
  main: |
    from metaflow import current

    current.project_name
    current.flow_name

    current.project_name = "foo"
    current.flow_name = "bar"
  out: |
    main:6: error: Property "project_name" defined in "Current" is read-only  [misc]
    main:7: error: Property "flow_name" defined in "Current" is read-only  [misc]

- case: sample_flow
  main: |
    from metaflow import FlowSpec, step, batch, project, schedule

    @project(name="my_project")
    @schedule(weekly=True)
    class MyFlow(FlowSpec):
      @step
      def start(self):
        print("Hi")
        self.next(self.batch_step)

      @batch
      @step
      def batch_step(self):
        self.next(self.end)

      @step
      def end(self):
        print("Done")
  out: |
