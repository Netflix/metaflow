(function(global2, factory) {
  typeof exports === "object" && typeof module !== "undefined" ? module.exports = factory() : typeof define === "function" && define.amd ? define(factory) : (global2 = typeof globalThis !== "undefined" ? globalThis : global2 || self, global2["Outerbounds Cards"] = factory());
})(this, function() {
  "use strict";var __defProp = Object.defineProperty;
var __typeError = (msg) => {
  throw TypeError(msg);
};
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField = (obj, key, value) => __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
var __accessCheck = (obj, member, msg) => member.has(obj) || __typeError("Cannot " + msg);
var __privateAdd = (obj, member, value) => member.has(obj) ? __typeError("Cannot add the same private member more than once") : member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
var __privateMethod = (obj, member, method) => (__accessCheck(obj, member, "access private method"), method);

  var _Marked_instances, parseMarkdown_fn, onError_fn, _a, _b;
  function noop$5() {
  }
  function assign(tar, src) {
    for (const k in src) tar[k] = src[k];
    return (
      /** @type {T & S} */
      tar
    );
  }
  function run$1(fn) {
    return fn();
  }
  function blank_object() {
    return /* @__PURE__ */ Object.create(null);
  }
  function run_all(fns) {
    fns.forEach(run$1);
  }
  function is_function(thing) {
    return typeof thing === "function";
  }
  function safe_not_equal(a2, b2) {
    return a2 != a2 ? b2 == b2 : a2 !== b2 || a2 && typeof a2 === "object" || typeof a2 === "function";
  }
  let src_url_equal_anchor;
  function src_url_equal(element_src, url) {
    if (element_src === url) return true;
    if (!src_url_equal_anchor) {
      src_url_equal_anchor = document.createElement("a");
    }
    src_url_equal_anchor.href = url;
    return element_src === src_url_equal_anchor.href;
  }
  function is_empty(obj) {
    return Object.keys(obj).length === 0;
  }
  function subscribe(store, ...callbacks) {
    if (store == null) {
      for (const callback of callbacks) {
        callback(void 0);
      }
      return noop$5;
    }
    const unsub = store.subscribe(...callbacks);
    return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;
  }
  function component_subscribe(component, store, callback) {
    component.$$.on_destroy.push(subscribe(store, callback));
  }
  function create_slot(definition2, ctx, $$scope, fn) {
    if (definition2) {
      const slot_ctx = get_slot_context(definition2, ctx, $$scope, fn);
      return definition2[0](slot_ctx);
    }
  }
  function get_slot_context(definition2, ctx, $$scope, fn) {
    return definition2[1] && fn ? assign($$scope.ctx.slice(), definition2[1](fn(ctx))) : $$scope.ctx;
  }
  function get_slot_changes(definition2, $$scope, dirty, fn) {
    if (definition2[2] && fn) ;
    return $$scope.dirty;
  }
  function update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn) {
    if (slot_changes) {
      const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);
      slot.p(slot_context, slot_changes);
    }
  }
  function get_all_dirty_from_scope($$scope) {
    if ($$scope.ctx.length > 32) {
      const dirty = [];
      const length2 = $$scope.ctx.length / 32;
      for (let i = 0; i < length2; i++) {
        dirty[i] = -1;
      }
      return dirty;
    }
    return -1;
  }
  function exclude_internal_props(props) {
    const result = {};
    for (const k in props) if (k[0] !== "$") result[k] = props[k];
    return result;
  }
  function compute_rest_props(props, keys2) {
    const rest = {};
    keys2 = new Set(keys2);
    for (const k in props) if (!keys2.has(k) && k[0] !== "$") rest[k] = props[k];
    return rest;
  }
  const globals = typeof window !== "undefined" ? window : typeof globalThis !== "undefined" ? globalThis : (
    // @ts-ignore Node typings have this
    global
  );
  function append$2(target2, node) {
    target2.appendChild(node);
  }
  function insert$1(target2, node, anchor) {
    target2.insertBefore(node, anchor || null);
  }
  function detach(node) {
    if (node.parentNode) {
      node.parentNode.removeChild(node);
    }
  }
  function destroy_each(iterations2, detaching) {
    for (let i = 0; i < iterations2.length; i += 1) {
      if (iterations2[i]) iterations2[i].d(detaching);
    }
  }
  function element$2(name) {
    return document.createElement(name);
  }
  function svg_element(name) {
    return document.createElementNS("http://www.w3.org/2000/svg", name);
  }
  function text$3(data2) {
    return document.createTextNode(data2);
  }
  function space() {
    return text$3(" ");
  }
  function empty() {
    return text$3("");
  }
  function listen(node, event2, handler, options) {
    node.addEventListener(event2, handler, options);
    return () => node.removeEventListener(event2, handler, options);
  }
  function attr$6(node, attribute, value2) {
    if (value2 == null) node.removeAttribute(attribute);
    else if (node.getAttribute(attribute) !== value2) node.setAttribute(attribute, value2);
  }
  const always_set_through_set_attribute = ["width", "height"];
  function set_attributes(node, attributes) {
    const descriptors = Object.getOwnPropertyDescriptors(node.__proto__);
    for (const key2 in attributes) {
      if (attributes[key2] == null) {
        node.removeAttribute(key2);
      } else if (key2 === "style") {
        node.style.cssText = attributes[key2];
      } else if (key2 === "__value") {
        node.value = node[key2] = attributes[key2];
      } else if (descriptors[key2] && descriptors[key2].set && always_set_through_set_attribute.indexOf(key2) === -1) {
        node[key2] = attributes[key2];
      } else {
        attr$6(node, key2, attributes[key2]);
      }
    }
  }
  function set_svg_attributes(node, attributes) {
    for (const key2 in attributes) {
      attr$6(node, key2, attributes[key2]);
    }
  }
  function children$3(element2) {
    return Array.from(element2.childNodes);
  }
  function set_data(text2, data2) {
    data2 = "" + data2;
    if (text2.data === data2) return;
    text2.data = /** @type {string} */
    data2;
  }
  function set_style(node, key2, value2, important) {
    if (value2 == null) {
      node.style.removeProperty(key2);
    } else {
      node.style.setProperty(key2, value2, "");
    }
  }
  function toggle_class(element2, name, toggle2) {
    element2.classList.toggle(name, !!toggle2);
  }
  function custom_event(type2, detail, { bubbles = false, cancelable = false } = {}) {
    return new CustomEvent(type2, { detail, bubbles, cancelable });
  }
  class HtmlTag {
    constructor(is_svg = false) {
      /**
       * @private
       * @default false
       */
      __publicField(this, "is_svg", false);
      /** parent for creating node */
      __publicField(this, "e");
      /** html tag nodes */
      __publicField(this, "n");
      /** target */
      __publicField(this, "t");
      /** anchor */
      __publicField(this, "a");
      this.is_svg = is_svg;
      this.e = this.n = null;
    }
    /**
     * @param {string} html
     * @returns {void}
     */
    c(html) {
      this.h(html);
    }
    /**
     * @param {string} html
     * @param {HTMLElement | SVGElement} target
     * @param {HTMLElement | SVGElement} anchor
     * @returns {void}
     */
    m(html, target2, anchor = null) {
      if (!this.e) {
        if (this.is_svg)
          this.e = svg_element(
            /** @type {keyof SVGElementTagNameMap} */
            target2.nodeName
          );
        else
          this.e = element$2(
            /** @type {keyof HTMLElementTagNameMap} */
            target2.nodeType === 11 ? "TEMPLATE" : target2.nodeName
          );
        this.t = target2.tagName !== "TEMPLATE" ? target2 : (
          /** @type {HTMLTemplateElement} */
          target2.content
        );
        this.c(html);
      }
      this.i(anchor);
    }
    /**
     * @param {string} html
     * @returns {void}
     */
    h(html) {
      this.e.innerHTML = html;
      this.n = Array.from(
        this.e.nodeName === "TEMPLATE" ? this.e.content.childNodes : this.e.childNodes
      );
    }
    /**
     * @returns {void} */
    i(anchor) {
      for (let i = 0; i < this.n.length; i += 1) {
        insert$1(this.t, this.n[i], anchor);
      }
    }
    /**
     * @param {string} html
     * @returns {void}
     */
    p(html) {
      this.d();
      this.h(html);
      this.i(this.a);
    }
    /**
     * @returns {void} */
    d() {
      this.n.forEach(detach);
    }
  }
  function construct_svelte_component(component, props) {
    return new component(props);
  }
  let current_component;
  function set_current_component(component) {
    current_component = component;
  }
  function get_current_component() {
    if (!current_component) throw new Error("Function called outside component initialization");
    return current_component;
  }
  function onMount(fn) {
    get_current_component().$$.on_mount.push(fn);
  }
  function onDestroy(fn) {
    get_current_component().$$.on_destroy.push(fn);
  }
  function createEventDispatcher() {
    const component = get_current_component();
    return (type2, detail, { cancelable = false } = {}) => {
      const callbacks = component.$$.callbacks[type2];
      if (callbacks) {
        const event2 = custom_event(
          /** @type {string} */
          type2,
          detail,
          { cancelable }
        );
        callbacks.slice().forEach((fn) => {
          fn.call(component, event2);
        });
        return !event2.defaultPrevented;
      }
      return true;
    };
  }
  function setContext(key2, context2) {
    get_current_component().$$.context.set(key2, context2);
    return context2;
  }
  function getContext$1(key2) {
    return get_current_component().$$.context.get(key2);
  }
  function bubble(component, event2) {
    const callbacks = component.$$.callbacks[event2.type];
    if (callbacks) {
      callbacks.slice().forEach((fn) => fn.call(this, event2));
    }
  }
  const dirty_components = [];
  const binding_callbacks = [];
  let render_callbacks = [];
  const flush_callbacks = [];
  const resolved_promise = /* @__PURE__ */ Promise.resolve();
  let update_scheduled = false;
  function schedule_update() {
    if (!update_scheduled) {
      update_scheduled = true;
      resolved_promise.then(flush$1);
    }
  }
  function add_render_callback(fn) {
    render_callbacks.push(fn);
  }
  function add_flush_callback(fn) {
    flush_callbacks.push(fn);
  }
  const seen_callbacks = /* @__PURE__ */ new Set();
  let flushidx = 0;
  function flush$1() {
    if (flushidx !== 0) {
      return;
    }
    const saved_component = current_component;
    do {
      try {
        while (flushidx < dirty_components.length) {
          const component = dirty_components[flushidx];
          flushidx++;
          set_current_component(component);
          update$7(component.$$);
        }
      } catch (e3) {
        dirty_components.length = 0;
        flushidx = 0;
        throw e3;
      }
      set_current_component(null);
      dirty_components.length = 0;
      flushidx = 0;
      while (binding_callbacks.length) binding_callbacks.pop()();
      for (let i = 0; i < render_callbacks.length; i += 1) {
        const callback = render_callbacks[i];
        if (!seen_callbacks.has(callback)) {
          seen_callbacks.add(callback);
          callback();
        }
      }
      render_callbacks.length = 0;
    } while (dirty_components.length);
    while (flush_callbacks.length) {
      flush_callbacks.pop()();
    }
    update_scheduled = false;
    seen_callbacks.clear();
    set_current_component(saved_component);
  }
  function update$7($$) {
    if ($$.fragment !== null) {
      $$.update();
      run_all($$.before_update);
      const dirty = $$.dirty;
      $$.dirty = [-1];
      $$.fragment && $$.fragment.p($$.ctx, dirty);
      $$.after_update.forEach(add_render_callback);
    }
  }
  function flush_render_callbacks(fns) {
    const filtered = [];
    const targets = [];
    render_callbacks.forEach((c2) => fns.indexOf(c2) === -1 ? filtered.push(c2) : targets.push(c2));
    targets.forEach((c2) => c2());
    render_callbacks = filtered;
  }
  const outroing = /* @__PURE__ */ new Set();
  let outros;
  function group_outros() {
    outros = {
      r: 0,
      c: [],
      p: outros
      // parent group
    };
  }
  function check_outros() {
    if (!outros.r) {
      run_all(outros.c);
    }
    outros = outros.p;
  }
  function transition_in(block2, local) {
    if (block2 && block2.i) {
      outroing.delete(block2);
      block2.i(local);
    }
  }
  function transition_out(block2, local, detach2, callback) {
    if (block2 && block2.o) {
      if (outroing.has(block2)) return;
      outroing.add(block2);
      outros.c.push(() => {
        outroing.delete(block2);
        if (callback) {
          if (detach2) block2.d(1);
          callback();
        }
      });
      block2.o(local);
    } else if (callback) {
      callback();
    }
  }
  function ensure_array_like(array_like_or_iterator) {
    return (array_like_or_iterator == null ? void 0 : array_like_or_iterator.length) !== void 0 ? array_like_or_iterator : Array.from(array_like_or_iterator);
  }
  function get_spread_update(levels2, updates) {
    const update2 = {};
    const to_null_out = {};
    const accounted_for = { $$scope: 1 };
    let i = levels2.length;
    while (i--) {
      const o = levels2[i];
      const n = updates[i];
      if (n) {
        for (const key2 in o) {
          if (!(key2 in n)) to_null_out[key2] = 1;
        }
        for (const key2 in n) {
          if (!accounted_for[key2]) {
            update2[key2] = n[key2];
            accounted_for[key2] = 1;
          }
        }
        levels2[i] = n;
      } else {
        for (const key2 in o) {
          accounted_for[key2] = 1;
        }
      }
    }
    for (const key2 in to_null_out) {
      if (!(key2 in update2)) update2[key2] = void 0;
    }
    return update2;
  }
  function get_spread_object(spread_props) {
    return typeof spread_props === "object" && spread_props !== null ? spread_props : {};
  }
  function bind$2(component, name, callback) {
    const index2 = component.$$.props[name];
    if (index2 !== void 0) {
      component.$$.bound[index2] = callback;
      callback(component.$$.ctx[index2]);
    }
  }
  function create_component(block2) {
    block2 && block2.c();
  }
  function mount_component(component, target2, anchor) {
    const { fragment, after_update } = component.$$;
    fragment && fragment.m(target2, anchor);
    add_render_callback(() => {
      const new_on_destroy = component.$$.on_mount.map(run$1).filter(is_function);
      if (component.$$.on_destroy) {
        component.$$.on_destroy.push(...new_on_destroy);
      } else {
        run_all(new_on_destroy);
      }
      component.$$.on_mount = [];
    });
    after_update.forEach(add_render_callback);
  }
  function destroy_component(component, detaching) {
    const $$ = component.$$;
    if ($$.fragment !== null) {
      flush_render_callbacks($$.after_update);
      run_all($$.on_destroy);
      $$.fragment && $$.fragment.d(detaching);
      $$.on_destroy = $$.fragment = null;
      $$.ctx = [];
    }
  }
  function make_dirty(component, i) {
    if (component.$$.dirty[0] === -1) {
      dirty_components.push(component);
      schedule_update();
      component.$$.dirty.fill(0);
    }
    component.$$.dirty[i / 31 | 0] |= 1 << i % 31;
  }
  function init$1(component, options, instance2, create_fragment2, not_equal, props, append_styles = null, dirty = [-1]) {
    const parent_component = current_component;
    set_current_component(component);
    const $$ = component.$$ = {
      fragment: null,
      ctx: [],
      // state
      props,
      update: noop$5,
      not_equal,
      bound: blank_object(),
      // lifecycle
      on_mount: [],
      on_destroy: [],
      on_disconnect: [],
      before_update: [],
      after_update: [],
      context: new Map(options.context || (parent_component ? parent_component.$$.context : [])),
      // everything else
      callbacks: blank_object(),
      dirty,
      skip_bound: false,
      root: options.target || parent_component.$$.root
    };
    append_styles && append_styles($$.root);
    let ready = false;
    $$.ctx = instance2 ? instance2(component, options.props || {}, (i, ret, ...rest) => {
      const value2 = rest.length ? rest[0] : ret;
      if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value2)) {
        if (!$$.skip_bound && $$.bound[i]) $$.bound[i](value2);
        if (ready) make_dirty(component, i);
      }
      return ret;
    }) : [];
    $$.update();
    ready = true;
    run_all($$.before_update);
    $$.fragment = create_fragment2 ? create_fragment2($$.ctx) : false;
    if (options.target) {
      if (options.hydrate) {
        const nodes = children$3(options.target);
        $$.fragment && $$.fragment.l(nodes);
        nodes.forEach(detach);
      } else {
        $$.fragment && $$.fragment.c();
      }
      if (options.intro) transition_in(component.$$.fragment);
      mount_component(component, options.target, options.anchor);
      flush$1();
    }
    set_current_component(parent_component);
  }
  class SvelteComponent {
    constructor() {
      /**
       * ### PRIVATE API
       *
       * Do not use, may change at any time
       *
       * @type {any}
       */
      __publicField(this, "$$");
      /**
       * ### PRIVATE API
       *
       * Do not use, may change at any time
       *
       * @type {any}
       */
      __publicField(this, "$$set");
    }
    /** @returns {void} */
    $destroy() {
      destroy_component(this, 1);
      this.$destroy = noop$5;
    }
    /**
     * @template {Extract<keyof Events, string>} K
     * @param {K} type
     * @param {((e: Events[K]) => void) | null | undefined} callback
     * @returns {() => void}
     */
    $on(type2, callback) {
      if (!is_function(callback)) {
        return noop$5;
      }
      const callbacks = this.$$.callbacks[type2] || (this.$$.callbacks[type2] = []);
      callbacks.push(callback);
      return () => {
        const index2 = callbacks.indexOf(callback);
        if (index2 !== -1) callbacks.splice(index2, 1);
      };
    }
    /**
     * @param {Partial<Props>} props
     * @returns {void}
     */
    $set(props) {
      if (this.$$set && !is_empty(props)) {
        this.$$.skip_bound = true;
        this.$$set(props);
        this.$$.skip_bound = false;
      }
    }
  }
  const PUBLIC_VERSION = "4";
  if (typeof window !== "undefined")
    (window.__svelte || (window.__svelte = { v: /* @__PURE__ */ new Set() })).v.add(PUBLIC_VERSION);
  var _self = "undefined" != typeof window ? window : "undefined" != typeof WorkerGlobalScope && self instanceof WorkerGlobalScope ? self : {}, Prism = function(u2) {
    var t = /(?:^|\s)lang(?:uage)?-([\w-]+)(?=\s|$)/i, n = 0, e3 = {}, M2 = { manual: u2.Prism && u2.Prism.manual, disableWorkerMessageHandler: u2.Prism && u2.Prism.disableWorkerMessageHandler, util: { encode: function e4(n2) {
      return n2 instanceof W ? new W(n2.type, e4(n2.content), n2.alias) : Array.isArray(n2) ? n2.map(e4) : n2.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/\u00a0/g, " ");
    }, type: function(e4) {
      return Object.prototype.toString.call(e4).slice(8, -1);
    }, objId: function(e4) {
      return e4.__id || Object.defineProperty(e4, "__id", { value: ++n }), e4.__id;
    }, clone: function t4(e4, r2) {
      var a3, n2;
      switch (r2 = r2 || {}, M2.util.type(e4)) {
        case "Object":
          if (n2 = M2.util.objId(e4), r2[n2]) return r2[n2];
          for (var i2 in a3 = {}, r2[n2] = a3, e4) e4.hasOwnProperty(i2) && (a3[i2] = t4(e4[i2], r2));
          return a3;
        case "Array":
          return n2 = M2.util.objId(e4), r2[n2] ? r2[n2] : (a3 = [], r2[n2] = a3, e4.forEach(function(e6, n3) {
            a3[n3] = t4(e6, r2);
          }), a3);
        default:
          return e4;
      }
    }, getLanguage: function(e4) {
      for (; e4; ) {
        var n2 = t.exec(e4.className);
        if (n2) return n2[1].toLowerCase();
        e4 = e4.parentElement;
      }
      return "none";
    }, setLanguage: function(e4, n2) {
      e4.className = e4.className.replace(RegExp(t, "gi"), ""), e4.classList.add("language-" + n2);
    }, currentScript: function() {
      if ("undefined" == typeof document) return null;
      if ("currentScript" in document) return document.currentScript;
      try {
        throw new Error();
      } catch (e4) {
        var n2 = (/at [^(\r\n]*\((.*):[^:]+:[^:]+\)$/i.exec(e4.stack) || [])[1];
        if (n2) {
          var t4 = document.getElementsByTagName("script");
          for (var r2 in t4) if (t4[r2].src == n2) return t4[r2];
        }
        return null;
      }
    }, isActive: function(e4, n2, t4) {
      for (var r2 = "no-" + n2; e4; ) {
        var a3 = e4.classList;
        if (a3.contains(n2)) return true;
        if (a3.contains(r2)) return false;
        e4 = e4.parentElement;
      }
      return !!t4;
    } }, languages: { plain: e3, plaintext: e3, text: e3, txt: e3, extend: function(e4, n2) {
      var t4 = M2.util.clone(M2.languages[e4]);
      for (var r2 in n2) t4[r2] = n2[r2];
      return t4;
    }, insertBefore: function(t4, e4, n2, r2) {
      var a3 = (r2 = r2 || M2.languages)[t4], i2 = {};
      for (var l2 in a3) if (a3.hasOwnProperty(l2)) {
        if (l2 == e4) for (var o in n2) n2.hasOwnProperty(o) && (i2[o] = n2[o]);
        n2.hasOwnProperty(l2) || (i2[l2] = a3[l2]);
      }
      var s = r2[t4];
      return r2[t4] = i2, M2.languages.DFS(M2.languages, function(e6, n3) {
        n3 === s && e6 != t4 && (this[e6] = i2);
      }), i2;
    }, DFS: function e4(n2, t4, r2, a3) {
      a3 = a3 || {};
      var i2 = M2.util.objId;
      for (var l2 in n2) if (n2.hasOwnProperty(l2)) {
        t4.call(n2, l2, n2[l2], r2 || l2);
        var o = n2[l2], s = M2.util.type(o);
        "Object" !== s || a3[i2(o)] ? "Array" !== s || a3[i2(o)] || (a3[i2(o)] = true, e4(o, t4, l2, a3)) : (a3[i2(o)] = true, e4(o, t4, null, a3));
      }
    } }, plugins: {}, highlightAll: function(e4, n2) {
      M2.highlightAllUnder(document, e4, n2);
    }, highlightAllUnder: function(e4, n2, t4) {
      var r2 = { callback: t4, container: e4, selector: 'code[class*="language-"], [class*="language-"] code, code[class*="lang-"], [class*="lang-"] code' };
      M2.hooks.run("before-highlightall", r2), r2.elements = Array.prototype.slice.apply(r2.container.querySelectorAll(r2.selector)), M2.hooks.run("before-all-elements-highlight", r2);
      for (var a3, i2 = 0; a3 = r2.elements[i2++]; ) M2.highlightElement(a3, true === n2, r2.callback);
    }, highlightElement: function(e4, n2, t4) {
      var r2 = M2.util.getLanguage(e4), a3 = M2.languages[r2];
      M2.util.setLanguage(e4, r2);
      var i2 = e4.parentElement;
      i2 && "pre" === i2.nodeName.toLowerCase() && M2.util.setLanguage(i2, r2);
      var l2 = { element: e4, language: r2, grammar: a3, code: e4.textContent };
      function o(e6) {
        l2.highlightedCode = e6, M2.hooks.run("before-insert", l2), l2.element.innerHTML = l2.highlightedCode, M2.hooks.run("after-highlight", l2), M2.hooks.run("complete", l2), t4 && t4.call(l2.element);
      }
      if (M2.hooks.run("before-sanity-check", l2), (i2 = l2.element.parentElement) && "pre" === i2.nodeName.toLowerCase() && !i2.hasAttribute("tabindex") && i2.setAttribute("tabindex", "0"), !l2.code) return M2.hooks.run("complete", l2), void (t4 && t4.call(l2.element));
      if (M2.hooks.run("before-highlight", l2), l2.grammar) if (n2 && u2.Worker) {
        var s = new Worker(M2.filename);
        s.onmessage = function(e6) {
          o(e6.data);
        }, s.postMessage(JSON.stringify({ language: l2.language, code: l2.code, immediateClose: true }));
      } else o(M2.highlight(l2.code, l2.grammar, l2.language));
      else o(M2.util.encode(l2.code));
    }, highlight: function(e4, n2, t4) {
      var r2 = { code: e4, grammar: n2, language: t4 };
      return M2.hooks.run("before-tokenize", r2), r2.tokens = M2.tokenize(r2.code, r2.grammar), M2.hooks.run("after-tokenize", r2), W.stringify(M2.util.encode(r2.tokens), r2.language);
    }, tokenize: function(e4, n2) {
      var t4 = n2.rest;
      if (t4) {
        for (var r2 in t4) n2[r2] = t4[r2];
        delete n2.rest;
      }
      var a3 = new i();
      return I(a3, a3.head, e4), function e6(n3, t5, r3, a4, i2, l2) {
        for (var o in r3) if (r3.hasOwnProperty(o) && r3[o]) {
          var s = r3[o];
          s = Array.isArray(s) ? s : [s];
          for (var u3 = 0; u3 < s.length; ++u3) {
            if (l2 && l2.cause == o + "," + u3) return;
            var c2 = s[u3], g = c2.inside, f = !!c2.lookbehind, h2 = !!c2.greedy, d = c2.alias;
            if (h2 && !c2.pattern.global) {
              var v = c2.pattern.toString().match(/[imsuy]*$/)[0];
              c2.pattern = RegExp(c2.pattern.source, v + "g");
            }
            for (var p = c2.pattern || c2, m2 = a4.next, y2 = i2; m2 !== t5.tail && !(l2 && y2 >= l2.reach); y2 += m2.value.length, m2 = m2.next) {
              var k = m2.value;
              if (t5.length > n3.length) return;
              if (!(k instanceof W)) {
                var x2, b2 = 1;
                if (h2) {
                  if (!(x2 = z(p, y2, n3, f)) || x2.index >= n3.length) break;
                  var w2 = x2.index, A5 = x2.index + x2[0].length, P = y2;
                  for (P += m2.value.length; P <= w2; ) m2 = m2.next, P += m2.value.length;
                  if (P -= m2.value.length, y2 = P, m2.value instanceof W) continue;
                  for (var E2 = m2; E2 !== t5.tail && (P < A5 || "string" == typeof E2.value); E2 = E2.next) b2++, P += E2.value.length;
                  b2--, k = n3.slice(y2, P), x2.index -= y2;
                } else if (!(x2 = z(p, 0, k, f))) continue;
                var w2 = x2.index, L = x2[0], S = k.slice(0, w2), O = k.slice(w2 + L.length), j = y2 + k.length;
                l2 && j > l2.reach && (l2.reach = j);
                var C3 = m2.prev;
                S && (C3 = I(t5, C3, S), y2 += S.length), q(t5, C3, b2);
                var N = new W(o, g ? M2.tokenize(L, g) : L, d, L);
                if (m2 = I(t5, C3, N), O && I(t5, m2, O), 1 < b2) {
                  var _ = { cause: o + "," + u3, reach: j };
                  e6(n3, t5, r3, m2.prev, y2, _), l2 && _.reach > l2.reach && (l2.reach = _.reach);
                }
              }
            }
          }
        }
      }(e4, a3, n2, a3.head, 0), function(e6) {
        var n3 = [], t5 = e6.head.next;
        for (; t5 !== e6.tail; ) n3.push(t5.value), t5 = t5.next;
        return n3;
      }(a3);
    }, hooks: { all: {}, add: function(e4, n2) {
      var t4 = M2.hooks.all;
      t4[e4] = t4[e4] || [], t4[e4].push(n2);
    }, run: function(e4, n2) {
      var t4 = M2.hooks.all[e4];
      if (t4 && t4.length) for (var r2, a3 = 0; r2 = t4[a3++]; ) r2(n2);
    } }, Token: W };
    function W(e4, n2, t4, r2) {
      this.type = e4, this.content = n2, this.alias = t4, this.length = 0 | (r2 || "").length;
    }
    function z(e4, n2, t4, r2) {
      e4.lastIndex = n2;
      var a3 = e4.exec(t4);
      if (a3 && r2 && a3[1]) {
        var i2 = a3[1].length;
        a3.index += i2, a3[0] = a3[0].slice(i2);
      }
      return a3;
    }
    function i() {
      var e4 = { value: null, prev: null, next: null }, n2 = { value: null, prev: e4, next: null };
      e4.next = n2, this.head = e4, this.tail = n2, this.length = 0;
    }
    function I(e4, n2, t4) {
      var r2 = n2.next, a3 = { value: t4, prev: n2, next: r2 };
      return n2.next = a3, r2.prev = a3, e4.length++, a3;
    }
    function q(e4, n2, t4) {
      for (var r2 = n2.next, a3 = 0; a3 < t4 && r2 !== e4.tail; a3++) r2 = r2.next;
      (n2.next = r2).prev = n2, e4.length -= a3;
    }
    if (u2.Prism = M2, W.stringify = function n2(e4, t4) {
      if ("string" == typeof e4) return e4;
      if (Array.isArray(e4)) {
        var r2 = "";
        return e4.forEach(function(e6) {
          r2 += n2(e6, t4);
        }), r2;
      }
      var a3 = { type: e4.type, content: n2(e4.content, t4), tag: "span", classes: ["token", e4.type], attributes: {}, language: t4 }, i2 = e4.alias;
      i2 && (Array.isArray(i2) ? Array.prototype.push.apply(a3.classes, i2) : a3.classes.push(i2)), M2.hooks.run("wrap", a3);
      var l2 = "";
      for (var o in a3.attributes) l2 += " " + o + '="' + (a3.attributes[o] || "").replace(/"/g, "&quot;") + '"';
      return "<" + a3.tag + ' class="' + a3.classes.join(" ") + '"' + l2 + ">" + a3.content + "</" + a3.tag + ">";
    }, !u2.document) return u2.addEventListener && (M2.disableWorkerMessageHandler || u2.addEventListener("message", function(e4) {
      var n2 = JSON.parse(e4.data), t4 = n2.language, r2 = n2.code, a3 = n2.immediateClose;
      u2.postMessage(M2.highlight(r2, M2.languages[t4], t4)), a3 && u2.close();
    }, false)), M2;
    var r = M2.util.currentScript();
    function a2() {
      M2.manual || M2.highlightAll();
    }
    if (r && (M2.filename = r.src, r.hasAttribute("data-manual") && (M2.manual = true)), !M2.manual) {
      var l = document.readyState;
      "loading" === l || "interactive" === l && r && r.defer ? document.addEventListener("DOMContentLoaded", a2) : window.requestAnimationFrame ? window.requestAnimationFrame(a2) : window.setTimeout(a2, 16);
    }
    return M2;
  }(_self);
  "undefined" != typeof module && module.exports && (module.exports = Prism), "undefined" != typeof global && (global.Prism = Prism);
  Prism.languages.clike = { comment: [{ pattern: /(^|[^\\])\/\*[\s\S]*?(?:\*\/|$)/, lookbehind: true, greedy: true }, { pattern: /(^|[^\\:])\/\/.*/, lookbehind: true, greedy: true }], string: { pattern: /(["'])(?:\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/, greedy: true }, "class-name": { pattern: /(\b(?:class|extends|implements|instanceof|interface|new|trait)\s+|\bcatch\s+\()[\w.\\]+/i, lookbehind: true, inside: { punctuation: /[.\\]/ } }, keyword: /\b(?:break|catch|continue|do|else|finally|for|function|if|in|instanceof|new|null|return|throw|try|while)\b/, boolean: /\b(?:false|true)\b/, function: /\b\w+(?=\()/, number: /\b0x[\da-f]+\b|(?:\b\d+(?:\.\d*)?|\B\.\d+)(?:e[+-]?\d+)?/i, operator: /[<>]=?|[!=]=?=?|--?|\+\+?|&&?|\|\|?|[?*/~^%]/, punctuation: /[{}[\];(),.:]/ };
  Prism.languages.log = { string: { pattern: /"(?:[^"\\\r\n]|\\.)*"|'(?![st] | \w)(?:[^'\\\r\n]|\\.)*'/, greedy: true }, exception: { pattern: /(^|[^\w.])[a-z][\w.]*(?:Error|Exception):.*(?:(?:\r\n?|\n)[ \t]*(?:at[ \t].+|\.{3}.*|Caused by:.*))+(?:(?:\r\n?|\n)[ \t]*\.\.\. .*)?/, lookbehind: true, greedy: true, alias: ["javastacktrace", "language-javastacktrace"], inside: Prism.languages.javastacktrace || { keyword: /\bat\b/, function: /[a-z_][\w$]*(?=\()/, punctuation: /[.:()]/ } }, level: [{ pattern: /\b(?:ALERT|CRIT|CRITICAL|EMERG|EMERGENCY|ERR|ERROR|FAILURE|FATAL|SEVERE)\b/, alias: ["error", "important"] }, { pattern: /\b(?:WARN|WARNING|WRN)\b/, alias: ["warning", "important"] }, { pattern: /\b(?:DISPLAY|INF|INFO|NOTICE|STATUS)\b/, alias: ["info", "keyword"] }, { pattern: /\b(?:DBG|DEBUG|FINE)\b/, alias: ["debug", "keyword"] }, { pattern: /\b(?:FINER|FINEST|TRACE|TRC|VERBOSE|VRB)\b/, alias: ["trace", "comment"] }], property: { pattern: /((?:^|[\]|])[ \t]*)[a-z_](?:[\w-]|\b\/\b)*(?:[. ]\(?\w(?:[\w-]|\b\/\b)*\)?)*:(?=\s)/im, lookbehind: true }, separator: { pattern: /(^|[^-+])-{3,}|={3,}|\*{3,}|- - /m, lookbehind: true, alias: "comment" }, url: /\b(?:file|ftp|https?):\/\/[^\s|,;'"]*[^\s|,;'">.]/, email: { pattern: /(^|\s)[-\w+.]+@[a-z][a-z0-9-]*(?:\.[a-z][a-z0-9-]*)+(?=\s)/, lookbehind: true, alias: "url" }, "ip-address": { pattern: /\b(?:\d{1,3}(?:\.\d{1,3}){3})\b/, alias: "constant" }, "mac-address": { pattern: /\b[a-f0-9]{2}(?::[a-f0-9]{2}){5}\b/i, alias: "constant" }, domain: { pattern: /(^|\s)[a-z][a-z0-9-]*(?:\.[a-z][a-z0-9-]*)*\.[a-z][a-z0-9-]+(?=\s)/, lookbehind: true, alias: "constant" }, uuid: { pattern: /\b[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}\b/i, alias: "constant" }, hash: { pattern: /\b(?:[a-f0-9]{32}){1,2}\b/i, alias: "constant" }, "file-path": { pattern: /\b[a-z]:[\\/][^\s|,;:(){}\[\]"']+|(^|[\s:\[\](>|])\.{0,2}\/\w[^\s|,;:(){}\[\]"']*/i, lookbehind: true, greedy: true, alias: "string" }, date: { pattern: RegExp("\\b\\d{4}[-/]\\d{2}[-/]\\d{2}(?:T(?=\\d{1,2}:)|(?=\\s\\d{1,2}:))|\\b\\d{1,4}[-/ ](?:\\d{1,2}|Apr|Aug|Dec|Feb|Jan|Jul|Jun|Mar|May|Nov|Oct|Sep)[-/ ]\\d{2,4}T?\\b|\\b(?:(?:Fri|Mon|Sat|Sun|Thu|Tue|Wed)(?:\\s{1,2}(?:Apr|Aug|Dec|Feb|Jan|Jul|Jun|Mar|May|Nov|Oct|Sep))?|Apr|Aug|Dec|Feb|Jan|Jul|Jun|Mar|May|Nov|Oct|Sep)\\s{1,2}\\d{1,2}\\b", "i"), alias: "number" }, time: { pattern: /\b\d{1,2}:\d{1,2}:\d{1,2}(?:[.,:]\d+)?(?:\s?[+-]\d{2}:?\d{2}|Z)?\b/, alias: "number" }, boolean: /\b(?:false|null|true)\b/i, number: { pattern: /(^|[^.\w])(?:0x[a-f0-9]+|0o[0-7]+|0b[01]+|v?\d[\da-f]*(?:\.\d+)*(?:e[+-]?\d+)?[a-z]{0,3}\b)\b(?!\.\w)/i, lookbehind: true }, operator: /[;:?<=>~/@!$%&+\-|^(){}*#]/, punctuation: /[\[\].,]/ };
  Prism.languages.python = { comment: { pattern: /(^|[^\\])#.*/, lookbehind: true, greedy: true }, "string-interpolation": { pattern: /(?:f|fr|rf)(?:("""|''')[\s\S]*?\1|("|')(?:\\.|(?!\2)[^\\\r\n])*\2)/i, greedy: true, inside: { interpolation: { pattern: /((?:^|[^{])(?:\{\{)*)\{(?!\{)(?:[^{}]|\{(?!\{)(?:[^{}]|\{(?!\{)(?:[^{}])+\})+\})+\}/, lookbehind: true, inside: { "format-spec": { pattern: /(:)[^:(){}]+(?=\}$)/, lookbehind: true }, "conversion-option": { pattern: /![sra](?=[:}]$)/, alias: "punctuation" }, rest: null } }, string: /[\s\S]+/ } }, "triple-quoted-string": { pattern: /(?:[rub]|br|rb)?("""|''')[\s\S]*?\1/i, greedy: true, alias: "string" }, string: { pattern: /(?:[rub]|br|rb)?("|')(?:\\.|(?!\1)[^\\\r\n])*\1/i, greedy: true }, function: { pattern: /((?:^|\s)def[ \t]+)[a-zA-Z_]\w*(?=\s*\()/g, lookbehind: true }, "class-name": { pattern: /(\bclass\s+)\w+/i, lookbehind: true }, decorator: { pattern: /(^[\t ]*)@\w+(?:\.\w+)*/m, lookbehind: true, alias: ["annotation", "punctuation"], inside: { punctuation: /\./ } }, keyword: /\b(?:_(?=\s*:)|and|as|assert|async|await|break|case|class|continue|def|del|elif|else|except|exec|finally|for|from|global|if|import|in|is|lambda|match|nonlocal|not|or|pass|print|raise|return|try|while|with|yield)\b/, builtin: /\b(?:__import__|abs|all|any|apply|ascii|basestring|bin|bool|buffer|bytearray|bytes|callable|chr|classmethod|cmp|coerce|compile|complex|delattr|dict|dir|divmod|enumerate|eval|execfile|file|filter|float|format|frozenset|getattr|globals|hasattr|hash|help|hex|id|input|int|intern|isinstance|issubclass|iter|len|list|locals|long|map|max|memoryview|min|next|object|oct|open|ord|pow|property|range|raw_input|reduce|reload|repr|reversed|round|set|setattr|slice|sorted|staticmethod|str|sum|super|tuple|type|unichr|unicode|vars|xrange|zip)\b/, boolean: /\b(?:False|None|True)\b/, number: /\b0(?:b(?:_?[01])+|o(?:_?[0-7])+|x(?:_?[a-f0-9])+)\b|(?:\b\d+(?:_\d+)*(?:\.(?:\d+(?:_\d+)*)?)?|\B\.\d+(?:_\d+)*)(?:e[+-]?\d+(?:_\d+)*)?j?(?!\w)/i, operator: /[-+%=]=?|!=|:=|\*\*?=?|\/\/?=?|<[<=>]?|>[=>]?|[&|^~]/, punctuation: /[{}[\];(),.:]/ }, Prism.languages.python["string-interpolation"].inside.interpolation.inside.rest = Prism.languages.python, Prism.languages.py = Prism.languages.python;
  const subscriber_queue = [];
  function writable(value2, start = noop$5) {
    let stop2;
    const subscribers = /* @__PURE__ */ new Set();
    function set2(new_value) {
      if (safe_not_equal(value2, new_value)) {
        value2 = new_value;
        if (stop2) {
          const run_queue = !subscriber_queue.length;
          for (const subscriber of subscribers) {
            subscriber[1]();
            subscriber_queue.push(subscriber, value2);
          }
          if (run_queue) {
            for (let i = 0; i < subscriber_queue.length; i += 2) {
              subscriber_queue[i][0](subscriber_queue[i + 1]);
            }
            subscriber_queue.length = 0;
          }
        }
      }
    }
    function update2(fn) {
      set2(fn(value2));
    }
    function subscribe2(run2, invalidate = noop$5) {
      const subscriber = [run2, invalidate];
      subscribers.add(subscriber);
      if (subscribers.size === 1) {
        stop2 = start(set2, update2) || noop$5;
      }
      run2(value2);
      return () => {
        subscribers.delete(subscriber);
        if (subscribers.size === 0 && stop2) {
          stop2();
          stop2 = null;
        }
      };
    }
    return { set: set2, update: update2, subscribe: subscribe2 };
  }
  const cardData = writable(void 0);
  window.metaflow_card_update = (dataChanges) => {
    cardData == null ? void 0 : cardData.update((d) => {
      const newData = { ...d };
      Object.values(dataChanges).forEach(
        (change2) => (newData == null ? void 0 : newData.components) && findAndMutateTree(newData.components, change2)
      );
      return newData;
    });
    return true;
  };
  const mutateChartElement = (chart, newChart) => {
    if (chart.data) {
      chart.data = JSON.parse(JSON.stringify(newChart.data));
    }
    const specHasNotChanged = JSON.stringify(newChart.spec) === JSON.stringify(chart.spec);
    if (!specHasNotChanged) {
      chart.spec = JSON.parse(JSON.stringify(newChart.spec));
    }
  };
  const findAndMutateTree = (components, newComponent) => {
    const componentIndex = components.findIndex(
      (fcomp) => newComponent.id === (fcomp == null ? void 0 : fcomp.id)
    );
    if (componentIndex > -1) {
      if (components[componentIndex].type == "vegaChart") {
        mutateChartElement(
          components[componentIndex],
          newComponent
        );
      } else {
        Object.assign(components[componentIndex], newComponent);
      }
    } else {
      components.forEach((component) => {
        var _a2;
        if ((component.type === "section" || component.type === "page") && ((_a2 = component == null ? void 0 : component.contents) == null ? void 0 : _a2.length)) {
          findAndMutateTree(component.contents, newComponent);
        }
      });
    }
  };
  const setCardData = (cardDataId) => {
    try {
      const data2 = JSON.parse(
        atob(window.__MF_DATA__[cardDataId])
      );
      cardData.set(data2);
    } catch (error2) {
      fetch("/card-example.json").then((resp) => resp.json()).then((data2) => {
        cardData.set(data2);
      }).catch(console.error);
    }
  };
  const modal = writable(void 0);
  const getPageHierarchy = (components) => {
    const hierarchy2 = {};
    if (!components) return hierarchy2;
    function addSections(component, sectionsArr = []) {
      var _a2;
      if (component.type === "page") {
        const s = [];
        hierarchy2[component.title] = s;
        (_a2 = component == null ? void 0 : component.contents) == null ? void 0 : _a2.forEach((c2) => addSections(c2, s));
      }
      if (component.type === "section" && component.title) {
        sectionsArr.push(component.title);
      }
    }
    components == null ? void 0 : components.forEach((c2) => addSections(c2));
    return hierarchy2;
  };
  const convertPixelsToRem = (px2, doc) => {
    const computedStyle = 16;
    return px2 / computedStyle;
  };
  const getPathSpecObject = (pathspec) => {
    const items = pathspec.split("/");
    return {
      flowname: items[0],
      runid: items[1],
      stepname: items == null ? void 0 : items[2],
      taskid: items == null ? void 0 : items[3]
    };
  };
  const getFromPathSpec = (pathspec, key2) => {
    var _a2;
    if (!pathspec || !key2) {
      return void 0;
    }
    return (_a2 = getPathSpecObject(pathspec)) == null ? void 0 : _a2[key2];
  };
  const isOverflown = (el) => {
    return el.scrollHeight > el.clientHeight || el.scrollWidth > el.clientWidth;
  };
  function create_else_block$b(ctx) {
    let svg;
    let title2;
    let t;
    let g2;
    let g1;
    let g0;
    let path0;
    let path1;
    return {
      c() {
        svg = svg_element("svg");
        title2 = svg_element("title");
        t = text$3("metaflow_logo_horizontal");
        g2 = svg_element("g");
        g1 = svg_element("g");
        g0 = svg_element("g");
        path0 = svg_element("path");
        path1 = svg_element("path");
        attr$6(path0, "d", "M223.990273,66.33 C223.515273,61.851 222.686273,57.512 221.505273,53.33 C220.325273,49.148 218.795273,45.122 216.916273,41.271 C212.845273,32.921 207.254273,25.587 200.268273,19.422 C199.270273,18.541 198.243273,17.684 197.189273,16.851 C191.255273,12.166 184.481273,8.355 177.253273,5.55 C174.156273,4.347 170.975273,3.33 167.741273,2.508 C161.273273,0.863 154.593273,0 147.943273,0 C141.755273,0 135.332273,0.576 128.687273,1.722 C127.025273,2.01 125.350273,2.332 123.661273,2.69 C120.283273,3.406 116.851273,4.265 113.365273,5.267 C104.650273,7.769 95.6022727,11.161 86.2442727,15.433 C78.7592727,18.851 71.0762727,22.832 63.2072727,27.373 C47.9762727,36.162 35.7372727,44.969 29.3592727,49.791 C29.0692727,50.01 28.7922727,50.221 28.5262727,50.423 C26.1382727,52.244 24.7522727,53.367 24.5662727,53.519 L0.549272727,73.065 C0.191272727,73.356 0.00727272727,73.773 0,74.194 C-0.00372727273,74.403 0.0362727273,74.614 0.120272727,74.811 C0.205272727,75.008 0.334272727,75.189 0.508272727,75.341 L11.7612727,85.195 C12.1692727,85.552 12.7252727,85.651 13.2162727,85.487 C13.3792727,85.432 13.5362727,85.348 13.6762727,85.234 L35.8492727,67.382 C36.0422727,67.224 37.6152727,65.949 40.3252727,63.903 C44.1192727,61.036 50.1422727,56.656 57.7292727,51.711 C62.0642727,48.884 66.9102727,45.873 72.1412727,42.854 C100.864273,26.278 126.367273,17.874 147.943273,17.874 C148.366273,17.874 148.790273,17.892 149.213273,17.902 C149.655273,17.911 150.096273,17.911 150.538273,17.93 C153.769273,18.068 156.995273,18.463 160.170273,19.097 C164.931273,20.049 169.577273,21.542 173.953273,23.524 C178.328273,25.505 182.433273,27.975 186.112273,30.88 C186.771273,31.4 187.406273,31.94 188.035273,32.485 C188.913273,33.245 189.771273,34.023 190.591273,34.83 C191.998273,36.217 193.317273,37.673 194.548273,39.195 C196.395273,41.479 198.042273,43.912 199.480273,46.485 C199.960273,47.342 200.417273,48.216 200.850273,49.105 C201.112273,49.642 201.343273,50.196 201.587273,50.743 C202.231273,52.185 202.834273,53.649 203.354273,55.158 C203.712273,56.198 204.041273,57.255 204.340273,58.326 C205.836273,63.683 206.590273,69.417 206.590273,75.469 C206.590273,81.221 205.892273,86.677 204.541273,91.804 C203.617273,95.308 202.397273,98.662 200.850273,101.833 C200.417273,102.722 199.960273,103.595 199.480273,104.453 C197.562273,107.884 195.275273,111.066 192.636273,113.976 C190.657273,116.159 188.480273,118.189 186.113273,120.058 C184.553273,121.29 182.909273,122.432 181.208273,123.503 C180.313273,124.067 179.400273,124.609 178.470273,125.126 C177.462273,125.688 176.442273,126.232 175.398273,126.737 C166.961273,130.823 157.423273,133.064 147.943273,133.064 C126.367273,133.064 100.864273,124.659 72.1412727,108.084 C70.5382727,107.159 68.4382727,105.886 66.3072727,104.575 C65.0292727,103.788 63.7402727,102.986 62.5412727,102.237 C59.3442727,100.238 56.7882727,98.61 56.7882727,98.61 C61.8362727,93.901 69.3232727,87.465 78.6472727,81.047 C80.0092727,80.11 81.4192727,79.174 82.8572727,78.243 C84.1052727,77.436 85.3712727,76.63 86.6732727,75.835 C88.2042727,74.9 89.7802727,73.981 91.3822727,73.074 C93.0482727,72.131 94.7512727,71.207 96.4902727,70.307 C111.473273,62.55 129.094273,56.602 147.943273,56.602 C151.750273,56.602 157.745273,57.825 162.114273,61.276 C162.300273,61.422 162.489273,61.578 162.677273,61.74 C163.337273,62.305 164.006273,62.966 164.634273,63.78 C164.957273,64.198 165.269273,64.657 165.564273,65.162 C166.006273,65.92 166.409273,66.782 166.750273,67.775 C166.891273,68.185 167.016273,68.627 167.134273,69.083 C167.586273,70.833 167.863273,72.924 167.863273,75.469 C167.863273,78.552 167.460273,80.974 166.824273,82.92 C166.578273,83.674 166.300273,84.363 165.992273,84.983 C165.855273,85.259 165.711273,85.524 165.564273,85.776 C165.376273,86.099 165.178273,86.396 164.977273,86.682 C164.631273,87.175 164.269273,87.618 163.900273,88.018 C163.730273,88.202 163.559273,88.379 163.387273,88.546 C162.962273,88.96 162.534273,89.331 162.114273,89.662 C157.745273,93.112 151.750273,94.337 147.943273,94.337 C144.485273,94.337 140.682273,93.926 136.589273,93.121 C133.860273,92.584 131.003273,91.871 128.033273,90.987 C123.579273,89.662 118.873273,87.952 113.970273,85.872 C113.768273,85.786 113.552273,85.747 113.336273,85.753 C113.122273,85.76 112.908273,85.813 112.713273,85.912 C106.990273,88.816 101.641273,91.995 96.7462727,95.223 C96.6232727,95.304 96.5182727,95.397 96.4302727,95.5 C95.8122727,96.22 96.0172727,97.397 96.9492727,97.822 L102.445273,100.328 C104.606273,101.314 106.737273,102.238 108.835273,103.102 C110.934273,103.966 113.001273,104.77 115.035273,105.511 C118.086273,106.624 121.064273,107.599 123.965273,108.436 C127.834273,109.551 131.567273,110.421 135.157273,111.043 C139.646273,111.82 143.912273,112.211 147.943273,112.211 C148.367273,112.211 148.923273,112.201 149.591273,112.169 C149.925273,112.153 150.287273,112.131 150.674273,112.102 C155.712273,111.724 165.055273,110.114 173.190273,103.691 C173.547273,103.41 173.869273,103.105 174.210273,102.813 C175.324273,101.86 176.381273,100.866 177.333273,99.8 C177.470273,99.648 177.590273,99.485 177.724273,99.331 C181.300273,95.167 183.699273,90.185 184.875273,84.406 C185.444273,81.609 185.737273,78.631 185.737273,75.469 C185.737273,63.315 181.516273,53.82 173.190273,47.247 C167.050273,42.399 160.228273,40.299 155.083273,39.395 C153.892273,39.186 152.790273,39.037 151.809273,38.938 C150.116273,38.766 148.774273,38.727 147.943273,38.727 C133.456273,38.727 118.519273,41.679 103.545273,47.5 C99.1222727,49.22 94.6912727,51.191 90.2702727,53.403 C88.7972727,54.141 87.3242727,54.905 85.8542727,55.696 C83.5092727,56.957 81.1722727,58.303 78.8382727,59.697 C77.3922727,60.562 75.9492727,61.451 74.5082727,62.366 C72.4422727,63.678 70.3802727,65.023 68.3302727,66.437 C63.8372727,69.535 59.7422727,72.63 56.0902727,75.567 C54.8732727,76.547 53.7052727,77.508 52.5882727,78.446 C48.1222727,82.2 44.4752727,85.581 41.7602727,88.226 C38.3032727,91.593 36.3592727,93.766 36.1632727,93.986 L35.8282727,94.362 L32.0332727,98.61 L30.6432727,100.164 C30.4962727,100.329 30.3932727,100.517 30.3312727,100.715 C30.1482727,101.307 30.3472727,101.981 30.8882727,102.368 L37.2812727,106.938 L37.4862727,107.083 L37.6922727,107.228 C39.8732727,108.766 42.0702727,110.277 44.2792727,111.758 C45.8422727,112.807 47.4102727,113.84 48.9832727,114.858 C51.5302727,116.508 54.0902727,118.103 56.6542727,119.665 C57.8412727,120.388 59.0282727,121.101 60.2162727,121.804 C61.2142727,122.394 62.2102727,122.989 63.2072727,123.565 C76.9772727,131.512 90.1802727,137.744 102.748273,142.242 C104.544273,142.884 106.326273,143.491 108.096273,144.063 C111.635273,145.206 115.121273,146.207 118.553273,147.067 C121.986273,147.925 125.364273,148.642 128.687273,149.215 C135.332273,150.362 141.755273,150.938 147.943273,150.938 C154.593273,150.938 161.273273,150.074 167.741273,148.43 C174.209273,146.786 180.465273,144.361 186.265273,141.238 C190.133273,139.156 193.798273,136.764 197.189273,134.087 C200.352273,131.589 203.264273,128.872 205.911273,125.949 C207.677273,124 209.325273,121.96 210.854273,119.831 C211.618273,118.766 212.353273,117.68 213.057273,116.571 C214.466273,114.356 215.753273,112.053 216.916273,109.667 C220.701273,101.906 223.073273,93.439 224.008273,84.406 C224.310273,81.485 224.465273,78.505 224.465273,75.469 C224.465273,72.364 224.306273,69.316 223.990273,66.33");
        attr$6(path0, "id", "Fill-1");
        attr$6(path0, "fill", "#146EE6");
        attr$6(path1, "d", "M758.389273,75.346 C752.632273,111.56 742.681273,122.23 712.102273,122.23 C710.847273,122.23 709.640273,122.207 708.464273,122.17 C708.321273,122.191 708.191273,122.23 708.028273,122.23 L637.994273,122.23 C636.795273,122.23 636.315273,121.632 636.435273,120.311 L650.585273,31.22 C650.704273,30.016 651.424273,29.417 652.623273,29.417 L667.852273,29.417 C669.050273,29.417 669.530273,30.016 669.410273,31.22 L657.659273,105.802 L714.249273,105.802 L714.249273,105.787 C714.410273,105.794 714.568273,105.802 714.741273,105.802 C718.878273,105.802 722.250273,105.351 725.040273,104.313 C726.434273,103.794 727.684273,103.129 728.810273,102.298 C729.373273,101.884 729.905273,101.426 730.410273,100.927 C734.951273,96.431 737.231273,88.43 739.322273,75.346 C739.328273,75.312 739.331273,75.282 739.337273,75.25 C739.642273,73.311 739.896273,71.474 740.130273,69.679 C740.203273,69.116 740.272273,68.557 740.338273,68.008 C740.412273,67.392 740.461273,66.821 740.525273,66.222 C742.136273,49.927 738.622273,44.525 724.454273,44.525 C723.419273,44.525 722.433273,44.554 721.490273,44.613 C708.297273,45.444 703.831273,52.303 700.461273,71.126 C700.220273,72.472 699.984273,73.877 699.752273,75.346 C699.483273,77.027 699.255273,78.6 699.052273,80.115 C698.993273,80.545 698.948273,80.946 698.895273,81.361 C698.757273,82.465 698.638273,83.528 698.540273,84.544 C698.502273,84.943 698.466273,85.334 698.434273,85.72 C698.344273,86.815 698.281273,87.856 698.246273,88.847 C698.238273,89.049 698.224273,89.269 698.219273,89.469 C698.161273,91.88 698.289273,93.972 698.621273,95.782 C698.649273,95.941 698.686273,96.089 698.717273,96.246 C698.874273,96.992 699.067273,97.689 699.301273,98.337 C699.346273,98.464 699.390273,98.594 699.439273,98.718 C700.039273,100.231 700.864273,101.478 701.963273,102.469 C702.263273,102.738 702.586273,102.987 702.925273,103.22 L679.436273,103.22 C679.393273,102.969 679.343273,102.727 679.305273,102.471 L679.304273,102.471 C679.304273,102.467 679.304273,102.462 679.303273,102.459 C679.259273,102.17 679.236273,101.854 679.198273,101.558 C679.083273,100.634 678.995273,99.671 678.934273,98.674 C678.908273,98.258 678.879273,97.845 678.862273,97.419 C678.816273,96.174 678.804273,94.876 678.832273,93.518 C678.840273,93.114 678.861273,92.69 678.876273,92.276 C678.920273,91.042 678.991273,89.765 679.092273,88.441 C679.117273,88.109 679.134273,87.79 679.162273,87.452 C679.299273,85.836 679.483273,84.137 679.698273,82.382 C679.750273,81.957 679.807273,81.518 679.863273,81.084 C680.104273,79.238 680.369273,77.344 680.687273,75.346 C681.046273,73.067 681.423273,70.889 681.819273,68.808 C687.040273,41.397 695.809273,30.748 717.267273,28.554 C720.250273,28.25 723.472273,28.103 726.971273,28.103 C726.972273,28.103 726.972273,28.103 726.972273,28.103 C747.994273,28.103 757.680273,33.202 759.811273,48.236 C760.779273,55.067 760.187273,63.953 758.389273,75.346 Z M894.023273,31.336 L866.923273,108.56 C863.472273,118.182 861.113273,121.41 854.499273,122.41 C852.379273,122.733 849.831273,122.828 846.659273,122.828 C831.670273,122.828 830.350273,121.267 829.392273,108.56 L825.794273,63.232 L825.794273,63.231 L807.928273,108.56 C804.255273,117.613 802.201273,120.996 795.961273,122.202 C793.442273,122.687 790.260273,122.829 785.985273,122.829 C772.914273,122.829 770.756273,121.267 770.396273,108.56 L767.638273,31.337 C767.638273,29.899 768.238273,29.417 769.557273,29.417 L785.385273,29.417 C786.464273,29.417 786.704273,29.899 786.824273,31.337 L788.895273,100.572 L788.895273,100.571 C789.054273,103.091 789.563273,103.641 791.021273,103.641 C792.939273,103.641 793.419273,103.042 794.618273,100.043 L820.758273,34.576 C821.358273,33.132 822.437273,32.657 823.516273,32.657 L837.665273,32.657 C838.519273,32.657 839.279273,32.977 839.626273,33.817 C839.718273,34.038 839.799273,34.274 839.824273,34.576 L845.220273,100.043 C845.460273,103.042 845.819273,103.641 847.738273,103.641 C849.297273,103.641 849.896273,103.042 850.976273,100.043 L874.838273,31.336 C875.317273,29.898 875.677273,29.417 876.756273,29.417 L892.584273,29.417 C893.903273,29.417 894.383273,29.898 894.023273,31.336 Z M362.708273,31.219 L357.192273,120.311 C357.192273,121.632 356.353273,122.23 355.154273,122.23 L339.926273,122.23 C338.726273,122.23 338.366273,121.632 338.366273,120.311 L342.324273,62.756 L311.986273,117.551 C311.386273,118.749 310.428273,119.348 309.229273,119.348 L297.837273,119.348 C296.758273,119.348 296.038273,118.749 295.560273,117.551 L282.851273,62.767 L282.848273,62.755 L268.339273,120.31 C268.212273,121.009 267.974273,121.492 267.612273,121.807 C267.288273,122.085 266.865273,122.23 266.301273,122.23 L251.073273,122.23 C249.874273,122.23 249.273273,121.632 249.514273,120.31 L272.296273,31.336 C272.537273,30.138 272.897273,29.417 274.095273,29.417 L288.605273,29.417 C291.236273,29.417 292.726273,29.895 293.682273,31.379 C294.120273,32.059 294.457273,32.928 294.720273,34.095 L307.790273,92.489 L339.326273,34.095 C341.485273,30.256 343.043273,29.299 346.880273,29.299 L361.389273,29.299 C362.376273,29.299 362.682273,30.684 362.682273,30.684 C362.682273,30.684 362.708273,31.029 362.708273,31.219 Z M501.706273,31.219 L499.667273,44.049 C499.547273,45.246 498.708273,45.845 497.509273,45.845 L472.448273,45.845 L460.696273,120.31 C460.457273,121.632 459.738273,122.23 458.538273,122.23 L443.309273,122.23 C442.111273,122.23 441.631273,121.632 441.870273,120.31 L453.622273,45.845 L394.820273,45.845 L391.224273,68.507 L391.224273,68.508 L430.555273,68.508 C431.754273,68.508 432.353273,69.106 432.234273,70.31 L430.196273,82.542 C430.076273,83.738 429.236273,84.338 428.038273,84.338 L388.706273,84.338 L385.349273,105.801 L428.397273,105.801 C429.596273,105.801 430.076273,106.4 429.955273,107.597 L427.797273,120.428 C427.676273,121.632 426.958273,122.23 425.759273,122.23 L365.683273,122.23 C364.484273,122.23 364.004273,121.632 364.124273,120.31 L378.273273,31.219 C378.393273,30.015 379.112273,29.417 380.313273,29.417 L500.147273,29.417 C501.346273,29.417 501.826273,30.015 501.706273,31.219 Z M629.471273,70.426 L627.433273,82.659 C627.313273,83.856 626.473273,84.454 625.275273,84.454 L588.223273,84.454 L582.466273,120.311 C582.347273,121.632 581.627273,122.23 580.428273,122.23 L565.200273,122.23 C564.001273,122.23 563.522273,121.632 563.640273,120.311 L577.790273,31.219 C577.910273,30.016 578.629273,29.417 579.828273,29.417 L643.004273,29.417 C644.202273,29.417 644.802273,30.016 644.682273,31.219 L642.644273,44.05 C642.403273,45.247 641.685273,45.846 640.486273,45.846 L594.337273,45.846 L590.741273,68.631 L627.793273,68.631 C628.991273,68.631 629.592273,69.23 629.471273,70.426 Z M388.706273,84.338 L388.712273,84.338 L388.309273,86.876 L388.706273,84.338 Z M510.726273,79.783 L524.396273,48.006 C525.036273,46.466 525.443273,45.589 525.990273,45.096 C526.465273,44.667 527.044273,44.525 527.993273,44.525 C530.391273,44.525 530.391273,45.124 530.751273,48.006 L534.348273,79.783 L510.726273,79.783 Z M542.334273,29.886 C539.756273,28.905 536.043273,28.702 530.511273,28.702 C516.601273,28.702 513.963273,30.016 508.208273,43.087 L474.633273,120.311 C474.154273,121.749 474.513273,122.23 475.832273,122.23 L491.060273,122.23 C492.259273,122.23 492.500273,121.749 493.099273,120.311 L504.011273,95.372 L536.026273,95.372 L539.024273,120.311 C539.144273,121.749 539.144273,122.23 540.344273,122.23 L555.572273,122.23 C556.891273,122.23 557.490273,121.749 557.490273,120.311 L548.617273,43.087 C547.658273,35.042 546.460273,31.458 542.334273,29.886 L542.334273,29.886 Z");
        attr$6(path1, "id", "Fill-2");
        attr$6(path1, "fill", "#333333");
        attr$6(g0, "id", "metaflow_logo_horizontal");
        attr$6(g0, "transform", "translate(92.930727, 93.190000)");
        attr$6(g1, "id", "Metaflow_Logo_Horizontal_TwoColor_Dark_RGB");
        attr$6(g1, "transform", "translate(-92.000000, -93.000000)");
        attr$6(g2, "id", "Page-1");
        attr$6(g2, "stroke", "none");
        attr$6(g2, "stroke-width", "1");
        attr$6(g2, "fill", "none");
        attr$6(g2, "fill-rule", "evenodd");
        attr$6(svg, "xmlns", "http://www.w3.org/2000/svg");
        attr$6(svg, "xmlns:xlink", "http://www.w3.org/1999/xlink");
        attr$6(svg, "width", "896px");
        attr$6(svg, "height", "152px");
        attr$6(svg, "viewBox", "0 0 896 152");
        attr$6(svg, "version", "1.1");
      },
      m(target2, anchor) {
        insert$1(target2, svg, anchor);
        append$2(svg, title2);
        append$2(title2, t);
        append$2(svg, g2);
        append$2(g2, g1);
        append$2(g1, g0);
        append$2(g0, path0);
        append$2(g0, path1);
      },
      d(detaching) {
        if (detaching) {
          detach(svg);
        }
      }
    };
  }
  function create_if_block$n(ctx) {
    let svg;
    let path0;
    let path1;
    return {
      c() {
        svg = svg_element("svg");
        path0 = svg_element("path");
        path1 = svg_element("path");
        attr$6(path0, "fill-rule", "evenodd");
        attr$6(path0, "clip-rule", "evenodd");
        attr$6(path0, "d", "M223.991 66.33C223.516 61.851 222.687 57.512 221.506 53.33C220.326 49.148 218.796 45.122 216.917 41.271C212.846 32.921 207.255 25.587 200.269 19.422C199.271 18.541 198.244 17.684 197.19 16.851C191.256 12.166 184.482 8.355 177.254 5.55C174.157 4.347 170.976 3.33 167.742 2.508C161.274 0.863 154.594 0 147.944 0C141.756 0 135.333 0.576 128.688 1.722C127.026 2.01 125.351 2.332 123.662 2.69C120.284 3.406 116.852 4.265 113.366 5.267C104.651 7.769 95.6025 11.161 86.2445 15.433C78.7595 18.851 71.0765 22.832 63.2075 27.373C47.9765 36.162 35.7375 44.969 29.3595 49.791C29.0695 50.01 28.7925 50.221 28.5265 50.423C26.1385 52.244 24.7525 53.367 24.5665 53.519L0.549511 73.065C0.191511 73.356 0.00751099 73.773 0.000238261 74.194C-0.00348901 74.403 0.036511 74.614 0.120511 74.811C0.205511 75.008 0.334511 75.189 0.508511 75.341L11.7615 85.195C12.1695 85.552 12.7255 85.651 13.2165 85.487C13.3795 85.432 13.5365 85.348 13.6765 85.234L35.8495 67.382C36.0425 67.224 37.6155 65.949 40.3255 63.903C44.1195 61.036 50.1425 56.656 57.7295 51.711C62.0645 48.884 66.9105 45.873 72.1415 42.854C100.865 26.278 126.368 17.874 147.944 17.874C148.367 17.874 148.791 17.892 149.214 17.902C149.656 17.911 150.097 17.911 150.539 17.93C153.77 18.068 156.996 18.463 160.171 19.097C164.932 20.049 169.578 21.542 173.954 23.524C178.329 25.505 182.434 27.975 186.113 30.88C186.772 31.4 187.407 31.94 188.036 32.485C188.914 33.245 189.772 34.023 190.592 34.83C191.999 36.217 193.318 37.673 194.549 39.195C196.396 41.479 198.043 43.912 199.481 46.485C199.961 47.342 200.418 48.216 200.851 49.105C201.113 49.642 201.344 50.196 201.588 50.743C202.232 52.185 202.835 53.649 203.355 55.158C203.713 56.198 204.042 57.255 204.341 58.326C205.837 63.683 206.591 69.417 206.591 75.469C206.591 81.221 205.893 86.677 204.542 91.804C203.618 95.308 202.398 98.662 200.851 101.833C200.418 102.722 199.961 103.595 199.481 104.453C197.563 107.884 195.276 111.066 192.637 113.976C190.658 116.159 188.481 118.189 186.114 120.058C184.554 121.29 182.91 122.432 181.209 123.503C180.314 124.067 179.401 124.609 178.471 125.126C177.463 125.688 176.443 126.232 175.399 126.737C166.962 130.823 157.424 133.064 147.944 133.064C126.368 133.064 100.865 124.659 72.1415 108.084C70.5385 107.159 68.4385 105.886 66.3075 104.575C65.0295 103.788 63.7405 102.986 62.5415 102.237C59.3445 100.238 56.7885 98.61 56.7885 98.61C61.8365 93.901 69.3235 87.465 78.6475 81.047C80.0095 80.11 81.4195 79.174 82.8575 78.243C84.1055 77.436 85.3715 76.63 86.6735 75.835C88.2045 74.9 89.7805 73.981 91.3825 73.074C93.0485 72.131 94.7515 71.207 96.4905 70.307C111.474 62.55 129.095 56.602 147.944 56.602C151.751 56.602 157.746 57.825 162.115 61.276C162.301 61.422 162.49 61.578 162.678 61.74C163.338 62.305 164.007 62.966 164.635 63.78C164.958 64.198 165.27 64.657 165.565 65.162C166.007 65.92 166.41 66.782 166.751 67.775C166.892 68.185 167.017 68.627 167.135 69.083C167.587 70.833 167.864 72.924 167.864 75.469C167.864 78.552 167.461 80.974 166.825 82.92C166.579 83.674 166.301 84.363 165.993 84.983C165.856 85.259 165.712 85.524 165.565 85.776C165.377 86.099 165.179 86.396 164.978 86.682C164.632 87.175 164.27 87.618 163.901 88.018C163.731 88.202 163.56 88.379 163.388 88.546C162.963 88.96 162.535 89.331 162.115 89.662C157.746 93.112 151.751 94.337 147.944 94.337C144.486 94.337 140.683 93.926 136.59 93.121C133.861 92.584 131.004 91.871 128.034 90.987C123.58 89.662 118.874 87.952 113.971 85.872C113.769 85.786 113.553 85.747 113.337 85.753C113.123 85.76 112.909 85.813 112.714 85.912C106.991 88.816 101.642 91.995 96.7465 95.223C96.6235 95.304 96.5185 95.397 96.4305 95.5C95.8125 96.22 96.0175 97.397 96.9495 97.822L102.446 100.328C104.607 101.314 106.738 102.238 108.836 103.102C110.935 103.966 113.002 104.77 115.036 105.511C118.087 106.624 121.065 107.599 123.966 108.436C127.835 109.551 131.568 110.421 135.158 111.043C139.647 111.82 143.913 112.211 147.944 112.211C148.368 112.211 148.924 112.201 149.592 112.169C149.926 112.153 150.288 112.131 150.675 112.102C155.713 111.724 165.056 110.114 173.191 103.691C173.548 103.41 173.87 103.105 174.211 102.813C175.325 101.86 176.382 100.866 177.334 99.8C177.471 99.648 177.591 99.485 177.725 99.331C181.301 95.167 183.7 90.185 184.876 84.406C185.445 81.609 185.738 78.631 185.738 75.469C185.738 63.315 181.517 53.82 173.191 47.247C167.051 42.399 160.229 40.299 155.084 39.395C153.893 39.186 152.791 39.037 151.81 38.938C150.117 38.766 148.775 38.727 147.944 38.727C133.457 38.727 118.52 41.679 103.546 47.5C99.1225 49.22 94.6915 51.191 90.2705 53.403C88.7975 54.141 87.3245 54.905 85.8545 55.696C83.5095 56.957 81.1725 58.303 78.8385 59.697C77.3925 60.562 75.9495 61.451 74.5085 62.366C72.4425 63.678 70.3805 65.023 68.3305 66.437C63.8375 69.535 59.7425 72.63 56.0905 75.567C54.8735 76.547 53.7055 77.508 52.5885 78.446C48.1225 82.2 44.4755 85.581 41.7605 88.226C38.3035 91.593 36.3595 93.766 36.1635 93.986L35.8285 94.362L32.0335 98.61L30.6435 100.164C30.4965 100.329 30.3935 100.517 30.3315 100.715C30.1485 101.307 30.3475 101.981 30.8885 102.368L37.2815 106.938L37.4865 107.083L37.6925 107.228C39.8735 108.766 42.0705 110.277 44.2795 111.758C45.8425 112.807 47.4105 113.84 48.9835 114.858C51.5305 116.508 54.0905 118.103 56.6545 119.665C57.8415 120.388 59.0285 121.101 60.2165 121.804C61.2145 122.394 62.2105 122.989 63.2075 123.565C76.9775 131.512 90.1805 137.744 102.749 142.242C104.545 142.884 106.327 143.491 108.097 144.063C111.636 145.206 115.122 146.207 118.554 147.067C121.987 147.925 125.365 148.642 128.688 149.215C135.333 150.362 141.756 150.938 147.944 150.938C154.594 150.938 161.274 150.074 167.742 148.43C174.21 146.786 180.466 144.361 186.266 141.238C190.134 139.156 193.799 136.764 197.19 134.087C200.353 131.589 203.265 128.872 205.912 125.949C207.678 124 209.326 121.96 210.855 119.831C211.619 118.766 212.354 117.68 213.058 116.571C214.467 114.356 215.754 112.053 216.917 109.667C220.702 101.906 223.074 93.439 224.009 84.406C224.311 81.485 224.466 78.505 224.466 75.469C224.466 72.364 224.307 69.316 223.991 66.33Z");
        attr$6(path0, "fill", "#146EE6");
        attr$6(path1, "fill-rule", "evenodd");
        attr$6(path1, "clip-rule", "evenodd");
        attr$6(path1, "d", "M758.39 75.346C752.633 111.56 742.682 122.23 712.103 122.23C710.848 122.23 709.641 122.207 708.465 122.17C708.322 122.191 708.192 122.23 708.029 122.23H637.995C636.796 122.23 636.316 121.632 636.436 120.311L650.586 31.22C650.705 30.016 651.425 29.417 652.624 29.417H667.853C669.051 29.417 669.531 30.016 669.411 31.22L657.66 105.802H714.25V105.787C714.411 105.794 714.569 105.802 714.742 105.802C718.879 105.802 722.251 105.351 725.041 104.313C726.435 103.794 727.685 103.129 728.811 102.298C729.374 101.884 729.906 101.426 730.411 100.927C734.952 96.431 737.232 88.43 739.323 75.346C739.329 75.312 739.332 75.282 739.338 75.25C739.643 73.311 739.896 71.474 740.13 69.679C740.203 69.116 740.273 68.557 740.339 68.008C740.413 67.392 740.462 66.821 740.526 66.222C742.137 49.927 738.623 44.525 724.455 44.525C723.42 44.525 722.434 44.554 721.491 44.613C708.298 45.444 703.831 52.303 700.461 71.126C700.22 72.472 699.985 73.877 699.753 75.346C699.484 77.027 699.255 78.6 699.052 80.115C698.993 80.545 698.949 80.946 698.896 81.361C698.758 82.465 698.639 83.528 698.541 84.544C698.503 84.943 698.467 85.334 698.435 85.72C698.345 86.815 698.282 87.856 698.247 88.847C698.239 89.049 698.225 89.269 698.22 89.469C698.162 91.88 698.29 93.972 698.622 95.782C698.65 95.941 698.687 96.089 698.718 96.246C698.875 96.992 699.068 97.689 699.302 98.337C699.347 98.464 699.391 98.594 699.44 98.718C700.04 100.231 700.865 101.478 701.964 102.469C702.264 102.738 702.587 102.987 702.926 103.22H679.437C679.394 102.969 679.344 102.727 679.306 102.471H679.305C679.305 102.467 679.305 102.462 679.304 102.459C679.26 102.17 679.237 101.854 679.199 101.558C679.084 100.634 678.996 99.671 678.935 98.674C678.909 98.258 678.879 97.845 678.862 97.419C678.816 96.174 678.805 94.876 678.833 93.518C678.841 93.114 678.862 92.69 678.877 92.276C678.921 91.042 678.992 89.765 679.093 88.441C679.118 88.109 679.135 87.79 679.163 87.452C679.3 85.836 679.484 84.137 679.699 82.382C679.751 81.957 679.808 81.518 679.864 81.084C680.105 79.238 680.37 77.344 680.688 75.346C681.046 73.067 681.424 70.889 681.82 68.808C687.041 41.397 695.81 30.748 717.268 28.554C720.251 28.25 723.472 28.103 726.971 28.103C726.972 28.103 726.973 28.103 726.973 28.103C747.995 28.103 757.681 33.202 759.812 48.236C760.78 55.067 760.188 63.953 758.39 75.346ZM894.023 31.336L866.924 108.56C863.473 118.182 861.114 121.41 854.5 122.41C852.38 122.733 849.832 122.828 846.66 122.828C831.671 122.828 830.351 121.267 829.393 108.56L825.794 63.232V63.231L807.929 108.56C804.256 117.613 802.201 120.996 795.961 122.202C793.442 122.687 790.261 122.829 785.986 122.829C772.915 122.829 770.757 121.267 770.397 108.56L767.638 31.337C767.638 29.899 768.238 29.417 769.557 29.417H785.385C786.464 29.417 786.705 29.899 786.825 31.337L788.896 100.572V100.571C789.055 103.091 789.564 103.641 791.022 103.641C792.94 103.641 793.42 103.042 794.619 100.043L820.759 34.576C821.359 33.132 822.438 32.657 823.517 32.657H837.666C838.52 32.657 839.28 32.977 839.627 33.817C839.719 34.038 839.8 34.274 839.825 34.576L845.221 100.043C845.461 103.042 845.82 103.641 847.739 103.641C849.298 103.641 849.897 103.042 850.977 100.043L874.839 31.336C875.318 29.898 875.678 29.417 876.757 29.417H892.585C893.904 29.417 894.383 29.898 894.023 31.336ZM362.709 31.219L357.193 120.311C357.193 121.632 356.354 122.23 355.155 122.23H339.927C338.727 122.23 338.367 121.632 338.367 120.311L342.325 62.756L311.987 117.551C311.387 118.749 310.429 119.348 309.23 119.348H297.838C296.759 119.348 296.039 118.749 295.561 117.551L282.852 62.767L282.849 62.755L268.34 120.31C268.213 121.009 267.975 121.492 267.613 121.807C267.289 122.085 266.866 122.23 266.302 122.23H251.074C249.875 122.23 249.274 121.632 249.515 120.31L272.297 31.336C272.538 30.138 272.898 29.417 274.096 29.417H288.606C291.237 29.417 292.727 29.895 293.683 31.379C294.121 32.059 294.458 32.928 294.721 34.095L307.791 92.489L339.327 34.095C341.486 30.256 343.044 29.299 346.881 29.299H361.39C362.377 29.299 362.683 30.684 362.683 30.684C362.683 30.684 362.709 31.029 362.709 31.219ZM501.707 31.219L499.668 44.049C499.548 45.246 498.709 45.845 497.51 45.845H472.449L460.697 120.31C460.458 121.632 459.739 122.23 458.539 122.23H443.31C442.112 122.23 441.632 121.632 441.871 120.31L453.623 45.845H394.821L391.225 68.507V68.508H430.556C431.755 68.508 432.354 69.106 432.235 70.31L430.197 82.542C430.077 83.738 429.237 84.338 428.039 84.338H388.707L385.35 105.801H428.398C429.597 105.801 430.077 106.4 429.956 107.597L427.798 120.428C427.677 121.632 426.959 122.23 425.76 122.23H365.684C364.485 122.23 364.005 121.632 364.125 120.31L378.274 31.219C378.394 30.015 379.113 29.417 380.314 29.417H500.148C501.347 29.417 501.827 30.015 501.707 31.219ZM629.471 70.426L627.434 82.659C627.314 83.856 626.474 84.454 625.276 84.454H588.224L582.466 120.311C582.347 121.632 581.628 122.23 580.429 122.23H565.201C564.002 122.23 563.523 121.632 563.641 120.311L577.791 31.219C577.911 30.016 578.629 29.417 579.828 29.417H643.005C644.203 29.417 644.802 30.016 644.682 31.219L642.645 44.05C642.404 45.247 641.686 45.846 640.487 45.846H594.338L590.742 68.631H627.794C628.992 68.631 629.592 69.23 629.471 70.426ZM388.707 84.338H388.713L388.31 86.876L388.707 84.338ZM510.727 79.783L524.397 48.006C525.037 46.466 525.444 45.589 525.991 45.096C526.466 44.667 527.045 44.525 527.994 44.525C530.392 44.525 530.392 45.124 530.752 48.006L534.349 79.783H510.727ZM542.335 29.886C539.757 28.905 536.044 28.702 530.512 28.702C516.602 28.702 513.964 30.016 508.209 43.087L474.634 120.311C474.155 121.749 474.514 122.23 475.833 122.23H491.061C492.26 122.23 492.501 121.749 493.1 120.311L504.012 95.372H536.026L539.025 120.311C539.145 121.749 539.145 122.23 540.345 122.23H555.573C556.892 122.23 557.491 121.749 557.491 120.311L548.617 43.087C547.658 35.042 546.461 31.458 542.335 29.886Z");
        attr$6(path1, "fill", "white");
        attr$6(svg, "width", "895");
        attr$6(svg, "height", "151");
        attr$6(svg, "viewBox", "0 0 895 151");
        attr$6(svg, "fill", "none");
        attr$6(svg, "xmlns", "http://www.w3.org/2000/svg");
      },
      m(target2, anchor) {
        insert$1(target2, svg, anchor);
        append$2(svg, path0);
        append$2(svg, path1);
      },
      d(detaching) {
        if (detaching) {
          detach(svg);
        }
      }
    };
  }
  function create_fragment$T(ctx) {
    let if_block_anchor;
    function select_block_type(ctx2, dirty) {
      if (
        /*light*/
        ctx2[0]
      ) return create_if_block$n;
      return create_else_block$b;
    }
    let current_block_type = select_block_type(ctx);
    let if_block = current_block_type(ctx);
    return {
      c() {
        if_block.c();
        if_block_anchor = empty();
      },
      m(target2, anchor) {
        if_block.m(target2, anchor);
        insert$1(target2, if_block_anchor, anchor);
      },
      p(ctx2, [dirty]) {
        if (current_block_type !== (current_block_type = select_block_type(ctx2))) {
          if_block.d(1);
          if_block = current_block_type(ctx2);
          if (if_block) {
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        }
      },
      i: noop$5,
      o: noop$5,
      d(detaching) {
        if (detaching) {
          detach(if_block_anchor);
        }
        if_block.d(detaching);
      }
    };
  }
  function instance$S($$self, $$props, $$invalidate) {
    let { light = false } = $$props;
    $$self.$$set = ($$props2) => {
      if ("light" in $$props2) $$invalidate(0, light = $$props2.light);
    };
    return [light];
  }
  class Logo extends SvelteComponent {
    constructor(options) {
      super();
      init$1(this, options, instance$S, create_fragment$T, safe_not_equal, { light: 0 });
    }
  }
  function create_fragment$S(ctx) {
    let aside;
    let div1;
    let div0;
    let logo;
    let t;
    let current2;
    logo = new Logo({});
    const default_slot_template = (
      /*#slots*/
      ctx[1].default
    );
    const default_slot = create_slot(
      default_slot_template,
      ctx,
      /*$$scope*/
      ctx[0],
      null
    );
    return {
      c() {
        aside = element$2("aside");
        div1 = element$2("div");
        div0 = element$2("div");
        create_component(logo.$$.fragment);
        t = space();
        if (default_slot) default_slot.c();
        attr$6(div0, "class", "logoContainer");
        attr$6(aside, "class", "svelte-1okdv0e");
      },
      m(target2, anchor) {
        insert$1(target2, aside, anchor);
        append$2(aside, div1);
        append$2(div1, div0);
        mount_component(logo, div0, null);
        append$2(div1, t);
        if (default_slot) {
          default_slot.m(div1, null);
        }
        current2 = true;
      },
      p(ctx2, [dirty]) {
        if (default_slot) {
          if (default_slot.p && (!current2 || dirty & /*$$scope*/
          1)) {
            update_slot_base(
              default_slot,
              default_slot_template,
              ctx2,
              /*$$scope*/
              ctx2[0],
              !current2 ? get_all_dirty_from_scope(
                /*$$scope*/
                ctx2[0]
              ) : get_slot_changes(
                default_slot_template,
                /*$$scope*/
                ctx2[0],
                dirty,
                null
              ),
              null
            );
          }
        }
      },
      i(local) {
        if (current2) return;
        transition_in(logo.$$.fragment, local);
        transition_in(default_slot, local);
        current2 = true;
      },
      o(local) {
        transition_out(logo.$$.fragment, local);
        transition_out(default_slot, local);
        current2 = false;
      },
      d(detaching) {
        if (detaching) {
          detach(aside);
        }
        destroy_component(logo);
        if (default_slot) default_slot.d(detaching);
      }
    };
  }
  function instance$R($$self, $$props, $$invalidate) {
    let { $$slots: slots = {}, $$scope } = $$props;
    $$self.$$set = ($$props2) => {
      if ("$$scope" in $$props2) $$invalidate(0, $$scope = $$props2.$$scope);
    };
    return [$$scope, slots];
  }
  class Aside extends SvelteComponent {
    constructor(options) {
      super();
      init$1(this, options, instance$R, create_fragment$S, safe_not_equal, {});
    }
  }
  function create_if_block$m(ctx) {
    let td;
    let t;
    return {
      c() {
        td = element$2("td");
        t = text$3(
          /*id*/
          ctx[0]
        );
        attr$6(td, "class", "idCell svelte-pt8vzv");
        attr$6(td, "data-component", "artifact-row");
      },
      m(target2, anchor) {
        insert$1(target2, td, anchor);
        append$2(td, t);
      },
      p(ctx2, dirty) {
        if (dirty & /*id*/
        1) set_data(
          t,
          /*id*/
          ctx2[0]
        );
      },
      d(detaching) {
        if (detaching) {
          detach(td);
        }
      }
    };
  }
  function create_fragment$R(ctx) {
    let tr2;
    let t02;
    let td;
    let code;
    let t1_value = (
      /*artifact*/
      ctx[1].data + ""
    );
    let t12;
    let td_colspan_value;
    let if_block = (
      /*id*/
      ctx[0] !== null && create_if_block$m(ctx)
    );
    return {
      c() {
        tr2 = element$2("tr");
        if (if_block) if_block.c();
        t02 = space();
        td = element$2("td");
        code = element$2("code");
        t12 = text$3(t1_value);
        attr$6(code, "class", "mono");
        attr$6(td, "class", "codeCell svelte-pt8vzv");
        attr$6(td, "colspan", td_colspan_value = /*id*/
        ctx[0] === null ? 2 : 1);
        attr$6(td, "data-component", "artifact-row");
      },
      m(target2, anchor) {
        insert$1(target2, tr2, anchor);
        if (if_block) if_block.m(tr2, null);
        append$2(tr2, t02);
        append$2(tr2, td);
        append$2(td, code);
        append$2(code, t12);
        ctx[3](code);
      },
      p(ctx2, [dirty]) {
        if (
          /*id*/
          ctx2[0] !== null
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block$m(ctx2);
            if_block.c();
            if_block.m(tr2, t02);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
        if (dirty & /*artifact*/
        2 && t1_value !== (t1_value = /*artifact*/
        ctx2[1].data + "")) set_data(t12, t1_value);
        if (dirty & /*id*/
        1 && td_colspan_value !== (td_colspan_value = /*id*/
        ctx2[0] === null ? 2 : 1)) {
          attr$6(td, "colspan", td_colspan_value);
        }
      },
      i: noop$5,
      o: noop$5,
      d(detaching) {
        if (detaching) {
          detach(tr2);
        }
        if (if_block) if_block.d();
        ctx[3](null);
      }
    };
  }
  function instance$Q($$self, $$props, $$invalidate) {
    let { id: id2 } = $$props;
    let { artifact } = $$props;
    let el;
    function highlightCode() {
      var _a2;
      if (el && !el.classList.contains("language-python")) {
        if (typeof window !== "undefined") {
          (_a2 = window == null ? void 0 : window.Prism) == null ? void 0 : _a2.highlightElement(el);
        }
      }
    }
    function code_binding($$value) {
      binding_callbacks[$$value ? "unshift" : "push"](() => {
        el = $$value;
        $$invalidate(2, el);
      });
    }
    $$self.$$set = ($$props2) => {
      if ("id" in $$props2) $$invalidate(0, id2 = $$props2.id);
      if ("artifact" in $$props2) $$invalidate(1, artifact = $$props2.artifact);
    };
    $$self.$$.update = () => {
      if ($$self.$$.dirty & /*el*/
      4) {
        el ? highlightCode() : null;
      }
    };
    return [id2, artifact, el, code_binding];
  }
  class Artifact_row extends SvelteComponent {
    constructor(options) {
      super();
      init$1(this, options, instance$Q, create_fragment$R, safe_not_equal, { id: 0, artifact: 1 });
    }
  }
  function get_each_context$9(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[2] = list[i];
    return child_ctx;
  }
  function create_each_block$9(ctx) {
    let artifactrow;
    let current2;
    artifactrow = new Artifact_row({
      props: {
        id: (
          /*artifact*/
          ctx[2].name
        ),
        artifact: (
          /*artifact*/
          ctx[2]
        )
      }
    });
    return {
      c() {
        create_component(artifactrow.$$.fragment);
      },
      m(target2, anchor) {
        mount_component(artifactrow, target2, anchor);
        current2 = true;
      },
      p: noop$5,
      i(local) {
        if (current2) return;
        transition_in(artifactrow.$$.fragment, local);
        current2 = true;
      },
      o(local) {
        transition_out(artifactrow.$$.fragment, local);
        current2 = false;
      },
      d(detaching) {
        destroy_component(artifactrow, detaching);
      }
    };
  }
  function create_fragment$Q(ctx) {
    let div;
    let table;
    let current2;
    let each_value = ensure_array_like(
      /*sortedData*/
      ctx[0]
    );
    let each_blocks = [];
    for (let i = 0; i < each_value.length; i += 1) {
      each_blocks[i] = create_each_block$9(get_each_context$9(ctx, each_value, i));
    }
    const out = (i) => transition_out(each_blocks[i], 1, 1, () => {
      each_blocks[i] = null;
    });
    return {
      c() {
        div = element$2("div");
        table = element$2("table");
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        attr$6(table, "class", "language-python svelte-ubs992");
        attr$6(div, "class", "container svelte-ubs992");
        attr$6(div, "data-component", "artifacts");
      },
      m(target2, anchor) {
        insert$1(target2, div, anchor);
        append$2(div, table);
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(table, null);
          }
        }
        current2 = true;
      },
      p(ctx2, [dirty]) {
        if (dirty & /*sortedData*/
        1) {
          each_value = ensure_array_like(
            /*sortedData*/
            ctx2[0]
          );
          let i;
          for (i = 0; i < each_value.length; i += 1) {
            const child_ctx = get_each_context$9(ctx2, each_value, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
              transition_in(each_blocks[i], 1);
            } else {
              each_blocks[i] = create_each_block$9(child_ctx);
              each_blocks[i].c();
              transition_in(each_blocks[i], 1);
              each_blocks[i].m(table, null);
            }
          }
          group_outros();
          for (i = each_value.length; i < each_blocks.length; i += 1) {
            out(i);
          }
          check_outros();
        }
      },
      i(local) {
        if (current2) return;
        for (let i = 0; i < each_value.length; i += 1) {
          transition_in(each_blocks[i]);
        }
        current2 = true;
      },
      o(local) {
        each_blocks = each_blocks.filter(Boolean);
        for (let i = 0; i < each_blocks.length; i += 1) {
          transition_out(each_blocks[i]);
        }
        current2 = false;
      },
      d(detaching) {
        if (detaching) {
          detach(div);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function instance$P($$self, $$props, $$invalidate) {
    let { componentData } = $$props;
    const sortedData = componentData == null ? void 0 : componentData.data.sort((a2, b2) => {
      if (a2.name && b2.name) {
        if (a2.name > b2.name) {
          return 1;
        } else if (a2.name < b2.name) {
          return -1;
        }
      }
      return 0;
    });
    $$self.$$set = ($$props2) => {
      if ("componentData" in $$props2) $$invalidate(1, componentData = $$props2.componentData);
    };
    return [sortedData, componentData];
  }
  class Artifacts extends SvelteComponent {
    constructor(options) {
      super();
      init$1(this, options, instance$P, create_fragment$Q, safe_not_equal, { componentData: 1 });
    }
  }
  function create_else_block$a(ctx) {
    let div0;
    let t;
    let div1;
    return {
      c() {
        div0 = element$2("div");
        t = space();
        div1 = element$2("div");
        attr$6(div0, "class", "path topLeft svelte-19jpdwh");
        attr$6(div1, "class", "path bottomRight svelte-19jpdwh");
      },
      m(target2, anchor) {
        insert$1(target2, div0, anchor);
        insert$1(target2, t, anchor);
        insert$1(target2, div1, anchor);
      },
      d(detaching) {
        if (detaching) {
          detach(div0);
          detach(t);
          detach(div1);
        }
      }
    };
  }
  function create_if_block_1$a(ctx) {
    let div;
    return {
      c() {
        div = element$2("div");
        attr$6(div, "class", "path straightLine svelte-19jpdwh");
      },
      m(target2, anchor) {
        insert$1(target2, div, anchor);
      },
      d(detaching) {
        if (detaching) {
          detach(div);
        }
      }
    };
  }
  function create_if_block$l(ctx) {
    let div;
    return {
      c() {
        div = element$2("div");
        attr$6(div, "class", "path loop svelte-19jpdwh");
      },
      m(target2, anchor) {
        insert$1(target2, div, anchor);
      },
      d(detaching) {
        if (detaching) {
          detach(div);
        }
      }
    };
  }
  function create_fragment$P(ctx) {
    let div;
    function select_block_type(ctx2, dirty) {
      if (
        /*isLoop*/
        ctx2[6]
      ) return create_if_block$l;
      if (
        /*straightLine*/
        ctx2[5]
      ) return create_if_block_1$a;
      return create_else_block$a;
    }
    let current_block_type = select_block_type(ctx);
    let if_block = current_block_type(ctx);
    return {
      c() {
        div = element$2("div");
        if_block.c();
        attr$6(div, "class", "connectorwrapper svelte-19jpdwh");
        set_style(
          div,
          "top",
          /*top*/
          ctx[1] + "rem"
        );
        set_style(
          div,
          "left",
          /*left*/
          ctx[0] + "rem"
        );
        set_style(
          div,
          "width",
          /*width*/
          ctx[3] + "rem"
        );
        set_style(
          div,
          "height",
          /*height*/
          ctx[4] + "rem"
        );
        toggle_class(
          div,
          "flip",
          /*shouldFlip*/
          ctx[2]
        );
      },
      m(target2, anchor) {
        insert$1(target2, div, anchor);
        if_block.m(div, null);
      },
      p(ctx2, [dirty]) {
        if (current_block_type !== (current_block_type = select_block_type(ctx2))) {
          if_block.d(1);
          if_block = current_block_type(ctx2);
          if (if_block) {
            if_block.c();
            if_block.m(div, null);
          }
        }
        if (dirty & /*top*/
        2) {
          set_style(
            div,
            "top",
            /*top*/
            ctx2[1] + "rem"
          );
        }
        if (dirty & /*left*/
        1) {
          set_style(
            div,
            "left",
            /*left*/
            ctx2[0] + "rem"
          );
        }
        if (dirty & /*width*/
        8) {
          set_style(
            div,
            "width",
            /*width*/
            ctx2[3] + "rem"
          );
        }
        if (dirty & /*height*/
        16) {
          set_style(
            div,
            "height",
            /*height*/
            ctx2[4] + "rem"
          );
        }
        if (dirty & /*shouldFlip*/
        4) {
          toggle_class(
            div,
            "flip",
            /*shouldFlip*/
            ctx2[2]
          );
        }
      },
      i: noop$5,
      o: noop$5,
      d(detaching) {
        if (detaching) {
          detach(div);
        }
        if_block.d();
      }
    };
  }
  const strokeWidth = 0.5;
  function instance$O($$self, $$props, $$invalidate) {
    let { top = 0 } = $$props;
    let { left = 0 } = $$props;
    let { bottom = 0 } = $$props;
    let { right = 0 } = $$props;
    let shouldFlip;
    let width2;
    let height2;
    let straightLine = false;
    let isLoop = false;
    $$self.$$set = ($$props2) => {
      if ("top" in $$props2) $$invalidate(1, top = $$props2.top);
      if ("left" in $$props2) $$invalidate(0, left = $$props2.left);
      if ("bottom" in $$props2) $$invalidate(8, bottom = $$props2.bottom);
      if ("right" in $$props2) $$invalidate(7, right = $$props2.right);
    };
    $$self.$$.update = () => {
      if ($$self.$$.dirty & /*right, left, width, shouldFlip, bottom, top, height*/
      415) {
        {
          $$invalidate(2, shouldFlip = right - left < 0);
          $$invalidate(3, width2 = Math.abs(right - left));
          if (width2 <= strokeWidth) {
            $$invalidate(3, width2 = strokeWidth);
            $$invalidate(5, straightLine = true);
            $$invalidate(0, left -= strokeWidth / 2);
          } else {
            if (shouldFlip) {
              $$invalidate(0, left += strokeWidth / 2);
              $$invalidate(7, right -= strokeWidth / 2);
            } else {
              $$invalidate(0, left -= strokeWidth / 2);
              $$invalidate(7, right += strokeWidth / 2);
            }
            $$invalidate(3, width2 = Math.abs(right - left));
          }
          $$invalidate(4, height2 = bottom - top);
          if (height2 < 0) {
            $$invalidate(6, isLoop = true);
            $$invalidate(4, height2 = 5.5);
            $$invalidate(3, width2 = 10.25);
          }
        }
      }
    };
    return [left, top, shouldFlip, width2, height2, straightLine, isLoop, right, bottom];
  }
  class Connector extends SvelteComponent {
    constructor(options) {
      super();
      init$1(this, options, instance$O, create_fragment$P, safe_not_equal, { top: 1, left: 0, bottom: 8, right: 7 });
    }
  }
  function get_each_context$8(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[3] = list[i];
    return child_ctx;
  }
  function create_each_block$8(ctx) {
    let connector_1;
    let current2;
    connector_1 = new Connector({
      props: {
        top: convertPixelsToRem(
          /*connector*/
          ctx[3].top
        ),
        left: convertPixelsToRem(
          /*connector*/
          ctx[3].left
        ),
        bottom: convertPixelsToRem(
          /*connector*/
          ctx[3].bottom
        ),
        right: convertPixelsToRem(
          /*connector*/
          ctx[3].right
        )
      }
    });
    return {
      c() {
        create_component(connector_1.$$.fragment);
      },
      m(target2, anchor) {
        mount_component(connector_1, target2, anchor);
        current2 = true;
      },
      p(ctx2, dirty) {
        const connector_1_changes = {};
        if (dirty & /*connectors*/
        1) connector_1_changes.top = convertPixelsToRem(
          /*connector*/
          ctx2[3].top
        );
        if (dirty & /*connectors*/
        1) connector_1_changes.left = convertPixelsToRem(
          /*connector*/
          ctx2[3].left
        );
        if (dirty & /*connectors*/
        1) connector_1_changes.bottom = convertPixelsToRem(
          /*connector*/
          ctx2[3].bottom
        );
        if (dirty & /*connectors*/
        1) connector_1_changes.right = convertPixelsToRem(
          /*connector*/
          ctx2[3].right
        );
        connector_1.$set(connector_1_changes);
      },
      i(local) {
        if (current2) return;
        transition_in(connector_1.$$.fragment, local);
        current2 = true;
      },
      o(local) {
        transition_out(connector_1.$$.fragment, local);
        current2 = false;
      },
      d(detaching) {
        destroy_component(connector_1, detaching);
      }
    };
  }
  function create_fragment$O(ctx) {
    let each_1_anchor;
    let current2;
    let each_value = ensure_array_like(
      /*connectors*/
      ctx[0]
    );
    let each_blocks = [];
    for (let i = 0; i < each_value.length; i += 1) {
      each_blocks[i] = create_each_block$8(get_each_context$8(ctx, each_value, i));
    }
    const out = (i) => transition_out(each_blocks[i], 1, 1, () => {
      each_blocks[i] = null;
    });
    return {
      c() {
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        each_1_anchor = empty();
      },
      m(target2, anchor) {
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(target2, anchor);
          }
        }
        insert$1(target2, each_1_anchor, anchor);
        current2 = true;
      },
      p(ctx2, [dirty]) {
        if (dirty & /*connectors*/
        1) {
          each_value = ensure_array_like(
            /*connectors*/
            ctx2[0]
          );
          let i;
          for (i = 0; i < each_value.length; i += 1) {
            const child_ctx = get_each_context$8(ctx2, each_value, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
              transition_in(each_blocks[i], 1);
            } else {
              each_blocks[i] = create_each_block$8(child_ctx);
              each_blocks[i].c();
              transition_in(each_blocks[i], 1);
              each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
            }
          }
          group_outros();
          for (i = each_value.length; i < each_blocks.length; i += 1) {
            out(i);
          }
          check_outros();
        }
      },
      i(local) {
        if (current2) return;
        for (let i = 0; i < each_value.length; i += 1) {
          transition_in(each_blocks[i]);
        }
        current2 = true;
      },
      o(local) {
        each_blocks = each_blocks.filter(Boolean);
        for (let i = 0; i < each_blocks.length; i += 1) {
          transition_out(each_blocks[i]);
        }
        current2 = false;
      },
      d(detaching) {
        if (detaching) {
          detach(each_1_anchor);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function instance$N($$self, $$props, $$invalidate) {
    let { dagStructure } = $$props;
    let { container } = $$props;
    let connectors = [];
    $$self.$$set = ($$props2) => {
      if ("dagStructure" in $$props2) $$invalidate(1, dagStructure = $$props2.dagStructure);
      if ("container" in $$props2) $$invalidate(2, container = $$props2.container);
    };
    $$self.$$.update = () => {
      if ($$self.$$.dirty & /*container, dagStructure, connectors*/
      7) {
        {
          $$invalidate(0, connectors = []);
          if (container) {
            const containerBox = container.getBoundingClientRect();
            const top = containerBox.top;
            const left = containerBox.left;
            Object.values(dagStructure).forEach((nodeData) => {
              var _a2;
              const nodeRect = nodeData.node.getBoundingClientRect();
              (_a2 = nodeData.connections) == null ? void 0 : _a2.forEach((str) => {
                const connectionNode = dagStructure[str];
                if (!connectionNode) {
                  console.warn("Connection node not found:", str);
                  return;
                }
                const connectionRect = connectionNode.node.getBoundingClientRect();
                const newConnectorData = {
                  top: nodeRect.bottom - top,
                  left: nodeRect.left - left + nodeRect.width / 2,
                  bottom: connectionRect.top - top,
                  right: connectionRect.left - left + connectionRect.width / 2
                };
                $$invalidate(0, connectors = [...connectors, newConnectorData]);
              });
            });
          }
        }
      }
    };
    return [connectors, dagStructure, container];
  }
  class Connectors extends SvelteComponent {
    constructor(options) {
      super();
      init$1(this, options, instance$N, create_fragment$O, safe_not_equal, { dagStructure: 1, container: 2 });
    }
  }
  const currentStepContext = "currentStep";
  function get_each_context$7(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[16] = list[i];
    child_ctx[18] = i;
    return child_ctx;
  }
  function create_if_block$k(ctx) {
    let div;
    let t02;
    let t12;
    return {
      c() {
        div = element$2("div");
        t02 = text$3("x");
        t12 = text$3(
          /*levelsToShow*/
          ctx[6]
        );
        attr$6(div, "class", "levelstoshow svelte-117ceti");
      },
      m(target2, anchor) {
        insert$1(target2, div, anchor);
        append$2(div, t02);
        append$2(div, t12);
      },
      p(ctx2, dirty) {
        if (dirty & /*levelsToShow*/
        64) set_data(
          t12,
          /*levelsToShow*/
          ctx2[6]
        );
      },
      d(detaching) {
        if (detaching) {
          detach(div);
        }
      }
    };
  }
  function create_each_block$7(ctx) {
    let div;
    let div_class_value;
    return {
      c() {
        div = element$2("div");
        attr$6(div, "class", div_class_value = "level rectangle " + /*statusClass*/
        ctx[16] + " svelte-117ceti");
        set_style(
          div,
          "z-index",
          /*i*/
          (ctx[18] + 1) * -1
        );
        set_style(
          div,
          "top",
          /*i*/
          (ctx[18] + 1) * offset$4 + "px"
        );
        set_style(
          div,
          "left",
          /*i*/
          (ctx[18] + 1) * offset$4 + "px"
        );
      },
      m(target2, anchor) {
        insert$1(target2, div, anchor);
      },
      p(ctx2, dirty) {
        if (dirty & /*levels*/
        128 && div_class_value !== (div_class_value = "level rectangle " + /*statusClass*/
        ctx2[16] + " svelte-117ceti")) {
          attr$6(div, "class", div_class_value);
        }
      },
      d(detaching) {
        if (detaching) {
          detach(div);
        }
      }
    };
  }
  function create_fragment$N(ctx) {
    let div3;
    let t02;
    let div2;
    let div1;
    let span2;
    let t12;
    let t22;
    let div0;
    let t3_value = (
      /*step*/
      ctx[2].doc + ""
    );
    let t32;
    let div0_title_value;
    let t4;
    let if_block = (
      /*levelsToShow*/
      ctx[6] && create_if_block$k(ctx)
    );
    let each_value = ensure_array_like(
      /*levels*/
      ctx[7]
    );
    let each_blocks = [];
    for (let i = 0; i < each_value.length; i += 1) {
      each_blocks[i] = create_each_block$7(get_each_context$7(ctx, each_value, i));
    }
    return {
      c() {
        div3 = element$2("div");
        if (if_block) if_block.c();
        t02 = space();
        div2 = element$2("div");
        div1 = element$2("div");
        span2 = element$2("span");
        t12 = text$3(
          /*name*/
          ctx[1]
        );
        t22 = space();
        div0 = element$2("div");
        t32 = text$3(t3_value);
        t4 = space();
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        attr$6(span2, "class", "name svelte-117ceti");
        attr$6(div0, "class", "description svelte-117ceti");
        attr$6(div0, "title", div0_title_value = /*overflown*/
        ctx[9] ? (
          /*step*/
          ctx[2].doc
        ) : void 0);
        toggle_class(
          div0,
          "overflown",
          /*overflown*/
          ctx[9]
        );
        attr$6(div1, "class", "inner svelte-117ceti");
        attr$6(div2, "class", "step rectangle svelte-117ceti");
        toggle_class(
          div2,
          "success",
          /*success*/
          ctx[3]
        );
        toggle_class(
          div2,
          "running",
          /*running*/
          ctx[5]
        );
        toggle_class(
          div2,
          "error",
          /*error*/
          ctx[4]
        );
        attr$6(div3, "class", "wrapper svelte-117ceti");
        toggle_class(
          div3,
          "current",
          /*current*/
          ctx[10]
        );
      },
      m(target2, anchor) {
        insert$1(target2, div3, anchor);
        if (if_block) if_block.m(div3, null);
        append$2(div3, t02);
        append$2(div3, div2);
        append$2(div2, div1);
        append$2(div1, span2);
        append$2(span2, t12);
        append$2(div1, t22);
        append$2(div1, div0);
        append$2(div0, t32);
        ctx[12](div0);
        ctx[13](div2);
        append$2(div3, t4);
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(div3, null);
          }
        }
      },
      p(ctx2, [dirty]) {
        if (
          /*levelsToShow*/
          ctx2[6]
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block$k(ctx2);
            if_block.c();
            if_block.m(div3, t02);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
        if (dirty & /*name*/
        2) set_data(
          t12,
          /*name*/
          ctx2[1]
        );
        if (dirty & /*step*/
        4 && t3_value !== (t3_value = /*step*/
        ctx2[2].doc + "")) set_data(t32, t3_value);
        if (dirty & /*overflown, step*/
        516 && div0_title_value !== (div0_title_value = /*overflown*/
        ctx2[9] ? (
          /*step*/
          ctx2[2].doc
        ) : void 0)) {
          attr$6(div0, "title", div0_title_value);
        }
        if (dirty & /*overflown*/
        512) {
          toggle_class(
            div0,
            "overflown",
            /*overflown*/
            ctx2[9]
          );
        }
        if (dirty & /*success*/
        8) {
          toggle_class(
            div2,
            "success",
            /*success*/
            ctx2[3]
          );
        }
        if (dirty & /*running*/
        32) {
          toggle_class(
            div2,
            "running",
            /*running*/
            ctx2[5]
          );
        }
        if (dirty & /*error*/
        16) {
          toggle_class(
            div2,
            "error",
            /*error*/
            ctx2[4]
          );
        }
        if (dirty & /*levels, offset*/
        128) {
          each_value = ensure_array_like(
            /*levels*/
            ctx2[7]
          );
          let i;
          for (i = 0; i < each_value.length; i += 1) {
            const child_ctx = get_each_context$7(ctx2, each_value, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
            } else {
              each_blocks[i] = create_each_block$7(child_ctx);
              each_blocks[i].c();
              each_blocks[i].m(div3, null);
            }
          }
          for (; i < each_blocks.length; i += 1) {
            each_blocks[i].d(1);
          }
          each_blocks.length = each_value.length;
        }
      },
      i: noop$5,
      o: noop$5,
      d(detaching) {
        if (detaching) {
          detach(div3);
        }
        if (if_block) if_block.d();
        ctx[12](null);
        ctx[13](null);
        destroy_each(each_blocks, detaching);
      }
    };
  }
  const offset$4 = 4;
  const numPerLevel = 3;
  function instance$M($$self, $$props, $$invalidate) {
    let { name } = $$props;
    let { step } = $$props;
    let { numLevels = 0 } = $$props;
    let { el } = $$props;
    let success = false;
    let error2 = false;
    let running = false;
    let levelsToShow;
    const levelCutoffs = { 3: 3, 100: 4, 1e3: 5, 1e4: 6 };
    let levels2 = [];
    if (step.num_possible_tasks) {
      if (step.num_possible_tasks > 1) {
        levelsToShow = new Intl.NumberFormat().format(step.num_possible_tasks);
      }
      numLevels = step.num_possible_tasks - 1;
      Object.keys(levelCutoffs).forEach((cutoff) => {
        const cutoffNumber = Number.parseInt(cutoff);
        if (step.num_possible_tasks && step.num_possible_tasks > cutoffNumber) {
          $$invalidate(11, numLevels = levelCutoffs[cutoffNumber]);
        }
      });
    } else {
      numLevels *= numPerLevel;
    }
    if (numLevels > 0) {
      levels2 = new Array(numLevels).fill("");
    }
    levels2 = levels2.map((_, i) => {
      if (step.num_possible_tasks) {
        const numFailed = step.num_failed ?? 0;
        const numSuccessful = step.successful_tasks ?? 0;
        if ((numFailed - 1) / step.num_possible_tasks >= (i + 1) / levels2.length) {
          return "error";
        }
        if ((numFailed + numSuccessful) / step.num_possible_tasks >= (i + 1) / levels2.length) {
          return "success";
        } else {
          return "running";
        }
      }
      return "";
    });
    const currentStep = getContext$1(currentStepContext);
    const current2 = name === currentStep;
    if (step.failed || step.num_failed) {
      error2 = true;
    } else {
      if ((step.num_possible_tasks ?? 0) > (step.successful_tasks ?? 0)) {
        running = true;
      } else {
        if (step.num_possible_tasks && step.num_possible_tasks === step.successful_tasks) {
          success = true;
        }
      }
    }
    let descriptionEl;
    let overflown = false;
    onMount(() => {
      $$invalidate(9, overflown = isOverflown(descriptionEl));
    });
    function div0_binding($$value) {
      binding_callbacks[$$value ? "unshift" : "push"](() => {
        descriptionEl = $$value;
        $$invalidate(8, descriptionEl);
      });
    }
    function div2_binding($$value) {
      binding_callbacks[$$value ? "unshift" : "push"](() => {
        el = $$value;
        $$invalidate(0, el);
      });
    }
    $$self.$$set = ($$props2) => {
      if ("name" in $$props2) $$invalidate(1, name = $$props2.name);
      if ("step" in $$props2) $$invalidate(2, step = $$props2.step);
      if ("numLevels" in $$props2) $$invalidate(11, numLevels = $$props2.numLevels);
      if ("el" in $$props2) $$invalidate(0, el = $$props2.el);
    };
    return [
      el,
      name,
      step,
      success,
      error2,
      running,
      levelsToShow,
      levels2,
      descriptionEl,
      overflown,
      current2,
      numLevels,
      div0_binding,
      div2_binding
    ];
  }
  let Step$1 = class Step extends SvelteComponent {
    constructor(options) {
      super();
      init$1(this, options, instance$M, create_fragment$N, safe_not_equal, { name: 1, step: 2, numLevels: 11, el: 0 });
    }
  };
  function get_each_context$6(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[13] = list[i];
    return child_ctx;
  }
  function create_if_block$j(ctx) {
    let div;
    let step;
    let updating_el;
    let t02;
    let t12;
    let t22;
    let current2;
    function step_el_binding(value2) {
      ctx[11](value2);
    }
    let step_props = {
      name: (
        /*stepName*/
        ctx[2]
      ),
      numLevels: (
        /*levels*/
        ctx[3]
      ),
      step: (
        /*currentStep*/
        ctx[7]
      )
    };
    if (
      /*stepElement*/
      ctx[5] !== void 0
    ) {
      step_props.el = /*stepElement*/
      ctx[5];
    }
    step = new Step$1({ props: step_props });
    binding_callbacks.push(() => bind$2(step, "el", step_el_binding));
    let if_block0 = (
      /*hasNext*/
      ctx[8] && create_if_block_3$2(ctx)
    );
    let if_block1 = (
      /*currentStep*/
      ctx[7].box_ends && create_if_block_2$3(ctx)
    );
    let if_block2 = (
      /*stepName*/
      ctx[2] === "start" && create_if_block_1$9(ctx)
    );
    return {
      c() {
        div = element$2("div");
        create_component(step.$$.fragment);
        t02 = space();
        if (if_block0) if_block0.c();
        t12 = space();
        if (if_block1) if_block1.c();
        t22 = space();
        if (if_block2) if_block2.c();
        attr$6(div, "class", "stepwrapper svelte-18aex7a");
      },
      m(target2, anchor) {
        insert$1(target2, div, anchor);
        mount_component(step, div, null);
        append$2(div, t02);
        if (if_block0) if_block0.m(div, null);
        append$2(div, t12);
        if (if_block1) if_block1.m(div, null);
        append$2(div, t22);
        if (if_block2) if_block2.m(div, null);
        current2 = true;
      },
      p(ctx2, dirty) {
        const step_changes = {};
        if (dirty & /*stepName*/
        4) step_changes.name = /*stepName*/
        ctx2[2];
        if (dirty & /*levels*/
        8) step_changes.numLevels = /*levels*/
        ctx2[3];
        if (!updating_el && dirty & /*stepElement*/
        32) {
          updating_el = true;
          step_changes.el = /*stepElement*/
          ctx2[5];
          add_flush_callback(() => updating_el = false);
        }
        step.$set(step_changes);
        if (
          /*hasNext*/
          ctx2[8]
        ) if_block0.p(ctx2, dirty);
        if (
          /*currentStep*/
          ctx2[7].box_ends
        ) if_block1.p(ctx2, dirty);
        if (
          /*stepName*/
          ctx2[2] === "start"
        ) {
          if (if_block2) {
            if_block2.p(ctx2, dirty);
            if (dirty & /*stepName*/
            4) {
              transition_in(if_block2, 1);
            }
          } else {
            if_block2 = create_if_block_1$9(ctx2);
            if_block2.c();
            transition_in(if_block2, 1);
            if_block2.m(div, null);
          }
        } else if (if_block2) {
          group_outros();
          transition_out(if_block2, 1, 1, () => {
            if_block2 = null;
          });
          check_outros();
        }
      },
      i(local) {
        if (current2) return;
        transition_in(step.$$.fragment, local);
        transition_in(if_block0);
        transition_in(if_block1);
        transition_in(if_block2);
        current2 = true;
      },
      o(local) {
        transition_out(step.$$.fragment, local);
        transition_out(if_block0);
        transition_out(if_block1);
        transition_out(if_block2);
        current2 = false;
      },
      d(detaching) {
        if (detaching) {
          detach(div);
        }
        destroy_component(step);
        if (if_block0) if_block0.d();
        if (if_block1) if_block1.d();
        if (if_block2) if_block2.d();
      }
    };
  }
  function create_if_block_3$2(ctx) {
    let div0;
    let t;
    let div1;
    let current2;
    let each_value = ensure_array_like(
      /*currentStep*/
      ctx[7].next
    );
    let each_blocks = [];
    for (let i = 0; i < each_value.length; i += 1) {
      each_blocks[i] = create_each_block$6(get_each_context$6(ctx, each_value, i));
    }
    const out = (i) => transition_out(each_blocks[i], 1, 1, () => {
      each_blocks[i] = null;
    });
    return {
      c() {
        div0 = element$2("div");
        t = space();
        div1 = element$2("div");
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        attr$6(div0, "class", "gap svelte-18aex7a");
        attr$6(div1, "class", "childwrapper svelte-18aex7a");
      },
      m(target2, anchor) {
        insert$1(target2, div0, anchor);
        insert$1(target2, t, anchor);
        insert$1(target2, div1, anchor);
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(div1, null);
          }
        }
        current2 = true;
      },
      p(ctx2, dirty) {
        if (dirty & /*currentStep, stepName, steps, childLevels, dagStructure, fullStepPath, joins*/
        727) {
          each_value = ensure_array_like(
            /*currentStep*/
            ctx2[7].next
          );
          let i;
          for (i = 0; i < each_value.length; i += 1) {
            const child_ctx = get_each_context$6(ctx2, each_value, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
              transition_in(each_blocks[i], 1);
            } else {
              each_blocks[i] = create_each_block$6(child_ctx);
              each_blocks[i].c();
              transition_in(each_blocks[i], 1);
              each_blocks[i].m(div1, null);
            }
          }
          group_outros();
          for (i = each_value.length; i < each_blocks.length; i += 1) {
            out(i);
          }
          check_outros();
        }
      },
      i(local) {
        if (current2) return;
        for (let i = 0; i < each_value.length; i += 1) {
          transition_in(each_blocks[i]);
        }
        current2 = true;
      },
      o(local) {
        each_blocks = each_blocks.filter(Boolean);
        for (let i = 0; i < each_blocks.length; i += 1) {
          transition_out(each_blocks[i]);
        }
        current2 = false;
      },
      d(detaching) {
        if (detaching) {
          detach(div0);
          detach(t);
          detach(div1);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_else_block$9(ctx) {
    let div;
    return {
      c() {
        div = element$2("div");
        attr$6(div, "class", "stepwrapper svelte-18aex7a");
      },
      m(target2, anchor) {
        insert$1(target2, div, anchor);
      },
      p: noop$5,
      i: noop$5,
      o: noop$5,
      d(detaching) {
        if (detaching) {
          detach(div);
        }
      }
    };
  }
  function create_if_block_5$2(ctx) {
    let step_wrapper;
    let current2;
    step_wrapper = new Step_wrapper({
      props: {
        steps: (
          /*steps*/
          ctx[1]
        ),
        stepName: (
          /*nextStepName*/
          ctx[13]
        ),
        levels: (
          /*childLevels*/
          ctx[9]
        ),
        dagStructure: (
          /*dagStructure*/
          ctx[0]
        ),
        pathToStep: (
          /*fullStepPath*/
          ctx[6]
        ),
        joins: (
          /*currentStep*/
          ctx[7].box_ends ? [
            /*fullStepPath*/
            ctx[6] + "/" + /*currentStep*/
            ctx[7].box_ends,
            .../*joins*/
            ctx[4]
          ] : (
            /*joins*/
            ctx[4]
          )
        )
      }
    });
    return {
      c() {
        create_component(step_wrapper.$$.fragment);
      },
      m(target2, anchor) {
        mount_component(step_wrapper, target2, anchor);
        current2 = true;
      },
      p(ctx2, dirty) {
        const step_wrapper_changes = {};
        if (dirty & /*steps*/
        2) step_wrapper_changes.steps = /*steps*/
        ctx2[1];
        if (dirty & /*dagStructure*/
        1) step_wrapper_changes.dagStructure = /*dagStructure*/
        ctx2[0];
        if (dirty & /*joins*/
        16) step_wrapper_changes.joins = /*currentStep*/
        ctx2[7].box_ends ? [
          /*fullStepPath*/
          ctx2[6] + "/" + /*currentStep*/
          ctx2[7].box_ends,
          .../*joins*/
          ctx2[4]
        ] : (
          /*joins*/
          ctx2[4]
        );
        step_wrapper.$set(step_wrapper_changes);
      },
      i(local) {
        if (current2) return;
        transition_in(step_wrapper.$$.fragment, local);
        current2 = true;
      },
      o(local) {
        transition_out(step_wrapper.$$.fragment, local);
        current2 = false;
      },
      d(detaching) {
        destroy_component(step_wrapper, detaching);
      }
    };
  }
  function create_if_block_4$2(ctx) {
    return {
      c: noop$5,
      m: noop$5,
      p: noop$5,
      i: noop$5,
      o: noop$5,
      d: noop$5
    };
  }
  function create_each_block$6(ctx) {
    let current_block_type_index;
    let if_block;
    let if_block_anchor;
    let current2;
    const if_block_creators = [create_if_block_4$2, create_if_block_5$2, create_else_block$9];
    const if_blocks = [];
    function select_block_type(ctx2, dirty) {
      if (
        /*nextStepName*/
        ctx2[13] === /*stepName*/
        ctx2[2]
      ) return 0;
      if (
        /*steps*/
        ctx2[1][
          /*nextStepName*/
          ctx2[13]
        ].type !== "join" && /*nextStepName*/
        ctx2[13] !== "end"
      ) return 1;
      return 2;
    }
    current_block_type_index = select_block_type(ctx);
    if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    return {
      c() {
        if_block.c();
        if_block_anchor = empty();
      },
      m(target2, anchor) {
        if_blocks[current_block_type_index].m(target2, anchor);
        insert$1(target2, if_block_anchor, anchor);
        current2 = true;
      },
      p(ctx2, dirty) {
        let previous_block_index = current_block_type_index;
        current_block_type_index = select_block_type(ctx2);
        if (current_block_type_index === previous_block_index) {
          if_blocks[current_block_type_index].p(ctx2, dirty);
        } else {
          group_outros();
          transition_out(if_blocks[previous_block_index], 1, 1, () => {
            if_blocks[previous_block_index] = null;
          });
          check_outros();
          if_block = if_blocks[current_block_type_index];
          if (!if_block) {
            if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
            if_block.c();
          } else {
            if_block.p(ctx2, dirty);
          }
          transition_in(if_block, 1);
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      },
      i(local) {
        if (current2) return;
        transition_in(if_block);
        current2 = true;
      },
      o(local) {
        transition_out(if_block);
        current2 = false;
      },
      d(detaching) {
        if (detaching) {
          detach(if_block_anchor);
        }
        if_blocks[current_block_type_index].d(detaching);
      }
    };
  }
  function create_if_block_2$3(ctx) {
    let div;
    let t;
    let step_wrapper;
    let current2;
    step_wrapper = new Step_wrapper({
      props: {
        steps: (
          /*steps*/
          ctx[1]
        ),
        stepName: (
          /*currentStep*/
          ctx[7].box_ends
        ),
        levels: (
          /*levels*/
          ctx[3]
        ),
        dagStructure: (
          /*dagStructure*/
          ctx[0]
        ),
        pathToStep: (
          /*fullStepPath*/
          ctx[6]
        ),
        joins: (
          /*joins*/
          ctx[4]
        )
      }
    });
    return {
      c() {
        div = element$2("div");
        t = space();
        create_component(step_wrapper.$$.fragment);
        attr$6(div, "class", "gap svelte-18aex7a");
      },
      m(target2, anchor) {
        insert$1(target2, div, anchor);
        insert$1(target2, t, anchor);
        mount_component(step_wrapper, target2, anchor);
        current2 = true;
      },
      p(ctx2, dirty) {
        const step_wrapper_changes = {};
        if (dirty & /*steps*/
        2) step_wrapper_changes.steps = /*steps*/
        ctx2[1];
        if (dirty & /*levels*/
        8) step_wrapper_changes.levels = /*levels*/
        ctx2[3];
        if (dirty & /*dagStructure*/
        1) step_wrapper_changes.dagStructure = /*dagStructure*/
        ctx2[0];
        if (dirty & /*joins*/
        16) step_wrapper_changes.joins = /*joins*/
        ctx2[4];
        step_wrapper.$set(step_wrapper_changes);
      },
      i(local) {
        if (current2) return;
        transition_in(step_wrapper.$$.fragment, local);
        current2 = true;
      },
      o(local) {
        transition_out(step_wrapper.$$.fragment, local);
        current2 = false;
      },
      d(detaching) {
        if (detaching) {
          detach(div);
          detach(t);
        }
        destroy_component(step_wrapper, detaching);
      }
    };
  }
  function create_if_block_1$9(ctx) {
    let div;
    let t;
    let step_wrapper;
    let current2;
    step_wrapper = new Step_wrapper({
      props: {
        steps: (
          /*steps*/
          ctx[1]
        ),
        stepName: "end",
        levels: (
          /*levels*/
          ctx[3]
        ),
        dagStructure: (
          /*dagStructure*/
          ctx[0]
        )
      }
    });
    return {
      c() {
        div = element$2("div");
        t = space();
        create_component(step_wrapper.$$.fragment);
        attr$6(div, "class", "gap svelte-18aex7a");
      },
      m(target2, anchor) {
        insert$1(target2, div, anchor);
        insert$1(target2, t, anchor);
        mount_component(step_wrapper, target2, anchor);
        current2 = true;
      },
      p(ctx2, dirty) {
        const step_wrapper_changes = {};
        if (dirty & /*steps*/
        2) step_wrapper_changes.steps = /*steps*/
        ctx2[1];
        if (dirty & /*levels*/
        8) step_wrapper_changes.levels = /*levels*/
        ctx2[3];
        if (dirty & /*dagStructure*/
        1) step_wrapper_changes.dagStructure = /*dagStructure*/
        ctx2[0];
        step_wrapper.$set(step_wrapper_changes);
      },
      i(local) {
        if (current2) return;
        transition_in(step_wrapper.$$.fragment, local);
        current2 = true;
      },
      o(local) {
        transition_out(step_wrapper.$$.fragment, local);
        current2 = false;
      },
      d(detaching) {
        if (detaching) {
          detach(div);
          detach(t);
        }
        destroy_component(step_wrapper, detaching);
      }
    };
  }
  function create_fragment$M(ctx) {
    let if_block_anchor;
    let current2;
    let if_block = (
      /*currentStep*/
      ctx[7] && create_if_block$j(ctx)
    );
    return {
      c() {
        if (if_block) if_block.c();
        if_block_anchor = empty();
      },
      m(target2, anchor) {
        if (if_block) if_block.m(target2, anchor);
        insert$1(target2, if_block_anchor, anchor);
        current2 = true;
      },
      p(ctx2, [dirty]) {
        if (
          /*currentStep*/
          ctx2[7]
        ) if_block.p(ctx2, dirty);
      },
      i(local) {
        if (current2) return;
        transition_in(if_block);
        current2 = true;
      },
      o(local) {
        transition_out(if_block);
        current2 = false;
      },
      d(detaching) {
        if (detaching) {
          detach(if_block_anchor);
        }
        if (if_block) if_block.d(detaching);
      }
    };
  }
  function instance$L($$self, $$props, $$invalidate) {
    var _a2;
    let { steps } = $$props;
    let { stepName } = $$props;
    let { levels: levels2 = 0 } = $$props;
    let { joins = [] } = $$props;
    let { pathToStep = "" } = $$props;
    let { dagStructure = {} } = $$props;
    let stepElement = null;
    const fullStepPath = pathToStep ? `${pathToStep}/${stepName}` : stepName;
    const currentStep = steps[stepName];
    const registerNode = () => {
      if (dagStructure[fullStepPath]) {
        console.log("Node already registered:", fullStepPath);
        return;
      }
      if (!stepElement) {
        console.warn("Step element not found:", fullStepPath);
        return;
      }
      const connections = [];
      for (const nextStep of currentStep.next) {
        const nextStepObj = steps[nextStep];
        if ((nextStepObj == null ? void 0 : nextStepObj.type) === "join") {
          const fromJoins = joins.find((str) => str.endsWith("/" + nextStep));
          if (fromJoins) {
            connections.push(fromJoins);
          }
        } else {
          if (nextStep === "end") {
            connections.push("end");
          } else {
            if (nextStep === stepName) {
              connections.push(fullStepPath);
            } else {
              connections.push(fullStepPath + "/" + nextStep);
            }
          }
        }
      }
      $$invalidate(
        0,
        dagStructure[fullStepPath] = {
          stepName,
          pathToStep,
          connections,
          node: stepElement
        },
        dagStructure
      );
    };
    onMount(registerNode);
    let hasNext = (_a2 = currentStep == null ? void 0 : currentStep.next) == null ? void 0 : _a2.find((nextStepName) => {
      var _a3;
      return ((_a3 = steps[nextStepName]) == null ? void 0 : _a3.type) !== "join" && nextStepName !== "end";
    });
    const childLevels = (currentStep == null ? void 0 : currentStep.type) === "foreach" ? levels2 + 1 : (currentStep == null ? void 0 : currentStep.type) === "join" ? levels2 - 1 : levels2;
    function step_el_binding(value2) {
      stepElement = value2;
      $$invalidate(5, stepElement);
    }
    $$self.$$set = ($$props2) => {
      if ("steps" in $$props2) $$invalidate(1, steps = $$props2.steps);
      if ("stepName" in $$props2) $$invalidate(2, stepName = $$props2.stepName);
      if ("levels" in $$props2) $$invalidate(3, levels2 = $$props2.levels);
      if ("joins" in $$props2) $$invalidate(4, joins = $$props2.joins);
      if ("pathToStep" in $$props2) $$invalidate(10, pathToStep = $$props2.pathToStep);
      if ("dagStructure" in $$props2) $$invalidate(0, dagStructure = $$props2.dagStructure);
    };
    return [
      dagStructure,
      steps,
      stepName,
      levels2,
      joins,
      stepElement,
      fullStepPath,
      currentStep,
      hasNext,
      childLevels,
      pathToStep,
      step_el_binding
    ];
  }
  class Step_wrapper extends SvelteComponent {
    constructor(options) {
      super();
      init$1(this, options, instance$L, create_fragment$M, safe_not_equal, {
        steps: 1,
        stepName: 2,
        levels: 3,
        joins: 4,
        pathToStep: 10,
        dagStructure: 0
      });
    }
  }
  function create_else_block$8(ctx) {
    let p;
    return {
      c() {
        p = element$2("p");
        p.textContent = "No start step";
      },
      m(target2, anchor) {
        insert$1(target2, p, anchor);
      },
      p: noop$5,
      i: noop$5,
      o: noop$5,
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_if_block_1$8(ctx) {
    let stepwrapper;
    let updating_dagStructure;
    let current2;
    function stepwrapper_dagStructure_binding(value2) {
      ctx[6](value2);
    }
    let stepwrapper_props = {
      steps: (
        /*steps*/
        ctx[3]
      ),
      stepName: "start"
    };
    if (
      /*dagStructure*/
      ctx[1] !== void 0
    ) {
      stepwrapper_props.dagStructure = /*dagStructure*/
      ctx[1];
    }
    stepwrapper = new Step_wrapper({ props: stepwrapper_props });
    binding_callbacks.push(() => bind$2(stepwrapper, "dagStructure", stepwrapper_dagStructure_binding));
    return {
      c() {
        create_component(stepwrapper.$$.fragment);
      },
      m(target2, anchor) {
        mount_component(stepwrapper, target2, anchor);
        current2 = true;
      },
      p(ctx2, dirty) {
        const stepwrapper_changes = {};
        if (!updating_dagStructure && dirty & /*dagStructure*/
        2) {
          updating_dagStructure = true;
          stepwrapper_changes.dagStructure = /*dagStructure*/
          ctx2[1];
          add_flush_callback(() => updating_dagStructure = false);
        }
        stepwrapper.$set(stepwrapper_changes);
      },
      i(local) {
        if (current2) return;
        transition_in(stepwrapper.$$.fragment, local);
        current2 = true;
      },
      o(local) {
        transition_out(stepwrapper.$$.fragment, local);
        current2 = false;
      },
      d(detaching) {
        destroy_component(stepwrapper, detaching);
      }
    };
  }
  function create_if_block$i(ctx) {
    let connectors;
    let current2;
    connectors = new Connectors({
      props: {
        dagStructure: (
          /*dagStructure*/
          ctx[1]
        ),
        container: (
          /*el*/
          ctx[0]
        )
      }
    });
    return {
      c() {
        create_component(connectors.$$.fragment);
      },
      m(target2, anchor) {
        mount_component(connectors, target2, anchor);
        current2 = true;
      },
      p(ctx2, dirty) {
        const connectors_changes = {};
        if (dirty & /*dagStructure*/
        2) connectors_changes.dagStructure = /*dagStructure*/
        ctx2[1];
        if (dirty & /*el*/
        1) connectors_changes.container = /*el*/
        ctx2[0];
        connectors.$set(connectors_changes);
      },
      i(local) {
        if (current2) return;
        transition_in(connectors.$$.fragment, local);
        current2 = true;
      },
      o(local) {
        transition_out(connectors.$$.fragment, local);
        current2 = false;
      },
      d(detaching) {
        destroy_component(connectors, detaching);
      }
    };
  }
  function create_fragment$L(ctx) {
    let div;
    let current_block_type_index;
    let if_block0;
    let t;
    let current2;
    let mounted;
    let dispose;
    const if_block_creators = [create_if_block_1$8, create_else_block$8];
    const if_blocks = [];
    function select_block_type(ctx2, dirty) {
      var _a2;
      if (
        /*steps*/
        (_a2 = ctx2[3]) == null ? void 0 : _a2.start
      ) return 0;
      return 1;
    }
    current_block_type_index = select_block_type(ctx);
    if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    let if_block1 = !/*resizing*/
    ctx[2] && create_if_block$i(ctx);
    return {
      c() {
        div = element$2("div");
        if_block0.c();
        t = space();
        if (if_block1) if_block1.c();
        set_style(div, "position", "relative");
        set_style(div, "line-height", "1");
        attr$6(div, "data-component", "dag");
      },
      m(target2, anchor) {
        insert$1(target2, div, anchor);
        if_blocks[current_block_type_index].m(div, null);
        append$2(div, t);
        if (if_block1) if_block1.m(div, null);
        ctx[7](div);
        current2 = true;
        if (!mounted) {
          dispose = listen(
            window,
            "resize",
            /*handleResize*/
            ctx[4]
          );
          mounted = true;
        }
      },
      p(ctx2, [dirty]) {
        if_block0.p(ctx2, dirty);
        if (!/*resizing*/
        ctx2[2]) {
          if (if_block1) {
            if_block1.p(ctx2, dirty);
            if (dirty & /*resizing*/
            4) {
              transition_in(if_block1, 1);
            }
          } else {
            if_block1 = create_if_block$i(ctx2);
            if_block1.c();
            transition_in(if_block1, 1);
            if_block1.m(div, null);
          }
        } else if (if_block1) {
          group_outros();
          transition_out(if_block1, 1, 1, () => {
            if_block1 = null;
          });
          check_outros();
        }
      },
      i(local) {
        if (current2) return;
        transition_in(if_block0);
        transition_in(if_block1);
        current2 = true;
      },
      o(local) {
        transition_out(if_block0);
        transition_out(if_block1);
        current2 = false;
      },
      d(detaching) {
        if (detaching) {
          detach(div);
        }
        if_blocks[current_block_type_index].d();
        if (if_block1) if_block1.d();
        ctx[7](null);
        mounted = false;
        dispose();
      }
    };
  }
  const RESIZE_TIMEOUT = 100;
  function instance$K($$self, $$props, $$invalidate) {
    var _a2;
    let $cardData;
    component_subscribe($$self, cardData, ($$value) => $$invalidate(9, $cardData = $$value));
    let { componentData } = $$props;
    const { data: steps } = componentData;
    let el;
    let dagStructure = {};
    setContext(currentStepContext, getFromPathSpec((_a2 = $cardData == null ? void 0 : $cardData.metadata) == null ? void 0 : _a2.pathspec, "stepname"));
    let resizeTimeout;
    let resizing = false;
    const handleResize = () => {
      $$invalidate(2, resizing = true);
      clearTimeout(resizeTimeout);
      resizeTimeout = setTimeout(
        () => {
          $$invalidate(2, resizing = false);
        },
        RESIZE_TIMEOUT
      );
    };
    function stepwrapper_dagStructure_binding(value2) {
      dagStructure = value2;
      $$invalidate(1, dagStructure);
    }
    function div_binding($$value) {
      binding_callbacks[$$value ? "unshift" : "push"](() => {
        el = $$value;
        $$invalidate(0, el);
      });
    }
    $$self.$$set = ($$props2) => {
      if ("componentData" in $$props2) $$invalidate(5, componentData = $$props2.componentData);
    };
    return [
      el,
      dagStructure,
      resizing,
      steps,
      handleResize,
      componentData,
      stepwrapper_dagStructure_binding,
      div_binding
    ];
  }
  class Dag extends SvelteComponent {
    constructor(options) {
      super();
      init$1(this, options, instance$K, create_fragment$L, safe_not_equal, { componentData: 5 });
    }
  }
  function create_fragment$K(ctx) {
    var _a2;
    let h2;
    let t_value = (
      /*componentData*/
      (((_a2 = ctx[0]) == null ? void 0 : _a2.text) || "") + ""
    );
    let t;
    return {
      c() {
        h2 = element$2("h2");
        t = text$3(t_value);
        attr$6(h2, "class", "title svelte-117s0ws");
        attr$6(h2, "data-component", "title");
      },
      m(target2, anchor) {
        insert$1(target2, h2, anchor);
        append$2(h2, t);
      },
      p(ctx2, [dirty]) {
        var _a3;
        if (dirty & /*componentData*/
        1 && t_value !== (t_value = /*componentData*/
        (((_a3 = ctx2[0]) == null ? void 0 : _a3.text) || "") + "")) set_data(t, t_value);
      },
      i: noop$5,
      o: noop$5,
      d(detaching) {
        if (detaching) {
          detach(h2);
        }
      }
    };
  }
  function instance$J($$self, $$props, $$invalidate) {
    let { componentData } = $$props;
    $$self.$$set = ($$props2) => {
      if ("componentData" in $$props2) $$invalidate(0, componentData = $$props2.componentData);
    };
    return [componentData];
  }
  class Title extends SvelteComponent {
    constructor(options) {
      super();
      init$1(this, options, instance$J, create_fragment$K, safe_not_equal, { componentData: 0 });
    }
  }
  function create_fragment$J(ctx) {
    var _a2;
    let p;
    let t_value = (
      /*componentData*/
      (((_a2 = ctx[0]) == null ? void 0 : _a2.text) || "") + ""
    );
    let t;
    return {
      c() {
        p = element$2("p");
        t = text$3(t_value);
        attr$6(p, "class", "subtitle svelte-lu9pnn");
        attr$6(p, "data-component", "subtitle");
      },
      m(target2, anchor) {
        insert$1(target2, p, anchor);
        append$2(p, t);
      },
      p(ctx2, [dirty]) {
        var _a3;
        if (dirty & /*componentData*/
        1 && t_value !== (t_value = /*componentData*/
        (((_a3 = ctx2[0]) == null ? void 0 : _a3.text) || "") + "")) set_data(t, t_value);
      },
      i: noop$5,
      o: noop$5,
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function instance$I($$self, $$props, $$invalidate) {
    let { componentData } = $$props;
    $$self.$$set = ($$props2) => {
      if ("componentData" in $$props2) $$invalidate(0, componentData = $$props2.componentData);
    };
    return [componentData];
  }
  class Subtitle extends SvelteComponent {
    constructor(options) {
      super();
      init$1(this, options, instance$I, create_fragment$J, safe_not_equal, { componentData: 0 });
    }
  }
  function create_if_block_1$7(ctx) {
    let title_1;
    let current2;
    title_1 = new Title({
      props: {
        componentData: { type: "title", text: (
          /*title*/
          ctx[1]
        ) }
      }
    });
    return {
      c() {
        create_component(title_1.$$.fragment);
      },
      m(target2, anchor) {
        mount_component(title_1, target2, anchor);
        current2 = true;
      },
      p(ctx2, dirty) {
        const title_1_changes = {};
        if (dirty & /*title*/
        2) title_1_changes.componentData = { type: "title", text: (
          /*title*/
          ctx2[1]
        ) };
        title_1.$set(title_1_changes);
      },
      i(local) {
        if (current2) return;
        transition_in(title_1.$$.fragment, local);
        current2 = true;
      },
      o(local) {
        transition_out(title_1.$$.fragment, local);
        current2 = false;
      },
      d(detaching) {
        destroy_component(title_1, detaching);
      }
    };
  }
  function create_if_block$h(ctx) {
    let subtitle_1;
    let current2;
    subtitle_1 = new Subtitle({
      props: {
        componentData: {
          type: "subtitle",
          text: (
            /*subtitle*/
            ctx[0]
          )
        }
      }
    });
    return {
      c() {
        create_component(subtitle_1.$$.fragment);
      },
      m(target2, anchor) {
        mount_component(subtitle_1, target2, anchor);
        current2 = true;
      },
      p(ctx2, dirty) {
        const subtitle_1_changes = {};
        if (dirty & /*subtitle*/
        1) subtitle_1_changes.componentData = {
          type: "subtitle",
          text: (
            /*subtitle*/
            ctx2[0]
          )
        };
        subtitle_1.$set(subtitle_1_changes);
      },
      i(local) {
        if (current2) return;
        transition_in(subtitle_1.$$.fragment, local);
        current2 = true;
      },
      o(local) {
        transition_out(subtitle_1.$$.fragment, local);
        current2 = false;
      },
      d(detaching) {
        destroy_component(subtitle_1, detaching);
      }
    };
  }
  function create_fragment$I(ctx) {
    let header;
    let t;
    let current2;
    let if_block0 = (
      /*title*/
      ctx[1] && create_if_block_1$7(ctx)
    );
    let if_block1 = (
      /*subtitle*/
      ctx[0] && create_if_block$h(ctx)
    );
    return {
      c() {
        header = element$2("header");
        if (if_block0) if_block0.c();
        t = space();
        if (if_block1) if_block1.c();
        attr$6(header, "class", "container svelte-1ugmt5d");
        attr$6(header, "data-component", "heading");
      },
      m(target2, anchor) {
        insert$1(target2, header, anchor);
        if (if_block0) if_block0.m(header, null);
        append$2(header, t);
        if (if_block1) if_block1.m(header, null);
        current2 = true;
      },
      p(ctx2, [dirty]) {
        if (
          /*title*/
          ctx2[1]
        ) {
          if (if_block0) {
            if_block0.p(ctx2, dirty);
            if (dirty & /*title*/
            2) {
              transition_in(if_block0, 1);
            }
          } else {
            if_block0 = create_if_block_1$7(ctx2);
            if_block0.c();
            transition_in(if_block0, 1);
            if_block0.m(header, t);
          }
        } else if (if_block0) {
          group_outros();
          transition_out(if_block0, 1, 1, () => {
            if_block0 = null;
          });
          check_outros();
        }
        if (
          /*subtitle*/
          ctx2[0]
        ) {
          if (if_block1) {
            if_block1.p(ctx2, dirty);
            if (dirty & /*subtitle*/
            1) {
              transition_in(if_block1, 1);
            }
          } else {
            if_block1 = create_if_block$h(ctx2);
            if_block1.c();
            transition_in(if_block1, 1);
            if_block1.m(header, null);
          }
        } else if (if_block1) {
          group_outros();
          transition_out(if_block1, 1, 1, () => {
            if_block1 = null;
          });
          check_outros();
        }
      },
      i(local) {
        if (current2) return;
        transition_in(if_block0);
        transition_in(if_block1);
        current2 = true;
      },
      o(local) {
        transition_out(if_block0);
        transition_out(if_block1);
        current2 = false;
      },
      d(detaching) {
        if (detaching) {
          detach(header);
        }
        if (if_block0) if_block0.d();
        if (if_block1) if_block1.d();
      }
    };
  }
  function instance$H($$self, $$props, $$invalidate) {
    let title2;
    let subtitle;
    let { componentData } = $$props;
    $$self.$$set = ($$props2) => {
      if ("componentData" in $$props2) $$invalidate(2, componentData = $$props2.componentData);
    };
    $$self.$$.update = () => {
      if ($$self.$$.dirty & /*componentData*/
      4) {
        $$invalidate(1, { title: title2, subtitle } = componentData, title2, ($$invalidate(0, subtitle), $$invalidate(2, componentData)));
      }
    };
    return [subtitle, title2, componentData];
  }
  let Heading$1 = class Heading extends SvelteComponent {
    constructor(options) {
      super();
      init$1(this, options, instance$H, create_fragment$I, safe_not_equal, { componentData: 2 });
    }
  };
  function create_if_block_1$6(ctx) {
    let div;
    let t;
    return {
      c() {
        div = element$2("div");
        t = text$3(
          /*label*/
          ctx[2]
        );
        attr$6(div, "class", "label svelte-1x96yvr");
      },
      m(target2, anchor) {
        insert$1(target2, div, anchor);
        append$2(div, t);
      },
      p(ctx2, dirty) {
        if (dirty & /*label*/
        4) set_data(
          t,
          /*label*/
          ctx2[2]
        );
      },
      d(detaching) {
        if (detaching) {
          detach(div);
        }
      }
    };
  }
  function create_if_block$g(ctx) {
    let figcaption;
    let t;
    return {
      c() {
        figcaption = element$2("figcaption");
        t = text$3(
          /*description*/
          ctx[1]
        );
        attr$6(figcaption, "class", "description svelte-1x96yvr");
      },
      m(target2, anchor) {
        insert$1(target2, figcaption, anchor);
        append$2(figcaption, t);
      },
      p(ctx2, dirty) {
        if (dirty & /*description*/
        2) set_data(
          t,
          /*description*/
          ctx2[1]
        );
      },
      d(detaching) {
        if (detaching) {
          detach(figcaption);
        }
      }
    };
  }
  function create_fragment$H(ctx) {
    let figure;
    let div;
    let img;
    let img_src_value;
    let img_alt_value;
    let t02;
    let t12;
    let mounted;
    let dispose;
    let if_block0 = (
      /*label*/
      ctx[2] && create_if_block_1$6(ctx)
    );
    let if_block1 = (
      /*description*/
      ctx[1] && create_if_block$g(ctx)
    );
    return {
      c() {
        figure = element$2("figure");
        div = element$2("div");
        img = element$2("img");
        t02 = space();
        if (if_block0) if_block0.c();
        t12 = space();
        if (if_block1) if_block1.c();
        if (!src_url_equal(img.src, img_src_value = /*src*/
        ctx[3])) attr$6(img, "src", img_src_value);
        attr$6(img, "alt", img_alt_value = /*label*/
        ctx[2] || "image");
        attr$6(img, "class", "svelte-1x96yvr");
        attr$6(div, "class", "imageContainer");
        attr$6(figure, "data-component", "image");
        attr$6(figure, "class", "svelte-1x96yvr");
      },
      m(target2, anchor) {
        insert$1(target2, figure, anchor);
        append$2(figure, div);
        append$2(div, img);
        append$2(figure, t02);
        if (if_block0) if_block0.m(figure, null);
        append$2(figure, t12);
        if (if_block1) if_block1.m(figure, null);
        if (!mounted) {
          dispose = listen(
            figure,
            "click",
            /*click_handler*/
            ctx[4]
          );
          mounted = true;
        }
      },
      p(ctx2, [dirty]) {
        if (dirty & /*src*/
        8 && !src_url_equal(img.src, img_src_value = /*src*/
        ctx2[3])) {
          attr$6(img, "src", img_src_value);
        }
        if (dirty & /*label*/
        4 && img_alt_value !== (img_alt_value = /*label*/
        ctx2[2] || "image")) {
          attr$6(img, "alt", img_alt_value);
        }
        if (
          /*label*/
          ctx2[2]
        ) {
          if (if_block0) {
            if_block0.p(ctx2, dirty);
          } else {
            if_block0 = create_if_block_1$6(ctx2);
            if_block0.c();
            if_block0.m(figure, t12);
          }
        } else if (if_block0) {
          if_block0.d(1);
          if_block0 = null;
        }
        if (
          /*description*/
          ctx2[1]
        ) {
          if (if_block1) {
            if_block1.p(ctx2, dirty);
          } else {
            if_block1 = create_if_block$g(ctx2);
            if_block1.c();
            if_block1.m(figure, null);
          }
        } else if (if_block1) {
          if_block1.d(1);
          if_block1 = null;
        }
      },
      i: noop$5,
      o: noop$5,
      d(detaching) {
        if (detaching) {
          detach(figure);
        }
        if (if_block0) if_block0.d();
        if (if_block1) if_block1.d();
        mounted = false;
        dispose();
      }
    };
  }
  function instance$G($$self, $$props, $$invalidate) {
    let src;
    let label2;
    let description2;
    let { componentData } = $$props;
    const click_handler2 = () => modal.set(componentData);
    $$self.$$set = ($$props2) => {
      if ("componentData" in $$props2) $$invalidate(0, componentData = $$props2.componentData);
    };
    $$self.$$.update = () => {
      if ($$self.$$.dirty & /*componentData*/
      1) {
        $$invalidate(3, { src, label: label2, description: description2 } = componentData, src, ($$invalidate(2, label2), $$invalidate(0, componentData)), ($$invalidate(1, description2), $$invalidate(0, componentData)));
      }
    };
    return [componentData, description2, label2, src, click_handler2];
  }
  let Image$2 = class Image extends SvelteComponent {
    constructor(options) {
      super();
      init$1(this, options, instance$G, create_fragment$H, safe_not_equal, { componentData: 0 });
    }
  };
  function create_fragment$G(ctx) {
    let pre;
    let t02;
    let code;
    let t12;
    let t2_value = (
      /*componentData*/
      ctx[0].data + ""
    );
    let t22;
    let t32;
    let t4;
    return {
      c() {
        pre = element$2("pre");
        t02 = text$3(" \n  ");
        code = element$2("code");
        t12 = text$3("\n    ");
        t22 = text$3(t2_value);
        t32 = text$3("\n  ");
        t4 = text$3("\n");
        attr$6(code, "class", "mono language-log");
        attr$6(pre, "class", "log svelte-1jhmsu");
        attr$6(pre, "data-component", "log");
      },
      m(target2, anchor) {
        insert$1(target2, pre, anchor);
        append$2(pre, t02);
        append$2(pre, code);
        append$2(code, t12);
        append$2(code, t22);
        append$2(code, t32);
        ctx[2](code);
        append$2(pre, t4);
      },
      p(ctx2, [dirty]) {
        if (dirty & /*componentData*/
        1 && t2_value !== (t2_value = /*componentData*/
        ctx2[0].data + "")) set_data(t22, t2_value);
      },
      i: noop$5,
      o: noop$5,
      d(detaching) {
        if (detaching) {
          detach(pre);
        }
        ctx[2](null);
      }
    };
  }
  function instance$F($$self, $$props, $$invalidate) {
    let { componentData } = $$props;
    let el;
    function highlightCode() {
      var _a2;
      el && ((_a2 = window == null ? void 0 : window.Prism) == null ? void 0 : _a2.highlightElement(el));
    }
    function code_binding($$value) {
      binding_callbacks[$$value ? "unshift" : "push"](() => {
        el = $$value;
        $$invalidate(1, el);
      });
    }
    $$self.$$set = ($$props2) => {
      if ("componentData" in $$props2) $$invalidate(0, componentData = $$props2.componentData);
    };
    $$self.$$.update = () => {
      if ($$self.$$.dirty & /*el*/
      2) {
        el ? highlightCode() : null;
      }
    };
    return [componentData, el, code_binding];
  }
  let Log$1 = class Log extends SvelteComponent {
    constructor(options) {
      super();
      init$1(this, options, instance$F, create_fragment$G, safe_not_equal, { componentData: 0 });
    }
  };
  function supressWarnings() {
    const origWarn = console.warn;
    console.warn = (message) => {
      if (message.includes("unknown prop")) return;
      if (message.includes("unexpected slot")) return;
      origWarn(message);
    };
    onMount(() => {
      console.warn = origWarn;
    });
  }
  function get_each_context_5(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[18] = list[i];
    return child_ctx;
  }
  function get_each_context_4(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[18] = list[i];
    return child_ctx;
  }
  function get_each_context_1$3(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[10] = list[i];
    return child_ctx;
  }
  function get_each_context_2$1(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[13] = list[i];
    child_ctx[15] = i;
    return child_ctx;
  }
  function get_each_context_3(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[16] = list[i];
    child_ctx[15] = i;
    return child_ctx;
  }
  function get_each_context$5(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[7] = list[i];
    return child_ctx;
  }
  function create_if_block_1$5(ctx) {
    let current_block_type_index;
    let if_block;
    let if_block_anchor;
    let current2;
    const if_block_creators = [create_if_block_2$2, create_if_block_3$1, create_else_block_1];
    const if_blocks = [];
    function select_block_type_1(ctx2, dirty) {
      if (
        /*type*/
        ctx2[0] === "table"
      ) return 0;
      if (
        /*type*/
        ctx2[0] === "list"
      ) return 1;
      return 2;
    }
    current_block_type_index = select_block_type_1(ctx);
    if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    return {
      c() {
        if_block.c();
        if_block_anchor = empty();
      },
      m(target2, anchor) {
        if_blocks[current_block_type_index].m(target2, anchor);
        insert$1(target2, if_block_anchor, anchor);
        current2 = true;
      },
      p(ctx2, dirty) {
        let previous_block_index = current_block_type_index;
        current_block_type_index = select_block_type_1(ctx2);
        if (current_block_type_index === previous_block_index) {
          if_blocks[current_block_type_index].p(ctx2, dirty);
        } else {
          group_outros();
          transition_out(if_blocks[previous_block_index], 1, 1, () => {
            if_blocks[previous_block_index] = null;
          });
          check_outros();
          if_block = if_blocks[current_block_type_index];
          if (!if_block) {
            if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
            if_block.c();
          } else {
            if_block.p(ctx2, dirty);
          }
          transition_in(if_block, 1);
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      },
      i(local) {
        if (current2) return;
        transition_in(if_block);
        current2 = true;
      },
      o(local) {
        transition_out(if_block);
        current2 = false;
      },
      d(detaching) {
        if (detaching) {
          detach(if_block_anchor);
        }
        if_blocks[current_block_type_index].d(detaching);
      }
    };
  }
  function create_if_block$f(ctx) {
    let each_1_anchor;
    let current2;
    let each_value = ensure_array_like(
      /*tokens*/
      ctx[1]
    );
    let each_blocks = [];
    for (let i = 0; i < each_value.length; i += 1) {
      each_blocks[i] = create_each_block$5(get_each_context$5(ctx, each_value, i));
    }
    const out = (i) => transition_out(each_blocks[i], 1, 1, () => {
      each_blocks[i] = null;
    });
    return {
      c() {
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        each_1_anchor = empty();
      },
      m(target2, anchor) {
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(target2, anchor);
          }
        }
        insert$1(target2, each_1_anchor, anchor);
        current2 = true;
      },
      p(ctx2, dirty) {
        if (dirty & /*tokens, renderers*/
        34) {
          each_value = ensure_array_like(
            /*tokens*/
            ctx2[1]
          );
          let i;
          for (i = 0; i < each_value.length; i += 1) {
            const child_ctx = get_each_context$5(ctx2, each_value, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
              transition_in(each_blocks[i], 1);
            } else {
              each_blocks[i] = create_each_block$5(child_ctx);
              each_blocks[i].c();
              transition_in(each_blocks[i], 1);
              each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
            }
          }
          group_outros();
          for (i = each_value.length; i < each_blocks.length; i += 1) {
            out(i);
          }
          check_outros();
        }
      },
      i(local) {
        if (current2) return;
        for (let i = 0; i < each_value.length; i += 1) {
          transition_in(each_blocks[i]);
        }
        current2 = true;
      },
      o(local) {
        each_blocks = each_blocks.filter(Boolean);
        for (let i = 0; i < each_blocks.length; i += 1) {
          transition_out(each_blocks[i]);
        }
        current2 = false;
      },
      d(detaching) {
        if (detaching) {
          detach(each_1_anchor);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_else_block_1(ctx) {
    let switch_instance;
    let switch_instance_anchor;
    let current2;
    const switch_instance_spread_levels = [
      /*$$restProps*/
      ctx[6]
    ];
    var switch_value = (
      /*renderers*/
      ctx[5][
        /*type*/
        ctx[0]
      ]
    );
    function switch_props(ctx2, dirty) {
      let switch_instance_props = {
        $$slots: { default: [create_default_slot_11] },
        $$scope: { ctx: ctx2 }
      };
      for (let i = 0; i < switch_instance_spread_levels.length; i += 1) {
        switch_instance_props = assign(switch_instance_props, switch_instance_spread_levels[i]);
      }
      if (dirty !== void 0 && dirty & /*$$restProps*/
      64) {
        switch_instance_props = assign(switch_instance_props, get_spread_update(switch_instance_spread_levels, [get_spread_object(
          /*$$restProps*/
          ctx2[6]
        )]));
      }
      return { props: switch_instance_props };
    }
    if (switch_value) {
      switch_instance = construct_svelte_component(switch_value, switch_props(ctx));
    }
    return {
      c() {
        if (switch_instance) create_component(switch_instance.$$.fragment);
        switch_instance_anchor = empty();
      },
      m(target2, anchor) {
        if (switch_instance) mount_component(switch_instance, target2, anchor);
        insert$1(target2, switch_instance_anchor, anchor);
        current2 = true;
      },
      p(ctx2, dirty) {
        if (dirty & /*renderers, type*/
        33 && switch_value !== (switch_value = /*renderers*/
        ctx2[5][
          /*type*/
          ctx2[0]
        ])) {
          if (switch_instance) {
            group_outros();
            const old_component = switch_instance;
            transition_out(old_component.$$.fragment, 1, 0, () => {
              destroy_component(old_component, 1);
            });
            check_outros();
          }
          if (switch_value) {
            switch_instance = construct_svelte_component(switch_value, switch_props(ctx2, dirty));
            create_component(switch_instance.$$.fragment);
            transition_in(switch_instance.$$.fragment, 1);
            mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
          } else {
            switch_instance = null;
          }
        } else if (switch_value) {
          const switch_instance_changes = dirty & /*$$restProps*/
          64 ? get_spread_update(switch_instance_spread_levels, [get_spread_object(
            /*$$restProps*/
            ctx2[6]
          )]) : {};
          if (dirty & /*$$scope, tokens, renderers, $$restProps*/
          8388706) {
            switch_instance_changes.$$scope = { dirty, ctx: ctx2 };
          }
          switch_instance.$set(switch_instance_changes);
        }
      },
      i(local) {
        if (current2) return;
        if (switch_instance) transition_in(switch_instance.$$.fragment, local);
        current2 = true;
      },
      o(local) {
        if (switch_instance) transition_out(switch_instance.$$.fragment, local);
        current2 = false;
      },
      d(detaching) {
        if (detaching) {
          detach(switch_instance_anchor);
        }
        if (switch_instance) destroy_component(switch_instance, detaching);
      }
    };
  }
  function create_if_block_3$1(ctx) {
    let current_block_type_index;
    let if_block;
    let if_block_anchor;
    let current2;
    const if_block_creators = [create_if_block_4$1, create_else_block$7];
    const if_blocks = [];
    function select_block_type_2(ctx2, dirty) {
      if (
        /*ordered*/
        ctx2[4]
      ) return 0;
      return 1;
    }
    current_block_type_index = select_block_type_2(ctx);
    if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    return {
      c() {
        if_block.c();
        if_block_anchor = empty();
      },
      m(target2, anchor) {
        if_blocks[current_block_type_index].m(target2, anchor);
        insert$1(target2, if_block_anchor, anchor);
        current2 = true;
      },
      p(ctx2, dirty) {
        let previous_block_index = current_block_type_index;
        current_block_type_index = select_block_type_2(ctx2);
        if (current_block_type_index === previous_block_index) {
          if_blocks[current_block_type_index].p(ctx2, dirty);
        } else {
          group_outros();
          transition_out(if_blocks[previous_block_index], 1, 1, () => {
            if_blocks[previous_block_index] = null;
          });
          check_outros();
          if_block = if_blocks[current_block_type_index];
          if (!if_block) {
            if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
            if_block.c();
          } else {
            if_block.p(ctx2, dirty);
          }
          transition_in(if_block, 1);
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      },
      i(local) {
        if (current2) return;
        transition_in(if_block);
        current2 = true;
      },
      o(local) {
        transition_out(if_block);
        current2 = false;
      },
      d(detaching) {
        if (detaching) {
          detach(if_block_anchor);
        }
        if_blocks[current_block_type_index].d(detaching);
      }
    };
  }
  function create_if_block_2$2(ctx) {
    let switch_instance;
    let switch_instance_anchor;
    let current2;
    var switch_value = (
      /*renderers*/
      ctx[5].table
    );
    function switch_props(ctx2, dirty) {
      return {
        props: {
          $$slots: { default: [create_default_slot$2] },
          $$scope: { ctx: ctx2 }
        }
      };
    }
    if (switch_value) {
      switch_instance = construct_svelte_component(switch_value, switch_props(ctx));
    }
    return {
      c() {
        if (switch_instance) create_component(switch_instance.$$.fragment);
        switch_instance_anchor = empty();
      },
      m(target2, anchor) {
        if (switch_instance) mount_component(switch_instance, target2, anchor);
        insert$1(target2, switch_instance_anchor, anchor);
        current2 = true;
      },
      p(ctx2, dirty) {
        if (dirty & /*renderers*/
        32 && switch_value !== (switch_value = /*renderers*/
        ctx2[5].table)) {
          if (switch_instance) {
            group_outros();
            const old_component = switch_instance;
            transition_out(old_component.$$.fragment, 1, 0, () => {
              destroy_component(old_component, 1);
            });
            check_outros();
          }
          if (switch_value) {
            switch_instance = construct_svelte_component(switch_value, switch_props(ctx2));
            create_component(switch_instance.$$.fragment);
            transition_in(switch_instance.$$.fragment, 1);
            mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
          } else {
            switch_instance = null;
          }
        } else if (switch_value) {
          const switch_instance_changes = {};
          if (dirty & /*$$scope, renderers, rows, $$restProps, header*/
          8388716) {
            switch_instance_changes.$$scope = { dirty, ctx: ctx2 };
          }
          switch_instance.$set(switch_instance_changes);
        }
      },
      i(local) {
        if (current2) return;
        if (switch_instance) transition_in(switch_instance.$$.fragment, local);
        current2 = true;
      },
      o(local) {
        if (switch_instance) transition_out(switch_instance.$$.fragment, local);
        current2 = false;
      },
      d(detaching) {
        if (detaching) {
          detach(switch_instance_anchor);
        }
        if (switch_instance) destroy_component(switch_instance, detaching);
      }
    };
  }
  function create_else_block_2(ctx) {
    let t_value = (
      /*$$restProps*/
      ctx[6].raw + ""
    );
    let t;
    return {
      c() {
        t = text$3(t_value);
      },
      m(target2, anchor) {
        insert$1(target2, t, anchor);
      },
      p(ctx2, dirty) {
        if (dirty & /*$$restProps*/
        64 && t_value !== (t_value = /*$$restProps*/
        ctx2[6].raw + "")) set_data(t, t_value);
      },
      i: noop$5,
      o: noop$5,
      d(detaching) {
        if (detaching) {
          detach(t);
        }
      }
    };
  }
  function create_if_block_5$1(ctx) {
    let parser2;
    let current2;
    parser2 = new Parser$1({
      props: {
        tokens: (
          /*tokens*/
          ctx[1]
        ),
        renderers: (
          /*renderers*/
          ctx[5]
        )
      }
    });
    return {
      c() {
        create_component(parser2.$$.fragment);
      },
      m(target2, anchor) {
        mount_component(parser2, target2, anchor);
        current2 = true;
      },
      p(ctx2, dirty) {
        const parser_changes = {};
        if (dirty & /*tokens*/
        2) parser_changes.tokens = /*tokens*/
        ctx2[1];
        if (dirty & /*renderers*/
        32) parser_changes.renderers = /*renderers*/
        ctx2[5];
        parser2.$set(parser_changes);
      },
      i(local) {
        if (current2) return;
        transition_in(parser2.$$.fragment, local);
        current2 = true;
      },
      o(local) {
        transition_out(parser2.$$.fragment, local);
        current2 = false;
      },
      d(detaching) {
        destroy_component(parser2, detaching);
      }
    };
  }
  function create_default_slot_11(ctx) {
    let current_block_type_index;
    let if_block;
    let if_block_anchor;
    let current2;
    const if_block_creators = [create_if_block_5$1, create_else_block_2];
    const if_blocks = [];
    function select_block_type_3(ctx2, dirty) {
      if (
        /*tokens*/
        ctx2[1]
      ) return 0;
      return 1;
    }
    current_block_type_index = select_block_type_3(ctx);
    if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    return {
      c() {
        if_block.c();
        if_block_anchor = empty();
      },
      m(target2, anchor) {
        if_blocks[current_block_type_index].m(target2, anchor);
        insert$1(target2, if_block_anchor, anchor);
        current2 = true;
      },
      p(ctx2, dirty) {
        let previous_block_index = current_block_type_index;
        current_block_type_index = select_block_type_3(ctx2);
        if (current_block_type_index === previous_block_index) {
          if_blocks[current_block_type_index].p(ctx2, dirty);
        } else {
          group_outros();
          transition_out(if_blocks[previous_block_index], 1, 1, () => {
            if_blocks[previous_block_index] = null;
          });
          check_outros();
          if_block = if_blocks[current_block_type_index];
          if (!if_block) {
            if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
            if_block.c();
          } else {
            if_block.p(ctx2, dirty);
          }
          transition_in(if_block, 1);
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      },
      i(local) {
        if (current2) return;
        transition_in(if_block);
        current2 = true;
      },
      o(local) {
        transition_out(if_block);
        current2 = false;
      },
      d(detaching) {
        if (detaching) {
          detach(if_block_anchor);
        }
        if_blocks[current_block_type_index].d(detaching);
      }
    };
  }
  function create_else_block$7(ctx) {
    let switch_instance;
    let switch_instance_anchor;
    let current2;
    const switch_instance_spread_levels = [
      { ordered: (
        /*ordered*/
        ctx[4]
      ) },
      /*$$restProps*/
      ctx[6]
    ];
    var switch_value = (
      /*renderers*/
      ctx[5].list
    );
    function switch_props(ctx2, dirty) {
      let switch_instance_props = {
        $$slots: { default: [create_default_slot_9] },
        $$scope: { ctx: ctx2 }
      };
      for (let i = 0; i < switch_instance_spread_levels.length; i += 1) {
        switch_instance_props = assign(switch_instance_props, switch_instance_spread_levels[i]);
      }
      if (dirty !== void 0 && dirty & /*ordered, $$restProps*/
      80) {
        switch_instance_props = assign(switch_instance_props, get_spread_update(switch_instance_spread_levels, [
          dirty & /*ordered*/
          16 && { ordered: (
            /*ordered*/
            ctx2[4]
          ) },
          dirty & /*$$restProps*/
          64 && get_spread_object(
            /*$$restProps*/
            ctx2[6]
          )
        ]));
      }
      return { props: switch_instance_props };
    }
    if (switch_value) {
      switch_instance = construct_svelte_component(switch_value, switch_props(ctx));
    }
    return {
      c() {
        if (switch_instance) create_component(switch_instance.$$.fragment);
        switch_instance_anchor = empty();
      },
      m(target2, anchor) {
        if (switch_instance) mount_component(switch_instance, target2, anchor);
        insert$1(target2, switch_instance_anchor, anchor);
        current2 = true;
      },
      p(ctx2, dirty) {
        if (dirty & /*renderers*/
        32 && switch_value !== (switch_value = /*renderers*/
        ctx2[5].list)) {
          if (switch_instance) {
            group_outros();
            const old_component = switch_instance;
            transition_out(old_component.$$.fragment, 1, 0, () => {
              destroy_component(old_component, 1);
            });
            check_outros();
          }
          if (switch_value) {
            switch_instance = construct_svelte_component(switch_value, switch_props(ctx2, dirty));
            create_component(switch_instance.$$.fragment);
            transition_in(switch_instance.$$.fragment, 1);
            mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
          } else {
            switch_instance = null;
          }
        } else if (switch_value) {
          const switch_instance_changes = dirty & /*ordered, $$restProps*/
          80 ? get_spread_update(switch_instance_spread_levels, [
            dirty & /*ordered*/
            16 && { ordered: (
              /*ordered*/
              ctx2[4]
            ) },
            dirty & /*$$restProps*/
            64 && get_spread_object(
              /*$$restProps*/
              ctx2[6]
            )
          ]) : {};
          if (dirty & /*$$scope, $$restProps, renderers*/
          8388704) {
            switch_instance_changes.$$scope = { dirty, ctx: ctx2 };
          }
          switch_instance.$set(switch_instance_changes);
        }
      },
      i(local) {
        if (current2) return;
        if (switch_instance) transition_in(switch_instance.$$.fragment, local);
        current2 = true;
      },
      o(local) {
        if (switch_instance) transition_out(switch_instance.$$.fragment, local);
        current2 = false;
      },
      d(detaching) {
        if (detaching) {
          detach(switch_instance_anchor);
        }
        if (switch_instance) destroy_component(switch_instance, detaching);
      }
    };
  }
  function create_if_block_4$1(ctx) {
    let switch_instance;
    let switch_instance_anchor;
    let current2;
    const switch_instance_spread_levels = [
      { ordered: (
        /*ordered*/
        ctx[4]
      ) },
      /*$$restProps*/
      ctx[6]
    ];
    var switch_value = (
      /*renderers*/
      ctx[5].list
    );
    function switch_props(ctx2, dirty) {
      let switch_instance_props = {
        $$slots: { default: [create_default_slot_7] },
        $$scope: { ctx: ctx2 }
      };
      for (let i = 0; i < switch_instance_spread_levels.length; i += 1) {
        switch_instance_props = assign(switch_instance_props, switch_instance_spread_levels[i]);
      }
      if (dirty !== void 0 && dirty & /*ordered, $$restProps*/
      80) {
        switch_instance_props = assign(switch_instance_props, get_spread_update(switch_instance_spread_levels, [
          dirty & /*ordered*/
          16 && { ordered: (
            /*ordered*/
            ctx2[4]
          ) },
          dirty & /*$$restProps*/
          64 && get_spread_object(
            /*$$restProps*/
            ctx2[6]
          )
        ]));
      }
      return { props: switch_instance_props };
    }
    if (switch_value) {
      switch_instance = construct_svelte_component(switch_value, switch_props(ctx));
    }
    return {
      c() {
        if (switch_instance) create_component(switch_instance.$$.fragment);
        switch_instance_anchor = empty();
      },
      m(target2, anchor) {
        if (switch_instance) mount_component(switch_instance, target2, anchor);
        insert$1(target2, switch_instance_anchor, anchor);
        current2 = true;
      },
      p(ctx2, dirty) {
        if (dirty & /*renderers*/
        32 && switch_value !== (switch_value = /*renderers*/
        ctx2[5].list)) {
          if (switch_instance) {
            group_outros();
            const old_component = switch_instance;
            transition_out(old_component.$$.fragment, 1, 0, () => {
              destroy_component(old_component, 1);
            });
            check_outros();
          }
          if (switch_value) {
            switch_instance = construct_svelte_component(switch_value, switch_props(ctx2, dirty));
            create_component(switch_instance.$$.fragment);
            transition_in(switch_instance.$$.fragment, 1);
            mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
          } else {
            switch_instance = null;
          }
        } else if (switch_value) {
          const switch_instance_changes = dirty & /*ordered, $$restProps*/
          80 ? get_spread_update(switch_instance_spread_levels, [
            dirty & /*ordered*/
            16 && { ordered: (
              /*ordered*/
              ctx2[4]
            ) },
            dirty & /*$$restProps*/
            64 && get_spread_object(
              /*$$restProps*/
              ctx2[6]
            )
          ]) : {};
          if (dirty & /*$$scope, $$restProps, renderers*/
          8388704) {
            switch_instance_changes.$$scope = { dirty, ctx: ctx2 };
          }
          switch_instance.$set(switch_instance_changes);
        }
      },
      i(local) {
        if (current2) return;
        if (switch_instance) transition_in(switch_instance.$$.fragment, local);
        current2 = true;
      },
      o(local) {
        if (switch_instance) transition_out(switch_instance.$$.fragment, local);
        current2 = false;
      },
      d(detaching) {
        if (detaching) {
          detach(switch_instance_anchor);
        }
        if (switch_instance) destroy_component(switch_instance, detaching);
      }
    };
  }
  function create_default_slot_10(ctx) {
    let parser2;
    let t;
    let current2;
    parser2 = new Parser$1({
      props: {
        tokens: (
          /*item*/
          ctx[18].tokens
        ),
        renderers: (
          /*renderers*/
          ctx[5]
        )
      }
    });
    return {
      c() {
        create_component(parser2.$$.fragment);
        t = space();
      },
      m(target2, anchor) {
        mount_component(parser2, target2, anchor);
        insert$1(target2, t, anchor);
        current2 = true;
      },
      p(ctx2, dirty) {
        const parser_changes = {};
        if (dirty & /*$$restProps*/
        64) parser_changes.tokens = /*item*/
        ctx2[18].tokens;
        if (dirty & /*renderers*/
        32) parser_changes.renderers = /*renderers*/
        ctx2[5];
        parser2.$set(parser_changes);
      },
      i(local) {
        if (current2) return;
        transition_in(parser2.$$.fragment, local);
        current2 = true;
      },
      o(local) {
        transition_out(parser2.$$.fragment, local);
        current2 = false;
      },
      d(detaching) {
        if (detaching) {
          detach(t);
        }
        destroy_component(parser2, detaching);
      }
    };
  }
  function create_each_block_5(ctx) {
    let switch_instance;
    let switch_instance_anchor;
    let current2;
    const switch_instance_spread_levels = [
      /*item*/
      ctx[18]
    ];
    var switch_value = (
      /*renderers*/
      ctx[5].unorderedlistitem || /*renderers*/
      ctx[5].listitem
    );
    function switch_props(ctx2, dirty) {
      let switch_instance_props = {
        $$slots: { default: [create_default_slot_10] },
        $$scope: { ctx: ctx2 }
      };
      for (let i = 0; i < switch_instance_spread_levels.length; i += 1) {
        switch_instance_props = assign(switch_instance_props, switch_instance_spread_levels[i]);
      }
      if (dirty !== void 0 && dirty & /*$$restProps*/
      64) {
        switch_instance_props = assign(switch_instance_props, get_spread_update(switch_instance_spread_levels, [get_spread_object(
          /*item*/
          ctx2[18]
        )]));
      }
      return { props: switch_instance_props };
    }
    if (switch_value) {
      switch_instance = construct_svelte_component(switch_value, switch_props(ctx));
    }
    return {
      c() {
        if (switch_instance) create_component(switch_instance.$$.fragment);
        switch_instance_anchor = empty();
      },
      m(target2, anchor) {
        if (switch_instance) mount_component(switch_instance, target2, anchor);
        insert$1(target2, switch_instance_anchor, anchor);
        current2 = true;
      },
      p(ctx2, dirty) {
        if (dirty & /*renderers*/
        32 && switch_value !== (switch_value = /*renderers*/
        ctx2[5].unorderedlistitem || /*renderers*/
        ctx2[5].listitem)) {
          if (switch_instance) {
            group_outros();
            const old_component = switch_instance;
            transition_out(old_component.$$.fragment, 1, 0, () => {
              destroy_component(old_component, 1);
            });
            check_outros();
          }
          if (switch_value) {
            switch_instance = construct_svelte_component(switch_value, switch_props(ctx2, dirty));
            create_component(switch_instance.$$.fragment);
            transition_in(switch_instance.$$.fragment, 1);
            mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
          } else {
            switch_instance = null;
          }
        } else if (switch_value) {
          const switch_instance_changes = dirty & /*$$restProps*/
          64 ? get_spread_update(switch_instance_spread_levels, [get_spread_object(
            /*item*/
            ctx2[18]
          )]) : {};
          if (dirty & /*$$scope, $$restProps, renderers*/
          8388704) {
            switch_instance_changes.$$scope = { dirty, ctx: ctx2 };
          }
          switch_instance.$set(switch_instance_changes);
        }
      },
      i(local) {
        if (current2) return;
        if (switch_instance) transition_in(switch_instance.$$.fragment, local);
        current2 = true;
      },
      o(local) {
        if (switch_instance) transition_out(switch_instance.$$.fragment, local);
        current2 = false;
      },
      d(detaching) {
        if (detaching) {
          detach(switch_instance_anchor);
        }
        if (switch_instance) destroy_component(switch_instance, detaching);
      }
    };
  }
  function create_default_slot_9(ctx) {
    let each_1_anchor;
    let current2;
    let each_value_5 = ensure_array_like(
      /*$$restProps*/
      ctx[6].items
    );
    let each_blocks = [];
    for (let i = 0; i < each_value_5.length; i += 1) {
      each_blocks[i] = create_each_block_5(get_each_context_5(ctx, each_value_5, i));
    }
    const out = (i) => transition_out(each_blocks[i], 1, 1, () => {
      each_blocks[i] = null;
    });
    return {
      c() {
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        each_1_anchor = empty();
      },
      m(target2, anchor) {
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(target2, anchor);
          }
        }
        insert$1(target2, each_1_anchor, anchor);
        current2 = true;
      },
      p(ctx2, dirty) {
        if (dirty & /*renderers, $$restProps*/
        96) {
          each_value_5 = ensure_array_like(
            /*$$restProps*/
            ctx2[6].items
          );
          let i;
          for (i = 0; i < each_value_5.length; i += 1) {
            const child_ctx = get_each_context_5(ctx2, each_value_5, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
              transition_in(each_blocks[i], 1);
            } else {
              each_blocks[i] = create_each_block_5(child_ctx);
              each_blocks[i].c();
              transition_in(each_blocks[i], 1);
              each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
            }
          }
          group_outros();
          for (i = each_value_5.length; i < each_blocks.length; i += 1) {
            out(i);
          }
          check_outros();
        }
      },
      i(local) {
        if (current2) return;
        for (let i = 0; i < each_value_5.length; i += 1) {
          transition_in(each_blocks[i]);
        }
        current2 = true;
      },
      o(local) {
        each_blocks = each_blocks.filter(Boolean);
        for (let i = 0; i < each_blocks.length; i += 1) {
          transition_out(each_blocks[i]);
        }
        current2 = false;
      },
      d(detaching) {
        if (detaching) {
          detach(each_1_anchor);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_default_slot_8(ctx) {
    let parser2;
    let t;
    let current2;
    parser2 = new Parser$1({
      props: {
        tokens: (
          /*item*/
          ctx[18].tokens
        ),
        renderers: (
          /*renderers*/
          ctx[5]
        )
      }
    });
    return {
      c() {
        create_component(parser2.$$.fragment);
        t = space();
      },
      m(target2, anchor) {
        mount_component(parser2, target2, anchor);
        insert$1(target2, t, anchor);
        current2 = true;
      },
      p(ctx2, dirty) {
        const parser_changes = {};
        if (dirty & /*$$restProps*/
        64) parser_changes.tokens = /*item*/
        ctx2[18].tokens;
        if (dirty & /*renderers*/
        32) parser_changes.renderers = /*renderers*/
        ctx2[5];
        parser2.$set(parser_changes);
      },
      i(local) {
        if (current2) return;
        transition_in(parser2.$$.fragment, local);
        current2 = true;
      },
      o(local) {
        transition_out(parser2.$$.fragment, local);
        current2 = false;
      },
      d(detaching) {
        if (detaching) {
          detach(t);
        }
        destroy_component(parser2, detaching);
      }
    };
  }
  function create_each_block_4(ctx) {
    let switch_instance;
    let switch_instance_anchor;
    let current2;
    const switch_instance_spread_levels = [
      /*item*/
      ctx[18]
    ];
    var switch_value = (
      /*renderers*/
      ctx[5].orderedlistitem || /*renderers*/
      ctx[5].listitem
    );
    function switch_props(ctx2, dirty) {
      let switch_instance_props = {
        $$slots: { default: [create_default_slot_8] },
        $$scope: { ctx: ctx2 }
      };
      for (let i = 0; i < switch_instance_spread_levels.length; i += 1) {
        switch_instance_props = assign(switch_instance_props, switch_instance_spread_levels[i]);
      }
      if (dirty !== void 0 && dirty & /*$$restProps*/
      64) {
        switch_instance_props = assign(switch_instance_props, get_spread_update(switch_instance_spread_levels, [get_spread_object(
          /*item*/
          ctx2[18]
        )]));
      }
      return { props: switch_instance_props };
    }
    if (switch_value) {
      switch_instance = construct_svelte_component(switch_value, switch_props(ctx));
    }
    return {
      c() {
        if (switch_instance) create_component(switch_instance.$$.fragment);
        switch_instance_anchor = empty();
      },
      m(target2, anchor) {
        if (switch_instance) mount_component(switch_instance, target2, anchor);
        insert$1(target2, switch_instance_anchor, anchor);
        current2 = true;
      },
      p(ctx2, dirty) {
        if (dirty & /*renderers*/
        32 && switch_value !== (switch_value = /*renderers*/
        ctx2[5].orderedlistitem || /*renderers*/
        ctx2[5].listitem)) {
          if (switch_instance) {
            group_outros();
            const old_component = switch_instance;
            transition_out(old_component.$$.fragment, 1, 0, () => {
              destroy_component(old_component, 1);
            });
            check_outros();
          }
          if (switch_value) {
            switch_instance = construct_svelte_component(switch_value, switch_props(ctx2, dirty));
            create_component(switch_instance.$$.fragment);
            transition_in(switch_instance.$$.fragment, 1);
            mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
          } else {
            switch_instance = null;
          }
        } else if (switch_value) {
          const switch_instance_changes = dirty & /*$$restProps*/
          64 ? get_spread_update(switch_instance_spread_levels, [get_spread_object(
            /*item*/
            ctx2[18]
          )]) : {};
          if (dirty & /*$$scope, $$restProps, renderers*/
          8388704) {
            switch_instance_changes.$$scope = { dirty, ctx: ctx2 };
          }
          switch_instance.$set(switch_instance_changes);
        }
      },
      i(local) {
        if (current2) return;
        if (switch_instance) transition_in(switch_instance.$$.fragment, local);
        current2 = true;
      },
      o(local) {
        if (switch_instance) transition_out(switch_instance.$$.fragment, local);
        current2 = false;
      },
      d(detaching) {
        if (detaching) {
          detach(switch_instance_anchor);
        }
        if (switch_instance) destroy_component(switch_instance, detaching);
      }
    };
  }
  function create_default_slot_7(ctx) {
    let each_1_anchor;
    let current2;
    let each_value_4 = ensure_array_like(
      /*$$restProps*/
      ctx[6].items
    );
    let each_blocks = [];
    for (let i = 0; i < each_value_4.length; i += 1) {
      each_blocks[i] = create_each_block_4(get_each_context_4(ctx, each_value_4, i));
    }
    const out = (i) => transition_out(each_blocks[i], 1, 1, () => {
      each_blocks[i] = null;
    });
    return {
      c() {
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        each_1_anchor = empty();
      },
      m(target2, anchor) {
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(target2, anchor);
          }
        }
        insert$1(target2, each_1_anchor, anchor);
        current2 = true;
      },
      p(ctx2, dirty) {
        if (dirty & /*renderers, $$restProps*/
        96) {
          each_value_4 = ensure_array_like(
            /*$$restProps*/
            ctx2[6].items
          );
          let i;
          for (i = 0; i < each_value_4.length; i += 1) {
            const child_ctx = get_each_context_4(ctx2, each_value_4, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
              transition_in(each_blocks[i], 1);
            } else {
              each_blocks[i] = create_each_block_4(child_ctx);
              each_blocks[i].c();
              transition_in(each_blocks[i], 1);
              each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
            }
          }
          group_outros();
          for (i = each_value_4.length; i < each_blocks.length; i += 1) {
            out(i);
          }
          check_outros();
        }
      },
      i(local) {
        if (current2) return;
        for (let i = 0; i < each_value_4.length; i += 1) {
          transition_in(each_blocks[i]);
        }
        current2 = true;
      },
      o(local) {
        each_blocks = each_blocks.filter(Boolean);
        for (let i = 0; i < each_blocks.length; i += 1) {
          transition_out(each_blocks[i]);
        }
        current2 = false;
      },
      d(detaching) {
        if (detaching) {
          detach(each_1_anchor);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_default_slot_6(ctx) {
    let parser2;
    let t;
    let current2;
    parser2 = new Parser$1({
      props: {
        tokens: (
          /*headerItem*/
          ctx[16].tokens
        ),
        renderers: (
          /*renderers*/
          ctx[5]
        )
      }
    });
    return {
      c() {
        create_component(parser2.$$.fragment);
        t = space();
      },
      m(target2, anchor) {
        mount_component(parser2, target2, anchor);
        insert$1(target2, t, anchor);
        current2 = true;
      },
      p(ctx2, dirty) {
        const parser_changes = {};
        if (dirty & /*header*/
        4) parser_changes.tokens = /*headerItem*/
        ctx2[16].tokens;
        if (dirty & /*renderers*/
        32) parser_changes.renderers = /*renderers*/
        ctx2[5];
        parser2.$set(parser_changes);
      },
      i(local) {
        if (current2) return;
        transition_in(parser2.$$.fragment, local);
        current2 = true;
      },
      o(local) {
        transition_out(parser2.$$.fragment, local);
        current2 = false;
      },
      d(detaching) {
        if (detaching) {
          detach(t);
        }
        destroy_component(parser2, detaching);
      }
    };
  }
  function create_each_block_3(ctx) {
    let switch_instance;
    let switch_instance_anchor;
    let current2;
    var switch_value = (
      /*renderers*/
      ctx[5].tablecell
    );
    function switch_props(ctx2, dirty) {
      return {
        props: {
          header: true,
          align: (
            /*$$restProps*/
            ctx2[6].align[
              /*i*/
              ctx2[15]
            ] || "center"
          ),
          $$slots: { default: [create_default_slot_6] },
          $$scope: { ctx: ctx2 }
        }
      };
    }
    if (switch_value) {
      switch_instance = construct_svelte_component(switch_value, switch_props(ctx));
    }
    return {
      c() {
        if (switch_instance) create_component(switch_instance.$$.fragment);
        switch_instance_anchor = empty();
      },
      m(target2, anchor) {
        if (switch_instance) mount_component(switch_instance, target2, anchor);
        insert$1(target2, switch_instance_anchor, anchor);
        current2 = true;
      },
      p(ctx2, dirty) {
        if (dirty & /*renderers*/
        32 && switch_value !== (switch_value = /*renderers*/
        ctx2[5].tablecell)) {
          if (switch_instance) {
            group_outros();
            const old_component = switch_instance;
            transition_out(old_component.$$.fragment, 1, 0, () => {
              destroy_component(old_component, 1);
            });
            check_outros();
          }
          if (switch_value) {
            switch_instance = construct_svelte_component(switch_value, switch_props(ctx2));
            create_component(switch_instance.$$.fragment);
            transition_in(switch_instance.$$.fragment, 1);
            mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
          } else {
            switch_instance = null;
          }
        } else if (switch_value) {
          const switch_instance_changes = {};
          if (dirty & /*$$restProps*/
          64) switch_instance_changes.align = /*$$restProps*/
          ctx2[6].align[
            /*i*/
            ctx2[15]
          ] || "center";
          if (dirty & /*$$scope, header, renderers*/
          8388644) {
            switch_instance_changes.$$scope = { dirty, ctx: ctx2 };
          }
          switch_instance.$set(switch_instance_changes);
        }
      },
      i(local) {
        if (current2) return;
        if (switch_instance) transition_in(switch_instance.$$.fragment, local);
        current2 = true;
      },
      o(local) {
        if (switch_instance) transition_out(switch_instance.$$.fragment, local);
        current2 = false;
      },
      d(detaching) {
        if (detaching) {
          detach(switch_instance_anchor);
        }
        if (switch_instance) destroy_component(switch_instance, detaching);
      }
    };
  }
  function create_default_slot_5(ctx) {
    let each_1_anchor;
    let current2;
    let each_value_3 = ensure_array_like(
      /*header*/
      ctx[2]
    );
    let each_blocks = [];
    for (let i = 0; i < each_value_3.length; i += 1) {
      each_blocks[i] = create_each_block_3(get_each_context_3(ctx, each_value_3, i));
    }
    const out = (i) => transition_out(each_blocks[i], 1, 1, () => {
      each_blocks[i] = null;
    });
    return {
      c() {
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        each_1_anchor = empty();
      },
      m(target2, anchor) {
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(target2, anchor);
          }
        }
        insert$1(target2, each_1_anchor, anchor);
        current2 = true;
      },
      p(ctx2, dirty) {
        if (dirty & /*renderers, $$restProps, header*/
        100) {
          each_value_3 = ensure_array_like(
            /*header*/
            ctx2[2]
          );
          let i;
          for (i = 0; i < each_value_3.length; i += 1) {
            const child_ctx = get_each_context_3(ctx2, each_value_3, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
              transition_in(each_blocks[i], 1);
            } else {
              each_blocks[i] = create_each_block_3(child_ctx);
              each_blocks[i].c();
              transition_in(each_blocks[i], 1);
              each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
            }
          }
          group_outros();
          for (i = each_value_3.length; i < each_blocks.length; i += 1) {
            out(i);
          }
          check_outros();
        }
      },
      i(local) {
        if (current2) return;
        for (let i = 0; i < each_value_3.length; i += 1) {
          transition_in(each_blocks[i]);
        }
        current2 = true;
      },
      o(local) {
        each_blocks = each_blocks.filter(Boolean);
        for (let i = 0; i < each_blocks.length; i += 1) {
          transition_out(each_blocks[i]);
        }
        current2 = false;
      },
      d(detaching) {
        if (detaching) {
          detach(each_1_anchor);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_default_slot_4(ctx) {
    let switch_instance;
    let switch_instance_anchor;
    let current2;
    var switch_value = (
      /*renderers*/
      ctx[5].tablerow
    );
    function switch_props(ctx2, dirty) {
      return {
        props: {
          $$slots: { default: [create_default_slot_5] },
          $$scope: { ctx: ctx2 }
        }
      };
    }
    if (switch_value) {
      switch_instance = construct_svelte_component(switch_value, switch_props(ctx));
    }
    return {
      c() {
        if (switch_instance) create_component(switch_instance.$$.fragment);
        switch_instance_anchor = empty();
      },
      m(target2, anchor) {
        if (switch_instance) mount_component(switch_instance, target2, anchor);
        insert$1(target2, switch_instance_anchor, anchor);
        current2 = true;
      },
      p(ctx2, dirty) {
        if (dirty & /*renderers*/
        32 && switch_value !== (switch_value = /*renderers*/
        ctx2[5].tablerow)) {
          if (switch_instance) {
            group_outros();
            const old_component = switch_instance;
            transition_out(old_component.$$.fragment, 1, 0, () => {
              destroy_component(old_component, 1);
            });
            check_outros();
          }
          if (switch_value) {
            switch_instance = construct_svelte_component(switch_value, switch_props(ctx2));
            create_component(switch_instance.$$.fragment);
            transition_in(switch_instance.$$.fragment, 1);
            mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
          } else {
            switch_instance = null;
          }
        } else if (switch_value) {
          const switch_instance_changes = {};
          if (dirty & /*$$scope, header, renderers, $$restProps*/
          8388708) {
            switch_instance_changes.$$scope = { dirty, ctx: ctx2 };
          }
          switch_instance.$set(switch_instance_changes);
        }
      },
      i(local) {
        if (current2) return;
        if (switch_instance) transition_in(switch_instance.$$.fragment, local);
        current2 = true;
      },
      o(local) {
        if (switch_instance) transition_out(switch_instance.$$.fragment, local);
        current2 = false;
      },
      d(detaching) {
        if (detaching) {
          detach(switch_instance_anchor);
        }
        if (switch_instance) destroy_component(switch_instance, detaching);
      }
    };
  }
  function create_default_slot_3(ctx) {
    let parser2;
    let current2;
    parser2 = new Parser$1({
      props: {
        tokens: (
          /*cells*/
          ctx[13].tokens
        ),
        renderers: (
          /*renderers*/
          ctx[5]
        )
      }
    });
    return {
      c() {
        create_component(parser2.$$.fragment);
      },
      m(target2, anchor) {
        mount_component(parser2, target2, anchor);
        current2 = true;
      },
      p(ctx2, dirty) {
        const parser_changes = {};
        if (dirty & /*rows*/
        8) parser_changes.tokens = /*cells*/
        ctx2[13].tokens;
        if (dirty & /*renderers*/
        32) parser_changes.renderers = /*renderers*/
        ctx2[5];
        parser2.$set(parser_changes);
      },
      i(local) {
        if (current2) return;
        transition_in(parser2.$$.fragment, local);
        current2 = true;
      },
      o(local) {
        transition_out(parser2.$$.fragment, local);
        current2 = false;
      },
      d(detaching) {
        destroy_component(parser2, detaching);
      }
    };
  }
  function create_each_block_2$1(ctx) {
    let switch_instance;
    let switch_instance_anchor;
    let current2;
    var switch_value = (
      /*renderers*/
      ctx[5].tablecell
    );
    function switch_props(ctx2, dirty) {
      return {
        props: {
          header: false,
          align: (
            /*$$restProps*/
            ctx2[6].align[
              /*i*/
              ctx2[15]
            ] || "center"
          ),
          $$slots: { default: [create_default_slot_3] },
          $$scope: { ctx: ctx2 }
        }
      };
    }
    if (switch_value) {
      switch_instance = construct_svelte_component(switch_value, switch_props(ctx));
    }
    return {
      c() {
        if (switch_instance) create_component(switch_instance.$$.fragment);
        switch_instance_anchor = empty();
      },
      m(target2, anchor) {
        if (switch_instance) mount_component(switch_instance, target2, anchor);
        insert$1(target2, switch_instance_anchor, anchor);
        current2 = true;
      },
      p(ctx2, dirty) {
        if (dirty & /*renderers*/
        32 && switch_value !== (switch_value = /*renderers*/
        ctx2[5].tablecell)) {
          if (switch_instance) {
            group_outros();
            const old_component = switch_instance;
            transition_out(old_component.$$.fragment, 1, 0, () => {
              destroy_component(old_component, 1);
            });
            check_outros();
          }
          if (switch_value) {
            switch_instance = construct_svelte_component(switch_value, switch_props(ctx2));
            create_component(switch_instance.$$.fragment);
            transition_in(switch_instance.$$.fragment, 1);
            mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
          } else {
            switch_instance = null;
          }
        } else if (switch_value) {
          const switch_instance_changes = {};
          if (dirty & /*$$restProps*/
          64) switch_instance_changes.align = /*$$restProps*/
          ctx2[6].align[
            /*i*/
            ctx2[15]
          ] || "center";
          if (dirty & /*$$scope, rows, renderers*/
          8388648) {
            switch_instance_changes.$$scope = { dirty, ctx: ctx2 };
          }
          switch_instance.$set(switch_instance_changes);
        }
      },
      i(local) {
        if (current2) return;
        if (switch_instance) transition_in(switch_instance.$$.fragment, local);
        current2 = true;
      },
      o(local) {
        if (switch_instance) transition_out(switch_instance.$$.fragment, local);
        current2 = false;
      },
      d(detaching) {
        if (detaching) {
          detach(switch_instance_anchor);
        }
        if (switch_instance) destroy_component(switch_instance, detaching);
      }
    };
  }
  function create_default_slot_2(ctx) {
    let t;
    let current2;
    let each_value_2 = ensure_array_like(
      /*row*/
      ctx[10]
    );
    let each_blocks = [];
    for (let i = 0; i < each_value_2.length; i += 1) {
      each_blocks[i] = create_each_block_2$1(get_each_context_2$1(ctx, each_value_2, i));
    }
    const out = (i) => transition_out(each_blocks[i], 1, 1, () => {
      each_blocks[i] = null;
    });
    return {
      c() {
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        t = space();
      },
      m(target2, anchor) {
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(target2, anchor);
          }
        }
        insert$1(target2, t, anchor);
        current2 = true;
      },
      p(ctx2, dirty) {
        if (dirty & /*renderers, $$restProps, rows*/
        104) {
          each_value_2 = ensure_array_like(
            /*row*/
            ctx2[10]
          );
          let i;
          for (i = 0; i < each_value_2.length; i += 1) {
            const child_ctx = get_each_context_2$1(ctx2, each_value_2, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
              transition_in(each_blocks[i], 1);
            } else {
              each_blocks[i] = create_each_block_2$1(child_ctx);
              each_blocks[i].c();
              transition_in(each_blocks[i], 1);
              each_blocks[i].m(t.parentNode, t);
            }
          }
          group_outros();
          for (i = each_value_2.length; i < each_blocks.length; i += 1) {
            out(i);
          }
          check_outros();
        }
      },
      i(local) {
        if (current2) return;
        for (let i = 0; i < each_value_2.length; i += 1) {
          transition_in(each_blocks[i]);
        }
        current2 = true;
      },
      o(local) {
        each_blocks = each_blocks.filter(Boolean);
        for (let i = 0; i < each_blocks.length; i += 1) {
          transition_out(each_blocks[i]);
        }
        current2 = false;
      },
      d(detaching) {
        if (detaching) {
          detach(t);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_each_block_1$3(ctx) {
    let switch_instance;
    let switch_instance_anchor;
    let current2;
    var switch_value = (
      /*renderers*/
      ctx[5].tablerow
    );
    function switch_props(ctx2, dirty) {
      return {
        props: {
          $$slots: { default: [create_default_slot_2] },
          $$scope: { ctx: ctx2 }
        }
      };
    }
    if (switch_value) {
      switch_instance = construct_svelte_component(switch_value, switch_props(ctx));
    }
    return {
      c() {
        if (switch_instance) create_component(switch_instance.$$.fragment);
        switch_instance_anchor = empty();
      },
      m(target2, anchor) {
        if (switch_instance) mount_component(switch_instance, target2, anchor);
        insert$1(target2, switch_instance_anchor, anchor);
        current2 = true;
      },
      p(ctx2, dirty) {
        if (dirty & /*renderers*/
        32 && switch_value !== (switch_value = /*renderers*/
        ctx2[5].tablerow)) {
          if (switch_instance) {
            group_outros();
            const old_component = switch_instance;
            transition_out(old_component.$$.fragment, 1, 0, () => {
              destroy_component(old_component, 1);
            });
            check_outros();
          }
          if (switch_value) {
            switch_instance = construct_svelte_component(switch_value, switch_props(ctx2));
            create_component(switch_instance.$$.fragment);
            transition_in(switch_instance.$$.fragment, 1);
            mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
          } else {
            switch_instance = null;
          }
        } else if (switch_value) {
          const switch_instance_changes = {};
          if (dirty & /*$$scope, rows, renderers, $$restProps*/
          8388712) {
            switch_instance_changes.$$scope = { dirty, ctx: ctx2 };
          }
          switch_instance.$set(switch_instance_changes);
        }
      },
      i(local) {
        if (current2) return;
        if (switch_instance) transition_in(switch_instance.$$.fragment, local);
        current2 = true;
      },
      o(local) {
        if (switch_instance) transition_out(switch_instance.$$.fragment, local);
        current2 = false;
      },
      d(detaching) {
        if (detaching) {
          detach(switch_instance_anchor);
        }
        if (switch_instance) destroy_component(switch_instance, detaching);
      }
    };
  }
  function create_default_slot_1$1(ctx) {
    let each_1_anchor;
    let current2;
    let each_value_1 = ensure_array_like(
      /*rows*/
      ctx[3]
    );
    let each_blocks = [];
    for (let i = 0; i < each_value_1.length; i += 1) {
      each_blocks[i] = create_each_block_1$3(get_each_context_1$3(ctx, each_value_1, i));
    }
    const out = (i) => transition_out(each_blocks[i], 1, 1, () => {
      each_blocks[i] = null;
    });
    return {
      c() {
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        each_1_anchor = empty();
      },
      m(target2, anchor) {
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(target2, anchor);
          }
        }
        insert$1(target2, each_1_anchor, anchor);
        current2 = true;
      },
      p(ctx2, dirty) {
        if (dirty & /*renderers, rows, $$restProps*/
        104) {
          each_value_1 = ensure_array_like(
            /*rows*/
            ctx2[3]
          );
          let i;
          for (i = 0; i < each_value_1.length; i += 1) {
            const child_ctx = get_each_context_1$3(ctx2, each_value_1, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
              transition_in(each_blocks[i], 1);
            } else {
              each_blocks[i] = create_each_block_1$3(child_ctx);
              each_blocks[i].c();
              transition_in(each_blocks[i], 1);
              each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
            }
          }
          group_outros();
          for (i = each_value_1.length; i < each_blocks.length; i += 1) {
            out(i);
          }
          check_outros();
        }
      },
      i(local) {
        if (current2) return;
        for (let i = 0; i < each_value_1.length; i += 1) {
          transition_in(each_blocks[i]);
        }
        current2 = true;
      },
      o(local) {
        each_blocks = each_blocks.filter(Boolean);
        for (let i = 0; i < each_blocks.length; i += 1) {
          transition_out(each_blocks[i]);
        }
        current2 = false;
      },
      d(detaching) {
        if (detaching) {
          detach(each_1_anchor);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_default_slot$2(ctx) {
    let switch_instance0;
    let t;
    let switch_instance1;
    let switch_instance1_anchor;
    let current2;
    var switch_value = (
      /*renderers*/
      ctx[5].tablehead
    );
    function switch_props(ctx2, dirty) {
      return {
        props: {
          $$slots: { default: [create_default_slot_4] },
          $$scope: { ctx: ctx2 }
        }
      };
    }
    if (switch_value) {
      switch_instance0 = construct_svelte_component(switch_value, switch_props(ctx));
    }
    var switch_value_1 = (
      /*renderers*/
      ctx[5].tablebody
    );
    function switch_props_1(ctx2, dirty) {
      return {
        props: {
          $$slots: { default: [create_default_slot_1$1] },
          $$scope: { ctx: ctx2 }
        }
      };
    }
    if (switch_value_1) {
      switch_instance1 = construct_svelte_component(switch_value_1, switch_props_1(ctx));
    }
    return {
      c() {
        if (switch_instance0) create_component(switch_instance0.$$.fragment);
        t = space();
        if (switch_instance1) create_component(switch_instance1.$$.fragment);
        switch_instance1_anchor = empty();
      },
      m(target2, anchor) {
        if (switch_instance0) mount_component(switch_instance0, target2, anchor);
        insert$1(target2, t, anchor);
        if (switch_instance1) mount_component(switch_instance1, target2, anchor);
        insert$1(target2, switch_instance1_anchor, anchor);
        current2 = true;
      },
      p(ctx2, dirty) {
        if (dirty & /*renderers*/
        32 && switch_value !== (switch_value = /*renderers*/
        ctx2[5].tablehead)) {
          if (switch_instance0) {
            group_outros();
            const old_component = switch_instance0;
            transition_out(old_component.$$.fragment, 1, 0, () => {
              destroy_component(old_component, 1);
            });
            check_outros();
          }
          if (switch_value) {
            switch_instance0 = construct_svelte_component(switch_value, switch_props(ctx2));
            create_component(switch_instance0.$$.fragment);
            transition_in(switch_instance0.$$.fragment, 1);
            mount_component(switch_instance0, t.parentNode, t);
          } else {
            switch_instance0 = null;
          }
        } else if (switch_value) {
          const switch_instance0_changes = {};
          if (dirty & /*$$scope, renderers, header, $$restProps*/
          8388708) {
            switch_instance0_changes.$$scope = { dirty, ctx: ctx2 };
          }
          switch_instance0.$set(switch_instance0_changes);
        }
        if (dirty & /*renderers*/
        32 && switch_value_1 !== (switch_value_1 = /*renderers*/
        ctx2[5].tablebody)) {
          if (switch_instance1) {
            group_outros();
            const old_component = switch_instance1;
            transition_out(old_component.$$.fragment, 1, 0, () => {
              destroy_component(old_component, 1);
            });
            check_outros();
          }
          if (switch_value_1) {
            switch_instance1 = construct_svelte_component(switch_value_1, switch_props_1(ctx2));
            create_component(switch_instance1.$$.fragment);
            transition_in(switch_instance1.$$.fragment, 1);
            mount_component(switch_instance1, switch_instance1_anchor.parentNode, switch_instance1_anchor);
          } else {
            switch_instance1 = null;
          }
        } else if (switch_value_1) {
          const switch_instance1_changes = {};
          if (dirty & /*$$scope, rows, renderers, $$restProps*/
          8388712) {
            switch_instance1_changes.$$scope = { dirty, ctx: ctx2 };
          }
          switch_instance1.$set(switch_instance1_changes);
        }
      },
      i(local) {
        if (current2) return;
        if (switch_instance0) transition_in(switch_instance0.$$.fragment, local);
        if (switch_instance1) transition_in(switch_instance1.$$.fragment, local);
        current2 = true;
      },
      o(local) {
        if (switch_instance0) transition_out(switch_instance0.$$.fragment, local);
        if (switch_instance1) transition_out(switch_instance1.$$.fragment, local);
        current2 = false;
      },
      d(detaching) {
        if (detaching) {
          detach(t);
          detach(switch_instance1_anchor);
        }
        if (switch_instance0) destroy_component(switch_instance0, detaching);
        if (switch_instance1) destroy_component(switch_instance1, detaching);
      }
    };
  }
  function create_each_block$5(ctx) {
    let parser2;
    let current2;
    const parser_spread_levels = [
      /*token*/
      ctx[7],
      { renderers: (
        /*renderers*/
        ctx[5]
      ) }
    ];
    let parser_props = {};
    for (let i = 0; i < parser_spread_levels.length; i += 1) {
      parser_props = assign(parser_props, parser_spread_levels[i]);
    }
    parser2 = new Parser$1({ props: parser_props });
    return {
      c() {
        create_component(parser2.$$.fragment);
      },
      m(target2, anchor) {
        mount_component(parser2, target2, anchor);
        current2 = true;
      },
      p(ctx2, dirty) {
        const parser_changes = dirty & /*tokens, renderers*/
        34 ? get_spread_update(parser_spread_levels, [
          dirty & /*tokens*/
          2 && get_spread_object(
            /*token*/
            ctx2[7]
          ),
          dirty & /*renderers*/
          32 && { renderers: (
            /*renderers*/
            ctx2[5]
          ) }
        ]) : {};
        parser2.$set(parser_changes);
      },
      i(local) {
        if (current2) return;
        transition_in(parser2.$$.fragment, local);
        current2 = true;
      },
      o(local) {
        transition_out(parser2.$$.fragment, local);
        current2 = false;
      },
      d(detaching) {
        destroy_component(parser2, detaching);
      }
    };
  }
  function create_fragment$F(ctx) {
    let current_block_type_index;
    let if_block;
    let if_block_anchor;
    let current2;
    const if_block_creators = [create_if_block$f, create_if_block_1$5];
    const if_blocks = [];
    function select_block_type(ctx2, dirty) {
      if (!/*type*/
      ctx2[0]) return 0;
      if (
        /*renderers*/
        ctx2[5][
          /*type*/
          ctx2[0]
        ]
      ) return 1;
      return -1;
    }
    if (~(current_block_type_index = select_block_type(ctx))) {
      if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    }
    return {
      c() {
        if (if_block) if_block.c();
        if_block_anchor = empty();
      },
      m(target2, anchor) {
        if (~current_block_type_index) {
          if_blocks[current_block_type_index].m(target2, anchor);
        }
        insert$1(target2, if_block_anchor, anchor);
        current2 = true;
      },
      p(ctx2, [dirty]) {
        let previous_block_index = current_block_type_index;
        current_block_type_index = select_block_type(ctx2);
        if (current_block_type_index === previous_block_index) {
          if (~current_block_type_index) {
            if_blocks[current_block_type_index].p(ctx2, dirty);
          }
        } else {
          if (if_block) {
            group_outros();
            transition_out(if_blocks[previous_block_index], 1, 1, () => {
              if_blocks[previous_block_index] = null;
            });
            check_outros();
          }
          if (~current_block_type_index) {
            if_block = if_blocks[current_block_type_index];
            if (!if_block) {
              if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
              if_block.c();
            } else {
              if_block.p(ctx2, dirty);
            }
            transition_in(if_block, 1);
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          } else {
            if_block = null;
          }
        }
      },
      i(local) {
        if (current2) return;
        transition_in(if_block);
        current2 = true;
      },
      o(local) {
        transition_out(if_block);
        current2 = false;
      },
      d(detaching) {
        if (detaching) {
          detach(if_block_anchor);
        }
        if (~current_block_type_index) {
          if_blocks[current_block_type_index].d(detaching);
        }
      }
    };
  }
  function instance$E($$self, $$props, $$invalidate) {
    const omit_props_names = ["type", "tokens", "header", "rows", "ordered", "renderers"];
    let $$restProps = compute_rest_props($$props, omit_props_names);
    let { type: type2 = void 0 } = $$props;
    let { tokens = void 0 } = $$props;
    let { header = void 0 } = $$props;
    let { rows = void 0 } = $$props;
    let { ordered = false } = $$props;
    let { renderers } = $$props;
    supressWarnings();
    $$self.$$set = ($$new_props) => {
      $$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
      $$invalidate(6, $$restProps = compute_rest_props($$props, omit_props_names));
      if ("type" in $$new_props) $$invalidate(0, type2 = $$new_props.type);
      if ("tokens" in $$new_props) $$invalidate(1, tokens = $$new_props.tokens);
      if ("header" in $$new_props) $$invalidate(2, header = $$new_props.header);
      if ("rows" in $$new_props) $$invalidate(3, rows = $$new_props.rows);
      if ("ordered" in $$new_props) $$invalidate(4, ordered = $$new_props.ordered);
      if ("renderers" in $$new_props) $$invalidate(5, renderers = $$new_props.renderers);
    };
    return [type2, tokens, header, rows, ordered, renderers, $$restProps];
  }
  let Parser$1 = class Parser extends SvelteComponent {
    constructor(options) {
      super();
      init$1(this, options, instance$E, create_fragment$F, safe_not_equal, {
        type: 0,
        tokens: 1,
        header: 2,
        rows: 3,
        ordered: 4,
        renderers: 5
      });
    }
  };
  function getDefaults() {
    return {
      async: false,
      baseUrl: null,
      breaks: false,
      extensions: null,
      gfm: true,
      headerIds: true,
      headerPrefix: "",
      highlight: null,
      hooks: null,
      langPrefix: "language-",
      mangle: true,
      pedantic: false,
      renderer: null,
      sanitize: false,
      sanitizer: null,
      silent: false,
      smartypants: false,
      tokenizer: null,
      walkTokens: null,
      xhtml: false
    };
  }
  let defaults$1 = getDefaults();
  function changeDefaults(newDefaults) {
    defaults$1 = newDefaults;
  }
  const escapeTest = /[&<>"']/;
  const escapeReplace = new RegExp(escapeTest.source, "g");
  const escapeTestNoEncode = /[<>"']|&(?!(#\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\w+);)/;
  const escapeReplaceNoEncode = new RegExp(escapeTestNoEncode.source, "g");
  const escapeReplacements = {
    "&": "&amp;",
    "<": "&lt;",
    ">": "&gt;",
    '"': "&quot;",
    "'": "&#39;"
  };
  const getEscapeReplacement = (ch2) => escapeReplacements[ch2];
  function escape$1(html, encode2) {
    if (encode2) {
      if (escapeTest.test(html)) {
        return html.replace(escapeReplace, getEscapeReplacement);
      }
    } else {
      if (escapeTestNoEncode.test(html)) {
        return html.replace(escapeReplaceNoEncode, getEscapeReplacement);
      }
    }
    return html;
  }
  const unescapeTest = /&(#(?:\d+)|(?:#x[0-9A-Fa-f]+)|(?:\w+));?/ig;
  function unescape(html) {
    return html.replace(unescapeTest, (_, n) => {
      n = n.toLowerCase();
      if (n === "colon") return ":";
      if (n.charAt(0) === "#") {
        return n.charAt(1) === "x" ? String.fromCharCode(parseInt(n.substring(2), 16)) : String.fromCharCode(+n.substring(1));
      }
      return "";
    });
  }
  const caret = /(^|[^\[])\^/g;
  function edit(regex2, opt) {
    regex2 = typeof regex2 === "string" ? regex2 : regex2.source;
    opt = opt || "";
    const obj = {
      replace: (name, val) => {
        val = val.source || val;
        val = val.replace(caret, "$1");
        regex2 = regex2.replace(name, val);
        return obj;
      },
      getRegex: () => {
        return new RegExp(regex2, opt);
      }
    };
    return obj;
  }
  const nonWordAndColonTest = /[^\w:]/g;
  const originIndependentUrl = /^$|^[a-z][a-z0-9+.-]*:|^[?#]/i;
  function cleanUrl(sanitize2, base, href2) {
    if (sanitize2) {
      let prot;
      try {
        prot = decodeURIComponent(unescape(href2)).replace(nonWordAndColonTest, "").toLowerCase();
      } catch (e3) {
        return null;
      }
      if (prot.indexOf("javascript:") === 0 || prot.indexOf("vbscript:") === 0 || prot.indexOf("data:") === 0) {
        return null;
      }
    }
    if (base && !originIndependentUrl.test(href2)) {
      href2 = resolveUrl(base, href2);
    }
    try {
      href2 = encodeURI(href2).replace(/%25/g, "%");
    } catch (e3) {
      return null;
    }
    return href2;
  }
  const baseUrls = {};
  const justDomain = /^[^:]+:\/*[^/]*$/;
  const protocol = /^([^:]+:)[\s\S]*$/;
  const domain$3 = /^([^:]+:\/*[^/]*)[\s\S]*$/;
  function resolveUrl(base, href2) {
    if (!baseUrls[" " + base]) {
      if (justDomain.test(base)) {
        baseUrls[" " + base] = base + "/";
      } else {
        baseUrls[" " + base] = rtrim(base, "/", true);
      }
    }
    base = baseUrls[" " + base];
    const relativeBase = base.indexOf(":") === -1;
    if (href2.substring(0, 2) === "//") {
      if (relativeBase) {
        return href2;
      }
      return base.replace(protocol, "$1") + href2;
    } else if (href2.charAt(0) === "/") {
      if (relativeBase) {
        return href2;
      }
      return base.replace(domain$3, "$1") + href2;
    } else {
      return base + href2;
    }
  }
  const noopTest = { exec: function noopTest2() {
  } };
  function splitCells(tableRow, count2) {
    const row = tableRow.replace(/\|/g, (match2, offset2, str) => {
      let escaped = false, curr = offset2;
      while (--curr >= 0 && str[curr] === "\\") escaped = !escaped;
      if (escaped) {
        return "|";
      } else {
        return " |";
      }
    }), cells = row.split(/ \|/);
    let i = 0;
    if (!cells[0].trim()) {
      cells.shift();
    }
    if (cells.length > 0 && !cells[cells.length - 1].trim()) {
      cells.pop();
    }
    if (cells.length > count2) {
      cells.splice(count2);
    } else {
      while (cells.length < count2) cells.push("");
    }
    for (; i < cells.length; i++) {
      cells[i] = cells[i].trim().replace(/\\\|/g, "|");
    }
    return cells;
  }
  function rtrim(str, c2, invert2) {
    const l = str.length;
    if (l === 0) {
      return "";
    }
    let suffLen = 0;
    while (suffLen < l) {
      const currChar = str.charAt(l - suffLen - 1);
      if (currChar === c2 && !invert2) {
        suffLen++;
      } else if (currChar !== c2 && invert2) {
        suffLen++;
      } else {
        break;
      }
    }
    return str.slice(0, l - suffLen);
  }
  function findClosingBracket(str, b2) {
    if (str.indexOf(b2[1]) === -1) {
      return -1;
    }
    const l = str.length;
    let level = 0, i = 0;
    for (; i < l; i++) {
      if (str[i] === "\\") {
        i++;
      } else if (str[i] === b2[0]) {
        level++;
      } else if (str[i] === b2[1]) {
        level--;
        if (level < 0) {
          return i;
        }
      }
    }
    return -1;
  }
  function checkDeprecations(opt, callback) {
    if (!opt || opt.silent) {
      return;
    }
    if (callback) {
      console.warn("marked(): callback is deprecated since version 5.0.0, should not be used and will be removed in the future. Read more here: https://marked.js.org/using_pro#async");
    }
    if (opt.sanitize || opt.sanitizer) {
      console.warn("marked(): sanitize and sanitizer parameters are deprecated since version 0.7.0, should not be used and will be removed in the future. Read more here: https://marked.js.org/#/USING_ADVANCED.md#options");
    }
    if (opt.highlight || opt.langPrefix !== "language-") {
      console.warn("marked(): highlight and langPrefix parameters are deprecated since version 5.0.0, should not be used and will be removed in the future. Instead use https://www.npmjs.com/package/marked-highlight.");
    }
    if (opt.mangle) {
      console.warn("marked(): mangle parameter is enabled by default, but is deprecated since version 5.0.0, and will be removed in the future. To clear this warning, install https://www.npmjs.com/package/marked-mangle, or disable by setting `{mangle: false}`.");
    }
    if (opt.baseUrl) {
      console.warn("marked(): baseUrl parameter is deprecated since version 5.0.0, should not be used and will be removed in the future. Instead use https://www.npmjs.com/package/marked-base-url.");
    }
    if (opt.smartypants) {
      console.warn("marked(): smartypants parameter is deprecated since version 5.0.0, should not be used and will be removed in the future. Instead use https://www.npmjs.com/package/marked-smartypants.");
    }
    if (opt.xhtml) {
      console.warn("marked(): xhtml parameter is deprecated since version 5.0.0, should not be used and will be removed in the future. Instead use https://www.npmjs.com/package/marked-xhtml.");
    }
    if (opt.headerIds || opt.headerPrefix) {
      console.warn("marked(): headerIds and headerPrefix parameters enabled by default, but are deprecated since version 5.0.0, and will be removed in the future. To clear this warning, install  https://www.npmjs.com/package/marked-gfm-heading-id, or disable by setting `{headerIds: false}`.");
    }
  }
  function outputLink(cap, link2, raw, lexer) {
    const href2 = link2.href;
    const title2 = link2.title ? escape$1(link2.title) : null;
    const text2 = cap[1].replace(/\\([\[\]])/g, "$1");
    if (cap[0].charAt(0) !== "!") {
      lexer.state.inLink = true;
      const token = {
        type: "link",
        raw,
        href: href2,
        title: title2,
        text: text2,
        tokens: lexer.inlineTokens(text2)
      };
      lexer.state.inLink = false;
      return token;
    }
    return {
      type: "image",
      raw,
      href: href2,
      title: title2,
      text: escape$1(text2)
    };
  }
  function indentCodeCompensation(raw, text2) {
    const matchIndentToCode = raw.match(/^(\s+)(?:```)/);
    if (matchIndentToCode === null) {
      return text2;
    }
    const indentToCode = matchIndentToCode[1];
    return text2.split("\n").map((node) => {
      const matchIndentInNode = node.match(/^\s+/);
      if (matchIndentInNode === null) {
        return node;
      }
      const [indentInNode] = matchIndentInNode;
      if (indentInNode.length >= indentToCode.length) {
        return node.slice(indentToCode.length);
      }
      return node;
    }).join("\n");
  }
  class Tokenizer {
    constructor(options) {
      this.options = options || defaults$1;
    }
    space(src) {
      const cap = this.rules.block.newline.exec(src);
      if (cap && cap[0].length > 0) {
        return {
          type: "space",
          raw: cap[0]
        };
      }
    }
    code(src) {
      const cap = this.rules.block.code.exec(src);
      if (cap) {
        const text2 = cap[0].replace(/^ {1,4}/gm, "");
        return {
          type: "code",
          raw: cap[0],
          codeBlockStyle: "indented",
          text: !this.options.pedantic ? rtrim(text2, "\n") : text2
        };
      }
    }
    fences(src) {
      const cap = this.rules.block.fences.exec(src);
      if (cap) {
        const raw = cap[0];
        const text2 = indentCodeCompensation(raw, cap[3] || "");
        return {
          type: "code",
          raw,
          lang: cap[2] ? cap[2].trim().replace(this.rules.inline._escapes, "$1") : cap[2],
          text: text2
        };
      }
    }
    heading(src) {
      const cap = this.rules.block.heading.exec(src);
      if (cap) {
        let text2 = cap[2].trim();
        if (/#$/.test(text2)) {
          const trimmed = rtrim(text2, "#");
          if (this.options.pedantic) {
            text2 = trimmed.trim();
          } else if (!trimmed || / $/.test(trimmed)) {
            text2 = trimmed.trim();
          }
        }
        return {
          type: "heading",
          raw: cap[0],
          depth: cap[1].length,
          text: text2,
          tokens: this.lexer.inline(text2)
        };
      }
    }
    hr(src) {
      const cap = this.rules.block.hr.exec(src);
      if (cap) {
        return {
          type: "hr",
          raw: cap[0]
        };
      }
    }
    blockquote(src) {
      const cap = this.rules.block.blockquote.exec(src);
      if (cap) {
        const text2 = cap[0].replace(/^ *>[ \t]?/gm, "");
        const top = this.lexer.state.top;
        this.lexer.state.top = true;
        const tokens = this.lexer.blockTokens(text2);
        this.lexer.state.top = top;
        return {
          type: "blockquote",
          raw: cap[0],
          tokens,
          text: text2
        };
      }
    }
    list(src) {
      let cap = this.rules.block.list.exec(src);
      if (cap) {
        let raw, istask, ischecked, indent, i, blankLine, endsWithBlankLine, line2, nextLine, rawLine, itemContents, endEarly;
        let bull = cap[1].trim();
        const isordered = bull.length > 1;
        const list = {
          type: "list",
          raw: "",
          ordered: isordered,
          start: isordered ? +bull.slice(0, -1) : "",
          loose: false,
          items: []
        };
        bull = isordered ? `\\d{1,9}\\${bull.slice(-1)}` : `\\${bull}`;
        if (this.options.pedantic) {
          bull = isordered ? bull : "[*+-]";
        }
        const itemRegex = new RegExp(`^( {0,3}${bull})((?:[	 ][^\\n]*)?(?:\\n|$))`);
        while (src) {
          endEarly = false;
          if (!(cap = itemRegex.exec(src))) {
            break;
          }
          if (this.rules.block.hr.test(src)) {
            break;
          }
          raw = cap[0];
          src = src.substring(raw.length);
          line2 = cap[2].split("\n", 1)[0].replace(/^\t+/, (t) => " ".repeat(3 * t.length));
          nextLine = src.split("\n", 1)[0];
          if (this.options.pedantic) {
            indent = 2;
            itemContents = line2.trimLeft();
          } else {
            indent = cap[2].search(/[^ ]/);
            indent = indent > 4 ? 1 : indent;
            itemContents = line2.slice(indent);
            indent += cap[1].length;
          }
          blankLine = false;
          if (!line2 && /^ *$/.test(nextLine)) {
            raw += nextLine + "\n";
            src = src.substring(nextLine.length + 1);
            endEarly = true;
          }
          if (!endEarly) {
            const nextBulletRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:[*+-]|\\d{1,9}[.)])((?:[ 	][^\\n]*)?(?:\\n|$))`);
            const hrRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}((?:- *){3,}|(?:_ *){3,}|(?:\\* *){3,})(?:\\n+|$)`);
            const fencesBeginRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:\`\`\`|~~~)`);
            const headingBeginRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}#`);
            while (src) {
              rawLine = src.split("\n", 1)[0];
              nextLine = rawLine;
              if (this.options.pedantic) {
                nextLine = nextLine.replace(/^ {1,4}(?=( {4})*[^ ])/g, "  ");
              }
              if (fencesBeginRegex.test(nextLine)) {
                break;
              }
              if (headingBeginRegex.test(nextLine)) {
                break;
              }
              if (nextBulletRegex.test(nextLine)) {
                break;
              }
              if (hrRegex.test(src)) {
                break;
              }
              if (nextLine.search(/[^ ]/) >= indent || !nextLine.trim()) {
                itemContents += "\n" + nextLine.slice(indent);
              } else {
                if (blankLine) {
                  break;
                }
                if (line2.search(/[^ ]/) >= 4) {
                  break;
                }
                if (fencesBeginRegex.test(line2)) {
                  break;
                }
                if (headingBeginRegex.test(line2)) {
                  break;
                }
                if (hrRegex.test(line2)) {
                  break;
                }
                itemContents += "\n" + nextLine;
              }
              if (!blankLine && !nextLine.trim()) {
                blankLine = true;
              }
              raw += rawLine + "\n";
              src = src.substring(rawLine.length + 1);
              line2 = nextLine.slice(indent);
            }
          }
          if (!list.loose) {
            if (endsWithBlankLine) {
              list.loose = true;
            } else if (/\n *\n *$/.test(raw)) {
              endsWithBlankLine = true;
            }
          }
          if (this.options.gfm) {
            istask = /^\[[ xX]\] /.exec(itemContents);
            if (istask) {
              ischecked = istask[0] !== "[ ] ";
              itemContents = itemContents.replace(/^\[[ xX]\] +/, "");
            }
          }
          list.items.push({
            type: "list_item",
            raw,
            task: !!istask,
            checked: ischecked,
            loose: false,
            text: itemContents
          });
          list.raw += raw;
        }
        list.items[list.items.length - 1].raw = raw.trimRight();
        list.items[list.items.length - 1].text = itemContents.trimRight();
        list.raw = list.raw.trimRight();
        const l = list.items.length;
        for (i = 0; i < l; i++) {
          this.lexer.state.top = false;
          list.items[i].tokens = this.lexer.blockTokens(list.items[i].text, []);
          if (!list.loose) {
            const spacers = list.items[i].tokens.filter((t) => t.type === "space");
            const hasMultipleLineBreaks = spacers.length > 0 && spacers.some((t) => /\n.*\n/.test(t.raw));
            list.loose = hasMultipleLineBreaks;
          }
        }
        if (list.loose) {
          for (i = 0; i < l; i++) {
            list.items[i].loose = true;
          }
        }
        return list;
      }
    }
    html(src) {
      const cap = this.rules.block.html.exec(src);
      if (cap) {
        const token = {
          type: "html",
          block: true,
          raw: cap[0],
          pre: !this.options.sanitizer && (cap[1] === "pre" || cap[1] === "script" || cap[1] === "style"),
          text: cap[0]
        };
        if (this.options.sanitize) {
          const text2 = this.options.sanitizer ? this.options.sanitizer(cap[0]) : escape$1(cap[0]);
          token.type = "paragraph";
          token.text = text2;
          token.tokens = this.lexer.inline(text2);
        }
        return token;
      }
    }
    def(src) {
      const cap = this.rules.block.def.exec(src);
      if (cap) {
        const tag = cap[1].toLowerCase().replace(/\s+/g, " ");
        const href2 = cap[2] ? cap[2].replace(/^<(.*)>$/, "$1").replace(this.rules.inline._escapes, "$1") : "";
        const title2 = cap[3] ? cap[3].substring(1, cap[3].length - 1).replace(this.rules.inline._escapes, "$1") : cap[3];
        return {
          type: "def",
          tag,
          raw: cap[0],
          href: href2,
          title: title2
        };
      }
    }
    table(src) {
      const cap = this.rules.block.table.exec(src);
      if (cap) {
        const item = {
          type: "table",
          header: splitCells(cap[1]).map((c2) => {
            return { text: c2 };
          }),
          align: cap[2].replace(/^ *|\| *$/g, "").split(/ *\| */),
          rows: cap[3] && cap[3].trim() ? cap[3].replace(/\n[ \t]*$/, "").split("\n") : []
        };
        if (item.header.length === item.align.length) {
          item.raw = cap[0];
          let l = item.align.length;
          let i, j, k, row;
          for (i = 0; i < l; i++) {
            if (/^ *-+: *$/.test(item.align[i])) {
              item.align[i] = "right";
            } else if (/^ *:-+: *$/.test(item.align[i])) {
              item.align[i] = "center";
            } else if (/^ *:-+ *$/.test(item.align[i])) {
              item.align[i] = "left";
            } else {
              item.align[i] = null;
            }
          }
          l = item.rows.length;
          for (i = 0; i < l; i++) {
            item.rows[i] = splitCells(item.rows[i], item.header.length).map((c2) => {
              return { text: c2 };
            });
          }
          l = item.header.length;
          for (j = 0; j < l; j++) {
            item.header[j].tokens = this.lexer.inline(item.header[j].text);
          }
          l = item.rows.length;
          for (j = 0; j < l; j++) {
            row = item.rows[j];
            for (k = 0; k < row.length; k++) {
              row[k].tokens = this.lexer.inline(row[k].text);
            }
          }
          return item;
        }
      }
    }
    lheading(src) {
      const cap = this.rules.block.lheading.exec(src);
      if (cap) {
        return {
          type: "heading",
          raw: cap[0],
          depth: cap[2].charAt(0) === "=" ? 1 : 2,
          text: cap[1],
          tokens: this.lexer.inline(cap[1])
        };
      }
    }
    paragraph(src) {
      const cap = this.rules.block.paragraph.exec(src);
      if (cap) {
        const text2 = cap[1].charAt(cap[1].length - 1) === "\n" ? cap[1].slice(0, -1) : cap[1];
        return {
          type: "paragraph",
          raw: cap[0],
          text: text2,
          tokens: this.lexer.inline(text2)
        };
      }
    }
    text(src) {
      const cap = this.rules.block.text.exec(src);
      if (cap) {
        return {
          type: "text",
          raw: cap[0],
          text: cap[0],
          tokens: this.lexer.inline(cap[0])
        };
      }
    }
    escape(src) {
      const cap = this.rules.inline.escape.exec(src);
      if (cap) {
        return {
          type: "escape",
          raw: cap[0],
          text: escape$1(cap[1])
        };
      }
    }
    tag(src) {
      const cap = this.rules.inline.tag.exec(src);
      if (cap) {
        if (!this.lexer.state.inLink && /^<a /i.test(cap[0])) {
          this.lexer.state.inLink = true;
        } else if (this.lexer.state.inLink && /^<\/a>/i.test(cap[0])) {
          this.lexer.state.inLink = false;
        }
        if (!this.lexer.state.inRawBlock && /^<(pre|code|kbd|script)(\s|>)/i.test(cap[0])) {
          this.lexer.state.inRawBlock = true;
        } else if (this.lexer.state.inRawBlock && /^<\/(pre|code|kbd|script)(\s|>)/i.test(cap[0])) {
          this.lexer.state.inRawBlock = false;
        }
        return {
          type: this.options.sanitize ? "text" : "html",
          raw: cap[0],
          inLink: this.lexer.state.inLink,
          inRawBlock: this.lexer.state.inRawBlock,
          block: false,
          text: this.options.sanitize ? this.options.sanitizer ? this.options.sanitizer(cap[0]) : escape$1(cap[0]) : cap[0]
        };
      }
    }
    link(src) {
      const cap = this.rules.inline.link.exec(src);
      if (cap) {
        const trimmedUrl = cap[2].trim();
        if (!this.options.pedantic && /^</.test(trimmedUrl)) {
          if (!/>$/.test(trimmedUrl)) {
            return;
          }
          const rtrimSlash = rtrim(trimmedUrl.slice(0, -1), "\\");
          if ((trimmedUrl.length - rtrimSlash.length) % 2 === 0) {
            return;
          }
        } else {
          const lastParenIndex = findClosingBracket(cap[2], "()");
          if (lastParenIndex > -1) {
            const start = cap[0].indexOf("!") === 0 ? 5 : 4;
            const linkLen = start + cap[1].length + lastParenIndex;
            cap[2] = cap[2].substring(0, lastParenIndex);
            cap[0] = cap[0].substring(0, linkLen).trim();
            cap[3] = "";
          }
        }
        let href2 = cap[2];
        let title2 = "";
        if (this.options.pedantic) {
          const link2 = /^([^'"]*[^\s])\s+(['"])(.*)\2/.exec(href2);
          if (link2) {
            href2 = link2[1];
            title2 = link2[3];
          }
        } else {
          title2 = cap[3] ? cap[3].slice(1, -1) : "";
        }
        href2 = href2.trim();
        if (/^</.test(href2)) {
          if (this.options.pedantic && !/>$/.test(trimmedUrl)) {
            href2 = href2.slice(1);
          } else {
            href2 = href2.slice(1, -1);
          }
        }
        return outputLink(cap, {
          href: href2 ? href2.replace(this.rules.inline._escapes, "$1") : href2,
          title: title2 ? title2.replace(this.rules.inline._escapes, "$1") : title2
        }, cap[0], this.lexer);
      }
    }
    reflink(src, links) {
      let cap;
      if ((cap = this.rules.inline.reflink.exec(src)) || (cap = this.rules.inline.nolink.exec(src))) {
        let link2 = (cap[2] || cap[1]).replace(/\s+/g, " ");
        link2 = links[link2.toLowerCase()];
        if (!link2) {
          const text2 = cap[0].charAt(0);
          return {
            type: "text",
            raw: text2,
            text: text2
          };
        }
        return outputLink(cap, link2, cap[0], this.lexer);
      }
    }
    emStrong(src, maskedSrc, prevChar = "") {
      let match2 = this.rules.inline.emStrong.lDelim.exec(src);
      if (!match2) return;
      if (match2[3] && prevChar.match(/[\p{L}\p{N}]/u)) return;
      const nextChar = match2[1] || match2[2] || "";
      if (!nextChar || !prevChar || this.rules.inline.punctuation.exec(prevChar)) {
        const lLength = match2[0].length - 1;
        let rDelim, rLength, delimTotal = lLength, midDelimTotal = 0;
        const endReg = match2[0][0] === "*" ? this.rules.inline.emStrong.rDelimAst : this.rules.inline.emStrong.rDelimUnd;
        endReg.lastIndex = 0;
        maskedSrc = maskedSrc.slice(-1 * src.length + lLength);
        while ((match2 = endReg.exec(maskedSrc)) != null) {
          rDelim = match2[1] || match2[2] || match2[3] || match2[4] || match2[5] || match2[6];
          if (!rDelim) continue;
          rLength = rDelim.length;
          if (match2[3] || match2[4]) {
            delimTotal += rLength;
            continue;
          } else if (match2[5] || match2[6]) {
            if (lLength % 3 && !((lLength + rLength) % 3)) {
              midDelimTotal += rLength;
              continue;
            }
          }
          delimTotal -= rLength;
          if (delimTotal > 0) continue;
          rLength = Math.min(rLength, rLength + delimTotal + midDelimTotal);
          const raw = src.slice(0, lLength + match2.index + rLength + 1);
          if (Math.min(lLength, rLength) % 2) {
            const text3 = raw.slice(1, -1);
            return {
              type: "em",
              raw,
              text: text3,
              tokens: this.lexer.inlineTokens(text3)
            };
          }
          const text2 = raw.slice(2, -2);
          return {
            type: "strong",
            raw,
            text: text2,
            tokens: this.lexer.inlineTokens(text2)
          };
        }
      }
    }
    codespan(src) {
      const cap = this.rules.inline.code.exec(src);
      if (cap) {
        let text2 = cap[2].replace(/\n/g, " ");
        const hasNonSpaceChars = /[^ ]/.test(text2);
        const hasSpaceCharsOnBothEnds = /^ /.test(text2) && / $/.test(text2);
        if (hasNonSpaceChars && hasSpaceCharsOnBothEnds) {
          text2 = text2.substring(1, text2.length - 1);
        }
        text2 = escape$1(text2, true);
        return {
          type: "codespan",
          raw: cap[0],
          text: text2
        };
      }
    }
    br(src) {
      const cap = this.rules.inline.br.exec(src);
      if (cap) {
        return {
          type: "br",
          raw: cap[0]
        };
      }
    }
    del(src) {
      const cap = this.rules.inline.del.exec(src);
      if (cap) {
        return {
          type: "del",
          raw: cap[0],
          text: cap[2],
          tokens: this.lexer.inlineTokens(cap[2])
        };
      }
    }
    autolink(src, mangle2) {
      const cap = this.rules.inline.autolink.exec(src);
      if (cap) {
        let text2, href2;
        if (cap[2] === "@") {
          text2 = escape$1(this.options.mangle ? mangle2(cap[1]) : cap[1]);
          href2 = "mailto:" + text2;
        } else {
          text2 = escape$1(cap[1]);
          href2 = text2;
        }
        return {
          type: "link",
          raw: cap[0],
          text: text2,
          href: href2,
          tokens: [
            {
              type: "text",
              raw: text2,
              text: text2
            }
          ]
        };
      }
    }
    url(src, mangle2) {
      let cap;
      if (cap = this.rules.inline.url.exec(src)) {
        let text2, href2;
        if (cap[2] === "@") {
          text2 = escape$1(this.options.mangle ? mangle2(cap[0]) : cap[0]);
          href2 = "mailto:" + text2;
        } else {
          let prevCapZero;
          do {
            prevCapZero = cap[0];
            cap[0] = this.rules.inline._backpedal.exec(cap[0])[0];
          } while (prevCapZero !== cap[0]);
          text2 = escape$1(cap[0]);
          if (cap[1] === "www.") {
            href2 = "http://" + cap[0];
          } else {
            href2 = cap[0];
          }
        }
        return {
          type: "link",
          raw: cap[0],
          text: text2,
          href: href2,
          tokens: [
            {
              type: "text",
              raw: text2,
              text: text2
            }
          ]
        };
      }
    }
    inlineText(src, smartypants2) {
      const cap = this.rules.inline.text.exec(src);
      if (cap) {
        let text2;
        if (this.lexer.state.inRawBlock) {
          text2 = this.options.sanitize ? this.options.sanitizer ? this.options.sanitizer(cap[0]) : escape$1(cap[0]) : cap[0];
        } else {
          text2 = escape$1(this.options.smartypants ? smartypants2(cap[0]) : cap[0]);
        }
        return {
          type: "text",
          raw: cap[0],
          text: text2
        };
      }
    }
  }
  const block = {
    newline: /^(?: *(?:\n|$))+/,
    code: /^( {4}[^\n]+(?:\n(?: *(?:\n|$))*)?)+/,
    fences: /^ {0,3}(`{3,}(?=[^`\n]*(?:\n|$))|~{3,})([^\n]*)(?:\n|$)(?:|([\s\S]*?)(?:\n|$))(?: {0,3}\1[~`]* *(?=\n|$)|$)/,
    hr: /^ {0,3}((?:-[\t ]*){3,}|(?:_[ \t]*){3,}|(?:\*[ \t]*){3,})(?:\n+|$)/,
    heading: /^ {0,3}(#{1,6})(?=\s|$)(.*)(?:\n+|$)/,
    blockquote: /^( {0,3}> ?(paragraph|[^\n]*)(?:\n|$))+/,
    list: /^( {0,3}bull)([ \t][^\n]+?)?(?:\n|$)/,
    html: "^ {0,3}(?:<(script|pre|style|textarea)[\\s>][\\s\\S]*?(?:</\\1>[^\\n]*\\n+|$)|comment[^\\n]*(\\n+|$)|<\\?[\\s\\S]*?(?:\\?>\\n*|$)|<![A-Z][\\s\\S]*?(?:>\\n*|$)|<!\\[CDATA\\[[\\s\\S]*?(?:\\]\\]>\\n*|$)|</?(tag)(?: +|\\n|/?>)[\\s\\S]*?(?:(?:\\n *)+\\n|$)|<(?!script|pre|style|textarea)([a-z][\\w-]*)(?:attribute)*? */?>(?=[ \\t]*(?:\\n|$))[\\s\\S]*?(?:(?:\\n *)+\\n|$)|</(?!script|pre|style|textarea)[a-z][\\w-]*\\s*>(?=[ \\t]*(?:\\n|$))[\\s\\S]*?(?:(?:\\n *)+\\n|$))",
    def: /^ {0,3}\[(label)\]: *(?:\n *)?([^<\s][^\s]*|<.*?>)(?:(?: +(?:\n *)?| *\n *)(title))? *(?:\n+|$)/,
    table: noopTest,
    lheading: /^((?:(?!^bull ).|\n(?!\n|bull ))+?)\n {0,3}(=+|-+) *(?:\n+|$)/,
    // regex template, placeholders will be replaced according to different paragraph
    // interruption rules of commonmark and the original markdown spec:
    _paragraph: /^([^\n]+(?:\n(?!hr|heading|lheading|blockquote|fences|list|html|table| +\n)[^\n]+)*)/,
    text: /^[^\n]+/
  };
  block._label = /(?!\s*\])(?:\\.|[^\[\]\\])+/;
  block._title = /(?:"(?:\\"?|[^"\\])*"|'[^'\n]*(?:\n[^'\n]+)*\n?'|\([^()]*\))/;
  block.def = edit(block.def).replace("label", block._label).replace("title", block._title).getRegex();
  block.bullet = /(?:[*+-]|\d{1,9}[.)])/;
  block.listItemStart = edit(/^( *)(bull) */).replace("bull", block.bullet).getRegex();
  block.list = edit(block.list).replace(/bull/g, block.bullet).replace("hr", "\\n+(?=\\1?(?:(?:- *){3,}|(?:_ *){3,}|(?:\\* *){3,})(?:\\n+|$))").replace("def", "\\n+(?=" + block.def.source + ")").getRegex();
  block._tag = "address|article|aside|base|basefont|blockquote|body|caption|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr|track|ul";
  block._comment = /<!--(?!-?>)[\s\S]*?(?:-->|$)/;
  block.html = edit(block.html, "i").replace("comment", block._comment).replace("tag", block._tag).replace("attribute", / +[a-zA-Z:_][\w.:-]*(?: *= *"[^"\n]*"| *= *'[^'\n]*'| *= *[^\s"'=<>`]+)?/).getRegex();
  block.lheading = edit(block.lheading).replace(/bull/g, block.bullet).getRegex();
  block.paragraph = edit(block._paragraph).replace("hr", block.hr).replace("heading", " {0,3}#{1,6} ").replace("|lheading", "").replace("|table", "").replace("blockquote", " {0,3}>").replace("fences", " {0,3}(?:`{3,}(?=[^`\\n]*\\n)|~{3,})[^\\n]*\\n").replace("list", " {0,3}(?:[*+-]|1[.)]) ").replace("html", "</?(?:tag)(?: +|\\n|/?>)|<(?:script|pre|style|textarea|!--)").replace("tag", block._tag).getRegex();
  block.blockquote = edit(block.blockquote).replace("paragraph", block.paragraph).getRegex();
  block.normal = { ...block };
  block.gfm = {
    ...block.normal,
    table: "^ *([^\\n ].*\\|.*)\\n {0,3}(?:\\| *)?(:?-+:? *(?:\\| *:?-+:? *)*)(?:\\| *)?(?:\\n((?:(?! *\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\n|$))*)\\n*|$)"
    // Cells
  };
  block.gfm.table = edit(block.gfm.table).replace("hr", block.hr).replace("heading", " {0,3}#{1,6} ").replace("blockquote", " {0,3}>").replace("code", " {4}[^\\n]").replace("fences", " {0,3}(?:`{3,}(?=[^`\\n]*\\n)|~{3,})[^\\n]*\\n").replace("list", " {0,3}(?:[*+-]|1[.)]) ").replace("html", "</?(?:tag)(?: +|\\n|/?>)|<(?:script|pre|style|textarea|!--)").replace("tag", block._tag).getRegex();
  block.gfm.paragraph = edit(block._paragraph).replace("hr", block.hr).replace("heading", " {0,3}#{1,6} ").replace("|lheading", "").replace("table", block.gfm.table).replace("blockquote", " {0,3}>").replace("fences", " {0,3}(?:`{3,}(?=[^`\\n]*\\n)|~{3,})[^\\n]*\\n").replace("list", " {0,3}(?:[*+-]|1[.)]) ").replace("html", "</?(?:tag)(?: +|\\n|/?>)|<(?:script|pre|style|textarea|!--)").replace("tag", block._tag).getRegex();
  block.pedantic = {
    ...block.normal,
    html: edit(
      `^ *(?:comment *(?:\\n|\\s*$)|<(tag)[\\s\\S]+?</\\1> *(?:\\n{2,}|\\s*$)|<tag(?:"[^"]*"|'[^']*'|\\s[^'"/>\\s]*)*?/?> *(?:\\n{2,}|\\s*$))`
    ).replace("comment", block._comment).replace(/tag/g, "(?!(?:a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)\\b)\\w+(?!:|[^\\w\\s@]*@)\\b").getRegex(),
    def: /^ *\[([^\]]+)\]: *<?([^\s>]+)>?(?: +(["(][^\n]+[")]))? *(?:\n+|$)/,
    heading: /^(#{1,6})(.*)(?:\n+|$)/,
    fences: noopTest,
    // fences not supported
    lheading: /^(.+?)\n {0,3}(=+|-+) *(?:\n+|$)/,
    paragraph: edit(block.normal._paragraph).replace("hr", block.hr).replace("heading", " *#{1,6} *[^\n]").replace("lheading", block.lheading).replace("blockquote", " {0,3}>").replace("|fences", "").replace("|list", "").replace("|html", "").getRegex()
  };
  const inline = {
    escape: /^\\([!"#$%&'()*+,\-./:;<=>?@\[\]\\^_`{|}~])/,
    autolink: /^<(scheme:[^\s\x00-\x1f<>]*|email)>/,
    url: noopTest,
    tag: "^comment|^</[a-zA-Z][\\w:-]*\\s*>|^<[a-zA-Z][\\w-]*(?:attribute)*?\\s*/?>|^<\\?[\\s\\S]*?\\?>|^<![a-zA-Z]+\\s[\\s\\S]*?>|^<!\\[CDATA\\[[\\s\\S]*?\\]\\]>",
    // CDATA section
    link: /^!?\[(label)\]\(\s*(href)(?:\s+(title))?\s*\)/,
    reflink: /^!?\[(label)\]\[(ref)\]/,
    nolink: /^!?\[(ref)\](?:\[\])?/,
    reflinkSearch: "reflink|nolink(?!\\()",
    emStrong: {
      lDelim: /^(?:\*+(?:((?!\*)[punct])|[^\s*]))|^_+(?:((?!_)[punct])|([^\s_]))/,
      //         (1) and (2) can only be a Right Delimiter. (3) and (4) can only be Left.  (5) and (6) can be either Left or Right.
      //         | Skip orphan inside strong      | Consume to delim | (1) #***              | (2) a***#, a***                    | (3) #***a, ***a                  | (4) ***#                 | (5) #***#                         | (6) a***a
      rDelimAst: /^[^_*]*?__[^_*]*?\*[^_*]*?(?=__)|[^*]+(?=[^*])|(?!\*)[punct](\*+)(?=[\s]|$)|[^punct\s](\*+)(?!\*)(?=[punct\s]|$)|(?!\*)[punct\s](\*+)(?=[^punct\s])|[\s](\*+)(?!\*)(?=[punct])|(?!\*)[punct](\*+)(?!\*)(?=[punct])|[^punct\s](\*+)(?=[^punct\s])/,
      rDelimUnd: /^[^_*]*?\*\*[^_*]*?_[^_*]*?(?=\*\*)|[^_]+(?=[^_])|(?!_)[punct](_+)(?=[\s]|$)|[^punct\s](_+)(?!_)(?=[punct\s]|$)|(?!_)[punct\s](_+)(?=[^punct\s])|[\s](_+)(?!_)(?=[punct])|(?!_)[punct](_+)(?!_)(?=[punct])/
      // ^- Not allowed for _
    },
    code: /^(`+)([^`]|[^`][\s\S]*?[^`])\1(?!`)/,
    br: /^( {2,}|\\)\n(?!\s*$)/,
    del: noopTest,
    text: /^(`+|[^`])(?:(?= {2,}\n)|[\s\S]*?(?:(?=[\\<!\[`*_]|\b_|$)|[^ ](?= {2,}\n)))/,
    punctuation: /^((?![*_])[\spunctuation])/
  };
  inline._punctuation = "\\p{P}$+<=>`^|~";
  inline.punctuation = edit(inline.punctuation, "u").replace(/punctuation/g, inline._punctuation).getRegex();
  inline.blockSkip = /\[[^[\]]*?\]\([^\(\)]*?\)|`[^`]*?`|<[^<>]*?>/g;
  inline.anyPunctuation = /\\[punct]/g;
  inline._escapes = /\\([punct])/g;
  inline._comment = edit(block._comment).replace("(?:-->|$)", "-->").getRegex();
  inline.emStrong.lDelim = edit(inline.emStrong.lDelim, "u").replace(/punct/g, inline._punctuation).getRegex();
  inline.emStrong.rDelimAst = edit(inline.emStrong.rDelimAst, "gu").replace(/punct/g, inline._punctuation).getRegex();
  inline.emStrong.rDelimUnd = edit(inline.emStrong.rDelimUnd, "gu").replace(/punct/g, inline._punctuation).getRegex();
  inline.anyPunctuation = edit(inline.anyPunctuation, "gu").replace(/punct/g, inline._punctuation).getRegex();
  inline._escapes = edit(inline._escapes, "gu").replace(/punct/g, inline._punctuation).getRegex();
  inline._scheme = /[a-zA-Z][a-zA-Z0-9+.-]{1,31}/;
  inline._email = /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/;
  inline.autolink = edit(inline.autolink).replace("scheme", inline._scheme).replace("email", inline._email).getRegex();
  inline._attribute = /\s+[a-zA-Z:_][\w.:-]*(?:\s*=\s*"[^"]*"|\s*=\s*'[^']*'|\s*=\s*[^\s"'=<>`]+)?/;
  inline.tag = edit(inline.tag).replace("comment", inline._comment).replace("attribute", inline._attribute).getRegex();
  inline._label = /(?:\[(?:\\.|[^\[\]\\])*\]|\\.|`[^`]*`|[^\[\]\\`])*?/;
  inline._href = /<(?:\\.|[^\n<>\\])+>|[^\s\x00-\x1f]*/;
  inline._title = /"(?:\\"?|[^"\\])*"|'(?:\\'?|[^'\\])*'|\((?:\\\)?|[^)\\])*\)/;
  inline.link = edit(inline.link).replace("label", inline._label).replace("href", inline._href).replace("title", inline._title).getRegex();
  inline.reflink = edit(inline.reflink).replace("label", inline._label).replace("ref", block._label).getRegex();
  inline.nolink = edit(inline.nolink).replace("ref", block._label).getRegex();
  inline.reflinkSearch = edit(inline.reflinkSearch, "g").replace("reflink", inline.reflink).replace("nolink", inline.nolink).getRegex();
  inline.normal = { ...inline };
  inline.pedantic = {
    ...inline.normal,
    strong: {
      start: /^__|\*\*/,
      middle: /^__(?=\S)([\s\S]*?\S)__(?!_)|^\*\*(?=\S)([\s\S]*?\S)\*\*(?!\*)/,
      endAst: /\*\*(?!\*)/g,
      endUnd: /__(?!_)/g
    },
    em: {
      start: /^_|\*/,
      middle: /^()\*(?=\S)([\s\S]*?\S)\*(?!\*)|^_(?=\S)([\s\S]*?\S)_(?!_)/,
      endAst: /\*(?!\*)/g,
      endUnd: /_(?!_)/g
    },
    link: edit(/^!?\[(label)\]\((.*?)\)/).replace("label", inline._label).getRegex(),
    reflink: edit(/^!?\[(label)\]\s*\[([^\]]*)\]/).replace("label", inline._label).getRegex()
  };
  inline.gfm = {
    ...inline.normal,
    escape: edit(inline.escape).replace("])", "~|])").getRegex(),
    _extended_email: /[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/,
    url: /^((?:ftp|https?):\/\/|www\.)(?:[a-zA-Z0-9\-]+\.?)+[^\s<]*|^email/,
    _backpedal: /(?:[^?!.,:;*_'"~()&]+|\([^)]*\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_'"~)]+(?!$))+/,
    del: /^(~~?)(?=[^\s~])([\s\S]*?[^\s~])\1(?=[^~]|$)/,
    text: /^([`~]+|[^`~])(?:(?= {2,}\n)|(?=[a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-]+@)|[\s\S]*?(?:(?=[\\<!\[`*~_]|\b_|https?:\/\/|ftp:\/\/|www\.|$)|[^ ](?= {2,}\n)|[^a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-](?=[a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-]+@)))/
  };
  inline.gfm.url = edit(inline.gfm.url, "i").replace("email", inline.gfm._extended_email).getRegex();
  inline.breaks = {
    ...inline.gfm,
    br: edit(inline.br).replace("{2,}", "*").getRegex(),
    text: edit(inline.gfm.text).replace("\\b_", "\\b_| {2,}\\n").replace(/\{2,\}/g, "*").getRegex()
  };
  function smartypants(text2) {
    return text2.replace(/---/g, "—").replace(/--/g, "–").replace(/(^|[-\u2014/(\[{"\s])'/g, "$1‘").replace(/'/g, "’").replace(/(^|[-\u2014/(\[{\u2018\s])"/g, "$1“").replace(/"/g, "”").replace(/\.{3}/g, "…");
  }
  function mangle(text2) {
    let out = "", i, ch2;
    const l = text2.length;
    for (i = 0; i < l; i++) {
      ch2 = text2.charCodeAt(i);
      if (Math.random() > 0.5) {
        ch2 = "x" + ch2.toString(16);
      }
      out += "&#" + ch2 + ";";
    }
    return out;
  }
  class Lexer {
    constructor(options) {
      this.tokens = [];
      this.tokens.links = /* @__PURE__ */ Object.create(null);
      this.options = options || defaults$1;
      this.options.tokenizer = this.options.tokenizer || new Tokenizer();
      this.tokenizer = this.options.tokenizer;
      this.tokenizer.options = this.options;
      this.tokenizer.lexer = this;
      this.inlineQueue = [];
      this.state = {
        inLink: false,
        inRawBlock: false,
        top: true
      };
      const rules = {
        block: block.normal,
        inline: inline.normal
      };
      if (this.options.pedantic) {
        rules.block = block.pedantic;
        rules.inline = inline.pedantic;
      } else if (this.options.gfm) {
        rules.block = block.gfm;
        if (this.options.breaks) {
          rules.inline = inline.breaks;
        } else {
          rules.inline = inline.gfm;
        }
      }
      this.tokenizer.rules = rules;
    }
    /**
     * Expose Rules
     */
    static get rules() {
      return {
        block,
        inline
      };
    }
    /**
     * Static Lex Method
     */
    static lex(src, options) {
      const lexer = new Lexer(options);
      return lexer.lex(src);
    }
    /**
     * Static Lex Inline Method
     */
    static lexInline(src, options) {
      const lexer = new Lexer(options);
      return lexer.inlineTokens(src);
    }
    /**
     * Preprocessing
     */
    lex(src) {
      src = src.replace(/\r\n|\r/g, "\n");
      this.blockTokens(src, this.tokens);
      let next;
      while (next = this.inlineQueue.shift()) {
        this.inlineTokens(next.src, next.tokens);
      }
      return this.tokens;
    }
    /**
     * Lexing
     */
    blockTokens(src, tokens = []) {
      if (this.options.pedantic) {
        src = src.replace(/\t/g, "    ").replace(/^ +$/gm, "");
      } else {
        src = src.replace(/^( *)(\t+)/gm, (_, leading, tabs) => {
          return leading + "    ".repeat(tabs.length);
        });
      }
      let token, lastToken, cutSrc, lastParagraphClipped;
      while (src) {
        if (this.options.extensions && this.options.extensions.block && this.options.extensions.block.some((extTokenizer) => {
          if (token = extTokenizer.call({ lexer: this }, src, tokens)) {
            src = src.substring(token.raw.length);
            tokens.push(token);
            return true;
          }
          return false;
        })) {
          continue;
        }
        if (token = this.tokenizer.space(src)) {
          src = src.substring(token.raw.length);
          if (token.raw.length === 1 && tokens.length > 0) {
            tokens[tokens.length - 1].raw += "\n";
          } else {
            tokens.push(token);
          }
          continue;
        }
        if (token = this.tokenizer.code(src)) {
          src = src.substring(token.raw.length);
          lastToken = tokens[tokens.length - 1];
          if (lastToken && (lastToken.type === "paragraph" || lastToken.type === "text")) {
            lastToken.raw += "\n" + token.raw;
            lastToken.text += "\n" + token.text;
            this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;
          } else {
            tokens.push(token);
          }
          continue;
        }
        if (token = this.tokenizer.fences(src)) {
          src = src.substring(token.raw.length);
          tokens.push(token);
          continue;
        }
        if (token = this.tokenizer.heading(src)) {
          src = src.substring(token.raw.length);
          tokens.push(token);
          continue;
        }
        if (token = this.tokenizer.hr(src)) {
          src = src.substring(token.raw.length);
          tokens.push(token);
          continue;
        }
        if (token = this.tokenizer.blockquote(src)) {
          src = src.substring(token.raw.length);
          tokens.push(token);
          continue;
        }
        if (token = this.tokenizer.list(src)) {
          src = src.substring(token.raw.length);
          tokens.push(token);
          continue;
        }
        if (token = this.tokenizer.html(src)) {
          src = src.substring(token.raw.length);
          tokens.push(token);
          continue;
        }
        if (token = this.tokenizer.def(src)) {
          src = src.substring(token.raw.length);
          lastToken = tokens[tokens.length - 1];
          if (lastToken && (lastToken.type === "paragraph" || lastToken.type === "text")) {
            lastToken.raw += "\n" + token.raw;
            lastToken.text += "\n" + token.raw;
            this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;
          } else if (!this.tokens.links[token.tag]) {
            this.tokens.links[token.tag] = {
              href: token.href,
              title: token.title
            };
          }
          continue;
        }
        if (token = this.tokenizer.table(src)) {
          src = src.substring(token.raw.length);
          tokens.push(token);
          continue;
        }
        if (token = this.tokenizer.lheading(src)) {
          src = src.substring(token.raw.length);
          tokens.push(token);
          continue;
        }
        cutSrc = src;
        if (this.options.extensions && this.options.extensions.startBlock) {
          let startIndex = Infinity;
          const tempSrc = src.slice(1);
          let tempStart;
          this.options.extensions.startBlock.forEach(function(getStartIndex) {
            tempStart = getStartIndex.call({ lexer: this }, tempSrc);
            if (typeof tempStart === "number" && tempStart >= 0) {
              startIndex = Math.min(startIndex, tempStart);
            }
          });
          if (startIndex < Infinity && startIndex >= 0) {
            cutSrc = src.substring(0, startIndex + 1);
          }
        }
        if (this.state.top && (token = this.tokenizer.paragraph(cutSrc))) {
          lastToken = tokens[tokens.length - 1];
          if (lastParagraphClipped && lastToken.type === "paragraph") {
            lastToken.raw += "\n" + token.raw;
            lastToken.text += "\n" + token.text;
            this.inlineQueue.pop();
            this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;
          } else {
            tokens.push(token);
          }
          lastParagraphClipped = cutSrc.length !== src.length;
          src = src.substring(token.raw.length);
          continue;
        }
        if (token = this.tokenizer.text(src)) {
          src = src.substring(token.raw.length);
          lastToken = tokens[tokens.length - 1];
          if (lastToken && lastToken.type === "text") {
            lastToken.raw += "\n" + token.raw;
            lastToken.text += "\n" + token.text;
            this.inlineQueue.pop();
            this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;
          } else {
            tokens.push(token);
          }
          continue;
        }
        if (src) {
          const errMsg = "Infinite loop on byte: " + src.charCodeAt(0);
          if (this.options.silent) {
            console.error(errMsg);
            break;
          } else {
            throw new Error(errMsg);
          }
        }
      }
      this.state.top = true;
      return tokens;
    }
    inline(src, tokens = []) {
      this.inlineQueue.push({ src, tokens });
      return tokens;
    }
    /**
     * Lexing/Compiling
     */
    inlineTokens(src, tokens = []) {
      let token, lastToken, cutSrc;
      let maskedSrc = src;
      let match2;
      let keepPrevChar, prevChar;
      if (this.tokens.links) {
        const links = Object.keys(this.tokens.links);
        if (links.length > 0) {
          while ((match2 = this.tokenizer.rules.inline.reflinkSearch.exec(maskedSrc)) != null) {
            if (links.includes(match2[0].slice(match2[0].lastIndexOf("[") + 1, -1))) {
              maskedSrc = maskedSrc.slice(0, match2.index) + "[" + "a".repeat(match2[0].length - 2) + "]" + maskedSrc.slice(this.tokenizer.rules.inline.reflinkSearch.lastIndex);
            }
          }
        }
      }
      while ((match2 = this.tokenizer.rules.inline.blockSkip.exec(maskedSrc)) != null) {
        maskedSrc = maskedSrc.slice(0, match2.index) + "[" + "a".repeat(match2[0].length - 2) + "]" + maskedSrc.slice(this.tokenizer.rules.inline.blockSkip.lastIndex);
      }
      while ((match2 = this.tokenizer.rules.inline.anyPunctuation.exec(maskedSrc)) != null) {
        maskedSrc = maskedSrc.slice(0, match2.index) + "++" + maskedSrc.slice(this.tokenizer.rules.inline.anyPunctuation.lastIndex);
      }
      while (src) {
        if (!keepPrevChar) {
          prevChar = "";
        }
        keepPrevChar = false;
        if (this.options.extensions && this.options.extensions.inline && this.options.extensions.inline.some((extTokenizer) => {
          if (token = extTokenizer.call({ lexer: this }, src, tokens)) {
            src = src.substring(token.raw.length);
            tokens.push(token);
            return true;
          }
          return false;
        })) {
          continue;
        }
        if (token = this.tokenizer.escape(src)) {
          src = src.substring(token.raw.length);
          tokens.push(token);
          continue;
        }
        if (token = this.tokenizer.tag(src)) {
          src = src.substring(token.raw.length);
          lastToken = tokens[tokens.length - 1];
          if (lastToken && token.type === "text" && lastToken.type === "text") {
            lastToken.raw += token.raw;
            lastToken.text += token.text;
          } else {
            tokens.push(token);
          }
          continue;
        }
        if (token = this.tokenizer.link(src)) {
          src = src.substring(token.raw.length);
          tokens.push(token);
          continue;
        }
        if (token = this.tokenizer.reflink(src, this.tokens.links)) {
          src = src.substring(token.raw.length);
          lastToken = tokens[tokens.length - 1];
          if (lastToken && token.type === "text" && lastToken.type === "text") {
            lastToken.raw += token.raw;
            lastToken.text += token.text;
          } else {
            tokens.push(token);
          }
          continue;
        }
        if (token = this.tokenizer.emStrong(src, maskedSrc, prevChar)) {
          src = src.substring(token.raw.length);
          tokens.push(token);
          continue;
        }
        if (token = this.tokenizer.codespan(src)) {
          src = src.substring(token.raw.length);
          tokens.push(token);
          continue;
        }
        if (token = this.tokenizer.br(src)) {
          src = src.substring(token.raw.length);
          tokens.push(token);
          continue;
        }
        if (token = this.tokenizer.del(src)) {
          src = src.substring(token.raw.length);
          tokens.push(token);
          continue;
        }
        if (token = this.tokenizer.autolink(src, mangle)) {
          src = src.substring(token.raw.length);
          tokens.push(token);
          continue;
        }
        if (!this.state.inLink && (token = this.tokenizer.url(src, mangle))) {
          src = src.substring(token.raw.length);
          tokens.push(token);
          continue;
        }
        cutSrc = src;
        if (this.options.extensions && this.options.extensions.startInline) {
          let startIndex = Infinity;
          const tempSrc = src.slice(1);
          let tempStart;
          this.options.extensions.startInline.forEach(function(getStartIndex) {
            tempStart = getStartIndex.call({ lexer: this }, tempSrc);
            if (typeof tempStart === "number" && tempStart >= 0) {
              startIndex = Math.min(startIndex, tempStart);
            }
          });
          if (startIndex < Infinity && startIndex >= 0) {
            cutSrc = src.substring(0, startIndex + 1);
          }
        }
        if (token = this.tokenizer.inlineText(cutSrc, smartypants)) {
          src = src.substring(token.raw.length);
          if (token.raw.slice(-1) !== "_") {
            prevChar = token.raw.slice(-1);
          }
          keepPrevChar = true;
          lastToken = tokens[tokens.length - 1];
          if (lastToken && lastToken.type === "text") {
            lastToken.raw += token.raw;
            lastToken.text += token.text;
          } else {
            tokens.push(token);
          }
          continue;
        }
        if (src) {
          const errMsg = "Infinite loop on byte: " + src.charCodeAt(0);
          if (this.options.silent) {
            console.error(errMsg);
            break;
          } else {
            throw new Error(errMsg);
          }
        }
      }
      return tokens;
    }
  }
  let Renderer$1 = class Renderer {
    constructor(options) {
      this.options = options || defaults$1;
    }
    code(code, infostring, escaped) {
      const lang = (infostring || "").match(/\S*/)[0];
      if (this.options.highlight) {
        const out = this.options.highlight(code, lang);
        if (out != null && out !== code) {
          escaped = true;
          code = out;
        }
      }
      code = code.replace(/\n$/, "") + "\n";
      if (!lang) {
        return "<pre><code>" + (escaped ? code : escape$1(code, true)) + "</code></pre>\n";
      }
      return '<pre><code class="' + this.options.langPrefix + escape$1(lang) + '">' + (escaped ? code : escape$1(code, true)) + "</code></pre>\n";
    }
    /**
     * @param {string} quote
     */
    blockquote(quote) {
      return `<blockquote>
${quote}</blockquote>
`;
    }
    html(html, block2) {
      return html;
    }
    /**
     * @param {string} text
     * @param {string} level
     * @param {string} raw
     * @param {any} slugger
     */
    heading(text2, level, raw, slugger) {
      if (this.options.headerIds) {
        const id2 = this.options.headerPrefix + slugger.slug(raw);
        return `<h${level} id="${id2}">${text2}</h${level}>
`;
      }
      return `<h${level}>${text2}</h${level}>
`;
    }
    hr() {
      return this.options.xhtml ? "<hr/>\n" : "<hr>\n";
    }
    list(body, ordered, start) {
      const type2 = ordered ? "ol" : "ul", startatt = ordered && start !== 1 ? ' start="' + start + '"' : "";
      return "<" + type2 + startatt + ">\n" + body + "</" + type2 + ">\n";
    }
    /**
     * @param {string} text
     */
    listitem(text2) {
      return `<li>${text2}</li>
`;
    }
    checkbox(checked) {
      return "<input " + (checked ? 'checked="" ' : "") + 'disabled="" type="checkbox"' + (this.options.xhtml ? " /" : "") + "> ";
    }
    /**
     * @param {string} text
     */
    paragraph(text2) {
      return `<p>${text2}</p>
`;
    }
    /**
     * @param {string} header
     * @param {string} body
     */
    table(header, body) {
      if (body) body = `<tbody>${body}</tbody>`;
      return "<table>\n<thead>\n" + header + "</thead>\n" + body + "</table>\n";
    }
    /**
     * @param {string} content
     */
    tablerow(content2) {
      return `<tr>
${content2}</tr>
`;
    }
    tablecell(content2, flags) {
      const type2 = flags.header ? "th" : "td";
      const tag = flags.align ? `<${type2} align="${flags.align}">` : `<${type2}>`;
      return tag + content2 + `</${type2}>
`;
    }
    /**
     * span level renderer
     * @param {string} text
     */
    strong(text2) {
      return `<strong>${text2}</strong>`;
    }
    /**
     * @param {string} text
     */
    em(text2) {
      return `<em>${text2}</em>`;
    }
    /**
     * @param {string} text
     */
    codespan(text2) {
      return `<code>${text2}</code>`;
    }
    br() {
      return this.options.xhtml ? "<br/>" : "<br>";
    }
    /**
     * @param {string} text
     */
    del(text2) {
      return `<del>${text2}</del>`;
    }
    /**
     * @param {string} href
     * @param {string} title
     * @param {string} text
     */
    link(href2, title2, text2) {
      href2 = cleanUrl(this.options.sanitize, this.options.baseUrl, href2);
      if (href2 === null) {
        return text2;
      }
      let out = '<a href="' + href2 + '"';
      if (title2) {
        out += ' title="' + title2 + '"';
      }
      out += ">" + text2 + "</a>";
      return out;
    }
    /**
     * @param {string} href
     * @param {string} title
     * @param {string} text
     */
    image(href2, title2, text2) {
      href2 = cleanUrl(this.options.sanitize, this.options.baseUrl, href2);
      if (href2 === null) {
        return text2;
      }
      let out = `<img src="${href2}" alt="${text2}"`;
      if (title2) {
        out += ` title="${title2}"`;
      }
      out += this.options.xhtml ? "/>" : ">";
      return out;
    }
    text(text2) {
      return text2;
    }
  };
  class TextRenderer {
    // no need for block level renderers
    strong(text2) {
      return text2;
    }
    em(text2) {
      return text2;
    }
    codespan(text2) {
      return text2;
    }
    del(text2) {
      return text2;
    }
    html(text2) {
      return text2;
    }
    text(text2) {
      return text2;
    }
    link(href2, title2, text2) {
      return "" + text2;
    }
    image(href2, title2, text2) {
      return "" + text2;
    }
    br() {
      return "";
    }
  }
  class Slugger {
    constructor() {
      this.seen = {};
    }
    /**
     * @param {string} value
     */
    serialize(value2) {
      return value2.toLowerCase().trim().replace(/<[!\/a-z].*?>/ig, "").replace(/[\u2000-\u206F\u2E00-\u2E7F\\'!"#$%&()*+,./:;<=>?@[\]^`{|}~]/g, "").replace(/\s/g, "-");
    }
    /**
     * Finds the next safe (unique) slug to use
     * @param {string} originalSlug
     * @param {boolean} isDryRun
     */
    getNextSafeSlug(originalSlug, isDryRun) {
      let slug = originalSlug;
      let occurenceAccumulator = 0;
      if (this.seen.hasOwnProperty(slug)) {
        occurenceAccumulator = this.seen[originalSlug];
        do {
          occurenceAccumulator++;
          slug = originalSlug + "-" + occurenceAccumulator;
        } while (this.seen.hasOwnProperty(slug));
      }
      if (!isDryRun) {
        this.seen[originalSlug] = occurenceAccumulator;
        this.seen[slug] = 0;
      }
      return slug;
    }
    /**
     * Convert string to unique id
     * @param {object} [options]
     * @param {boolean} [options.dryrun] Generates the next unique slug without
     * updating the internal accumulator.
     */
    slug(value2, options = {}) {
      const slug = this.serialize(value2);
      return this.getNextSafeSlug(slug, options.dryrun);
    }
  }
  class Parser {
    constructor(options) {
      this.options = options || defaults$1;
      this.options.renderer = this.options.renderer || new Renderer$1();
      this.renderer = this.options.renderer;
      this.renderer.options = this.options;
      this.textRenderer = new TextRenderer();
      this.slugger = new Slugger();
    }
    /**
     * Static Parse Method
     */
    static parse(tokens, options) {
      const parser2 = new Parser(options);
      return parser2.parse(tokens);
    }
    /**
     * Static Parse Inline Method
     */
    static parseInline(tokens, options) {
      const parser2 = new Parser(options);
      return parser2.parseInline(tokens);
    }
    /**
     * Parse Loop
     */
    parse(tokens, top = true) {
      let out = "", i, j, k, l2, l3, row, cell2, header, body, token, ordered, start, loose, itemBody, item, checked, task, checkbox2, ret;
      const l = tokens.length;
      for (i = 0; i < l; i++) {
        token = tokens[i];
        if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[token.type]) {
          ret = this.options.extensions.renderers[token.type].call({ parser: this }, token);
          if (ret !== false || !["space", "hr", "heading", "code", "table", "blockquote", "list", "html", "paragraph", "text"].includes(token.type)) {
            out += ret || "";
            continue;
          }
        }
        switch (token.type) {
          case "space": {
            continue;
          }
          case "hr": {
            out += this.renderer.hr();
            continue;
          }
          case "heading": {
            out += this.renderer.heading(
              this.parseInline(token.tokens),
              token.depth,
              unescape(this.parseInline(token.tokens, this.textRenderer)),
              this.slugger
            );
            continue;
          }
          case "code": {
            out += this.renderer.code(
              token.text,
              token.lang,
              token.escaped
            );
            continue;
          }
          case "table": {
            header = "";
            cell2 = "";
            l2 = token.header.length;
            for (j = 0; j < l2; j++) {
              cell2 += this.renderer.tablecell(
                this.parseInline(token.header[j].tokens),
                { header: true, align: token.align[j] }
              );
            }
            header += this.renderer.tablerow(cell2);
            body = "";
            l2 = token.rows.length;
            for (j = 0; j < l2; j++) {
              row = token.rows[j];
              cell2 = "";
              l3 = row.length;
              for (k = 0; k < l3; k++) {
                cell2 += this.renderer.tablecell(
                  this.parseInline(row[k].tokens),
                  { header: false, align: token.align[k] }
                );
              }
              body += this.renderer.tablerow(cell2);
            }
            out += this.renderer.table(header, body);
            continue;
          }
          case "blockquote": {
            body = this.parse(token.tokens);
            out += this.renderer.blockquote(body);
            continue;
          }
          case "list": {
            ordered = token.ordered;
            start = token.start;
            loose = token.loose;
            l2 = token.items.length;
            body = "";
            for (j = 0; j < l2; j++) {
              item = token.items[j];
              checked = item.checked;
              task = item.task;
              itemBody = "";
              if (item.task) {
                checkbox2 = this.renderer.checkbox(checked);
                if (loose) {
                  if (item.tokens.length > 0 && item.tokens[0].type === "paragraph") {
                    item.tokens[0].text = checkbox2 + " " + item.tokens[0].text;
                    if (item.tokens[0].tokens && item.tokens[0].tokens.length > 0 && item.tokens[0].tokens[0].type === "text") {
                      item.tokens[0].tokens[0].text = checkbox2 + " " + item.tokens[0].tokens[0].text;
                    }
                  } else {
                    item.tokens.unshift({
                      type: "text",
                      text: checkbox2
                    });
                  }
                } else {
                  itemBody += checkbox2;
                }
              }
              itemBody += this.parse(item.tokens, loose);
              body += this.renderer.listitem(itemBody, task, checked);
            }
            out += this.renderer.list(body, ordered, start);
            continue;
          }
          case "html": {
            out += this.renderer.html(token.text, token.block);
            continue;
          }
          case "paragraph": {
            out += this.renderer.paragraph(this.parseInline(token.tokens));
            continue;
          }
          case "text": {
            body = token.tokens ? this.parseInline(token.tokens) : token.text;
            while (i + 1 < l && tokens[i + 1].type === "text") {
              token = tokens[++i];
              body += "\n" + (token.tokens ? this.parseInline(token.tokens) : token.text);
            }
            out += top ? this.renderer.paragraph(body) : body;
            continue;
          }
          default: {
            const errMsg = 'Token with "' + token.type + '" type was not found.';
            if (this.options.silent) {
              console.error(errMsg);
              return;
            } else {
              throw new Error(errMsg);
            }
          }
        }
      }
      return out;
    }
    /**
     * Parse Inline Tokens
     */
    parseInline(tokens, renderer) {
      renderer = renderer || this.renderer;
      let out = "", i, token, ret;
      const l = tokens.length;
      for (i = 0; i < l; i++) {
        token = tokens[i];
        if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[token.type]) {
          ret = this.options.extensions.renderers[token.type].call({ parser: this }, token);
          if (ret !== false || !["escape", "html", "link", "image", "strong", "em", "codespan", "br", "del", "text"].includes(token.type)) {
            out += ret || "";
            continue;
          }
        }
        switch (token.type) {
          case "escape": {
            out += renderer.text(token.text);
            break;
          }
          case "html": {
            out += renderer.html(token.text);
            break;
          }
          case "link": {
            out += renderer.link(token.href, token.title, this.parseInline(token.tokens, renderer));
            break;
          }
          case "image": {
            out += renderer.image(token.href, token.title, token.text);
            break;
          }
          case "strong": {
            out += renderer.strong(this.parseInline(token.tokens, renderer));
            break;
          }
          case "em": {
            out += renderer.em(this.parseInline(token.tokens, renderer));
            break;
          }
          case "codespan": {
            out += renderer.codespan(token.text);
            break;
          }
          case "br": {
            out += renderer.br();
            break;
          }
          case "del": {
            out += renderer.del(this.parseInline(token.tokens, renderer));
            break;
          }
          case "text": {
            out += renderer.text(token.text);
            break;
          }
          default: {
            const errMsg = 'Token with "' + token.type + '" type was not found.';
            if (this.options.silent) {
              console.error(errMsg);
              return;
            } else {
              throw new Error(errMsg);
            }
          }
        }
      }
      return out;
    }
  }
  class Hooks {
    constructor(options) {
      this.options = options || defaults$1;
    }
    /**
     * Process markdown before marked
     */
    preprocess(markdown) {
      return markdown;
    }
    /**
     * Process HTML after marked is finished
     */
    postprocess(html) {
      return html;
    }
  }
  __publicField(Hooks, "passThroughHooks", /* @__PURE__ */ new Set([
    "preprocess",
    "postprocess"
  ]));
  class Marked {
    constructor(...args) {
      __privateAdd(this, _Marked_instances);
      __publicField(this, "defaults", getDefaults());
      __publicField(this, "options", this.setOptions);
      __publicField(this, "parse", __privateMethod(this, _Marked_instances, parseMarkdown_fn).call(this, Lexer.lex, Parser.parse));
      __publicField(this, "parseInline", __privateMethod(this, _Marked_instances, parseMarkdown_fn).call(this, Lexer.lexInline, Parser.parseInline));
      __publicField(this, "Parser", Parser);
      __publicField(this, "parser", Parser.parse);
      __publicField(this, "Renderer", Renderer$1);
      __publicField(this, "TextRenderer", TextRenderer);
      __publicField(this, "Lexer", Lexer);
      __publicField(this, "lexer", Lexer.lex);
      __publicField(this, "Tokenizer", Tokenizer);
      __publicField(this, "Slugger", Slugger);
      __publicField(this, "Hooks", Hooks);
      this.use(...args);
    }
    walkTokens(tokens, callback) {
      let values2 = [];
      for (const token of tokens) {
        values2 = values2.concat(callback.call(this, token));
        switch (token.type) {
          case "table": {
            for (const cell2 of token.header) {
              values2 = values2.concat(this.walkTokens(cell2.tokens, callback));
            }
            for (const row of token.rows) {
              for (const cell2 of row) {
                values2 = values2.concat(this.walkTokens(cell2.tokens, callback));
              }
            }
            break;
          }
          case "list": {
            values2 = values2.concat(this.walkTokens(token.items, callback));
            break;
          }
          default: {
            if (this.defaults.extensions && this.defaults.extensions.childTokens && this.defaults.extensions.childTokens[token.type]) {
              this.defaults.extensions.childTokens[token.type].forEach((childTokens) => {
                values2 = values2.concat(this.walkTokens(token[childTokens], callback));
              });
            } else if (token.tokens) {
              values2 = values2.concat(this.walkTokens(token.tokens, callback));
            }
          }
        }
      }
      return values2;
    }
    use(...args) {
      const extensions = this.defaults.extensions || { renderers: {}, childTokens: {} };
      args.forEach((pack2) => {
        const opts = { ...pack2 };
        opts.async = this.defaults.async || opts.async || false;
        if (pack2.extensions) {
          pack2.extensions.forEach((ext) => {
            if (!ext.name) {
              throw new Error("extension name required");
            }
            if (ext.renderer) {
              const prevRenderer = extensions.renderers[ext.name];
              if (prevRenderer) {
                extensions.renderers[ext.name] = function(...args2) {
                  let ret = ext.renderer.apply(this, args2);
                  if (ret === false) {
                    ret = prevRenderer.apply(this, args2);
                  }
                  return ret;
                };
              } else {
                extensions.renderers[ext.name] = ext.renderer;
              }
            }
            if (ext.tokenizer) {
              if (!ext.level || ext.level !== "block" && ext.level !== "inline") {
                throw new Error("extension level must be 'block' or 'inline'");
              }
              if (extensions[ext.level]) {
                extensions[ext.level].unshift(ext.tokenizer);
              } else {
                extensions[ext.level] = [ext.tokenizer];
              }
              if (ext.start) {
                if (ext.level === "block") {
                  if (extensions.startBlock) {
                    extensions.startBlock.push(ext.start);
                  } else {
                    extensions.startBlock = [ext.start];
                  }
                } else if (ext.level === "inline") {
                  if (extensions.startInline) {
                    extensions.startInline.push(ext.start);
                  } else {
                    extensions.startInline = [ext.start];
                  }
                }
              }
            }
            if (ext.childTokens) {
              extensions.childTokens[ext.name] = ext.childTokens;
            }
          });
          opts.extensions = extensions;
        }
        if (pack2.renderer) {
          const renderer = this.defaults.renderer || new Renderer$1(this.defaults);
          for (const prop in pack2.renderer) {
            const prevRenderer = renderer[prop];
            renderer[prop] = (...args2) => {
              let ret = pack2.renderer[prop].apply(renderer, args2);
              if (ret === false) {
                ret = prevRenderer.apply(renderer, args2);
              }
              return ret;
            };
          }
          opts.renderer = renderer;
        }
        if (pack2.tokenizer) {
          const tokenizer = this.defaults.tokenizer || new Tokenizer(this.defaults);
          for (const prop in pack2.tokenizer) {
            const prevTokenizer = tokenizer[prop];
            tokenizer[prop] = (...args2) => {
              let ret = pack2.tokenizer[prop].apply(tokenizer, args2);
              if (ret === false) {
                ret = prevTokenizer.apply(tokenizer, args2);
              }
              return ret;
            };
          }
          opts.tokenizer = tokenizer;
        }
        if (pack2.hooks) {
          const hooks = this.defaults.hooks || new Hooks();
          for (const prop in pack2.hooks) {
            const prevHook = hooks[prop];
            if (Hooks.passThroughHooks.has(prop)) {
              hooks[prop] = (arg) => {
                if (this.defaults.async) {
                  return Promise.resolve(pack2.hooks[prop].call(hooks, arg)).then((ret2) => {
                    return prevHook.call(hooks, ret2);
                  });
                }
                const ret = pack2.hooks[prop].call(hooks, arg);
                return prevHook.call(hooks, ret);
              };
            } else {
              hooks[prop] = (...args2) => {
                let ret = pack2.hooks[prop].apply(hooks, args2);
                if (ret === false) {
                  ret = prevHook.apply(hooks, args2);
                }
                return ret;
              };
            }
          }
          opts.hooks = hooks;
        }
        if (pack2.walkTokens) {
          const walkTokens = this.defaults.walkTokens;
          opts.walkTokens = function(token) {
            let values2 = [];
            values2.push(pack2.walkTokens.call(this, token));
            if (walkTokens) {
              values2 = values2.concat(walkTokens.call(this, token));
            }
            return values2;
          };
        }
        this.defaults = { ...this.defaults, ...opts };
      });
      return this;
    }
    setOptions(opt) {
      this.defaults = { ...this.defaults, ...opt };
      return this;
    }
  }
  _Marked_instances = new WeakSet();
  parseMarkdown_fn = function(lexer, parser2) {
    return (src, opt, callback) => {
      if (typeof opt === "function") {
        callback = opt;
        opt = null;
      }
      const origOpt = { ...opt };
      opt = { ...this.defaults, ...origOpt };
      const throwError2 = __privateMethod(this, _Marked_instances, onError_fn).call(this, opt.silent, opt.async, callback);
      if (typeof src === "undefined" || src === null) {
        return throwError2(new Error("marked(): input parameter is undefined or null"));
      }
      if (typeof src !== "string") {
        return throwError2(new Error("marked(): input parameter is of type " + Object.prototype.toString.call(src) + ", string expected"));
      }
      checkDeprecations(opt, callback);
      if (opt.hooks) {
        opt.hooks.options = opt;
      }
      if (callback) {
        const highlight = opt.highlight;
        let tokens;
        try {
          if (opt.hooks) {
            src = opt.hooks.preprocess(src);
          }
          tokens = lexer(src, opt);
        } catch (e3) {
          return throwError2(e3);
        }
        const done = (err) => {
          let out;
          if (!err) {
            try {
              if (opt.walkTokens) {
                this.walkTokens(tokens, opt.walkTokens);
              }
              out = parser2(tokens, opt);
              if (opt.hooks) {
                out = opt.hooks.postprocess(out);
              }
            } catch (e3) {
              err = e3;
            }
          }
          opt.highlight = highlight;
          return err ? throwError2(err) : callback(null, out);
        };
        if (!highlight || highlight.length < 3) {
          return done();
        }
        delete opt.highlight;
        if (!tokens.length) return done();
        let pending = 0;
        this.walkTokens(tokens, (token) => {
          if (token.type === "code") {
            pending++;
            setTimeout(() => {
              highlight(token.text, token.lang, (err, code) => {
                if (err) {
                  return done(err);
                }
                if (code != null && code !== token.text) {
                  token.text = code;
                  token.escaped = true;
                }
                pending--;
                if (pending === 0) {
                  done();
                }
              });
            }, 0);
          }
        });
        if (pending === 0) {
          done();
        }
        return;
      }
      if (opt.async) {
        return Promise.resolve(opt.hooks ? opt.hooks.preprocess(src) : src).then((src2) => lexer(src2, opt)).then((tokens) => opt.walkTokens ? Promise.all(this.walkTokens(tokens, opt.walkTokens)).then(() => tokens) : tokens).then((tokens) => parser2(tokens, opt)).then((html) => opt.hooks ? opt.hooks.postprocess(html) : html).catch(throwError2);
      }
      try {
        if (opt.hooks) {
          src = opt.hooks.preprocess(src);
        }
        const tokens = lexer(src, opt);
        if (opt.walkTokens) {
          this.walkTokens(tokens, opt.walkTokens);
        }
        let html = parser2(tokens, opt);
        if (opt.hooks) {
          html = opt.hooks.postprocess(html);
        }
        return html;
      } catch (e3) {
        return throwError2(e3);
      }
    };
  };
  onError_fn = function(silent, async, callback) {
    return (e3) => {
      e3.message += "\nPlease report this to https://github.com/markedjs/marked.";
      if (silent) {
        const msg = "<p>An error occurred:</p><pre>" + escape$1(e3.message + "", true) + "</pre>";
        if (async) {
          return Promise.resolve(msg);
        }
        if (callback) {
          callback(null, msg);
          return;
        }
        return msg;
      }
      if (async) {
        return Promise.reject(e3);
      }
      if (callback) {
        callback(e3);
        return;
      }
      throw e3;
    };
  };
  const markedInstance = new Marked(defaults$1);
  function marked(src, opt, callback) {
    return markedInstance.parse(src, opt, callback);
  }
  marked.options = marked.setOptions = function(opt) {
    markedInstance.setOptions(opt);
    marked.defaults = markedInstance.defaults;
    changeDefaults(marked.defaults);
    return marked;
  };
  marked.getDefaults = getDefaults;
  marked.defaults = defaults$1;
  marked.use = function(...args) {
    markedInstance.use(...args);
    marked.defaults = markedInstance.defaults;
    changeDefaults(marked.defaults);
    return marked;
  };
  marked.walkTokens = function(tokens, callback) {
    return markedInstance.walkTokens(tokens, callback);
  };
  marked.parseInline = markedInstance.parseInline;
  marked.Parser = Parser;
  marked.parser = Parser.parse;
  marked.Renderer = Renderer$1;
  marked.TextRenderer = TextRenderer;
  marked.Lexer = Lexer;
  marked.lexer = Lexer.lex;
  marked.Tokenizer = Tokenizer;
  marked.Slugger = Slugger;
  marked.Hooks = Hooks;
  marked.parse = marked;
  marked.options;
  marked.setOptions;
  marked.use;
  marked.walkTokens;
  marked.parseInline;
  Parser.parse;
  Lexer.lex;
  const key$1 = {};
  function create_else_block$6(ctx) {
    let t;
    return {
      c() {
        t = text$3(
          /*raw*/
          ctx[1]
        );
      },
      m(target2, anchor) {
        insert$1(target2, t, anchor);
      },
      p(ctx2, dirty) {
        if (dirty & /*raw*/
        2) set_data(
          t,
          /*raw*/
          ctx2[1]
        );
      },
      i: noop$5,
      o: noop$5,
      d(detaching) {
        if (detaching) {
          detach(t);
        }
      }
    };
  }
  function create_if_block_5(ctx) {
    let h6;
    let current2;
    const default_slot_template = (
      /*#slots*/
      ctx[5].default
    );
    const default_slot = create_slot(
      default_slot_template,
      ctx,
      /*$$scope*/
      ctx[4],
      null
    );
    return {
      c() {
        h6 = element$2("h6");
        if (default_slot) default_slot.c();
        attr$6(
          h6,
          "id",
          /*id*/
          ctx[2]
        );
      },
      m(target2, anchor) {
        insert$1(target2, h6, anchor);
        if (default_slot) {
          default_slot.m(h6, null);
        }
        current2 = true;
      },
      p(ctx2, dirty) {
        if (default_slot) {
          if (default_slot.p && (!current2 || dirty & /*$$scope*/
          16)) {
            update_slot_base(
              default_slot,
              default_slot_template,
              ctx2,
              /*$$scope*/
              ctx2[4],
              !current2 ? get_all_dirty_from_scope(
                /*$$scope*/
                ctx2[4]
              ) : get_slot_changes(
                default_slot_template,
                /*$$scope*/
                ctx2[4],
                dirty,
                null
              ),
              null
            );
          }
        }
        if (!current2 || dirty & /*id*/
        4) {
          attr$6(
            h6,
            "id",
            /*id*/
            ctx2[2]
          );
        }
      },
      i(local) {
        if (current2) return;
        transition_in(default_slot, local);
        current2 = true;
      },
      o(local) {
        transition_out(default_slot, local);
        current2 = false;
      },
      d(detaching) {
        if (detaching) {
          detach(h6);
        }
        if (default_slot) default_slot.d(detaching);
      }
    };
  }
  function create_if_block_4(ctx) {
    let h5;
    let current2;
    const default_slot_template = (
      /*#slots*/
      ctx[5].default
    );
    const default_slot = create_slot(
      default_slot_template,
      ctx,
      /*$$scope*/
      ctx[4],
      null
    );
    return {
      c() {
        h5 = element$2("h5");
        if (default_slot) default_slot.c();
        attr$6(
          h5,
          "id",
          /*id*/
          ctx[2]
        );
      },
      m(target2, anchor) {
        insert$1(target2, h5, anchor);
        if (default_slot) {
          default_slot.m(h5, null);
        }
        current2 = true;
      },
      p(ctx2, dirty) {
        if (default_slot) {
          if (default_slot.p && (!current2 || dirty & /*$$scope*/
          16)) {
            update_slot_base(
              default_slot,
              default_slot_template,
              ctx2,
              /*$$scope*/
              ctx2[4],
              !current2 ? get_all_dirty_from_scope(
                /*$$scope*/
                ctx2[4]
              ) : get_slot_changes(
                default_slot_template,
                /*$$scope*/
                ctx2[4],
                dirty,
                null
              ),
              null
            );
          }
        }
        if (!current2 || dirty & /*id*/
        4) {
          attr$6(
            h5,
            "id",
            /*id*/
            ctx2[2]
          );
        }
      },
      i(local) {
        if (current2) return;
        transition_in(default_slot, local);
        current2 = true;
      },
      o(local) {
        transition_out(default_slot, local);
        current2 = false;
      },
      d(detaching) {
        if (detaching) {
          detach(h5);
        }
        if (default_slot) default_slot.d(detaching);
      }
    };
  }
  function create_if_block_3(ctx) {
    let h4;
    let current2;
    const default_slot_template = (
      /*#slots*/
      ctx[5].default
    );
    const default_slot = create_slot(
      default_slot_template,
      ctx,
      /*$$scope*/
      ctx[4],
      null
    );
    return {
      c() {
        h4 = element$2("h4");
        if (default_slot) default_slot.c();
        attr$6(
          h4,
          "id",
          /*id*/
          ctx[2]
        );
      },
      m(target2, anchor) {
        insert$1(target2, h4, anchor);
        if (default_slot) {
          default_slot.m(h4, null);
        }
        current2 = true;
      },
      p(ctx2, dirty) {
        if (default_slot) {
          if (default_slot.p && (!current2 || dirty & /*$$scope*/
          16)) {
            update_slot_base(
              default_slot,
              default_slot_template,
              ctx2,
              /*$$scope*/
              ctx2[4],
              !current2 ? get_all_dirty_from_scope(
                /*$$scope*/
                ctx2[4]
              ) : get_slot_changes(
                default_slot_template,
                /*$$scope*/
                ctx2[4],
                dirty,
                null
              ),
              null
            );
          }
        }
        if (!current2 || dirty & /*id*/
        4) {
          attr$6(
            h4,
            "id",
            /*id*/
            ctx2[2]
          );
        }
      },
      i(local) {
        if (current2) return;
        transition_in(default_slot, local);
        current2 = true;
      },
      o(local) {
        transition_out(default_slot, local);
        current2 = false;
      },
      d(detaching) {
        if (detaching) {
          detach(h4);
        }
        if (default_slot) default_slot.d(detaching);
      }
    };
  }
  function create_if_block_2$1(ctx) {
    let h3;
    let current2;
    const default_slot_template = (
      /*#slots*/
      ctx[5].default
    );
    const default_slot = create_slot(
      default_slot_template,
      ctx,
      /*$$scope*/
      ctx[4],
      null
    );
    return {
      c() {
        h3 = element$2("h3");
        if (default_slot) default_slot.c();
        attr$6(
          h3,
          "id",
          /*id*/
          ctx[2]
        );
      },
      m(target2, anchor) {
        insert$1(target2, h3, anchor);
        if (default_slot) {
          default_slot.m(h3, null);
        }
        current2 = true;
      },
      p(ctx2, dirty) {
        if (default_slot) {
          if (default_slot.p && (!current2 || dirty & /*$$scope*/
          16)) {
            update_slot_base(
              default_slot,
              default_slot_template,
              ctx2,
              /*$$scope*/
              ctx2[4],
              !current2 ? get_all_dirty_from_scope(
                /*$$scope*/
                ctx2[4]
              ) : get_slot_changes(
                default_slot_template,
                /*$$scope*/
                ctx2[4],
                dirty,
                null
              ),
              null
            );
          }
        }
        if (!current2 || dirty & /*id*/
        4) {
          attr$6(
            h3,
            "id",
            /*id*/
            ctx2[2]
          );
        }
      },
      i(local) {
        if (current2) return;
        transition_in(default_slot, local);
        current2 = true;
      },
      o(local) {
        transition_out(default_slot, local);
        current2 = false;
      },
      d(detaching) {
        if (detaching) {
          detach(h3);
        }
        if (default_slot) default_slot.d(detaching);
      }
    };
  }
  function create_if_block_1$4(ctx) {
    let h2;
    let current2;
    const default_slot_template = (
      /*#slots*/
      ctx[5].default
    );
    const default_slot = create_slot(
      default_slot_template,
      ctx,
      /*$$scope*/
      ctx[4],
      null
    );
    return {
      c() {
        h2 = element$2("h2");
        if (default_slot) default_slot.c();
        attr$6(
          h2,
          "id",
          /*id*/
          ctx[2]
        );
      },
      m(target2, anchor) {
        insert$1(target2, h2, anchor);
        if (default_slot) {
          default_slot.m(h2, null);
        }
        current2 = true;
      },
      p(ctx2, dirty) {
        if (default_slot) {
          if (default_slot.p && (!current2 || dirty & /*$$scope*/
          16)) {
            update_slot_base(
              default_slot,
              default_slot_template,
              ctx2,
              /*$$scope*/
              ctx2[4],
              !current2 ? get_all_dirty_from_scope(
                /*$$scope*/
                ctx2[4]
              ) : get_slot_changes(
                default_slot_template,
                /*$$scope*/
                ctx2[4],
                dirty,
                null
              ),
              null
            );
          }
        }
        if (!current2 || dirty & /*id*/
        4) {
          attr$6(
            h2,
            "id",
            /*id*/
            ctx2[2]
          );
        }
      },
      i(local) {
        if (current2) return;
        transition_in(default_slot, local);
        current2 = true;
      },
      o(local) {
        transition_out(default_slot, local);
        current2 = false;
      },
      d(detaching) {
        if (detaching) {
          detach(h2);
        }
        if (default_slot) default_slot.d(detaching);
      }
    };
  }
  function create_if_block$e(ctx) {
    let h1;
    let current2;
    const default_slot_template = (
      /*#slots*/
      ctx[5].default
    );
    const default_slot = create_slot(
      default_slot_template,
      ctx,
      /*$$scope*/
      ctx[4],
      null
    );
    return {
      c() {
        h1 = element$2("h1");
        if (default_slot) default_slot.c();
        attr$6(
          h1,
          "id",
          /*id*/
          ctx[2]
        );
      },
      m(target2, anchor) {
        insert$1(target2, h1, anchor);
        if (default_slot) {
          default_slot.m(h1, null);
        }
        current2 = true;
      },
      p(ctx2, dirty) {
        if (default_slot) {
          if (default_slot.p && (!current2 || dirty & /*$$scope*/
          16)) {
            update_slot_base(
              default_slot,
              default_slot_template,
              ctx2,
              /*$$scope*/
              ctx2[4],
              !current2 ? get_all_dirty_from_scope(
                /*$$scope*/
                ctx2[4]
              ) : get_slot_changes(
                default_slot_template,
                /*$$scope*/
                ctx2[4],
                dirty,
                null
              ),
              null
            );
          }
        }
        if (!current2 || dirty & /*id*/
        4) {
          attr$6(
            h1,
            "id",
            /*id*/
            ctx2[2]
          );
        }
      },
      i(local) {
        if (current2) return;
        transition_in(default_slot, local);
        current2 = true;
      },
      o(local) {
        transition_out(default_slot, local);
        current2 = false;
      },
      d(detaching) {
        if (detaching) {
          detach(h1);
        }
        if (default_slot) default_slot.d(detaching);
      }
    };
  }
  function create_fragment$E(ctx) {
    let current_block_type_index;
    let if_block;
    let if_block_anchor;
    let current2;
    const if_block_creators = [
      create_if_block$e,
      create_if_block_1$4,
      create_if_block_2$1,
      create_if_block_3,
      create_if_block_4,
      create_if_block_5,
      create_else_block$6
    ];
    const if_blocks = [];
    function select_block_type(ctx2, dirty) {
      if (
        /*depth*/
        ctx2[0] === 1
      ) return 0;
      if (
        /*depth*/
        ctx2[0] === 2
      ) return 1;
      if (
        /*depth*/
        ctx2[0] === 3
      ) return 2;
      if (
        /*depth*/
        ctx2[0] === 4
      ) return 3;
      if (
        /*depth*/
        ctx2[0] === 5
      ) return 4;
      if (
        /*depth*/
        ctx2[0] === 6
      ) return 5;
      return 6;
    }
    current_block_type_index = select_block_type(ctx);
    if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    return {
      c() {
        if_block.c();
        if_block_anchor = empty();
      },
      m(target2, anchor) {
        if_blocks[current_block_type_index].m(target2, anchor);
        insert$1(target2, if_block_anchor, anchor);
        current2 = true;
      },
      p(ctx2, [dirty]) {
        let previous_block_index = current_block_type_index;
        current_block_type_index = select_block_type(ctx2);
        if (current_block_type_index === previous_block_index) {
          if_blocks[current_block_type_index].p(ctx2, dirty);
        } else {
          group_outros();
          transition_out(if_blocks[previous_block_index], 1, 1, () => {
            if_blocks[previous_block_index] = null;
          });
          check_outros();
          if_block = if_blocks[current_block_type_index];
          if (!if_block) {
            if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
            if_block.c();
          } else {
            if_block.p(ctx2, dirty);
          }
          transition_in(if_block, 1);
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      },
      i(local) {
        if (current2) return;
        transition_in(if_block);
        current2 = true;
      },
      o(local) {
        transition_out(if_block);
        current2 = false;
      },
      d(detaching) {
        if (detaching) {
          detach(if_block_anchor);
        }
        if_blocks[current_block_type_index].d(detaching);
      }
    };
  }
  function instance$D($$self, $$props, $$invalidate) {
    let id2;
    let { $$slots: slots = {}, $$scope } = $$props;
    let { depth } = $$props;
    let { raw } = $$props;
    let { text: text2 } = $$props;
    const { slug, getOptions } = getContext$1(key$1);
    const options = getOptions();
    $$self.$$set = ($$props2) => {
      if ("depth" in $$props2) $$invalidate(0, depth = $$props2.depth);
      if ("raw" in $$props2) $$invalidate(1, raw = $$props2.raw);
      if ("text" in $$props2) $$invalidate(3, text2 = $$props2.text);
      if ("$$scope" in $$props2) $$invalidate(4, $$scope = $$props2.$$scope);
    };
    $$self.$$.update = () => {
      if ($$self.$$.dirty & /*text*/
      8) {
        $$invalidate(2, id2 = options.headerIds ? options.headerPrefix + slug(text2) : void 0);
      }
    };
    return [depth, raw, id2, text2, $$scope, slots];
  }
  class Heading extends SvelteComponent {
    constructor(options) {
      super();
      init$1(this, options, instance$D, create_fragment$E, safe_not_equal, { depth: 0, raw: 1, text: 3 });
    }
  }
  function create_fragment$D(ctx) {
    let p;
    let current2;
    const default_slot_template = (
      /*#slots*/
      ctx[1].default
    );
    const default_slot = create_slot(
      default_slot_template,
      ctx,
      /*$$scope*/
      ctx[0],
      null
    );
    return {
      c() {
        p = element$2("p");
        if (default_slot) default_slot.c();
      },
      m(target2, anchor) {
        insert$1(target2, p, anchor);
        if (default_slot) {
          default_slot.m(p, null);
        }
        current2 = true;
      },
      p(ctx2, [dirty]) {
        if (default_slot) {
          if (default_slot.p && (!current2 || dirty & /*$$scope*/
          1)) {
            update_slot_base(
              default_slot,
              default_slot_template,
              ctx2,
              /*$$scope*/
              ctx2[0],
              !current2 ? get_all_dirty_from_scope(
                /*$$scope*/
                ctx2[0]
              ) : get_slot_changes(
                default_slot_template,
                /*$$scope*/
                ctx2[0],
                dirty,
                null
              ),
              null
            );
          }
        }
      },
      i(local) {
        if (current2) return;
        transition_in(default_slot, local);
        current2 = true;
      },
      o(local) {
        transition_out(default_slot, local);
        current2 = false;
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
        if (default_slot) default_slot.d(detaching);
      }
    };
  }
  function instance$C($$self, $$props, $$invalidate) {
    let { $$slots: slots = {}, $$scope } = $$props;
    $$self.$$set = ($$props2) => {
      if ("$$scope" in $$props2) $$invalidate(0, $$scope = $$props2.$$scope);
    };
    return [$$scope, slots];
  }
  class Paragraph extends SvelteComponent {
    constructor(options) {
      super();
      init$1(this, options, instance$C, create_fragment$D, safe_not_equal, {});
    }
  }
  function create_fragment$C(ctx) {
    let current2;
    const default_slot_template = (
      /*#slots*/
      ctx[3].default
    );
    const default_slot = create_slot(
      default_slot_template,
      ctx,
      /*$$scope*/
      ctx[2],
      null
    );
    return {
      c() {
        if (default_slot) default_slot.c();
      },
      m(target2, anchor) {
        if (default_slot) {
          default_slot.m(target2, anchor);
        }
        current2 = true;
      },
      p(ctx2, [dirty]) {
        if (default_slot) {
          if (default_slot.p && (!current2 || dirty & /*$$scope*/
          4)) {
            update_slot_base(
              default_slot,
              default_slot_template,
              ctx2,
              /*$$scope*/
              ctx2[2],
              !current2 ? get_all_dirty_from_scope(
                /*$$scope*/
                ctx2[2]
              ) : get_slot_changes(
                default_slot_template,
                /*$$scope*/
                ctx2[2],
                dirty,
                null
              ),
              null
            );
          }
        }
      },
      i(local) {
        if (current2) return;
        transition_in(default_slot, local);
        current2 = true;
      },
      o(local) {
        transition_out(default_slot, local);
        current2 = false;
      },
      d(detaching) {
        if (default_slot) default_slot.d(detaching);
      }
    };
  }
  function instance$B($$self, $$props, $$invalidate) {
    let { $$slots: slots = {}, $$scope } = $$props;
    let { text: text2 } = $$props;
    let { raw } = $$props;
    $$self.$$set = ($$props2) => {
      if ("text" in $$props2) $$invalidate(0, text2 = $$props2.text);
      if ("raw" in $$props2) $$invalidate(1, raw = $$props2.raw);
      if ("$$scope" in $$props2) $$invalidate(2, $$scope = $$props2.$$scope);
    };
    return [text2, raw, $$scope, slots];
  }
  let Text$1 = class Text extends SvelteComponent {
    constructor(options) {
      super();
      init$1(this, options, instance$B, create_fragment$C, safe_not_equal, { text: 0, raw: 1 });
    }
  };
  function create_fragment$B(ctx) {
    let img;
    let img_src_value;
    return {
      c() {
        img = element$2("img");
        if (!src_url_equal(img.src, img_src_value = /*href*/
        ctx[0])) attr$6(img, "src", img_src_value);
        attr$6(
          img,
          "title",
          /*title*/
          ctx[1]
        );
        attr$6(
          img,
          "alt",
          /*text*/
          ctx[2]
        );
      },
      m(target2, anchor) {
        insert$1(target2, img, anchor);
      },
      p(ctx2, [dirty]) {
        if (dirty & /*href*/
        1 && !src_url_equal(img.src, img_src_value = /*href*/
        ctx2[0])) {
          attr$6(img, "src", img_src_value);
        }
        if (dirty & /*title*/
        2) {
          attr$6(
            img,
            "title",
            /*title*/
            ctx2[1]
          );
        }
        if (dirty & /*text*/
        4) {
          attr$6(
            img,
            "alt",
            /*text*/
            ctx2[2]
          );
        }
      },
      i: noop$5,
      o: noop$5,
      d(detaching) {
        if (detaching) {
          detach(img);
        }
      }
    };
  }
  function instance$A($$self, $$props, $$invalidate) {
    let { href: href2 = "" } = $$props;
    let { title: title2 = void 0 } = $$props;
    let { text: text2 = "" } = $$props;
    $$self.$$set = ($$props2) => {
      if ("href" in $$props2) $$invalidate(0, href2 = $$props2.href);
      if ("title" in $$props2) $$invalidate(1, title2 = $$props2.title);
      if ("text" in $$props2) $$invalidate(2, text2 = $$props2.text);
    };
    return [href2, title2, text2];
  }
  let Image$1 = class Image extends SvelteComponent {
    constructor(options) {
      super();
      init$1(this, options, instance$A, create_fragment$B, safe_not_equal, { href: 0, title: 1, text: 2 });
    }
  };
  function create_fragment$A(ctx) {
    let a2;
    let current2;
    const default_slot_template = (
      /*#slots*/
      ctx[3].default
    );
    const default_slot = create_slot(
      default_slot_template,
      ctx,
      /*$$scope*/
      ctx[2],
      null
    );
    return {
      c() {
        a2 = element$2("a");
        if (default_slot) default_slot.c();
        attr$6(
          a2,
          "href",
          /*href*/
          ctx[0]
        );
        attr$6(
          a2,
          "title",
          /*title*/
          ctx[1]
        );
      },
      m(target2, anchor) {
        insert$1(target2, a2, anchor);
        if (default_slot) {
          default_slot.m(a2, null);
        }
        current2 = true;
      },
      p(ctx2, [dirty]) {
        if (default_slot) {
          if (default_slot.p && (!current2 || dirty & /*$$scope*/
          4)) {
            update_slot_base(
              default_slot,
              default_slot_template,
              ctx2,
              /*$$scope*/
              ctx2[2],
              !current2 ? get_all_dirty_from_scope(
                /*$$scope*/
                ctx2[2]
              ) : get_slot_changes(
                default_slot_template,
                /*$$scope*/
                ctx2[2],
                dirty,
                null
              ),
              null
            );
          }
        }
        if (!current2 || dirty & /*href*/
        1) {
          attr$6(
            a2,
            "href",
            /*href*/
            ctx2[0]
          );
        }
        if (!current2 || dirty & /*title*/
        2) {
          attr$6(
            a2,
            "title",
            /*title*/
            ctx2[1]
          );
        }
      },
      i(local) {
        if (current2) return;
        transition_in(default_slot, local);
        current2 = true;
      },
      o(local) {
        transition_out(default_slot, local);
        current2 = false;
      },
      d(detaching) {
        if (detaching) {
          detach(a2);
        }
        if (default_slot) default_slot.d(detaching);
      }
    };
  }
  function instance$z($$self, $$props, $$invalidate) {
    let { $$slots: slots = {}, $$scope } = $$props;
    let { href: href2 = "" } = $$props;
    let { title: title2 = void 0 } = $$props;
    $$self.$$set = ($$props2) => {
      if ("href" in $$props2) $$invalidate(0, href2 = $$props2.href);
      if ("title" in $$props2) $$invalidate(1, title2 = $$props2.title);
      if ("$$scope" in $$props2) $$invalidate(2, $$scope = $$props2.$$scope);
    };
    return [href2, title2, $$scope, slots];
  }
  class Link extends SvelteComponent {
    constructor(options) {
      super();
      init$1(this, options, instance$z, create_fragment$A, safe_not_equal, { href: 0, title: 1 });
    }
  }
  function create_fragment$z(ctx) {
    let em;
    let current2;
    const default_slot_template = (
      /*#slots*/
      ctx[1].default
    );
    const default_slot = create_slot(
      default_slot_template,
      ctx,
      /*$$scope*/
      ctx[0],
      null
    );
    return {
      c() {
        em = element$2("em");
        if (default_slot) default_slot.c();
      },
      m(target2, anchor) {
        insert$1(target2, em, anchor);
        if (default_slot) {
          default_slot.m(em, null);
        }
        current2 = true;
      },
      p(ctx2, [dirty]) {
        if (default_slot) {
          if (default_slot.p && (!current2 || dirty & /*$$scope*/
          1)) {
            update_slot_base(
              default_slot,
              default_slot_template,
              ctx2,
              /*$$scope*/
              ctx2[0],
              !current2 ? get_all_dirty_from_scope(
                /*$$scope*/
                ctx2[0]
              ) : get_slot_changes(
                default_slot_template,
                /*$$scope*/
                ctx2[0],
                dirty,
                null
              ),
              null
            );
          }
        }
      },
      i(local) {
        if (current2) return;
        transition_in(default_slot, local);
        current2 = true;
      },
      o(local) {
        transition_out(default_slot, local);
        current2 = false;
      },
      d(detaching) {
        if (detaching) {
          detach(em);
        }
        if (default_slot) default_slot.d(detaching);
      }
    };
  }
  function instance$y($$self, $$props, $$invalidate) {
    let { $$slots: slots = {}, $$scope } = $$props;
    $$self.$$set = ($$props2) => {
      if ("$$scope" in $$props2) $$invalidate(0, $$scope = $$props2.$$scope);
    };
    return [$$scope, slots];
  }
  class Em extends SvelteComponent {
    constructor(options) {
      super();
      init$1(this, options, instance$y, create_fragment$z, safe_not_equal, {});
    }
  }
  function create_fragment$y(ctx) {
    let del;
    let current2;
    const default_slot_template = (
      /*#slots*/
      ctx[1].default
    );
    const default_slot = create_slot(
      default_slot_template,
      ctx,
      /*$$scope*/
      ctx[0],
      null
    );
    return {
      c() {
        del = element$2("del");
        if (default_slot) default_slot.c();
      },
      m(target2, anchor) {
        insert$1(target2, del, anchor);
        if (default_slot) {
          default_slot.m(del, null);
        }
        current2 = true;
      },
      p(ctx2, [dirty]) {
        if (default_slot) {
          if (default_slot.p && (!current2 || dirty & /*$$scope*/
          1)) {
            update_slot_base(
              default_slot,
              default_slot_template,
              ctx2,
              /*$$scope*/
              ctx2[0],
              !current2 ? get_all_dirty_from_scope(
                /*$$scope*/
                ctx2[0]
              ) : get_slot_changes(
                default_slot_template,
                /*$$scope*/
                ctx2[0],
                dirty,
                null
              ),
              null
            );
          }
        }
      },
      i(local) {
        if (current2) return;
        transition_in(default_slot, local);
        current2 = true;
      },
      o(local) {
        transition_out(default_slot, local);
        current2 = false;
      },
      d(detaching) {
        if (detaching) {
          detach(del);
        }
        if (default_slot) default_slot.d(detaching);
      }
    };
  }
  function instance$x($$self, $$props, $$invalidate) {
    let { $$slots: slots = {}, $$scope } = $$props;
    $$self.$$set = ($$props2) => {
      if ("$$scope" in $$props2) $$invalidate(0, $$scope = $$props2.$$scope);
    };
    return [$$scope, slots];
  }
  class Del extends SvelteComponent {
    constructor(options) {
      super();
      init$1(this, options, instance$x, create_fragment$y, safe_not_equal, {});
    }
  }
  function create_fragment$x(ctx) {
    let code;
    let t_value = (
      /*raw*/
      ctx[0].replace(/`/g, "") + ""
    );
    let t;
    return {
      c() {
        code = element$2("code");
        t = text$3(t_value);
      },
      m(target2, anchor) {
        insert$1(target2, code, anchor);
        append$2(code, t);
      },
      p(ctx2, [dirty]) {
        if (dirty & /*raw*/
        1 && t_value !== (t_value = /*raw*/
        ctx2[0].replace(/`/g, "") + "")) set_data(t, t_value);
      },
      i: noop$5,
      o: noop$5,
      d(detaching) {
        if (detaching) {
          detach(code);
        }
      }
    };
  }
  function instance$w($$self, $$props, $$invalidate) {
    let { raw } = $$props;
    $$self.$$set = ($$props2) => {
      if ("raw" in $$props2) $$invalidate(0, raw = $$props2.raw);
    };
    return [raw];
  }
  class Codespan extends SvelteComponent {
    constructor(options) {
      super();
      init$1(this, options, instance$w, create_fragment$x, safe_not_equal, { raw: 0 });
    }
  }
  function create_fragment$w(ctx) {
    let strong;
    let current2;
    const default_slot_template = (
      /*#slots*/
      ctx[1].default
    );
    const default_slot = create_slot(
      default_slot_template,
      ctx,
      /*$$scope*/
      ctx[0],
      null
    );
    return {
      c() {
        strong = element$2("strong");
        if (default_slot) default_slot.c();
      },
      m(target2, anchor) {
        insert$1(target2, strong, anchor);
        if (default_slot) {
          default_slot.m(strong, null);
        }
        current2 = true;
      },
      p(ctx2, [dirty]) {
        if (default_slot) {
          if (default_slot.p && (!current2 || dirty & /*$$scope*/
          1)) {
            update_slot_base(
              default_slot,
              default_slot_template,
              ctx2,
              /*$$scope*/
              ctx2[0],
              !current2 ? get_all_dirty_from_scope(
                /*$$scope*/
                ctx2[0]
              ) : get_slot_changes(
                default_slot_template,
                /*$$scope*/
                ctx2[0],
                dirty,
                null
              ),
              null
            );
          }
        }
      },
      i(local) {
        if (current2) return;
        transition_in(default_slot, local);
        current2 = true;
      },
      o(local) {
        transition_out(default_slot, local);
        current2 = false;
      },
      d(detaching) {
        if (detaching) {
          detach(strong);
        }
        if (default_slot) default_slot.d(detaching);
      }
    };
  }
  function instance$v($$self, $$props, $$invalidate) {
    let { $$slots: slots = {}, $$scope } = $$props;
    $$self.$$set = ($$props2) => {
      if ("$$scope" in $$props2) $$invalidate(0, $$scope = $$props2.$$scope);
    };
    return [$$scope, slots];
  }
  class Strong extends SvelteComponent {
    constructor(options) {
      super();
      init$1(this, options, instance$v, create_fragment$w, safe_not_equal, {});
    }
  }
  function create_fragment$v(ctx) {
    let table;
    let current2;
    const default_slot_template = (
      /*#slots*/
      ctx[1].default
    );
    const default_slot = create_slot(
      default_slot_template,
      ctx,
      /*$$scope*/
      ctx[0],
      null
    );
    return {
      c() {
        table = element$2("table");
        if (default_slot) default_slot.c();
      },
      m(target2, anchor) {
        insert$1(target2, table, anchor);
        if (default_slot) {
          default_slot.m(table, null);
        }
        current2 = true;
      },
      p(ctx2, [dirty]) {
        if (default_slot) {
          if (default_slot.p && (!current2 || dirty & /*$$scope*/
          1)) {
            update_slot_base(
              default_slot,
              default_slot_template,
              ctx2,
              /*$$scope*/
              ctx2[0],
              !current2 ? get_all_dirty_from_scope(
                /*$$scope*/
                ctx2[0]
              ) : get_slot_changes(
                default_slot_template,
                /*$$scope*/
                ctx2[0],
                dirty,
                null
              ),
              null
            );
          }
        }
      },
      i(local) {
        if (current2) return;
        transition_in(default_slot, local);
        current2 = true;
      },
      o(local) {
        transition_out(default_slot, local);
        current2 = false;
      },
      d(detaching) {
        if (detaching) {
          detach(table);
        }
        if (default_slot) default_slot.d(detaching);
      }
    };
  }
  function instance$u($$self, $$props, $$invalidate) {
    let { $$slots: slots = {}, $$scope } = $$props;
    $$self.$$set = ($$props2) => {
      if ("$$scope" in $$props2) $$invalidate(0, $$scope = $$props2.$$scope);
    };
    return [$$scope, slots];
  }
  let Table$1 = class Table extends SvelteComponent {
    constructor(options) {
      super();
      init$1(this, options, instance$u, create_fragment$v, safe_not_equal, {});
    }
  };
  function create_fragment$u(ctx) {
    let thead;
    let current2;
    const default_slot_template = (
      /*#slots*/
      ctx[1].default
    );
    const default_slot = create_slot(
      default_slot_template,
      ctx,
      /*$$scope*/
      ctx[0],
      null
    );
    return {
      c() {
        thead = element$2("thead");
        if (default_slot) default_slot.c();
      },
      m(target2, anchor) {
        insert$1(target2, thead, anchor);
        if (default_slot) {
          default_slot.m(thead, null);
        }
        current2 = true;
      },
      p(ctx2, [dirty]) {
        if (default_slot) {
          if (default_slot.p && (!current2 || dirty & /*$$scope*/
          1)) {
            update_slot_base(
              default_slot,
              default_slot_template,
              ctx2,
              /*$$scope*/
              ctx2[0],
              !current2 ? get_all_dirty_from_scope(
                /*$$scope*/
                ctx2[0]
              ) : get_slot_changes(
                default_slot_template,
                /*$$scope*/
                ctx2[0],
                dirty,
                null
              ),
              null
            );
          }
        }
      },
      i(local) {
        if (current2) return;
        transition_in(default_slot, local);
        current2 = true;
      },
      o(local) {
        transition_out(default_slot, local);
        current2 = false;
      },
      d(detaching) {
        if (detaching) {
          detach(thead);
        }
        if (default_slot) default_slot.d(detaching);
      }
    };
  }
  function instance$t($$self, $$props, $$invalidate) {
    let { $$slots: slots = {}, $$scope } = $$props;
    $$self.$$set = ($$props2) => {
      if ("$$scope" in $$props2) $$invalidate(0, $$scope = $$props2.$$scope);
    };
    return [$$scope, slots];
  }
  class TableHead extends SvelteComponent {
    constructor(options) {
      super();
      init$1(this, options, instance$t, create_fragment$u, safe_not_equal, {});
    }
  }
  function create_fragment$t(ctx) {
    let tbody;
    let current2;
    const default_slot_template = (
      /*#slots*/
      ctx[1].default
    );
    const default_slot = create_slot(
      default_slot_template,
      ctx,
      /*$$scope*/
      ctx[0],
      null
    );
    return {
      c() {
        tbody = element$2("tbody");
        if (default_slot) default_slot.c();
      },
      m(target2, anchor) {
        insert$1(target2, tbody, anchor);
        if (default_slot) {
          default_slot.m(tbody, null);
        }
        current2 = true;
      },
      p(ctx2, [dirty]) {
        if (default_slot) {
          if (default_slot.p && (!current2 || dirty & /*$$scope*/
          1)) {
            update_slot_base(
              default_slot,
              default_slot_template,
              ctx2,
              /*$$scope*/
              ctx2[0],
              !current2 ? get_all_dirty_from_scope(
                /*$$scope*/
                ctx2[0]
              ) : get_slot_changes(
                default_slot_template,
                /*$$scope*/
                ctx2[0],
                dirty,
                null
              ),
              null
            );
          }
        }
      },
      i(local) {
        if (current2) return;
        transition_in(default_slot, local);
        current2 = true;
      },
      o(local) {
        transition_out(default_slot, local);
        current2 = false;
      },
      d(detaching) {
        if (detaching) {
          detach(tbody);
        }
        if (default_slot) default_slot.d(detaching);
      }
    };
  }
  function instance$s($$self, $$props, $$invalidate) {
    let { $$slots: slots = {}, $$scope } = $$props;
    $$self.$$set = ($$props2) => {
      if ("$$scope" in $$props2) $$invalidate(0, $$scope = $$props2.$$scope);
    };
    return [$$scope, slots];
  }
  class TableBody extends SvelteComponent {
    constructor(options) {
      super();
      init$1(this, options, instance$s, create_fragment$t, safe_not_equal, {});
    }
  }
  function create_fragment$s(ctx) {
    let tr2;
    let current2;
    const default_slot_template = (
      /*#slots*/
      ctx[1].default
    );
    const default_slot = create_slot(
      default_slot_template,
      ctx,
      /*$$scope*/
      ctx[0],
      null
    );
    return {
      c() {
        tr2 = element$2("tr");
        if (default_slot) default_slot.c();
      },
      m(target2, anchor) {
        insert$1(target2, tr2, anchor);
        if (default_slot) {
          default_slot.m(tr2, null);
        }
        current2 = true;
      },
      p(ctx2, [dirty]) {
        if (default_slot) {
          if (default_slot.p && (!current2 || dirty & /*$$scope*/
          1)) {
            update_slot_base(
              default_slot,
              default_slot_template,
              ctx2,
              /*$$scope*/
              ctx2[0],
              !current2 ? get_all_dirty_from_scope(
                /*$$scope*/
                ctx2[0]
              ) : get_slot_changes(
                default_slot_template,
                /*$$scope*/
                ctx2[0],
                dirty,
                null
              ),
              null
            );
          }
        }
      },
      i(local) {
        if (current2) return;
        transition_in(default_slot, local);
        current2 = true;
      },
      o(local) {
        transition_out(default_slot, local);
        current2 = false;
      },
      d(detaching) {
        if (detaching) {
          detach(tr2);
        }
        if (default_slot) default_slot.d(detaching);
      }
    };
  }
  function instance$r($$self, $$props, $$invalidate) {
    let { $$slots: slots = {}, $$scope } = $$props;
    $$self.$$set = ($$props2) => {
      if ("$$scope" in $$props2) $$invalidate(0, $$scope = $$props2.$$scope);
    };
    return [$$scope, slots];
  }
  class TableRow extends SvelteComponent {
    constructor(options) {
      super();
      init$1(this, options, instance$r, create_fragment$s, safe_not_equal, {});
    }
  }
  function create_else_block$5(ctx) {
    let td;
    let current2;
    const default_slot_template = (
      /*#slots*/
      ctx[3].default
    );
    const default_slot = create_slot(
      default_slot_template,
      ctx,
      /*$$scope*/
      ctx[2],
      null
    );
    return {
      c() {
        td = element$2("td");
        if (default_slot) default_slot.c();
        attr$6(
          td,
          "align",
          /*align*/
          ctx[1]
        );
      },
      m(target2, anchor) {
        insert$1(target2, td, anchor);
        if (default_slot) {
          default_slot.m(td, null);
        }
        current2 = true;
      },
      p(ctx2, dirty) {
        if (default_slot) {
          if (default_slot.p && (!current2 || dirty & /*$$scope*/
          4)) {
            update_slot_base(
              default_slot,
              default_slot_template,
              ctx2,
              /*$$scope*/
              ctx2[2],
              !current2 ? get_all_dirty_from_scope(
                /*$$scope*/
                ctx2[2]
              ) : get_slot_changes(
                default_slot_template,
                /*$$scope*/
                ctx2[2],
                dirty,
                null
              ),
              null
            );
          }
        }
        if (!current2 || dirty & /*align*/
        2) {
          attr$6(
            td,
            "align",
            /*align*/
            ctx2[1]
          );
        }
      },
      i(local) {
        if (current2) return;
        transition_in(default_slot, local);
        current2 = true;
      },
      o(local) {
        transition_out(default_slot, local);
        current2 = false;
      },
      d(detaching) {
        if (detaching) {
          detach(td);
        }
        if (default_slot) default_slot.d(detaching);
      }
    };
  }
  function create_if_block$d(ctx) {
    let th;
    let current2;
    const default_slot_template = (
      /*#slots*/
      ctx[3].default
    );
    const default_slot = create_slot(
      default_slot_template,
      ctx,
      /*$$scope*/
      ctx[2],
      null
    );
    return {
      c() {
        th = element$2("th");
        if (default_slot) default_slot.c();
        attr$6(
          th,
          "align",
          /*align*/
          ctx[1]
        );
      },
      m(target2, anchor) {
        insert$1(target2, th, anchor);
        if (default_slot) {
          default_slot.m(th, null);
        }
        current2 = true;
      },
      p(ctx2, dirty) {
        if (default_slot) {
          if (default_slot.p && (!current2 || dirty & /*$$scope*/
          4)) {
            update_slot_base(
              default_slot,
              default_slot_template,
              ctx2,
              /*$$scope*/
              ctx2[2],
              !current2 ? get_all_dirty_from_scope(
                /*$$scope*/
                ctx2[2]
              ) : get_slot_changes(
                default_slot_template,
                /*$$scope*/
                ctx2[2],
                dirty,
                null
              ),
              null
            );
          }
        }
        if (!current2 || dirty & /*align*/
        2) {
          attr$6(
            th,
            "align",
            /*align*/
            ctx2[1]
          );
        }
      },
      i(local) {
        if (current2) return;
        transition_in(default_slot, local);
        current2 = true;
      },
      o(local) {
        transition_out(default_slot, local);
        current2 = false;
      },
      d(detaching) {
        if (detaching) {
          detach(th);
        }
        if (default_slot) default_slot.d(detaching);
      }
    };
  }
  function create_fragment$r(ctx) {
    let current_block_type_index;
    let if_block;
    let if_block_anchor;
    let current2;
    const if_block_creators = [create_if_block$d, create_else_block$5];
    const if_blocks = [];
    function select_block_type(ctx2, dirty) {
      if (
        /*header*/
        ctx2[0]
      ) return 0;
      return 1;
    }
    current_block_type_index = select_block_type(ctx);
    if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    return {
      c() {
        if_block.c();
        if_block_anchor = empty();
      },
      m(target2, anchor) {
        if_blocks[current_block_type_index].m(target2, anchor);
        insert$1(target2, if_block_anchor, anchor);
        current2 = true;
      },
      p(ctx2, [dirty]) {
        let previous_block_index = current_block_type_index;
        current_block_type_index = select_block_type(ctx2);
        if (current_block_type_index === previous_block_index) {
          if_blocks[current_block_type_index].p(ctx2, dirty);
        } else {
          group_outros();
          transition_out(if_blocks[previous_block_index], 1, 1, () => {
            if_blocks[previous_block_index] = null;
          });
          check_outros();
          if_block = if_blocks[current_block_type_index];
          if (!if_block) {
            if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
            if_block.c();
          } else {
            if_block.p(ctx2, dirty);
          }
          transition_in(if_block, 1);
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      },
      i(local) {
        if (current2) return;
        transition_in(if_block);
        current2 = true;
      },
      o(local) {
        transition_out(if_block);
        current2 = false;
      },
      d(detaching) {
        if (detaching) {
          detach(if_block_anchor);
        }
        if_blocks[current_block_type_index].d(detaching);
      }
    };
  }
  function instance$q($$self, $$props, $$invalidate) {
    let { $$slots: slots = {}, $$scope } = $$props;
    let { header } = $$props;
    let { align: align2 } = $$props;
    $$self.$$set = ($$props2) => {
      if ("header" in $$props2) $$invalidate(0, header = $$props2.header);
      if ("align" in $$props2) $$invalidate(1, align2 = $$props2.align);
      if ("$$scope" in $$props2) $$invalidate(2, $$scope = $$props2.$$scope);
    };
    return [header, align2, $$scope, slots];
  }
  class TableCell extends SvelteComponent {
    constructor(options) {
      super();
      init$1(this, options, instance$q, create_fragment$r, safe_not_equal, { header: 0, align: 1 });
    }
  }
  function create_else_block$4(ctx) {
    let ul;
    let current2;
    const default_slot_template = (
      /*#slots*/
      ctx[3].default
    );
    const default_slot = create_slot(
      default_slot_template,
      ctx,
      /*$$scope*/
      ctx[2],
      null
    );
    return {
      c() {
        ul = element$2("ul");
        if (default_slot) default_slot.c();
      },
      m(target2, anchor) {
        insert$1(target2, ul, anchor);
        if (default_slot) {
          default_slot.m(ul, null);
        }
        current2 = true;
      },
      p(ctx2, dirty) {
        if (default_slot) {
          if (default_slot.p && (!current2 || dirty & /*$$scope*/
          4)) {
            update_slot_base(
              default_slot,
              default_slot_template,
              ctx2,
              /*$$scope*/
              ctx2[2],
              !current2 ? get_all_dirty_from_scope(
                /*$$scope*/
                ctx2[2]
              ) : get_slot_changes(
                default_slot_template,
                /*$$scope*/
                ctx2[2],
                dirty,
                null
              ),
              null
            );
          }
        }
      },
      i(local) {
        if (current2) return;
        transition_in(default_slot, local);
        current2 = true;
      },
      o(local) {
        transition_out(default_slot, local);
        current2 = false;
      },
      d(detaching) {
        if (detaching) {
          detach(ul);
        }
        if (default_slot) default_slot.d(detaching);
      }
    };
  }
  function create_if_block$c(ctx) {
    let ol;
    let current2;
    const default_slot_template = (
      /*#slots*/
      ctx[3].default
    );
    const default_slot = create_slot(
      default_slot_template,
      ctx,
      /*$$scope*/
      ctx[2],
      null
    );
    return {
      c() {
        ol = element$2("ol");
        if (default_slot) default_slot.c();
        attr$6(
          ol,
          "start",
          /*start*/
          ctx[1]
        );
      },
      m(target2, anchor) {
        insert$1(target2, ol, anchor);
        if (default_slot) {
          default_slot.m(ol, null);
        }
        current2 = true;
      },
      p(ctx2, dirty) {
        if (default_slot) {
          if (default_slot.p && (!current2 || dirty & /*$$scope*/
          4)) {
            update_slot_base(
              default_slot,
              default_slot_template,
              ctx2,
              /*$$scope*/
              ctx2[2],
              !current2 ? get_all_dirty_from_scope(
                /*$$scope*/
                ctx2[2]
              ) : get_slot_changes(
                default_slot_template,
                /*$$scope*/
                ctx2[2],
                dirty,
                null
              ),
              null
            );
          }
        }
        if (!current2 || dirty & /*start*/
        2) {
          attr$6(
            ol,
            "start",
            /*start*/
            ctx2[1]
          );
        }
      },
      i(local) {
        if (current2) return;
        transition_in(default_slot, local);
        current2 = true;
      },
      o(local) {
        transition_out(default_slot, local);
        current2 = false;
      },
      d(detaching) {
        if (detaching) {
          detach(ol);
        }
        if (default_slot) default_slot.d(detaching);
      }
    };
  }
  function create_fragment$q(ctx) {
    let current_block_type_index;
    let if_block;
    let if_block_anchor;
    let current2;
    const if_block_creators = [create_if_block$c, create_else_block$4];
    const if_blocks = [];
    function select_block_type(ctx2, dirty) {
      if (
        /*ordered*/
        ctx2[0]
      ) return 0;
      return 1;
    }
    current_block_type_index = select_block_type(ctx);
    if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    return {
      c() {
        if_block.c();
        if_block_anchor = empty();
      },
      m(target2, anchor) {
        if_blocks[current_block_type_index].m(target2, anchor);
        insert$1(target2, if_block_anchor, anchor);
        current2 = true;
      },
      p(ctx2, [dirty]) {
        let previous_block_index = current_block_type_index;
        current_block_type_index = select_block_type(ctx2);
        if (current_block_type_index === previous_block_index) {
          if_blocks[current_block_type_index].p(ctx2, dirty);
        } else {
          group_outros();
          transition_out(if_blocks[previous_block_index], 1, 1, () => {
            if_blocks[previous_block_index] = null;
          });
          check_outros();
          if_block = if_blocks[current_block_type_index];
          if (!if_block) {
            if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
            if_block.c();
          } else {
            if_block.p(ctx2, dirty);
          }
          transition_in(if_block, 1);
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      },
      i(local) {
        if (current2) return;
        transition_in(if_block);
        current2 = true;
      },
      o(local) {
        transition_out(if_block);
        current2 = false;
      },
      d(detaching) {
        if (detaching) {
          detach(if_block_anchor);
        }
        if_blocks[current_block_type_index].d(detaching);
      }
    };
  }
  function instance$p($$self, $$props, $$invalidate) {
    let { $$slots: slots = {}, $$scope } = $$props;
    let { ordered } = $$props;
    let { start } = $$props;
    $$self.$$set = ($$props2) => {
      if ("ordered" in $$props2) $$invalidate(0, ordered = $$props2.ordered);
      if ("start" in $$props2) $$invalidate(1, start = $$props2.start);
      if ("$$scope" in $$props2) $$invalidate(2, $$scope = $$props2.$$scope);
    };
    return [ordered, start, $$scope, slots];
  }
  class List extends SvelteComponent {
    constructor(options) {
      super();
      init$1(this, options, instance$p, create_fragment$q, safe_not_equal, { ordered: 0, start: 1 });
    }
  }
  function create_fragment$p(ctx) {
    let li;
    let current2;
    const default_slot_template = (
      /*#slots*/
      ctx[1].default
    );
    const default_slot = create_slot(
      default_slot_template,
      ctx,
      /*$$scope*/
      ctx[0],
      null
    );
    return {
      c() {
        li = element$2("li");
        if (default_slot) default_slot.c();
      },
      m(target2, anchor) {
        insert$1(target2, li, anchor);
        if (default_slot) {
          default_slot.m(li, null);
        }
        current2 = true;
      },
      p(ctx2, [dirty]) {
        if (default_slot) {
          if (default_slot.p && (!current2 || dirty & /*$$scope*/
          1)) {
            update_slot_base(
              default_slot,
              default_slot_template,
              ctx2,
              /*$$scope*/
              ctx2[0],
              !current2 ? get_all_dirty_from_scope(
                /*$$scope*/
                ctx2[0]
              ) : get_slot_changes(
                default_slot_template,
                /*$$scope*/
                ctx2[0],
                dirty,
                null
              ),
              null
            );
          }
        }
      },
      i(local) {
        if (current2) return;
        transition_in(default_slot, local);
        current2 = true;
      },
      o(local) {
        transition_out(default_slot, local);
        current2 = false;
      },
      d(detaching) {
        if (detaching) {
          detach(li);
        }
        if (default_slot) default_slot.d(detaching);
      }
    };
  }
  function instance$o($$self, $$props, $$invalidate) {
    let { $$slots: slots = {}, $$scope } = $$props;
    $$self.$$set = ($$props2) => {
      if ("$$scope" in $$props2) $$invalidate(0, $$scope = $$props2.$$scope);
    };
    return [$$scope, slots];
  }
  class ListItem extends SvelteComponent {
    constructor(options) {
      super();
      init$1(this, options, instance$o, create_fragment$p, safe_not_equal, {});
    }
  }
  function create_fragment$o(ctx) {
    let hr;
    return {
      c() {
        hr = element$2("hr");
      },
      m(target2, anchor) {
        insert$1(target2, hr, anchor);
      },
      p: noop$5,
      i: noop$5,
      o: noop$5,
      d(detaching) {
        if (detaching) {
          detach(hr);
        }
      }
    };
  }
  class Hr extends SvelteComponent {
    constructor(options) {
      super();
      init$1(this, options, null, create_fragment$o, safe_not_equal, {});
    }
  }
  function create_fragment$n(ctx) {
    let html_tag;
    let html_anchor;
    return {
      c() {
        html_tag = new HtmlTag(false);
        html_anchor = empty();
        html_tag.a = html_anchor;
      },
      m(target2, anchor) {
        html_tag.m(
          /*text*/
          ctx[0],
          target2,
          anchor
        );
        insert$1(target2, html_anchor, anchor);
      },
      p(ctx2, [dirty]) {
        if (dirty & /*text*/
        1) html_tag.p(
          /*text*/
          ctx2[0]
        );
      },
      i: noop$5,
      o: noop$5,
      d(detaching) {
        if (detaching) {
          detach(html_anchor);
          html_tag.d();
        }
      }
    };
  }
  function instance$n($$self, $$props, $$invalidate) {
    let { text: text2 } = $$props;
    $$self.$$set = ($$props2) => {
      if ("text" in $$props2) $$invalidate(0, text2 = $$props2.text);
    };
    return [text2];
  }
  class Html extends SvelteComponent {
    constructor(options) {
      super();
      init$1(this, options, instance$n, create_fragment$n, safe_not_equal, { text: 0 });
    }
  }
  function create_fragment$m(ctx) {
    let blockquote;
    let current2;
    const default_slot_template = (
      /*#slots*/
      ctx[1].default
    );
    const default_slot = create_slot(
      default_slot_template,
      ctx,
      /*$$scope*/
      ctx[0],
      null
    );
    return {
      c() {
        blockquote = element$2("blockquote");
        if (default_slot) default_slot.c();
      },
      m(target2, anchor) {
        insert$1(target2, blockquote, anchor);
        if (default_slot) {
          default_slot.m(blockquote, null);
        }
        current2 = true;
      },
      p(ctx2, [dirty]) {
        if (default_slot) {
          if (default_slot.p && (!current2 || dirty & /*$$scope*/
          1)) {
            update_slot_base(
              default_slot,
              default_slot_template,
              ctx2,
              /*$$scope*/
              ctx2[0],
              !current2 ? get_all_dirty_from_scope(
                /*$$scope*/
                ctx2[0]
              ) : get_slot_changes(
                default_slot_template,
                /*$$scope*/
                ctx2[0],
                dirty,
                null
              ),
              null
            );
          }
        }
      },
      i(local) {
        if (current2) return;
        transition_in(default_slot, local);
        current2 = true;
      },
      o(local) {
        transition_out(default_slot, local);
        current2 = false;
      },
      d(detaching) {
        if (detaching) {
          detach(blockquote);
        }
        if (default_slot) default_slot.d(detaching);
      }
    };
  }
  function instance$m($$self, $$props, $$invalidate) {
    let { $$slots: slots = {}, $$scope } = $$props;
    $$self.$$set = ($$props2) => {
      if ("$$scope" in $$props2) $$invalidate(0, $$scope = $$props2.$$scope);
    };
    return [$$scope, slots];
  }
  class Blockquote extends SvelteComponent {
    constructor(options) {
      super();
      init$1(this, options, instance$m, create_fragment$m, safe_not_equal, {});
    }
  }
  function create_fragment$l(ctx) {
    let pre;
    let code;
    let t;
    return {
      c() {
        pre = element$2("pre");
        code = element$2("code");
        t = text$3(
          /*text*/
          ctx[1]
        );
        attr$6(
          pre,
          "class",
          /*lang*/
          ctx[0]
        );
      },
      m(target2, anchor) {
        insert$1(target2, pre, anchor);
        append$2(pre, code);
        append$2(code, t);
      },
      p(ctx2, [dirty]) {
        if (dirty & /*text*/
        2) set_data(
          t,
          /*text*/
          ctx2[1]
        );
        if (dirty & /*lang*/
        1) {
          attr$6(
            pre,
            "class",
            /*lang*/
            ctx2[0]
          );
        }
      },
      i: noop$5,
      o: noop$5,
      d(detaching) {
        if (detaching) {
          detach(pre);
        }
      }
    };
  }
  function instance$l($$self, $$props, $$invalidate) {
    let { lang } = $$props;
    let { text: text2 } = $$props;
    $$self.$$set = ($$props2) => {
      if ("lang" in $$props2) $$invalidate(0, lang = $$props2.lang);
      if ("text" in $$props2) $$invalidate(1, text2 = $$props2.text);
    };
    return [lang, text2];
  }
  class Code extends SvelteComponent {
    constructor(options) {
      super();
      init$1(this, options, instance$l, create_fragment$l, safe_not_equal, { lang: 0, text: 1 });
    }
  }
  function create_fragment$k(ctx) {
    let br2;
    let current2;
    const default_slot_template = (
      /*#slots*/
      ctx[1].default
    );
    const default_slot = create_slot(
      default_slot_template,
      ctx,
      /*$$scope*/
      ctx[0],
      null
    );
    return {
      c() {
        br2 = element$2("br");
        if (default_slot) default_slot.c();
      },
      m(target2, anchor) {
        insert$1(target2, br2, anchor);
        if (default_slot) {
          default_slot.m(target2, anchor);
        }
        current2 = true;
      },
      p(ctx2, [dirty]) {
        if (default_slot) {
          if (default_slot.p && (!current2 || dirty & /*$$scope*/
          1)) {
            update_slot_base(
              default_slot,
              default_slot_template,
              ctx2,
              /*$$scope*/
              ctx2[0],
              !current2 ? get_all_dirty_from_scope(
                /*$$scope*/
                ctx2[0]
              ) : get_slot_changes(
                default_slot_template,
                /*$$scope*/
                ctx2[0],
                dirty,
                null
              ),
              null
            );
          }
        }
      },
      i(local) {
        if (current2) return;
        transition_in(default_slot, local);
        current2 = true;
      },
      o(local) {
        transition_out(default_slot, local);
        current2 = false;
      },
      d(detaching) {
        if (detaching) {
          detach(br2);
        }
        if (default_slot) default_slot.d(detaching);
      }
    };
  }
  function instance$k($$self, $$props, $$invalidate) {
    let { $$slots: slots = {}, $$scope } = $$props;
    $$self.$$set = ($$props2) => {
      if ("$$scope" in $$props2) $$invalidate(0, $$scope = $$props2.$$scope);
    };
    return [$$scope, slots];
  }
  class Br extends SvelteComponent {
    constructor(options) {
      super();
      init$1(this, options, instance$k, create_fragment$k, safe_not_equal, {});
    }
  }
  const defaultRenderers = {
    heading: Heading,
    paragraph: Paragraph,
    text: Text$1,
    image: Image$1,
    link: Link,
    em: Em,
    strong: Strong,
    codespan: Codespan,
    del: Del,
    table: Table$1,
    tablehead: TableHead,
    tablebody: TableBody,
    tablerow: TableRow,
    tablecell: TableCell,
    list: List,
    orderedlistitem: null,
    unorderedlistitem: null,
    listitem: ListItem,
    hr: Hr,
    html: Html,
    blockquote: Blockquote,
    code: Code,
    br: Br
  };
  const defaultOptions = {
    baseUrl: null,
    breaks: false,
    gfm: true,
    headerIds: true,
    headerPrefix: "",
    highlight: null,
    langPrefix: "language-",
    mangle: true,
    pedantic: false,
    renderer: null,
    sanitize: false,
    sanitizer: null,
    silent: false,
    smartLists: false,
    smartypants: false,
    tokenizer: null,
    xhtml: false
  };
  function create_fragment$j(ctx) {
    let parser2;
    let current2;
    parser2 = new Parser$1({
      props: {
        tokens: (
          /*tokens*/
          ctx[0]
        ),
        renderers: (
          /*combinedRenderers*/
          ctx[1]
        )
      }
    });
    return {
      c() {
        create_component(parser2.$$.fragment);
      },
      m(target2, anchor) {
        mount_component(parser2, target2, anchor);
        current2 = true;
      },
      p(ctx2, [dirty]) {
        const parser_changes = {};
        if (dirty & /*tokens*/
        1) parser_changes.tokens = /*tokens*/
        ctx2[0];
        if (dirty & /*combinedRenderers*/
        2) parser_changes.renderers = /*combinedRenderers*/
        ctx2[1];
        parser2.$set(parser_changes);
      },
      i(local) {
        if (current2) return;
        transition_in(parser2.$$.fragment, local);
        current2 = true;
      },
      o(local) {
        transition_out(parser2.$$.fragment, local);
        current2 = false;
      },
      d(detaching) {
        destroy_component(parser2, detaching);
      }
    };
  }
  function instance$j($$self, $$props, $$invalidate) {
    let preprocessed;
    let slugger;
    let combinedOptions;
    let combinedRenderers;
    let { source: source2 = [] } = $$props;
    let { renderers = {} } = $$props;
    let { options = {} } = $$props;
    let { isInline = false } = $$props;
    const dispatch2 = createEventDispatcher();
    let tokens;
    let lexer;
    let mounted;
    setContext(key$1, {
      slug: (val) => slugger ? slugger.slug(val) : "",
      getOptions: () => combinedOptions
    });
    onMount(() => {
      $$invalidate(7, mounted = true);
    });
    $$self.$$set = ($$props2) => {
      if ("source" in $$props2) $$invalidate(2, source2 = $$props2.source);
      if ("renderers" in $$props2) $$invalidate(3, renderers = $$props2.renderers);
      if ("options" in $$props2) $$invalidate(4, options = $$props2.options);
      if ("isInline" in $$props2) $$invalidate(5, isInline = $$props2.isInline);
    };
    $$self.$$.update = () => {
      if ($$self.$$.dirty & /*source*/
      4) {
        $$invalidate(8, preprocessed = Array.isArray(source2));
      }
      if ($$self.$$.dirty & /*source*/
      4) {
        slugger = source2 ? new Slugger() : void 0;
      }
      if ($$self.$$.dirty & /*options*/
      16) {
        $$invalidate(9, combinedOptions = { ...defaultOptions, ...options });
      }
      if ($$self.$$.dirty & /*preprocessed, source, combinedOptions, isInline, lexer, tokens*/
      869) {
        if (preprocessed) {
          $$invalidate(0, tokens = source2);
        } else {
          $$invalidate(6, lexer = new Lexer(combinedOptions));
          $$invalidate(0, tokens = isInline ? lexer.inlineTokens(source2) : lexer.lex(source2));
          dispatch2("parsed", { tokens });
        }
      }
      if ($$self.$$.dirty & /*renderers*/
      8) {
        $$invalidate(1, combinedRenderers = { ...defaultRenderers, ...renderers });
      }
      if ($$self.$$.dirty & /*mounted, preprocessed, tokens*/
      385) {
        mounted && !preprocessed && dispatch2("parsed", { tokens });
      }
    };
    return [
      tokens,
      combinedRenderers,
      source2,
      renderers,
      options,
      isInline,
      lexer,
      mounted,
      preprocessed,
      combinedOptions
    ];
  }
  class SvelteMarkdown extends SvelteComponent {
    constructor(options) {
      super();
      init$1(this, options, instance$j, create_fragment$j, safe_not_equal, {
        source: 2,
        renderers: 3,
        options: 4,
        isInline: 5
      });
    }
  }
  function create_fragment$i(ctx) {
    let sveltemarkdown;
    let current2;
    sveltemarkdown = new SvelteMarkdown({
      props: { source: (
        /*componentData*/
        ctx[0].source
      ) }
    });
    return {
      c() {
        create_component(sveltemarkdown.$$.fragment);
      },
      m(target2, anchor) {
        mount_component(sveltemarkdown, target2, anchor);
        current2 = true;
      },
      p(ctx2, [dirty]) {
        const sveltemarkdown_changes = {};
        if (dirty & /*componentData*/
        1) sveltemarkdown_changes.source = /*componentData*/
        ctx2[0].source;
        sveltemarkdown.$set(sveltemarkdown_changes);
      },
      i(local) {
        if (current2) return;
        transition_in(sveltemarkdown.$$.fragment, local);
        current2 = true;
      },
      o(local) {
        transition_out(sveltemarkdown.$$.fragment, local);
        current2 = false;
      },
      d(detaching) {
        destroy_component(sveltemarkdown, detaching);
      }
    };
  }
  function instance$i($$self, $$props, $$invalidate) {
    let { componentData } = $$props;
    $$self.$$set = ($$props2) => {
      if ("componentData" in $$props2) $$invalidate(0, componentData = $$props2.componentData);
    };
    return [componentData];
  }
  class Markdown extends SvelteComponent {
    constructor(options) {
      super();
      init$1(this, options, instance$i, create_fragment$i, safe_not_equal, { componentData: 0 });
    }
  }
  function create_fragment$h(ctx) {
    let div;
    let div_id_value;
    let current2;
    const default_slot_template = (
      /*#slots*/
      ctx[2].default
    );
    const default_slot = create_slot(
      default_slot_template,
      ctx,
      /*$$scope*/
      ctx[1],
      null
    );
    return {
      c() {
        var _a2;
        div = element$2("div");
        if (default_slot) default_slot.c();
        attr$6(div, "id", div_id_value = `page-${/*componentData*/
        ((_a2 = ctx[0]) == null ? void 0 : _a2.title) || "No Title"}`);
        attr$6(div, "class", "page svelte-v7ihqd");
        attr$6(div, "data-component", "page");
      },
      m(target2, anchor) {
        insert$1(target2, div, anchor);
        if (default_slot) {
          default_slot.m(div, null);
        }
        current2 = true;
      },
      p(ctx2, [dirty]) {
        var _a2;
        if (default_slot) {
          if (default_slot.p && (!current2 || dirty & /*$$scope*/
          2)) {
            update_slot_base(
              default_slot,
              default_slot_template,
              ctx2,
              /*$$scope*/
              ctx2[1],
              !current2 ? get_all_dirty_from_scope(
                /*$$scope*/
                ctx2[1]
              ) : get_slot_changes(
                default_slot_template,
                /*$$scope*/
                ctx2[1],
                dirty,
                null
              ),
              null
            );
          }
        }
        if (!current2 || dirty & /*componentData*/
        1 && div_id_value !== (div_id_value = `page-${/*componentData*/
        ((_a2 = ctx2[0]) == null ? void 0 : _a2.title) || "No Title"}`)) {
          attr$6(div, "id", div_id_value);
        }
      },
      i(local) {
        if (current2) return;
        transition_in(default_slot, local);
        current2 = true;
      },
      o(local) {
        transition_out(default_slot, local);
        current2 = false;
      },
      d(detaching) {
        if (detaching) {
          detach(div);
        }
        if (default_slot) default_slot.d(detaching);
      }
    };
  }
  function instance$h($$self, $$props, $$invalidate) {
    let { $$slots: slots = {}, $$scope } = $$props;
    let { componentData } = $$props;
    $$self.$$set = ($$props2) => {
      if ("componentData" in $$props2) $$invalidate(0, componentData = $$props2.componentData);
      if ("$$scope" in $$props2) $$invalidate(1, $$scope = $$props2.$$scope);
    };
    return [componentData, $$scope, slots];
  }
  class Page extends SvelteComponent {
    constructor(options) {
      super();
      init$1(this, options, instance$h, create_fragment$h, safe_not_equal, { componentData: 0 });
    }
  }
  function create_if_block$b(ctx) {
    let div;
    let t;
    let if_block0 = (
      /*label*/
      ctx[5] && create_if_block_2(ctx)
    );
    let if_block1 = (
      /*details*/
      ctx[4] && create_if_block_1$3(ctx)
    );
    return {
      c() {
        div = element$2("div");
        if (if_block0) if_block0.c();
        t = space();
        if (if_block1) if_block1.c();
        attr$6(div, "class", "info svelte-ljrmzp");
      },
      m(target2, anchor) {
        insert$1(target2, div, anchor);
        if (if_block0) if_block0.m(div, null);
        append$2(div, t);
        if (if_block1) if_block1.m(div, null);
      },
      p(ctx2, dirty) {
        if (
          /*label*/
          ctx2[5]
        ) {
          if (if_block0) {
            if_block0.p(ctx2, dirty);
          } else {
            if_block0 = create_if_block_2(ctx2);
            if_block0.c();
            if_block0.m(div, t);
          }
        } else if (if_block0) {
          if_block0.d(1);
          if_block0 = null;
        }
        if (
          /*details*/
          ctx2[4]
        ) {
          if (if_block1) {
            if_block1.p(ctx2, dirty);
          } else {
            if_block1 = create_if_block_1$3(ctx2);
            if_block1.c();
            if_block1.m(div, null);
          }
        } else if (if_block1) {
          if_block1.d(1);
          if_block1 = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(div);
        }
        if (if_block0) if_block0.d();
        if (if_block1) if_block1.d();
      }
    };
  }
  function create_if_block_2(ctx) {
    let label_1;
    let t02;
    let t12;
    let span2;
    let t22;
    return {
      c() {
        label_1 = element$2("label");
        t02 = text$3(
          /*label*/
          ctx[5]
        );
        t12 = space();
        span2 = element$2("span");
        t22 = text$3(
          /*displayValue*/
          ctx[3]
        );
        attr$6(span2, "class", "labelValue svelte-ljrmzp");
        attr$6(
          label_1,
          "for",
          /*id*/
          ctx[6]
        );
        attr$6(label_1, "class", "svelte-ljrmzp");
      },
      m(target2, anchor) {
        insert$1(target2, label_1, anchor);
        append$2(label_1, t02);
        append$2(label_1, t12);
        append$2(label_1, span2);
        append$2(span2, t22);
      },
      p(ctx2, dirty) {
        if (dirty & /*label*/
        32) set_data(
          t02,
          /*label*/
          ctx2[5]
        );
        if (dirty & /*displayValue*/
        8) set_data(
          t22,
          /*displayValue*/
          ctx2[3]
        );
        if (dirty & /*id*/
        64) {
          attr$6(
            label_1,
            "for",
            /*id*/
            ctx2[6]
          );
        }
      },
      d(detaching) {
        if (detaching) {
          detach(label_1);
        }
      }
    };
  }
  function create_if_block_1$3(ctx) {
    let span2;
    let t;
    return {
      c() {
        span2 = element$2("span");
        t = text$3(
          /*details*/
          ctx[4]
        );
        attr$6(
          span2,
          "title",
          /*details*/
          ctx[4]
        );
        attr$6(span2, "class", "details svelte-ljrmzp");
      },
      m(target2, anchor) {
        insert$1(target2, span2, anchor);
        append$2(span2, t);
      },
      p(ctx2, dirty) {
        if (dirty & /*details*/
        16) set_data(
          t,
          /*details*/
          ctx2[4]
        );
        if (dirty & /*details*/
        16) {
          attr$6(
            span2,
            "title",
            /*details*/
            ctx2[4]
          );
        }
      },
      d(detaching) {
        if (detaching) {
          detach(span2);
        }
      }
    };
  }
  function create_fragment$g(ctx) {
    let div1;
    let div0;
    let t02;
    let progress;
    let t12;
    let t2_value = (
      /*unit*/
      (ctx[0] || "") + ""
    );
    let t22;
    let if_block = (
      /*label*/
      (ctx[5] || /*details*/
      ctx[4]) && create_if_block$b(ctx)
    );
    return {
      c() {
        div1 = element$2("div");
        div0 = element$2("div");
        if (if_block) if_block.c();
        t02 = space();
        progress = element$2("progress");
        t12 = text$3(
          /*value*/
          ctx[1]
        );
        t22 = text$3(t2_value);
        attr$6(
          progress,
          "id",
          /*id*/
          ctx[6]
        );
        attr$6(
          progress,
          "max",
          /*max*/
          ctx[2]
        );
        progress.value = /*value*/
        ctx[1];
        attr$6(progress, "style", `color: red !important`);
        attr$6(progress, "class", "svelte-ljrmzp");
        attr$6(div0, "class", "inner svelte-ljrmzp");
        attr$6(div1, "class", "container svelte-ljrmzp");
      },
      m(target2, anchor) {
        insert$1(target2, div1, anchor);
        append$2(div1, div0);
        if (if_block) if_block.m(div0, null);
        append$2(div0, t02);
        append$2(div0, progress);
        append$2(progress, t12);
        append$2(progress, t22);
      },
      p(ctx2, [dirty]) {
        if (
          /*label*/
          ctx2[5] || /*details*/
          ctx2[4]
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block$b(ctx2);
            if_block.c();
            if_block.m(div0, t02);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
        if (dirty & /*value*/
        2) set_data(
          t12,
          /*value*/
          ctx2[1]
        );
        if (dirty & /*unit*/
        1 && t2_value !== (t2_value = /*unit*/
        (ctx2[0] || "") + "")) set_data(t22, t2_value);
        if (dirty & /*id*/
        64) {
          attr$6(
            progress,
            "id",
            /*id*/
            ctx2[6]
          );
        }
        if (dirty & /*max*/
        4) {
          attr$6(
            progress,
            "max",
            /*max*/
            ctx2[2]
          );
        }
        if (dirty & /*value*/
        2) {
          progress.value = /*value*/
          ctx2[1];
        }
      },
      i: noop$5,
      o: noop$5,
      d(detaching) {
        if (detaching) {
          detach(div1);
        }
        if (if_block) if_block.d();
      }
    };
  }
  function instance$g($$self, $$props, $$invalidate) {
    let max2;
    let id2;
    let value2;
    let label2;
    let unit2;
    let details;
    let { componentData } = $$props;
    if (value2 == null) {
      value2 = 0;
    }
    let displayValue = value2.toString();
    $$self.$$set = ($$props2) => {
      if ("componentData" in $$props2) $$invalidate(7, componentData = $$props2.componentData);
    };
    $$self.$$.update = () => {
      if ($$self.$$.dirty & /*componentData*/
      128) {
        $$invalidate(2, { max: max2, id: id2, value: value2, label: label2, unit: unit2, details } = componentData, max2, ($$invalidate(6, id2), $$invalidate(7, componentData)), ($$invalidate(1, value2), $$invalidate(7, componentData)), ($$invalidate(5, label2), $$invalidate(7, componentData)), ($$invalidate(0, unit2), $$invalidate(7, componentData)), ($$invalidate(4, details), $$invalidate(7, componentData)));
      }
      if ($$self.$$.dirty & /*max, value, unit*/
      7) {
        if (max2) {
          $$invalidate(3, displayValue = `${value2}/${max2}`);
        } else if (unit2) {
          $$invalidate(3, displayValue = `${value2} ${unit2}`);
        }
      }
    };
    return [unit2, value2, max2, displayValue, details, label2, id2, componentData];
  }
  class Progress_bar extends SvelteComponent {
    constructor(options) {
      super();
      init$1(this, options, instance$g, create_fragment$g, safe_not_equal, { componentData: 7 });
    }
  }
  function create_if_block_1$2(ctx) {
    let h3;
    let t;
    return {
      c() {
        h3 = element$2("h3");
        t = text$3(
          /*title*/
          ctx[3]
        );
      },
      m(target2, anchor) {
        insert$1(target2, h3, anchor);
        append$2(h3, t);
      },
      p(ctx2, dirty) {
        if (dirty & /*title*/
        8) set_data(
          t,
          /*title*/
          ctx2[3]
        );
      },
      d(detaching) {
        if (detaching) {
          detach(h3);
        }
      }
    };
  }
  function create_if_block$a(ctx) {
    let p;
    let t;
    return {
      c() {
        p = element$2("p");
        t = text$3(
          /*subtitle*/
          ctx[2]
        );
        attr$6(p, "class", "description");
      },
      m(target2, anchor) {
        insert$1(target2, p, anchor);
        append$2(p, t);
      },
      p(ctx2, dirty) {
        if (dirty & /*subtitle*/
        4) set_data(
          t,
          /*subtitle*/
          ctx2[2]
        );
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_fragment$f(ctx) {
    let section;
    let div0;
    let t02;
    let t12;
    let div1;
    let t22;
    let hr;
    let current2;
    let if_block0 = (
      /*title*/
      ctx[3] && create_if_block_1$2(ctx)
    );
    let if_block1 = (
      /*subtitle*/
      ctx[2] && create_if_block$a(ctx)
    );
    const default_slot_template = (
      /*#slots*/
      ctx[6].default
    );
    const default_slot = create_slot(
      default_slot_template,
      ctx,
      /*$$scope*/
      ctx[5],
      null
    );
    return {
      c() {
        section = element$2("section");
        div0 = element$2("div");
        if (if_block0) if_block0.c();
        t02 = space();
        if (if_block1) if_block1.c();
        t12 = space();
        div1 = element$2("div");
        if (default_slot) default_slot.c();
        t22 = space();
        hr = element$2("hr");
        attr$6(div0, "class", "heading svelte-17n0qr8");
        attr$6(div1, "class", "sectionItems svelte-17n0qr8");
        attr$6(
          div1,
          "style",
          /*style*/
          ctx[0]
        );
        attr$6(hr, "class", "svelte-17n0qr8");
        attr$6(section, "class", "container svelte-17n0qr8");
        attr$6(section, "data-component", "section");
        attr$6(
          section,
          "data-section-id",
          /*title*/
          ctx[3]
        );
        toggle_class(
          section,
          "columns",
          /*columns*/
          ctx[1]
        );
      },
      m(target2, anchor) {
        insert$1(target2, section, anchor);
        append$2(section, div0);
        if (if_block0) if_block0.m(div0, null);
        append$2(div0, t02);
        if (if_block1) if_block1.m(div0, null);
        append$2(section, t12);
        append$2(section, div1);
        if (default_slot) {
          default_slot.m(div1, null);
        }
        append$2(section, t22);
        append$2(section, hr);
        current2 = true;
      },
      p(ctx2, [dirty]) {
        if (
          /*title*/
          ctx2[3]
        ) {
          if (if_block0) {
            if_block0.p(ctx2, dirty);
          } else {
            if_block0 = create_if_block_1$2(ctx2);
            if_block0.c();
            if_block0.m(div0, t02);
          }
        } else if (if_block0) {
          if_block0.d(1);
          if_block0 = null;
        }
        if (
          /*subtitle*/
          ctx2[2]
        ) {
          if (if_block1) {
            if_block1.p(ctx2, dirty);
          } else {
            if_block1 = create_if_block$a(ctx2);
            if_block1.c();
            if_block1.m(div0, null);
          }
        } else if (if_block1) {
          if_block1.d(1);
          if_block1 = null;
        }
        if (default_slot) {
          if (default_slot.p && (!current2 || dirty & /*$$scope*/
          32)) {
            update_slot_base(
              default_slot,
              default_slot_template,
              ctx2,
              /*$$scope*/
              ctx2[5],
              !current2 ? get_all_dirty_from_scope(
                /*$$scope*/
                ctx2[5]
              ) : get_slot_changes(
                default_slot_template,
                /*$$scope*/
                ctx2[5],
                dirty,
                null
              ),
              null
            );
          }
        }
        if (!current2 || dirty & /*style*/
        1) {
          attr$6(
            div1,
            "style",
            /*style*/
            ctx2[0]
          );
        }
        if (!current2 || dirty & /*title*/
        8) {
          attr$6(
            section,
            "data-section-id",
            /*title*/
            ctx2[3]
          );
        }
        if (!current2 || dirty & /*columns*/
        2) {
          toggle_class(
            section,
            "columns",
            /*columns*/
            ctx2[1]
          );
        }
      },
      i(local) {
        if (current2) return;
        transition_in(default_slot, local);
        current2 = true;
      },
      o(local) {
        transition_out(default_slot, local);
        current2 = false;
      },
      d(detaching) {
        if (detaching) {
          detach(section);
        }
        if (if_block0) if_block0.d();
        if (if_block1) if_block1.d();
        if (default_slot) default_slot.d(detaching);
      }
    };
  }
  function instance$f($$self, $$props, $$invalidate) {
    let title2;
    let subtitle;
    let columns;
    let { $$slots: slots = {}, $$scope } = $$props;
    let { componentData } = $$props;
    let style2;
    if (columns) {
      style2 = `grid-template-columns: repeat(${columns || 1}, 1fr);`;
    }
    $$self.$$set = ($$props2) => {
      if ("componentData" in $$props2) $$invalidate(4, componentData = $$props2.componentData);
      if ("$$scope" in $$props2) $$invalidate(5, $$scope = $$props2.$$scope);
    };
    $$self.$$.update = () => {
      if ($$self.$$.dirty & /*componentData*/
      16) {
        $$invalidate(3, { title: title2, subtitle, columns } = componentData, title2, ($$invalidate(2, subtitle), $$invalidate(4, componentData)), ($$invalidate(1, columns), $$invalidate(4, componentData)));
      }
    };
    return [style2, columns, subtitle, title2, componentData, $$scope, slots];
  }
  class Section extends SvelteComponent {
    constructor(options) {
      super();
      init$1(this, options, instance$f, create_fragment$f, safe_not_equal, { componentData: 4 });
    }
  }
  const stringOrChar = /("(?:[^\\"]|\\.)*")|[:,]/g;
  function stringify$2(passedObj, options = {}) {
    const indent = JSON.stringify(
      [1],
      void 0,
      options.indent === void 0 ? 2 : options.indent
    ).slice(2, -3);
    const maxLength = indent === "" ? Infinity : options.maxLength === void 0 ? 80 : options.maxLength;
    let { replacer: replacer2 } = options;
    return function _stringify(obj, currentIndent, reserved) {
      if (obj && typeof obj.toJSON === "function") {
        obj = obj.toJSON();
      }
      const string2 = JSON.stringify(obj, replacer2);
      if (string2 === void 0) {
        return string2;
      }
      const length2 = maxLength - currentIndent.length - reserved;
      if (string2.length <= length2) {
        const prettified = string2.replace(
          stringOrChar,
          (match2, stringLiteral) => {
            return stringLiteral || `${match2} `;
          }
        );
        if (prettified.length <= length2) {
          return prettified;
        }
      }
      if (replacer2 != null) {
        obj = JSON.parse(string2);
        replacer2 = void 0;
      }
      if (typeof obj === "object" && obj !== null) {
        const nextIndent = currentIndent + indent;
        const items = [];
        let index2 = 0;
        let start;
        let end;
        if (Array.isArray(obj)) {
          start = "[";
          end = "]";
          const { length: length3 } = obj;
          for (; index2 < length3; index2++) {
            items.push(
              _stringify(obj[index2], nextIndent, index2 === length3 - 1 ? 0 : 1) || "null"
            );
          }
        } else {
          start = "{";
          end = "}";
          const keys2 = Object.keys(obj);
          const { length: length3 } = keys2;
          for (; index2 < length3; index2++) {
            const key2 = keys2[index2];
            const keyPart = `${JSON.stringify(key2)}: `;
            const value2 = _stringify(
              obj[key2],
              nextIndent,
              keyPart.length + (index2 === length3 - 1 ? 0 : 1)
            );
            if (value2 !== void 0) {
              items.push(keyPart + value2);
            }
          }
        }
        if (items.length > 0) {
          return [start, indent + items.join(`,
${nextIndent}`), end].join(
            `
${currentIndent}`
          );
        }
      }
      return string2;
    }(passedObj, "", 0);
  }
  function accessor(fn, fields, name) {
    fn.fields = fields || [];
    fn.fname = name;
    return fn;
  }
  function accessorName(fn) {
    return fn == null ? null : fn.fname;
  }
  function accessorFields(fn) {
    return fn == null ? null : fn.fields;
  }
  function getter$1(path2) {
    return path2.length === 1 ? get1(path2[0]) : getN(path2);
  }
  const get1 = (field2) => function(obj) {
    return obj[field2];
  };
  const getN = (path2) => {
    const len = path2.length;
    return function(obj) {
      for (let i = 0; i < len; ++i) {
        obj = obj[path2[i]];
      }
      return obj;
    };
  };
  function error$1(message) {
    throw Error(message);
  }
  function splitAccessPath(p) {
    const path2 = [], n = p.length;
    let q = null, b2 = 0, s = "", i, j, c2;
    p = p + "";
    function push() {
      path2.push(s + p.substring(i, j));
      s = "";
      i = j + 1;
    }
    for (i = j = 0; j < n; ++j) {
      c2 = p[j];
      if (c2 === "\\") {
        s += p.substring(i, j++);
        i = j;
      } else if (c2 === q) {
        push();
        q = null;
        b2 = -1;
      } else if (q) {
        continue;
      } else if (i === b2 && c2 === '"') {
        i = j + 1;
        q = c2;
      } else if (i === b2 && c2 === "'") {
        i = j + 1;
        q = c2;
      } else if (c2 === "." && !b2) {
        if (j > i) {
          push();
        } else {
          i = j + 1;
        }
      } else if (c2 === "[") {
        if (j > i) push();
        b2 = i = j + 1;
      } else if (c2 === "]") {
        if (!b2) error$1("Access path missing open bracket: " + p);
        if (b2 > 0) push();
        b2 = 0;
        i = j + 1;
      }
    }
    if (b2) error$1("Access path missing closing bracket: " + p);
    if (q) error$1("Access path missing closing quote: " + p);
    if (j > i) {
      j++;
      push();
    }
    return path2;
  }
  function field$1(field2, name, opt) {
    const path2 = splitAccessPath(field2);
    field2 = path2.length === 1 ? path2[0] : field2;
    return accessor((opt && opt.get || getter$1)(path2), [field2], name || field2);
  }
  const id = field$1("id");
  const identity$6 = accessor((_) => _, [], "identity");
  const zero$4 = accessor(() => 0, [], "zero");
  const one$2 = accessor(() => 1, [], "one");
  const truthy = accessor(() => true, [], "true");
  const falsy = accessor(() => false, [], "false");
  function log$1$1(method2, level, input) {
    const args = [level].concat([].slice.call(input));
    console[method2].apply(console, args);
  }
  const None$2 = 0;
  const Error$1 = 1;
  const Warn = 2;
  const Info = 3;
  const Debug = 4;
  function logger(_, method2) {
    let handler = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : log$1$1;
    let level = _ || None$2;
    return {
      level(_2) {
        if (arguments.length) {
          level = +_2;
          return this;
        } else {
          return level;
        }
      },
      error() {
        if (level >= Error$1) handler(method2 || "error", "ERROR", arguments);
        return this;
      },
      warn() {
        if (level >= Warn) handler(method2 || "warn", "WARN", arguments);
        return this;
      },
      info() {
        if (level >= Info) handler(method2 || "log", "INFO", arguments);
        return this;
      },
      debug() {
        if (level >= Debug) handler(method2 || "log", "DEBUG", arguments);
        return this;
      }
    };
  }
  var isArray = Array.isArray;
  function isObject(_) {
    return _ === Object(_);
  }
  const isLegalKey = (key2) => key2 !== "__proto__";
  function mergeConfig() {
    for (var _len = arguments.length, configs = new Array(_len), _key = 0; _key < _len; _key++) {
      configs[_key] = arguments[_key];
    }
    return configs.reduce((out, source2) => {
      for (const key2 in source2) {
        if (key2 === "signals") {
          out.signals = mergeNamed(out.signals, source2.signals);
        } else {
          const r = key2 === "legend" ? {
            layout: 1
          } : key2 === "style" ? true : null;
          writeConfig(out, key2, source2[key2], r);
        }
      }
      return out;
    }, {});
  }
  function writeConfig(output2, key2, value2, recurse2) {
    if (!isLegalKey(key2)) return;
    let k, o;
    if (isObject(value2) && !isArray(value2)) {
      o = isObject(output2[key2]) ? output2[key2] : output2[key2] = {};
      for (k in value2) {
        if (recurse2 && (recurse2 === true || recurse2[k])) {
          writeConfig(o, k, value2[k]);
        } else if (isLegalKey(k)) {
          o[k] = value2[k];
        }
      }
    } else {
      output2[key2] = value2;
    }
  }
  function mergeNamed(a2, b2) {
    if (a2 == null) return b2;
    const map2 = {}, out = [];
    function add2(_) {
      if (!map2[_.name]) {
        map2[_.name] = 1;
        out.push(_);
      }
    }
    b2.forEach(add2);
    a2.forEach(add2);
    return out;
  }
  function peek$2(array2) {
    return array2[array2.length - 1];
  }
  function toNumber(_) {
    return _ == null || _ === "" ? null : +_;
  }
  const exp$2 = (sign2) => (x2) => sign2 * Math.exp(x2);
  const log$4 = (sign2) => (x2) => Math.log(sign2 * x2);
  const symlog$1 = (c2) => (x2) => Math.sign(x2) * Math.log1p(Math.abs(x2 / c2));
  const symexp = (c2) => (x2) => Math.sign(x2) * Math.expm1(Math.abs(x2)) * c2;
  const pow$4 = (exponent2) => (x2) => x2 < 0 ? -Math.pow(-x2, exponent2) : Math.pow(x2, exponent2);
  function pan(domain2, delta, lift, ground) {
    const d0 = lift(domain2[0]), d1 = lift(peek$2(domain2)), dd = (d1 - d0) * delta;
    return [ground(d0 - dd), ground(d1 - dd)];
  }
  function panLinear(domain2, delta) {
    return pan(domain2, delta, toNumber, identity$6);
  }
  function panLog(domain2, delta) {
    var sign2 = Math.sign(domain2[0]);
    return pan(domain2, delta, log$4(sign2), exp$2(sign2));
  }
  function panPow(domain2, delta, exponent2) {
    return pan(domain2, delta, pow$4(exponent2), pow$4(1 / exponent2));
  }
  function panSymlog(domain2, delta, constant2) {
    return pan(domain2, delta, symlog$1(constant2), symexp(constant2));
  }
  function zoom$2(domain2, anchor, scale2, lift, ground) {
    const d0 = lift(domain2[0]), d1 = lift(peek$2(domain2)), da = anchor != null ? lift(anchor) : (d0 + d1) / 2;
    return [ground(da + (d0 - da) * scale2), ground(da + (d1 - da) * scale2)];
  }
  function zoomLinear(domain2, anchor, scale2) {
    return zoom$2(domain2, anchor, scale2, toNumber, identity$6);
  }
  function zoomLog(domain2, anchor, scale2) {
    const sign2 = Math.sign(domain2[0]);
    return zoom$2(domain2, anchor, scale2, log$4(sign2), exp$2(sign2));
  }
  function zoomPow(domain2, anchor, scale2, exponent2) {
    return zoom$2(domain2, anchor, scale2, pow$4(exponent2), pow$4(1 / exponent2));
  }
  function zoomSymlog(domain2, anchor, scale2, constant2) {
    return zoom$2(domain2, anchor, scale2, symlog$1(constant2), symexp(constant2));
  }
  function quarter(date2) {
    return 1 + ~~(new Date(date2).getMonth() / 3);
  }
  function utcquarter(date2) {
    return 1 + ~~(new Date(date2).getUTCMonth() / 3);
  }
  function array$5(_) {
    return _ != null ? isArray(_) ? _ : [_] : [];
  }
  function clampRange(range2, min2, max2) {
    let lo = range2[0], hi = range2[1], span2;
    if (hi < lo) {
      span2 = hi;
      hi = lo;
      lo = span2;
    }
    span2 = hi - lo;
    return span2 >= max2 - min2 ? [min2, max2] : [lo = Math.min(Math.max(lo, min2), max2 - span2), lo + span2];
  }
  function isFunction(_) {
    return typeof _ === "function";
  }
  const DESCENDING = "descending";
  function compare$2(fields, orders, opt) {
    opt = opt || {};
    orders = array$5(orders) || [];
    const ord = [], get2 = [], fmap = {}, gen = opt.comparator || comparator$1;
    array$5(fields).forEach((f, i) => {
      if (f == null) return;
      ord.push(orders[i] === DESCENDING ? -1 : 1);
      get2.push(f = isFunction(f) ? f : field$1(f, null, opt));
      (accessorFields(f) || []).forEach((_) => fmap[_] = 1);
    });
    return get2.length === 0 ? null : accessor(gen(get2, ord), Object.keys(fmap));
  }
  const ascending$2 = (u2, v) => (u2 < v || u2 == null) && v != null ? -1 : (u2 > v || v == null) && u2 != null ? 1 : (v = v instanceof Date ? +v : v, u2 = u2 instanceof Date ? +u2 : u2) !== u2 && v === v ? -1 : v !== v && u2 === u2 ? 1 : 0;
  const comparator$1 = (fields, orders) => fields.length === 1 ? compare1(fields[0], orders[0]) : compareN(fields, orders, fields.length);
  const compare1 = (field2, order) => function(a2, b2) {
    return ascending$2(field2(a2), field2(b2)) * order;
  };
  const compareN = (fields, orders, n) => {
    orders.push(0);
    return function(a2, b2) {
      let f, c2 = 0, i = -1;
      while (c2 === 0 && ++i < n) {
        f = fields[i];
        c2 = ascending$2(f(a2), f(b2));
      }
      return c2 * orders[i];
    };
  };
  function constant$5(_) {
    return isFunction(_) ? _ : () => _;
  }
  function debounce(delay, handler) {
    let tid;
    return (e3) => {
      if (tid) clearTimeout(tid);
      tid = setTimeout(() => (handler(e3), tid = null), delay);
    };
  }
  function extend$1(_) {
    for (let x2, k, i = 1, len = arguments.length; i < len; ++i) {
      x2 = arguments[i];
      for (k in x2) {
        _[k] = x2[k];
      }
    }
    return _;
  }
  function extent(array2, f) {
    let i = 0, n, v, min2, max2;
    if (array2 && (n = array2.length)) {
      if (f == null) {
        for (v = array2[i]; i < n && (v == null || v !== v); v = array2[++i]) ;
        min2 = max2 = v;
        for (; i < n; ++i) {
          v = array2[i];
          if (v != null) {
            if (v < min2) min2 = v;
            if (v > max2) max2 = v;
          }
        }
      } else {
        for (v = f(array2[i]); i < n && (v == null || v !== v); v = f(array2[++i])) ;
        min2 = max2 = v;
        for (; i < n; ++i) {
          v = f(array2[i]);
          if (v != null) {
            if (v < min2) min2 = v;
            if (v > max2) max2 = v;
          }
        }
      }
    }
    return [min2, max2];
  }
  function extentIndex(array2, f) {
    const n = array2.length;
    let i = -1, a2, b2, c2, u2, v;
    if (f == null) {
      while (++i < n) {
        b2 = array2[i];
        if (b2 != null && b2 >= b2) {
          a2 = c2 = b2;
          break;
        }
      }
      if (i === n) return [-1, -1];
      u2 = v = i;
      while (++i < n) {
        b2 = array2[i];
        if (b2 != null) {
          if (a2 > b2) {
            a2 = b2;
            u2 = i;
          }
          if (c2 < b2) {
            c2 = b2;
            v = i;
          }
        }
      }
    } else {
      while (++i < n) {
        b2 = f(array2[i], i, array2);
        if (b2 != null && b2 >= b2) {
          a2 = c2 = b2;
          break;
        }
      }
      if (i === n) return [-1, -1];
      u2 = v = i;
      while (++i < n) {
        b2 = f(array2[i], i, array2);
        if (b2 != null) {
          if (a2 > b2) {
            a2 = b2;
            u2 = i;
          }
          if (c2 < b2) {
            c2 = b2;
            v = i;
          }
        }
      }
    }
    return [u2, v];
  }
  function has$1(object2, property2) {
    return Object.hasOwn(object2, property2);
  }
  const NULL = {};
  function fastmap(input) {
    let obj = {}, test2;
    function has$1$1(key2) {
      return has$1(obj, key2) && obj[key2] !== NULL;
    }
    const map2 = {
      size: 0,
      empty: 0,
      object: obj,
      has: has$1$1,
      get(key2) {
        return has$1$1(key2) ? obj[key2] : void 0;
      },
      set(key2, value2) {
        if (!has$1$1(key2)) {
          ++map2.size;
          if (obj[key2] === NULL) --map2.empty;
        }
        obj[key2] = value2;
        return this;
      },
      delete(key2) {
        if (has$1$1(key2)) {
          --map2.size;
          ++map2.empty;
          obj[key2] = NULL;
        }
        return this;
      },
      clear() {
        map2.size = map2.empty = 0;
        map2.object = obj = {};
      },
      test(_) {
        if (arguments.length) {
          test2 = _;
          return map2;
        } else {
          return test2;
        }
      },
      clean() {
        const next = {};
        let size = 0;
        for (const key2 in obj) {
          const value2 = obj[key2];
          if (value2 !== NULL && (!test2 || !test2(value2))) {
            next[key2] = value2;
            ++size;
          }
        }
        map2.size = size;
        map2.empty = 0;
        map2.object = obj = next;
      }
    };
    if (input) Object.keys(input).forEach((key2) => {
      map2.set(key2, input[key2]);
    });
    return map2;
  }
  function flush(range2, value2, threshold2, left, right, center) {
    if (!threshold2 && threshold2 !== 0) return center;
    const t = +threshold2;
    let a2 = range2[0], b2 = peek$2(range2), l;
    if (b2 < a2) {
      l = a2;
      a2 = b2;
      b2 = l;
    }
    l = Math.abs(value2 - a2);
    const r = Math.abs(b2 - value2);
    return l < r && l <= t ? left : r <= t ? right : center;
  }
  function inherits(child, parent, members) {
    const proto = child.prototype = Object.create(parent.prototype);
    Object.defineProperty(proto, "constructor", {
      value: child,
      writable: true,
      enumerable: true,
      configurable: true
    });
    return extend$1(proto, members);
  }
  function inrange(value2, range2, left, right) {
    let r0 = range2[0], r1 = range2[range2.length - 1], t;
    if (r0 > r1) {
      t = r0;
      r0 = r1;
      r1 = t;
    }
    left = left === void 0 || left;
    right = right === void 0 || right;
    return (left ? r0 <= value2 : r0 < value2) && (right ? value2 <= r1 : value2 < r1);
  }
  function isBoolean$2(_) {
    return typeof _ === "boolean";
  }
  function isDate$1(_) {
    return Object.prototype.toString.call(_) === "[object Date]";
  }
  function isIterable(_) {
    return _ && isFunction(_[Symbol.iterator]);
  }
  function isNumber$1(_) {
    return typeof _ === "number";
  }
  function isRegExp(_) {
    return Object.prototype.toString.call(_) === "[object RegExp]";
  }
  function isString(_) {
    return typeof _ === "string";
  }
  function key(fields, flat, opt) {
    if (fields) {
      fields = flat ? array$5(fields).map((f) => f.replace(/\\(.)/g, "$1")) : array$5(fields);
    }
    const len = fields && fields.length, gen = opt && opt.get || getter$1, map2 = (f) => gen(flat ? [f] : splitAccessPath(f));
    let fn;
    if (!len) {
      fn = function() {
        return "";
      };
    } else if (len === 1) {
      const get2 = map2(fields[0]);
      fn = function(_) {
        return "" + get2(_);
      };
    } else {
      const get2 = fields.map(map2);
      fn = function(_) {
        let s = "" + get2[0](_), i = 0;
        while (++i < len) s += "|" + get2[i](_);
        return s;
      };
    }
    return accessor(fn, fields, "key");
  }
  function lerp(array2, frac) {
    const lo = array2[0], hi = peek$2(array2), f = +frac;
    return !f ? lo : f === 1 ? hi : lo + f * (hi - lo);
  }
  const DEFAULT_MAX_SIZE = 1e4;
  function lruCache(maxsize) {
    maxsize = +maxsize || DEFAULT_MAX_SIZE;
    let curr, prev, size;
    const clear2 = () => {
      curr = {};
      prev = {};
      size = 0;
    };
    const update2 = (key2, value2) => {
      if (++size > maxsize) {
        prev = curr;
        curr = {};
        size = 1;
      }
      return curr[key2] = value2;
    };
    clear2();
    return {
      clear: clear2,
      has: (key2) => has$1(curr, key2) || has$1(prev, key2),
      get: (key2) => has$1(curr, key2) ? curr[key2] : has$1(prev, key2) ? update2(key2, prev[key2]) : void 0,
      set: (key2, value2) => has$1(curr, key2) ? curr[key2] = value2 : update2(key2, value2)
    };
  }
  function merge$3(compare2, array0, array1, output2) {
    const n0 = array0.length, n1 = array1.length;
    if (!n1) return array0;
    if (!n0) return array1;
    const merged = output2 || new array0.constructor(n0 + n1);
    let i0 = 0, i1 = 0, i = 0;
    for (; i0 < n0 && i1 < n1; ++i) {
      merged[i] = compare2(array0[i0], array1[i1]) > 0 ? array1[i1++] : array0[i0++];
    }
    for (; i0 < n0; ++i0, ++i) {
      merged[i] = array0[i0];
    }
    for (; i1 < n1; ++i1, ++i) {
      merged[i] = array1[i1];
    }
    return merged;
  }
  function repeat(str, reps) {
    let s = "";
    while (--reps >= 0) s += str;
    return s;
  }
  function pad$2(str, length2, padchar, align2) {
    const c2 = padchar || " ", s = str + "", n = length2 - s.length;
    return n <= 0 ? s : align2 === "left" ? repeat(c2, n) + s : align2 === "center" ? repeat(c2, ~~(n / 2)) + s + repeat(c2, Math.ceil(n / 2)) : s + repeat(c2, n);
  }
  function span(array2) {
    return array2 && peek$2(array2) - array2[0] || 0;
  }
  function $(x2) {
    return isArray(x2) ? "[" + x2.map($) + "]" : isObject(x2) || isString(x2) ? (
      // Output valid JSON and JS source strings.
      // See http://timelessrepo.com/json-isnt-a-javascript-subset
      JSON.stringify(x2).replace("\u2028", "\\u2028").replace("\u2029", "\\u2029")
    ) : x2;
  }
  function toBoolean(_) {
    return _ == null || _ === "" ? null : !_ || _ === "false" || _ === "0" ? false : !!_;
  }
  const defaultParser = (_) => isNumber$1(_) ? _ : isDate$1(_) ? _ : Date.parse(_);
  function toDate(_, parser2) {
    parser2 = parser2 || defaultParser;
    return _ == null || _ === "" ? null : parser2(_);
  }
  function toString(_) {
    return _ == null || _ === "" ? null : _ + "";
  }
  function toSet(_) {
    const s = {}, n = _.length;
    for (let i = 0; i < n; ++i) s[_[i]] = true;
    return s;
  }
  function truncate$1(str, length2, align2, ellipsis) {
    const e3 = ellipsis != null ? ellipsis : "…", s = str + "", n = s.length, l = Math.max(0, length2 - e3.length);
    return n <= length2 ? s : align2 === "left" ? e3 + s.slice(n - l) : align2 === "center" ? s.slice(0, Math.ceil(l / 2)) + e3 + s.slice(n - ~~(l / 2)) : s.slice(0, l) + e3;
  }
  function visitArray(array2, filter2, visitor) {
    if (array2) {
      if (filter2) {
        const n = array2.length;
        for (let i = 0; i < n; ++i) {
          const t = filter2(array2[i]);
          if (t) visitor(t, i, array2);
        }
      } else {
        array2.forEach(visitor);
      }
    }
  }
  var EOL = {}, EOF = {}, QUOTE = 34, NEWLINE = 10, RETURN = 13;
  function objectConverter(columns) {
    return new Function("d", "return {" + columns.map(function(name, i) {
      return JSON.stringify(name) + ": d[" + i + '] || ""';
    }).join(",") + "}");
  }
  function customConverter(columns, f) {
    var object2 = objectConverter(columns);
    return function(row, i) {
      return f(object2(row), i, columns);
    };
  }
  function inferColumns(rows) {
    var columnSet = /* @__PURE__ */ Object.create(null), columns = [];
    rows.forEach(function(row) {
      for (var column in row) {
        if (!(column in columnSet)) {
          columns.push(columnSet[column] = column);
        }
      }
    });
    return columns;
  }
  function pad$1(value2, width2) {
    var s = value2 + "", length2 = s.length;
    return length2 < width2 ? new Array(width2 - length2 + 1).join(0) + s : s;
  }
  function formatYear$1(year) {
    return year < 0 ? "-" + pad$1(-year, 6) : year > 9999 ? "+" + pad$1(year, 6) : pad$1(year, 4);
  }
  function formatDate(date2) {
    var hours = date2.getUTCHours(), minutes = date2.getUTCMinutes(), seconds = date2.getUTCSeconds(), milliseconds = date2.getUTCMilliseconds();
    return isNaN(date2) ? "Invalid Date" : formatYear$1(date2.getUTCFullYear()) + "-" + pad$1(date2.getUTCMonth() + 1, 2) + "-" + pad$1(date2.getUTCDate(), 2) + (milliseconds ? "T" + pad$1(hours, 2) + ":" + pad$1(minutes, 2) + ":" + pad$1(seconds, 2) + "." + pad$1(milliseconds, 3) + "Z" : seconds ? "T" + pad$1(hours, 2) + ":" + pad$1(minutes, 2) + ":" + pad$1(seconds, 2) + "Z" : minutes || hours ? "T" + pad$1(hours, 2) + ":" + pad$1(minutes, 2) + "Z" : "");
  }
  function dsvFormat(delimiter) {
    var reFormat = new RegExp('["' + delimiter + "\n\r]"), DELIMITER = delimiter.charCodeAt(0);
    function parse2(text2, f) {
      var convert, columns, rows = parseRows(text2, function(row, i) {
        if (convert) return convert(row, i - 1);
        columns = row, convert = f ? customConverter(row, f) : objectConverter(row);
      });
      rows.columns = columns || [];
      return rows;
    }
    function parseRows(text2, f) {
      var rows = [], N = text2.length, I = 0, n = 0, t, eof = N <= 0, eol = false;
      if (text2.charCodeAt(N - 1) === NEWLINE) --N;
      if (text2.charCodeAt(N - 1) === RETURN) --N;
      function token() {
        if (eof) return EOF;
        if (eol) return eol = false, EOL;
        var i, j = I, c2;
        if (text2.charCodeAt(j) === QUOTE) {
          while (I++ < N && text2.charCodeAt(I) !== QUOTE || text2.charCodeAt(++I) === QUOTE) ;
          if ((i = I) >= N) eof = true;
          else if ((c2 = text2.charCodeAt(I++)) === NEWLINE) eol = true;
          else if (c2 === RETURN) {
            eol = true;
            if (text2.charCodeAt(I) === NEWLINE) ++I;
          }
          return text2.slice(j + 1, i - 1).replace(/""/g, '"');
        }
        while (I < N) {
          if ((c2 = text2.charCodeAt(i = I++)) === NEWLINE) eol = true;
          else if (c2 === RETURN) {
            eol = true;
            if (text2.charCodeAt(I) === NEWLINE) ++I;
          } else if (c2 !== DELIMITER) continue;
          return text2.slice(j, i);
        }
        return eof = true, text2.slice(j, N);
      }
      while ((t = token()) !== EOF) {
        var row = [];
        while (t !== EOL && t !== EOF) row.push(t), t = token();
        if (f && (row = f(row, n++)) == null) continue;
        rows.push(row);
      }
      return rows;
    }
    function preformatBody(rows, columns) {
      return rows.map(function(row) {
        return columns.map(function(column) {
          return formatValue2(row[column]);
        }).join(delimiter);
      });
    }
    function format2(rows, columns) {
      if (columns == null) columns = inferColumns(rows);
      return [columns.map(formatValue2).join(delimiter)].concat(preformatBody(rows, columns)).join("\n");
    }
    function formatBody(rows, columns) {
      if (columns == null) columns = inferColumns(rows);
      return preformatBody(rows, columns).join("\n");
    }
    function formatRows(rows) {
      return rows.map(formatRow).join("\n");
    }
    function formatRow(row) {
      return row.map(formatValue2).join(delimiter);
    }
    function formatValue2(value2) {
      return value2 == null ? "" : value2 instanceof Date ? formatDate(value2) : reFormat.test(value2 += "") ? '"' + value2.replace(/"/g, '""') + '"' : value2;
    }
    return {
      parse: parse2,
      parseRows,
      format: format2,
      formatBody,
      formatRows,
      formatRow,
      formatValue: formatValue2
    };
  }
  function identity$5(x2) {
    return x2;
  }
  function transform$3(transform2) {
    if (transform2 == null) return identity$5;
    var x02, y02, kx = transform2.scale[0], ky = transform2.scale[1], dx = transform2.translate[0], dy = transform2.translate[1];
    return function(input, i) {
      if (!i) x02 = y02 = 0;
      var j = 2, n = input.length, output2 = new Array(n);
      output2[0] = (x02 += input[0]) * kx + dx;
      output2[1] = (y02 += input[1]) * ky + dy;
      while (j < n) output2[j] = input[j], ++j;
      return output2;
    };
  }
  function reverse$2(array2, n) {
    var t, j = array2.length, i = j - n;
    while (i < --j) t = array2[i], array2[i++] = array2[j], array2[j] = t;
  }
  function feature(topology, o) {
    if (typeof o === "string") o = topology.objects[o];
    return o.type === "GeometryCollection" ? { type: "FeatureCollection", features: o.geometries.map(function(o2) {
      return feature$1(topology, o2);
    }) } : feature$1(topology, o);
  }
  function feature$1(topology, o) {
    var id2 = o.id, bbox = o.bbox, properties = o.properties == null ? {} : o.properties, geometry = object$1(topology, o);
    return id2 == null && bbox == null ? { type: "Feature", properties, geometry } : bbox == null ? { type: "Feature", id: id2, properties, geometry } : { type: "Feature", id: id2, bbox, properties, geometry };
  }
  function object$1(topology, o) {
    var transformPoint = transform$3(topology.transform), arcs = topology.arcs;
    function arc2(i, points2) {
      if (points2.length) points2.pop();
      for (var a2 = arcs[i < 0 ? ~i : i], k = 0, n = a2.length; k < n; ++k) {
        points2.push(transformPoint(a2[k], k));
      }
      if (i < 0) reverse$2(points2, n);
    }
    function point2(p) {
      return transformPoint(p);
    }
    function line2(arcs2) {
      var points2 = [];
      for (var i = 0, n = arcs2.length; i < n; ++i) arc2(arcs2[i], points2);
      if (points2.length < 2) points2.push(points2[0]);
      return points2;
    }
    function ring(arcs2) {
      var points2 = line2(arcs2);
      while (points2.length < 4) points2.push(points2[0]);
      return points2;
    }
    function polygon(arcs2) {
      return arcs2.map(ring);
    }
    function geometry(o2) {
      var type2 = o2.type, coordinates;
      switch (type2) {
        case "GeometryCollection":
          return { type: type2, geometries: o2.geometries.map(geometry) };
        case "Point":
          coordinates = point2(o2.coordinates);
          break;
        case "MultiPoint":
          coordinates = o2.coordinates.map(point2);
          break;
        case "LineString":
          coordinates = line2(o2.arcs);
          break;
        case "MultiLineString":
          coordinates = o2.arcs.map(line2);
          break;
        case "Polygon":
          coordinates = polygon(o2.arcs);
          break;
        case "MultiPolygon":
          coordinates = o2.arcs.map(polygon);
          break;
        default:
          return null;
      }
      return { type: type2, coordinates };
    }
    return geometry(o);
  }
  function stitch(topology, arcs) {
    var stitchedArcs = {}, fragmentByStart = {}, fragmentByEnd = {}, fragments = [], emptyIndex = -1;
    arcs.forEach(function(i, j) {
      var arc2 = topology.arcs[i < 0 ? ~i : i], t;
      if (arc2.length < 3 && !arc2[1][0] && !arc2[1][1]) {
        t = arcs[++emptyIndex], arcs[emptyIndex] = i, arcs[j] = t;
      }
    });
    arcs.forEach(function(i) {
      var e3 = ends(i), start = e3[0], end = e3[1], f, g;
      if (f = fragmentByEnd[start]) {
        delete fragmentByEnd[f.end];
        f.push(i);
        f.end = end;
        if (g = fragmentByStart[end]) {
          delete fragmentByStart[g.start];
          var fg = g === f ? f : f.concat(g);
          fragmentByStart[fg.start = f.start] = fragmentByEnd[fg.end = g.end] = fg;
        } else {
          fragmentByStart[f.start] = fragmentByEnd[f.end] = f;
        }
      } else if (f = fragmentByStart[end]) {
        delete fragmentByStart[f.start];
        f.unshift(i);
        f.start = start;
        if (g = fragmentByEnd[start]) {
          delete fragmentByEnd[g.end];
          var gf = g === f ? f : g.concat(f);
          fragmentByStart[gf.start = g.start] = fragmentByEnd[gf.end = f.end] = gf;
        } else {
          fragmentByStart[f.start] = fragmentByEnd[f.end] = f;
        }
      } else {
        f = [i];
        fragmentByStart[f.start = start] = fragmentByEnd[f.end = end] = f;
      }
    });
    function ends(i) {
      var arc2 = topology.arcs[i < 0 ? ~i : i], p02 = arc2[0], p1;
      if (topology.transform) p1 = [0, 0], arc2.forEach(function(dp) {
        p1[0] += dp[0], p1[1] += dp[1];
      });
      else p1 = arc2[arc2.length - 1];
      return i < 0 ? [p1, p02] : [p02, p1];
    }
    function flush2(fragmentByEnd2, fragmentByStart2) {
      for (var k in fragmentByEnd2) {
        var f = fragmentByEnd2[k];
        delete fragmentByStart2[f.start];
        delete f.start;
        delete f.end;
        f.forEach(function(i) {
          stitchedArcs[i < 0 ? ~i : i] = 1;
        });
        fragments.push(f);
      }
    }
    flush2(fragmentByEnd, fragmentByStart);
    flush2(fragmentByStart, fragmentByEnd);
    arcs.forEach(function(i) {
      if (!stitchedArcs[i < 0 ? ~i : i]) fragments.push([i]);
    });
    return fragments;
  }
  function mesh(topology) {
    return object$1(topology, meshArcs.apply(this, arguments));
  }
  function meshArcs(topology, object2, filter2) {
    var arcs, i, n;
    if (arguments.length > 1) arcs = extractArcs(topology, object2, filter2);
    else for (i = 0, arcs = new Array(n = topology.arcs.length); i < n; ++i) arcs[i] = i;
    return { type: "MultiLineString", arcs: stitch(topology, arcs) };
  }
  function extractArcs(topology, object2, filter2) {
    var arcs = [], geomsByArc = [], geom;
    function extract0(i) {
      var j = i < 0 ? ~i : i;
      (geomsByArc[j] || (geomsByArc[j] = [])).push({ i, g: geom });
    }
    function extract1(arcs2) {
      arcs2.forEach(extract0);
    }
    function extract2(arcs2) {
      arcs2.forEach(extract1);
    }
    function extract3(arcs2) {
      arcs2.forEach(extract2);
    }
    function geometry(o) {
      switch (geom = o, o.type) {
        case "GeometryCollection":
          o.geometries.forEach(geometry);
          break;
        case "LineString":
          extract1(o.arcs);
          break;
        case "MultiLineString":
        case "Polygon":
          extract2(o.arcs);
          break;
        case "MultiPolygon":
          extract3(o.arcs);
          break;
      }
    }
    geometry(object2);
    geomsByArc.forEach(filter2 == null ? function(geoms) {
      arcs.push(geoms[0].i);
    } : function(geoms) {
      if (filter2(geoms[0].g, geoms[geoms.length - 1].g)) arcs.push(geoms[0].i);
    });
    return arcs;
  }
  function ascending$1(a2, b2) {
    return a2 == null || b2 == null ? NaN : a2 < b2 ? -1 : a2 > b2 ? 1 : a2 >= b2 ? 0 : NaN;
  }
  function descending$1(a2, b2) {
    return a2 == null || b2 == null ? NaN : b2 < a2 ? -1 : b2 > a2 ? 1 : b2 >= a2 ? 0 : NaN;
  }
  function bisector(f) {
    let compare12, compare2, delta;
    if (f.length !== 2) {
      compare12 = ascending$1;
      compare2 = (d, x2) => ascending$1(f(d), x2);
      delta = (d, x2) => f(d) - x2;
    } else {
      compare12 = f === ascending$1 || f === descending$1 ? f : zero$3;
      compare2 = f;
      delta = f;
    }
    function left(a2, x2, lo = 0, hi = a2.length) {
      if (lo < hi) {
        if (compare12(x2, x2) !== 0) return hi;
        do {
          const mid = lo + hi >>> 1;
          if (compare2(a2[mid], x2) < 0) lo = mid + 1;
          else hi = mid;
        } while (lo < hi);
      }
      return lo;
    }
    function right(a2, x2, lo = 0, hi = a2.length) {
      if (lo < hi) {
        if (compare12(x2, x2) !== 0) return hi;
        do {
          const mid = lo + hi >>> 1;
          if (compare2(a2[mid], x2) <= 0) lo = mid + 1;
          else hi = mid;
        } while (lo < hi);
      }
      return lo;
    }
    function center(a2, x2, lo = 0, hi = a2.length) {
      const i = left(a2, x2, lo, hi - 1);
      return i > lo && delta(a2[i - 1], x2) > -delta(a2[i], x2) ? i - 1 : i;
    }
    return { left, center, right };
  }
  function zero$3() {
    return 0;
  }
  function number$6(x2) {
    return x2 === null ? NaN : +x2;
  }
  function* numbers$2(values2, valueof) {
    if (valueof === void 0) {
      for (let value2 of values2) {
        if (value2 != null && (value2 = +value2) >= value2) {
          yield value2;
        }
      }
    } else {
      let index2 = -1;
      for (let value2 of values2) {
        if ((value2 = valueof(value2, ++index2, values2)) != null && (value2 = +value2) >= value2) {
          yield value2;
        }
      }
    }
  }
  const ascendingBisect = bisector(ascending$1);
  const bisectRight$1 = ascendingBisect.right;
  const bisectLeft$1 = ascendingBisect.left;
  bisector(number$6).center;
  function variance(values2, valueof) {
    let count2 = 0;
    let delta;
    let mean2 = 0;
    let sum2 = 0;
    if (valueof === void 0) {
      for (let value2 of values2) {
        if (value2 != null && (value2 = +value2) >= value2) {
          delta = value2 - mean2;
          mean2 += delta / ++count2;
          sum2 += delta * (value2 - mean2);
        }
      }
    } else {
      let index2 = -1;
      for (let value2 of values2) {
        if ((value2 = valueof(value2, ++index2, values2)) != null && (value2 = +value2) >= value2) {
          delta = value2 - mean2;
          mean2 += delta / ++count2;
          sum2 += delta * (value2 - mean2);
        }
      }
    }
    if (count2 > 1) return sum2 / (count2 - 1);
  }
  function deviation(values2, valueof) {
    const v = variance(values2, valueof);
    return v ? Math.sqrt(v) : v;
  }
  class Adder {
    constructor() {
      this._partials = new Float64Array(32);
      this._n = 0;
    }
    add(x2) {
      const p = this._partials;
      let i = 0;
      for (let j = 0; j < this._n && j < 32; j++) {
        const y2 = p[j], hi = x2 + y2, lo = Math.abs(x2) < Math.abs(y2) ? x2 - (hi - y2) : y2 - (hi - x2);
        if (lo) p[i++] = lo;
        x2 = hi;
      }
      p[i] = x2;
      this._n = i + 1;
      return this;
    }
    valueOf() {
      const p = this._partials;
      let n = this._n, x2, y2, lo, hi = 0;
      if (n > 0) {
        hi = p[--n];
        while (n > 0) {
          x2 = hi;
          y2 = p[--n];
          hi = x2 + y2;
          lo = y2 - (hi - x2);
          if (lo) break;
        }
        if (n > 0 && (lo < 0 && p[n - 1] < 0 || lo > 0 && p[n - 1] > 0)) {
          y2 = lo * 2;
          x2 = hi + y2;
          if (y2 == x2 - hi) hi = x2;
        }
      }
      return hi;
    }
  }
  class InternMap extends Map {
    constructor(entries2, key2 = keyof) {
      super();
      Object.defineProperties(this, { _intern: { value: /* @__PURE__ */ new Map() }, _key: { value: key2 } });
      if (entries2 != null) for (const [key3, value2] of entries2) this.set(key3, value2);
    }
    get(key2) {
      return super.get(intern_get(this, key2));
    }
    has(key2) {
      return super.has(intern_get(this, key2));
    }
    set(key2, value2) {
      return super.set(intern_set(this, key2), value2);
    }
    delete(key2) {
      return super.delete(intern_delete(this, key2));
    }
  }
  class InternSet extends Set {
    constructor(values2, key2 = keyof) {
      super();
      Object.defineProperties(this, { _intern: { value: /* @__PURE__ */ new Map() }, _key: { value: key2 } });
      if (values2 != null) for (const value2 of values2) this.add(value2);
    }
    has(value2) {
      return super.has(intern_get(this, value2));
    }
    add(value2) {
      return super.add(intern_set(this, value2));
    }
    delete(value2) {
      return super.delete(intern_delete(this, value2));
    }
  }
  function intern_get({ _intern, _key }, value2) {
    const key2 = _key(value2);
    return _intern.has(key2) ? _intern.get(key2) : value2;
  }
  function intern_set({ _intern, _key }, value2) {
    const key2 = _key(value2);
    if (_intern.has(key2)) return _intern.get(key2);
    _intern.set(key2, value2);
    return value2;
  }
  function intern_delete({ _intern, _key }, value2) {
    const key2 = _key(value2);
    if (_intern.has(key2)) {
      value2 = _intern.get(key2);
      _intern.delete(key2);
    }
    return value2;
  }
  function keyof(value2) {
    return value2 !== null && typeof value2 === "object" ? value2.valueOf() : value2;
  }
  function permute(source2, keys2) {
    return Array.from(keys2, (key2) => source2[key2]);
  }
  function compareDefined(compare2 = ascending$1) {
    if (compare2 === ascending$1) return ascendingDefined;
    if (typeof compare2 !== "function") throw new TypeError("compare is not a function");
    return (a2, b2) => {
      const x2 = compare2(a2, b2);
      if (x2 || x2 === 0) return x2;
      return (compare2(b2, b2) === 0) - (compare2(a2, a2) === 0);
    };
  }
  function ascendingDefined(a2, b2) {
    return (a2 == null || !(a2 >= a2)) - (b2 == null || !(b2 >= b2)) || (a2 < b2 ? -1 : a2 > b2 ? 1 : 0);
  }
  const e10 = Math.sqrt(50), e5 = Math.sqrt(10), e2 = Math.sqrt(2);
  function tickSpec(start, stop2, count2) {
    const step = (stop2 - start) / Math.max(0, count2), power = Math.floor(Math.log10(step)), error2 = step / Math.pow(10, power), factor = error2 >= e10 ? 10 : error2 >= e5 ? 5 : error2 >= e2 ? 2 : 1;
    let i1, i2, inc;
    if (power < 0) {
      inc = Math.pow(10, -power) / factor;
      i1 = Math.round(start * inc);
      i2 = Math.round(stop2 * inc);
      if (i1 / inc < start) ++i1;
      if (i2 / inc > stop2) --i2;
      inc = -inc;
    } else {
      inc = Math.pow(10, power) * factor;
      i1 = Math.round(start / inc);
      i2 = Math.round(stop2 / inc);
      if (i1 * inc < start) ++i1;
      if (i2 * inc > stop2) --i2;
    }
    if (i2 < i1 && 0.5 <= count2 && count2 < 2) return tickSpec(start, stop2, count2 * 2);
    return [i1, i2, inc];
  }
  function ticks(start, stop2, count2) {
    stop2 = +stop2, start = +start, count2 = +count2;
    if (!(count2 > 0)) return [];
    if (start === stop2) return [start];
    const reverse2 = stop2 < start, [i1, i2, inc] = reverse2 ? tickSpec(stop2, start, count2) : tickSpec(start, stop2, count2);
    if (!(i2 >= i1)) return [];
    const n = i2 - i1 + 1, ticks2 = new Array(n);
    if (reverse2) {
      if (inc < 0) for (let i = 0; i < n; ++i) ticks2[i] = (i2 - i) / -inc;
      else for (let i = 0; i < n; ++i) ticks2[i] = (i2 - i) * inc;
    } else {
      if (inc < 0) for (let i = 0; i < n; ++i) ticks2[i] = (i1 + i) / -inc;
      else for (let i = 0; i < n; ++i) ticks2[i] = (i1 + i) * inc;
    }
    return ticks2;
  }
  function tickIncrement(start, stop2, count2) {
    stop2 = +stop2, start = +start, count2 = +count2;
    return tickSpec(start, stop2, count2)[2];
  }
  function tickStep(start, stop2, count2) {
    stop2 = +stop2, start = +start, count2 = +count2;
    const reverse2 = stop2 < start, inc = reverse2 ? tickIncrement(stop2, start, count2) : tickIncrement(start, stop2, count2);
    return (reverse2 ? -1 : 1) * (inc < 0 ? 1 / -inc : inc);
  }
  function max$2(values2, valueof) {
    let max2;
    if (valueof === void 0) {
      for (const value2 of values2) {
        if (value2 != null && (max2 < value2 || max2 === void 0 && value2 >= value2)) {
          max2 = value2;
        }
      }
    } else {
      let index2 = -1;
      for (let value2 of values2) {
        if ((value2 = valueof(value2, ++index2, values2)) != null && (max2 < value2 || max2 === void 0 && value2 >= value2)) {
          max2 = value2;
        }
      }
    }
    return max2;
  }
  function min$2(values2, valueof) {
    let min2;
    if (valueof === void 0) {
      for (const value2 of values2) {
        if (value2 != null && (min2 > value2 || min2 === void 0 && value2 >= value2)) {
          min2 = value2;
        }
      }
    } else {
      let index2 = -1;
      for (let value2 of values2) {
        if ((value2 = valueof(value2, ++index2, values2)) != null && (min2 > value2 || min2 === void 0 && value2 >= value2)) {
          min2 = value2;
        }
      }
    }
    return min2;
  }
  function quickselect(array2, k, left = 0, right = Infinity, compare2) {
    k = Math.floor(k);
    left = Math.floor(Math.max(0, left));
    right = Math.floor(Math.min(array2.length - 1, right));
    if (!(left <= k && k <= right)) return array2;
    compare2 = compare2 === void 0 ? ascendingDefined : compareDefined(compare2);
    while (right > left) {
      if (right - left > 600) {
        const n = right - left + 1;
        const m2 = k - left + 1;
        const z = Math.log(n);
        const s = 0.5 * Math.exp(2 * z / 3);
        const sd = 0.5 * Math.sqrt(z * s * (n - s) / n) * (m2 - n / 2 < 0 ? -1 : 1);
        const newLeft = Math.max(left, Math.floor(k - m2 * s / n + sd));
        const newRight = Math.min(right, Math.floor(k + (n - m2) * s / n + sd));
        quickselect(array2, k, newLeft, newRight, compare2);
      }
      const t = array2[k];
      let i = left;
      let j = right;
      swap$1(array2, left, k);
      if (compare2(array2[right], t) > 0) swap$1(array2, left, right);
      while (i < j) {
        swap$1(array2, i, j), ++i, --j;
        while (compare2(array2[i], t) < 0) ++i;
        while (compare2(array2[j], t) > 0) --j;
      }
      if (compare2(array2[left], t) === 0) swap$1(array2, left, j);
      else ++j, swap$1(array2, j, right);
      if (j <= k) left = j + 1;
      if (k <= j) right = j - 1;
    }
    return array2;
  }
  function swap$1(array2, i, j) {
    const t = array2[i];
    array2[i] = array2[j];
    array2[j] = t;
  }
  function quantile$1(values2, p, valueof) {
    values2 = Float64Array.from(numbers$2(values2, valueof));
    if (!(n = values2.length) || isNaN(p = +p)) return;
    if (p <= 0 || n < 2) return min$2(values2);
    if (p >= 1) return max$2(values2);
    var n, i = (n - 1) * p, i0 = Math.floor(i), value0 = max$2(quickselect(values2, i0).subarray(0, i0 + 1)), value1 = min$2(values2.subarray(i0 + 1));
    return value0 + (value1 - value0) * (i - i0);
  }
  function quantileSorted(values2, p, valueof = number$6) {
    if (!(n = values2.length) || isNaN(p = +p)) return;
    if (p <= 0 || n < 2) return +valueof(values2[0], 0, values2);
    if (p >= 1) return +valueof(values2[n - 1], n - 1, values2);
    var n, i = (n - 1) * p, i0 = Math.floor(i), value0 = +valueof(values2[i0], i0, values2), value1 = +valueof(values2[i0 + 1], i0 + 1, values2);
    return value0 + (value1 - value0) * (i - i0);
  }
  function mean(values2, valueof) {
    let count2 = 0;
    let sum2 = 0;
    if (valueof === void 0) {
      for (let value2 of values2) {
        if (value2 != null && (value2 = +value2) >= value2) {
          ++count2, sum2 += value2;
        }
      }
    } else {
      let index2 = -1;
      for (let value2 of values2) {
        if ((value2 = valueof(value2, ++index2, values2)) != null && (value2 = +value2) >= value2) {
          ++count2, sum2 += value2;
        }
      }
    }
    if (count2) return sum2 / count2;
  }
  function median(values2, valueof) {
    return quantile$1(values2, 0.5, valueof);
  }
  function* flatten(arrays) {
    for (const array2 of arrays) {
      yield* array2;
    }
  }
  function merge$2(arrays) {
    return Array.from(flatten(arrays));
  }
  function range$5(start, stop2, step) {
    start = +start, stop2 = +stop2, step = (n = arguments.length) < 2 ? (stop2 = start, start = 0, 1) : n < 3 ? 1 : +step;
    var i = -1, n = Math.max(0, Math.ceil((stop2 - start) / step)) | 0, range2 = new Array(n);
    while (++i < n) {
      range2[i] = start + i * step;
    }
    return range2;
  }
  function sum$1(values2, valueof) {
    let sum2 = 0;
    {
      for (let value2 of values2) {
        if (value2 = +value2) {
          sum2 += value2;
        }
      }
    }
    return sum2;
  }
  function intersection(values2, ...others) {
    values2 = new InternSet(values2);
    others = others.map(set$5);
    out: for (const value2 of values2) {
      for (const other of others) {
        if (!other.has(value2)) {
          values2.delete(value2);
          continue out;
        }
      }
    }
    return values2;
  }
  function set$5(values2) {
    return values2 instanceof InternSet ? values2 : new InternSet(values2);
  }
  function union(...others) {
    const set2 = new InternSet();
    for (const other of others) {
      for (const o of other) {
        set2.add(o);
      }
    }
    return set2;
  }
  function formatDecimal(x2) {
    return Math.abs(x2 = Math.round(x2)) >= 1e21 ? x2.toLocaleString("en").replace(/,/g, "") : x2.toString(10);
  }
  function formatDecimalParts(x2, p) {
    if ((i = (x2 = p ? x2.toExponential(p - 1) : x2.toExponential()).indexOf("e")) < 0) return null;
    var i, coefficient = x2.slice(0, i);
    return [
      coefficient.length > 1 ? coefficient[0] + coefficient.slice(2) : coefficient,
      +x2.slice(i + 1)
    ];
  }
  function exponent(x2) {
    return x2 = formatDecimalParts(Math.abs(x2)), x2 ? x2[1] : NaN;
  }
  function formatGroup(grouping, thousands) {
    return function(value2, width2) {
      var i = value2.length, t = [], j = 0, g = grouping[0], length2 = 0;
      while (i > 0 && g > 0) {
        if (length2 + g + 1 > width2) g = Math.max(1, width2 - length2);
        t.push(value2.substring(i -= g, i + g));
        if ((length2 += g + 1) > width2) break;
        g = grouping[j = (j + 1) % grouping.length];
      }
      return t.reverse().join(thousands);
    };
  }
  function formatNumerals(numerals) {
    return function(value2) {
      return value2.replace(/[0-9]/g, function(i) {
        return numerals[+i];
      });
    };
  }
  var re$1 = /^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;
  function formatSpecifier(specifier) {
    if (!(match2 = re$1.exec(specifier))) throw new Error("invalid format: " + specifier);
    var match2;
    return new FormatSpecifier({
      fill: match2[1],
      align: match2[2],
      sign: match2[3],
      symbol: match2[4],
      zero: match2[5],
      width: match2[6],
      comma: match2[7],
      precision: match2[8] && match2[8].slice(1),
      trim: match2[9],
      type: match2[10]
    });
  }
  formatSpecifier.prototype = FormatSpecifier.prototype;
  function FormatSpecifier(specifier) {
    this.fill = specifier.fill === void 0 ? " " : specifier.fill + "";
    this.align = specifier.align === void 0 ? ">" : specifier.align + "";
    this.sign = specifier.sign === void 0 ? "-" : specifier.sign + "";
    this.symbol = specifier.symbol === void 0 ? "" : specifier.symbol + "";
    this.zero = !!specifier.zero;
    this.width = specifier.width === void 0 ? void 0 : +specifier.width;
    this.comma = !!specifier.comma;
    this.precision = specifier.precision === void 0 ? void 0 : +specifier.precision;
    this.trim = !!specifier.trim;
    this.type = specifier.type === void 0 ? "" : specifier.type + "";
  }
  FormatSpecifier.prototype.toString = function() {
    return this.fill + this.align + this.sign + this.symbol + (this.zero ? "0" : "") + (this.width === void 0 ? "" : Math.max(1, this.width | 0)) + (this.comma ? "," : "") + (this.precision === void 0 ? "" : "." + Math.max(0, this.precision | 0)) + (this.trim ? "~" : "") + this.type;
  };
  function formatTrim(s) {
    out: for (var n = s.length, i = 1, i0 = -1, i1; i < n; ++i) {
      switch (s[i]) {
        case ".":
          i0 = i1 = i;
          break;
        case "0":
          if (i0 === 0) i0 = i;
          i1 = i;
          break;
        default:
          if (!+s[i]) break out;
          if (i0 > 0) i0 = 0;
          break;
      }
    }
    return i0 > 0 ? s.slice(0, i0) + s.slice(i1 + 1) : s;
  }
  var prefixExponent;
  function formatPrefixAuto(x2, p) {
    var d = formatDecimalParts(x2, p);
    if (!d) return x2 + "";
    var coefficient = d[0], exponent2 = d[1], i = exponent2 - (prefixExponent = Math.max(-8, Math.min(8, Math.floor(exponent2 / 3))) * 3) + 1, n = coefficient.length;
    return i === n ? coefficient : i > n ? coefficient + new Array(i - n + 1).join("0") : i > 0 ? coefficient.slice(0, i) + "." + coefficient.slice(i) : "0." + new Array(1 - i).join("0") + formatDecimalParts(x2, Math.max(0, p + i - 1))[0];
  }
  function formatRounded(x2, p) {
    var d = formatDecimalParts(x2, p);
    if (!d) return x2 + "";
    var coefficient = d[0], exponent2 = d[1];
    return exponent2 < 0 ? "0." + new Array(-exponent2).join("0") + coefficient : coefficient.length > exponent2 + 1 ? coefficient.slice(0, exponent2 + 1) + "." + coefficient.slice(exponent2 + 1) : coefficient + new Array(exponent2 - coefficient.length + 2).join("0");
  }
  const formatTypes = {
    "%": (x2, p) => (x2 * 100).toFixed(p),
    "b": (x2) => Math.round(x2).toString(2),
    "c": (x2) => x2 + "",
    "d": formatDecimal,
    "e": (x2, p) => x2.toExponential(p),
    "f": (x2, p) => x2.toFixed(p),
    "g": (x2, p) => x2.toPrecision(p),
    "o": (x2) => Math.round(x2).toString(8),
    "p": (x2, p) => formatRounded(x2 * 100, p),
    "r": formatRounded,
    "s": formatPrefixAuto,
    "X": (x2) => Math.round(x2).toString(16).toUpperCase(),
    "x": (x2) => Math.round(x2).toString(16)
  };
  function identity$4(x2) {
    return x2;
  }
  var map$1 = Array.prototype.map, prefixes = ["y", "z", "a", "f", "p", "n", "µ", "m", "", "k", "M", "G", "T", "P", "E", "Z", "Y"];
  function formatLocale$1(locale2) {
    var group2 = locale2.grouping === void 0 || locale2.thousands === void 0 ? identity$4 : formatGroup(map$1.call(locale2.grouping, Number), locale2.thousands + ""), currencyPrefix = locale2.currency === void 0 ? "" : locale2.currency[0] + "", currencySuffix = locale2.currency === void 0 ? "" : locale2.currency[1] + "", decimal = locale2.decimal === void 0 ? "." : locale2.decimal + "", numerals = locale2.numerals === void 0 ? identity$4 : formatNumerals(map$1.call(locale2.numerals, String)), percent = locale2.percent === void 0 ? "%" : locale2.percent + "", minus = locale2.minus === void 0 ? "−" : locale2.minus + "", nan = locale2.nan === void 0 ? "NaN" : locale2.nan + "";
    function newFormat(specifier) {
      specifier = formatSpecifier(specifier);
      var fill2 = specifier.fill, align2 = specifier.align, sign2 = specifier.sign, symbol2 = specifier.symbol, zero2 = specifier.zero, width2 = specifier.width, comma = specifier.comma, precision = specifier.precision, trim = specifier.trim, type2 = specifier.type;
      if (type2 === "n") comma = true, type2 = "g";
      else if (!formatTypes[type2]) precision === void 0 && (precision = 12), trim = true, type2 = "g";
      if (zero2 || fill2 === "0" && align2 === "=") zero2 = true, fill2 = "0", align2 = "=";
      var prefix = symbol2 === "$" ? currencyPrefix : symbol2 === "#" && /[boxX]/.test(type2) ? "0" + type2.toLowerCase() : "", suffix = symbol2 === "$" ? currencySuffix : /[%p]/.test(type2) ? percent : "";
      var formatType = formatTypes[type2], maybeSuffix = /[defgprs%]/.test(type2);
      precision = precision === void 0 ? 6 : /[gprs]/.test(type2) ? Math.max(1, Math.min(21, precision)) : Math.max(0, Math.min(20, precision));
      function format2(value2) {
        var valuePrefix = prefix, valueSuffix = suffix, i, n, c2;
        if (type2 === "c") {
          valueSuffix = formatType(value2) + valueSuffix;
          value2 = "";
        } else {
          value2 = +value2;
          var valueNegative = value2 < 0 || 1 / value2 < 0;
          value2 = isNaN(value2) ? nan : formatType(Math.abs(value2), precision);
          if (trim) value2 = formatTrim(value2);
          if (valueNegative && +value2 === 0 && sign2 !== "+") valueNegative = false;
          valuePrefix = (valueNegative ? sign2 === "(" ? sign2 : minus : sign2 === "-" || sign2 === "(" ? "" : sign2) + valuePrefix;
          valueSuffix = (type2 === "s" ? prefixes[8 + prefixExponent / 3] : "") + valueSuffix + (valueNegative && sign2 === "(" ? ")" : "");
          if (maybeSuffix) {
            i = -1, n = value2.length;
            while (++i < n) {
              if (c2 = value2.charCodeAt(i), 48 > c2 || c2 > 57) {
                valueSuffix = (c2 === 46 ? decimal + value2.slice(i + 1) : value2.slice(i)) + valueSuffix;
                value2 = value2.slice(0, i);
                break;
              }
            }
          }
        }
        if (comma && !zero2) value2 = group2(value2, Infinity);
        var length2 = valuePrefix.length + value2.length + valueSuffix.length, padding2 = length2 < width2 ? new Array(width2 - length2 + 1).join(fill2) : "";
        if (comma && zero2) value2 = group2(padding2 + value2, padding2.length ? width2 - valueSuffix.length : Infinity), padding2 = "";
        switch (align2) {
          case "<":
            value2 = valuePrefix + value2 + valueSuffix + padding2;
            break;
          case "=":
            value2 = valuePrefix + padding2 + value2 + valueSuffix;
            break;
          case "^":
            value2 = padding2.slice(0, length2 = padding2.length >> 1) + valuePrefix + value2 + valueSuffix + padding2.slice(length2);
            break;
          default:
            value2 = padding2 + valuePrefix + value2 + valueSuffix;
            break;
        }
        return numerals(value2);
      }
      format2.toString = function() {
        return specifier + "";
      };
      return format2;
    }
    function formatPrefix2(specifier, value2) {
      var f = newFormat((specifier = formatSpecifier(specifier), specifier.type = "f", specifier)), e3 = Math.max(-8, Math.min(8, Math.floor(exponent(value2) / 3))) * 3, k = Math.pow(10, -e3), prefix = prefixes[8 + e3 / 3];
      return function(value3) {
        return f(k * value3) + prefix;
      };
    }
    return {
      format: newFormat,
      formatPrefix: formatPrefix2
    };
  }
  var locale$2;
  var format$3;
  var formatPrefix;
  defaultLocale$2({
    thousands: ",",
    grouping: [3],
    currency: ["$", ""]
  });
  function defaultLocale$2(definition2) {
    locale$2 = formatLocale$1(definition2);
    format$3 = locale$2.format;
    formatPrefix = locale$2.formatPrefix;
    return locale$2;
  }
  function precisionFixed(step) {
    return Math.max(0, -exponent(Math.abs(step)));
  }
  function precisionPrefix(step, value2) {
    return Math.max(0, Math.max(-8, Math.min(8, Math.floor(exponent(value2) / 3))) * 3 - exponent(Math.abs(step)));
  }
  function precisionRound(step, max2) {
    step = Math.abs(step), max2 = Math.abs(max2) - step;
    return Math.max(0, exponent(max2) - exponent(step)) + 1;
  }
  const t0$2 = /* @__PURE__ */ new Date(), t1$1 = /* @__PURE__ */ new Date();
  function timeInterval$1(floori, offseti, count2, field2) {
    function interval2(date2) {
      return floori(date2 = arguments.length === 0 ? /* @__PURE__ */ new Date() : /* @__PURE__ */ new Date(+date2)), date2;
    }
    interval2.floor = (date2) => {
      return floori(date2 = /* @__PURE__ */ new Date(+date2)), date2;
    };
    interval2.ceil = (date2) => {
      return floori(date2 = new Date(date2 - 1)), offseti(date2, 1), floori(date2), date2;
    };
    interval2.round = (date2) => {
      const d0 = interval2(date2), d1 = interval2.ceil(date2);
      return date2 - d0 < d1 - date2 ? d0 : d1;
    };
    interval2.offset = (date2, step) => {
      return offseti(date2 = /* @__PURE__ */ new Date(+date2), step == null ? 1 : Math.floor(step)), date2;
    };
    interval2.range = (start, stop2, step) => {
      const range2 = [];
      start = interval2.ceil(start);
      step = step == null ? 1 : Math.floor(step);
      if (!(start < stop2) || !(step > 0)) return range2;
      let previous;
      do
        range2.push(previous = /* @__PURE__ */ new Date(+start)), offseti(start, step), floori(start);
      while (previous < start && start < stop2);
      return range2;
    };
    interval2.filter = (test2) => {
      return timeInterval$1((date2) => {
        if (date2 >= date2) while (floori(date2), !test2(date2)) date2.setTime(date2 - 1);
      }, (date2, step) => {
        if (date2 >= date2) {
          if (step < 0) while (++step <= 0) {
            while (offseti(date2, -1), !test2(date2)) {
            }
          }
          else while (--step >= 0) {
            while (offseti(date2, 1), !test2(date2)) {
            }
          }
        }
      });
    };
    if (count2) {
      interval2.count = (start, end) => {
        t0$2.setTime(+start), t1$1.setTime(+end);
        floori(t0$2), floori(t1$1);
        return Math.floor(count2(t0$2, t1$1));
      };
      interval2.every = (step) => {
        step = Math.floor(step);
        return !isFinite(step) || !(step > 0) ? null : !(step > 1) ? interval2 : interval2.filter(field2 ? (d) => field2(d) % step === 0 : (d) => interval2.count(0, d) % step === 0);
      };
    }
    return interval2;
  }
  const millisecond = timeInterval$1(() => {
  }, (date2, step) => {
    date2.setTime(+date2 + step);
  }, (start, end) => {
    return end - start;
  });
  millisecond.every = (k) => {
    k = Math.floor(k);
    if (!isFinite(k) || !(k > 0)) return null;
    if (!(k > 1)) return millisecond;
    return timeInterval$1((date2) => {
      date2.setTime(Math.floor(date2 / k) * k);
    }, (date2, step) => {
      date2.setTime(+date2 + step * k);
    }, (start, end) => {
      return (end - start) / k;
    });
  };
  millisecond.range;
  const durationSecond$1 = 1e3;
  const durationMinute$1 = durationSecond$1 * 60;
  const durationHour$1 = durationMinute$1 * 60;
  const durationDay$1 = durationHour$1 * 24;
  const durationWeek$1 = durationDay$1 * 7;
  const durationMonth$1 = durationDay$1 * 30;
  const durationYear$1 = durationDay$1 * 365;
  const second = timeInterval$1((date2) => {
    date2.setTime(date2 - date2.getMilliseconds());
  }, (date2, step) => {
    date2.setTime(+date2 + step * durationSecond$1);
  }, (start, end) => {
    return (end - start) / durationSecond$1;
  }, (date2) => {
    return date2.getUTCSeconds();
  });
  second.range;
  const timeMinute = timeInterval$1((date2) => {
    date2.setTime(date2 - date2.getMilliseconds() - date2.getSeconds() * durationSecond$1);
  }, (date2, step) => {
    date2.setTime(+date2 + step * durationMinute$1);
  }, (start, end) => {
    return (end - start) / durationMinute$1;
  }, (date2) => {
    return date2.getMinutes();
  });
  timeMinute.range;
  const utcMinute = timeInterval$1((date2) => {
    date2.setUTCSeconds(0, 0);
  }, (date2, step) => {
    date2.setTime(+date2 + step * durationMinute$1);
  }, (start, end) => {
    return (end - start) / durationMinute$1;
  }, (date2) => {
    return date2.getUTCMinutes();
  });
  utcMinute.range;
  const timeHour = timeInterval$1((date2) => {
    date2.setTime(date2 - date2.getMilliseconds() - date2.getSeconds() * durationSecond$1 - date2.getMinutes() * durationMinute$1);
  }, (date2, step) => {
    date2.setTime(+date2 + step * durationHour$1);
  }, (start, end) => {
    return (end - start) / durationHour$1;
  }, (date2) => {
    return date2.getHours();
  });
  timeHour.range;
  const utcHour = timeInterval$1((date2) => {
    date2.setUTCMinutes(0, 0, 0);
  }, (date2, step) => {
    date2.setTime(+date2 + step * durationHour$1);
  }, (start, end) => {
    return (end - start) / durationHour$1;
  }, (date2) => {
    return date2.getUTCHours();
  });
  utcHour.range;
  const timeDay = timeInterval$1(
    (date2) => date2.setHours(0, 0, 0, 0),
    (date2, step) => date2.setDate(date2.getDate() + step),
    (start, end) => (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute$1) / durationDay$1,
    (date2) => date2.getDate() - 1
  );
  timeDay.range;
  const utcDay = timeInterval$1((date2) => {
    date2.setUTCHours(0, 0, 0, 0);
  }, (date2, step) => {
    date2.setUTCDate(date2.getUTCDate() + step);
  }, (start, end) => {
    return (end - start) / durationDay$1;
  }, (date2) => {
    return date2.getUTCDate() - 1;
  });
  utcDay.range;
  const unixDay = timeInterval$1((date2) => {
    date2.setUTCHours(0, 0, 0, 0);
  }, (date2, step) => {
    date2.setUTCDate(date2.getUTCDate() + step);
  }, (start, end) => {
    return (end - start) / durationDay$1;
  }, (date2) => {
    return Math.floor(date2 / durationDay$1);
  });
  unixDay.range;
  function timeWeekday(i) {
    return timeInterval$1((date2) => {
      date2.setDate(date2.getDate() - (date2.getDay() + 7 - i) % 7);
      date2.setHours(0, 0, 0, 0);
    }, (date2, step) => {
      date2.setDate(date2.getDate() + step * 7);
    }, (start, end) => {
      return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute$1) / durationWeek$1;
    });
  }
  const timeSunday = timeWeekday(0);
  const timeMonday = timeWeekday(1);
  const timeTuesday = timeWeekday(2);
  const timeWednesday = timeWeekday(3);
  const timeThursday = timeWeekday(4);
  const timeFriday = timeWeekday(5);
  const timeSaturday = timeWeekday(6);
  timeSunday.range;
  timeMonday.range;
  timeTuesday.range;
  timeWednesday.range;
  timeThursday.range;
  timeFriday.range;
  timeSaturday.range;
  function utcWeekday(i) {
    return timeInterval$1((date2) => {
      date2.setUTCDate(date2.getUTCDate() - (date2.getUTCDay() + 7 - i) % 7);
      date2.setUTCHours(0, 0, 0, 0);
    }, (date2, step) => {
      date2.setUTCDate(date2.getUTCDate() + step * 7);
    }, (start, end) => {
      return (end - start) / durationWeek$1;
    });
  }
  const utcSunday = utcWeekday(0);
  const utcMonday = utcWeekday(1);
  const utcTuesday = utcWeekday(2);
  const utcWednesday = utcWeekday(3);
  const utcThursday = utcWeekday(4);
  const utcFriday = utcWeekday(5);
  const utcSaturday = utcWeekday(6);
  utcSunday.range;
  utcMonday.range;
  utcTuesday.range;
  utcWednesday.range;
  utcThursday.range;
  utcFriday.range;
  utcSaturday.range;
  const timeMonth = timeInterval$1((date2) => {
    date2.setDate(1);
    date2.setHours(0, 0, 0, 0);
  }, (date2, step) => {
    date2.setMonth(date2.getMonth() + step);
  }, (start, end) => {
    return end.getMonth() - start.getMonth() + (end.getFullYear() - start.getFullYear()) * 12;
  }, (date2) => {
    return date2.getMonth();
  });
  timeMonth.range;
  const utcMonth = timeInterval$1((date2) => {
    date2.setUTCDate(1);
    date2.setUTCHours(0, 0, 0, 0);
  }, (date2, step) => {
    date2.setUTCMonth(date2.getUTCMonth() + step);
  }, (start, end) => {
    return end.getUTCMonth() - start.getUTCMonth() + (end.getUTCFullYear() - start.getUTCFullYear()) * 12;
  }, (date2) => {
    return date2.getUTCMonth();
  });
  utcMonth.range;
  const timeYear = timeInterval$1((date2) => {
    date2.setMonth(0, 1);
    date2.setHours(0, 0, 0, 0);
  }, (date2, step) => {
    date2.setFullYear(date2.getFullYear() + step);
  }, (start, end) => {
    return end.getFullYear() - start.getFullYear();
  }, (date2) => {
    return date2.getFullYear();
  });
  timeYear.every = (k) => {
    return !isFinite(k = Math.floor(k)) || !(k > 0) ? null : timeInterval$1((date2) => {
      date2.setFullYear(Math.floor(date2.getFullYear() / k) * k);
      date2.setMonth(0, 1);
      date2.setHours(0, 0, 0, 0);
    }, (date2, step) => {
      date2.setFullYear(date2.getFullYear() + step * k);
    });
  };
  timeYear.range;
  const utcYear = timeInterval$1((date2) => {
    date2.setUTCMonth(0, 1);
    date2.setUTCHours(0, 0, 0, 0);
  }, (date2, step) => {
    date2.setUTCFullYear(date2.getUTCFullYear() + step);
  }, (start, end) => {
    return end.getUTCFullYear() - start.getUTCFullYear();
  }, (date2) => {
    return date2.getUTCFullYear();
  });
  utcYear.every = (k) => {
    return !isFinite(k = Math.floor(k)) || !(k > 0) ? null : timeInterval$1((date2) => {
      date2.setUTCFullYear(Math.floor(date2.getUTCFullYear() / k) * k);
      date2.setUTCMonth(0, 1);
      date2.setUTCHours(0, 0, 0, 0);
    }, (date2, step) => {
      date2.setUTCFullYear(date2.getUTCFullYear() + step * k);
    });
  };
  utcYear.range;
  function ticker(year, month, week2, day, hour, minute) {
    const tickIntervals = [
      [second, 1, durationSecond$1],
      [second, 5, 5 * durationSecond$1],
      [second, 15, 15 * durationSecond$1],
      [second, 30, 30 * durationSecond$1],
      [minute, 1, durationMinute$1],
      [minute, 5, 5 * durationMinute$1],
      [minute, 15, 15 * durationMinute$1],
      [minute, 30, 30 * durationMinute$1],
      [hour, 1, durationHour$1],
      [hour, 3, 3 * durationHour$1],
      [hour, 6, 6 * durationHour$1],
      [hour, 12, 12 * durationHour$1],
      [day, 1, durationDay$1],
      [day, 2, 2 * durationDay$1],
      [week2, 1, durationWeek$1],
      [month, 1, durationMonth$1],
      [month, 3, 3 * durationMonth$1],
      [year, 1, durationYear$1]
    ];
    function ticks2(start, stop2, count2) {
      const reverse2 = stop2 < start;
      if (reverse2) [start, stop2] = [stop2, start];
      const interval2 = count2 && typeof count2.range === "function" ? count2 : tickInterval(start, stop2, count2);
      const ticks3 = interval2 ? interval2.range(start, +stop2 + 1) : [];
      return reverse2 ? ticks3.reverse() : ticks3;
    }
    function tickInterval(start, stop2, count2) {
      const target2 = Math.abs(stop2 - start) / count2;
      const i = bisector(([, , step2]) => step2).right(tickIntervals, target2);
      if (i === tickIntervals.length) return year.every(tickStep(start / durationYear$1, stop2 / durationYear$1, count2));
      if (i === 0) return millisecond.every(Math.max(tickStep(start, stop2, count2), 1));
      const [t, step] = tickIntervals[target2 / tickIntervals[i - 1][2] < tickIntervals[i][2] / target2 ? i - 1 : i];
      return t.every(step);
    }
    return [ticks2, tickInterval];
  }
  const [utcTicks, utcTickInterval] = ticker(utcYear, utcMonth, utcSunday, unixDay, utcHour, utcMinute);
  const [timeTicks, timeTickInterval] = ticker(timeYear, timeMonth, timeSunday, timeDay, timeHour, timeMinute);
  const YEAR = "year";
  const QUARTER = "quarter";
  const MONTH = "month";
  const WEEK = "week";
  const DATE = "date";
  const DAY = "day";
  const DAYOFYEAR = "dayofyear";
  const HOURS = "hours";
  const MINUTES = "minutes";
  const SECONDS = "seconds";
  const MILLISECONDS = "milliseconds";
  const TIME_UNITS = [YEAR, QUARTER, MONTH, WEEK, DATE, DAY, DAYOFYEAR, HOURS, MINUTES, SECONDS, MILLISECONDS];
  const UNITS = TIME_UNITS.reduce((o, u2, i) => (o[u2] = 1 + i, o), {});
  function timeUnits(units) {
    const u2 = array$5(units).slice(), m2 = {};
    if (!u2.length) error$1("Missing time unit.");
    u2.forEach((unit2) => {
      if (has$1(UNITS, unit2)) {
        m2[unit2] = 1;
      } else {
        error$1(`Invalid time unit: ${unit2}.`);
      }
    });
    const numTypes = (m2[WEEK] || m2[DAY] ? 1 : 0) + (m2[QUARTER] || m2[MONTH] || m2[DATE] ? 1 : 0) + (m2[DAYOFYEAR] ? 1 : 0);
    if (numTypes > 1) {
      error$1(`Incompatible time units: ${units}`);
    }
    u2.sort((a2, b2) => UNITS[a2] - UNITS[b2]);
    return u2;
  }
  const defaultSpecifiers = {
    [YEAR]: "%Y ",
    [QUARTER]: "Q%q ",
    [MONTH]: "%b ",
    [DATE]: "%d ",
    [WEEK]: "W%U ",
    [DAY]: "%a ",
    [DAYOFYEAR]: "%j ",
    [HOURS]: "%H:00",
    [MINUTES]: "00:%M",
    [SECONDS]: ":%S",
    [MILLISECONDS]: ".%L",
    [`${YEAR}-${MONTH}`]: "%Y-%m ",
    [`${YEAR}-${MONTH}-${DATE}`]: "%Y-%m-%d ",
    [`${HOURS}-${MINUTES}`]: "%H:%M"
  };
  function timeUnitSpecifier(units, specifiers) {
    const s = extend$1({}, defaultSpecifiers, specifiers), u2 = timeUnits(units), n = u2.length;
    let fmt = "", start = 0, end, key2;
    for (start = 0; start < n; ) {
      for (end = u2.length; end > start; --end) {
        key2 = u2.slice(start, end).join("-");
        if (s[key2] != null) {
          fmt += s[key2];
          start = end;
          break;
        }
      }
    }
    return fmt.trim();
  }
  const t0$1 = /* @__PURE__ */ new Date();
  function localYear(y2) {
    t0$1.setFullYear(y2);
    t0$1.setMonth(0);
    t0$1.setDate(1);
    t0$1.setHours(0, 0, 0, 0);
    return t0$1;
  }
  function dayofyear(d) {
    return localDayOfYear(new Date(d));
  }
  function week(d) {
    return localWeekNum(new Date(d));
  }
  function localDayOfYear(d) {
    return timeDay.count(localYear(d.getFullYear()) - 1, d);
  }
  function localWeekNum(d) {
    return timeSunday.count(localYear(d.getFullYear()) - 1, d);
  }
  function localFirst(y2) {
    return localYear(y2).getDay();
  }
  function localDate$1(y2, m2, d, H, M2, S, L) {
    if (0 <= y2 && y2 < 100) {
      const date2 = new Date(-1, m2, d, H, M2, S, L);
      date2.setFullYear(y2);
      return date2;
    }
    return new Date(y2, m2, d, H, M2, S, L);
  }
  function utcdayofyear(d) {
    return utcDayOfYear(new Date(d));
  }
  function utcweek(d) {
    return utcWeekNum(new Date(d));
  }
  function utcDayOfYear(d) {
    const y2 = Date.UTC(d.getUTCFullYear(), 0, 1);
    return utcDay.count(y2 - 1, d);
  }
  function utcWeekNum(d) {
    const y2 = Date.UTC(d.getUTCFullYear(), 0, 1);
    return utcSunday.count(y2 - 1, d);
  }
  function utcFirst(y2) {
    t0$1.setTime(Date.UTC(y2, 0, 1));
    return t0$1.getUTCDay();
  }
  function utcDate$1(y2, m2, d, H, M2, S, L) {
    if (0 <= y2 && y2 < 100) {
      const date2 = new Date(Date.UTC(-1, m2, d, H, M2, S, L));
      date2.setUTCFullYear(d.y);
      return date2;
    }
    return new Date(Date.UTC(y2, m2, d, H, M2, S, L));
  }
  function floor(units, step, get2, inv, newDate2) {
    const s = step || 1, b2 = peek$2(units), _ = (unit2, p, key2) => {
      key2 = key2 || unit2;
      return getUnit(get2[key2], inv[key2], unit2 === b2 && s, p);
    };
    const t = /* @__PURE__ */ new Date(), u2 = toSet(units), y2 = u2[YEAR] ? _(YEAR) : constant$5(2012), m2 = u2[MONTH] ? _(MONTH) : u2[QUARTER] ? _(QUARTER) : zero$4, d = u2[WEEK] && u2[DAY] ? _(DAY, 1, WEEK + DAY) : u2[WEEK] ? _(WEEK, 1) : u2[DAY] ? _(DAY, 1) : u2[DATE] ? _(DATE, 1) : u2[DAYOFYEAR] ? _(DAYOFYEAR, 1) : one$2, H = u2[HOURS] ? _(HOURS) : zero$4, M2 = u2[MINUTES] ? _(MINUTES) : zero$4, S = u2[SECONDS] ? _(SECONDS) : zero$4, L = u2[MILLISECONDS] ? _(MILLISECONDS) : zero$4;
    return function(v) {
      t.setTime(+v);
      const year = y2(t);
      return newDate2(year, m2(t), d(t, year), H(t), M2(t), S(t), L(t));
    };
  }
  function getUnit(f, inv, step, phase) {
    const u2 = step <= 1 ? f : phase ? (d, y2) => phase + step * Math.floor((f(d, y2) - phase) / step) : (d, y2) => step * Math.floor(f(d, y2) / step);
    return inv ? (d, y2) => inv(u2(d, y2), y2) : u2;
  }
  function weekday(week2, day, firstDay) {
    return day + week2 * 7 - (firstDay + 6) % 7;
  }
  const localGet = {
    [YEAR]: (d) => d.getFullYear(),
    [QUARTER]: (d) => Math.floor(d.getMonth() / 3),
    [MONTH]: (d) => d.getMonth(),
    [DATE]: (d) => d.getDate(),
    [HOURS]: (d) => d.getHours(),
    [MINUTES]: (d) => d.getMinutes(),
    [SECONDS]: (d) => d.getSeconds(),
    [MILLISECONDS]: (d) => d.getMilliseconds(),
    [DAYOFYEAR]: (d) => localDayOfYear(d),
    [WEEK]: (d) => localWeekNum(d),
    [WEEK + DAY]: (d, y2) => weekday(localWeekNum(d), d.getDay(), localFirst(y2)),
    [DAY]: (d, y2) => weekday(1, d.getDay(), localFirst(y2))
  };
  const localInv = {
    [QUARTER]: (q) => 3 * q,
    [WEEK]: (w2, y2) => weekday(w2, 0, localFirst(y2))
  };
  function timeFloor(units, step) {
    return floor(units, step || 1, localGet, localInv, localDate$1);
  }
  const utcGet = {
    [YEAR]: (d) => d.getUTCFullYear(),
    [QUARTER]: (d) => Math.floor(d.getUTCMonth() / 3),
    [MONTH]: (d) => d.getUTCMonth(),
    [DATE]: (d) => d.getUTCDate(),
    [HOURS]: (d) => d.getUTCHours(),
    [MINUTES]: (d) => d.getUTCMinutes(),
    [SECONDS]: (d) => d.getUTCSeconds(),
    [MILLISECONDS]: (d) => d.getUTCMilliseconds(),
    [DAYOFYEAR]: (d) => utcDayOfYear(d),
    [WEEK]: (d) => utcWeekNum(d),
    [DAY]: (d, y2) => weekday(1, d.getUTCDay(), utcFirst(y2)),
    [WEEK + DAY]: (d, y2) => weekday(utcWeekNum(d), d.getUTCDay(), utcFirst(y2))
  };
  const utcInv = {
    [QUARTER]: (q) => 3 * q,
    [WEEK]: (w2, y2) => weekday(w2, 0, utcFirst(y2))
  };
  function utcFloor(units, step) {
    return floor(units, step || 1, utcGet, utcInv, utcDate$1);
  }
  const timeIntervals = {
    [YEAR]: timeYear,
    [QUARTER]: timeMonth.every(3),
    [MONTH]: timeMonth,
    [WEEK]: timeSunday,
    [DATE]: timeDay,
    [DAY]: timeDay,
    [DAYOFYEAR]: timeDay,
    [HOURS]: timeHour,
    [MINUTES]: timeMinute,
    [SECONDS]: second,
    [MILLISECONDS]: millisecond
  };
  const utcIntervals = {
    [YEAR]: utcYear,
    [QUARTER]: utcMonth.every(3),
    [MONTH]: utcMonth,
    [WEEK]: utcSunday,
    [DATE]: utcDay,
    [DAY]: utcDay,
    [DAYOFYEAR]: utcDay,
    [HOURS]: utcHour,
    [MINUTES]: utcMinute,
    [SECONDS]: second,
    [MILLISECONDS]: millisecond
  };
  function timeInterval(unit2) {
    return timeIntervals[unit2];
  }
  function utcInterval(unit2) {
    return utcIntervals[unit2];
  }
  function offset$3(ival, date2, step) {
    return ival ? ival.offset(date2, step) : void 0;
  }
  function timeOffset(unit2, date2, step) {
    return offset$3(timeInterval(unit2), date2, step);
  }
  function utcOffset(unit2, date2, step) {
    return offset$3(utcInterval(unit2), date2, step);
  }
  function sequence$1(ival, start, stop2, step) {
    return ival ? ival.range(start, stop2, step) : void 0;
  }
  function timeSequence(unit2, start, stop2, step) {
    return sequence$1(timeInterval(unit2), start, stop2, step);
  }
  function utcSequence(unit2, start, stop2, step) {
    return sequence$1(utcInterval(unit2), start, stop2, step);
  }
  const durationSecond = 1e3, durationMinute = durationSecond * 60, durationHour = durationMinute * 60, durationDay = durationHour * 24, durationWeek = durationDay * 7, durationMonth = durationDay * 30, durationYear = durationDay * 365;
  const Milli = [YEAR, MONTH, DATE, HOURS, MINUTES, SECONDS, MILLISECONDS], Seconds = Milli.slice(0, -1), Minutes = Seconds.slice(0, -1), Hours = Minutes.slice(0, -1), Day = Hours.slice(0, -1), Week = [YEAR, WEEK], Month = [YEAR, MONTH], Year = [YEAR];
  const intervals = [[Seconds, 1, durationSecond], [Seconds, 5, 5 * durationSecond], [Seconds, 15, 15 * durationSecond], [Seconds, 30, 30 * durationSecond], [Minutes, 1, durationMinute], [Minutes, 5, 5 * durationMinute], [Minutes, 15, 15 * durationMinute], [Minutes, 30, 30 * durationMinute], [Hours, 1, durationHour], [Hours, 3, 3 * durationHour], [Hours, 6, 6 * durationHour], [Hours, 12, 12 * durationHour], [Day, 1, durationDay], [Week, 1, durationWeek], [Month, 1, durationMonth], [Month, 3, 3 * durationMonth], [Year, 1, durationYear]];
  function bin$1(opt) {
    const ext = opt.extent, max2 = opt.maxbins || 40, target2 = Math.abs(span(ext)) / max2;
    let i = bisector((i2) => i2[2]).right(intervals, target2), units, step;
    if (i === intervals.length) {
      units = Year, step = tickStep(ext[0] / durationYear, ext[1] / durationYear, max2);
    } else if (i) {
      i = intervals[target2 / intervals[i - 1][2] < intervals[i][2] / target2 ? i - 1 : i];
      units = i[0];
      step = i[1];
    } else {
      units = Milli;
      step = Math.max(tickStep(ext[0], ext[1], max2), 1);
    }
    return {
      units,
      step
    };
  }
  function localDate(d) {
    if (0 <= d.y && d.y < 100) {
      var date2 = new Date(-1, d.m, d.d, d.H, d.M, d.S, d.L);
      date2.setFullYear(d.y);
      return date2;
    }
    return new Date(d.y, d.m, d.d, d.H, d.M, d.S, d.L);
  }
  function utcDate(d) {
    if (0 <= d.y && d.y < 100) {
      var date2 = new Date(Date.UTC(-1, d.m, d.d, d.H, d.M, d.S, d.L));
      date2.setUTCFullYear(d.y);
      return date2;
    }
    return new Date(Date.UTC(d.y, d.m, d.d, d.H, d.M, d.S, d.L));
  }
  function newDate(y2, m2, d) {
    return { y: y2, m: m2, d, H: 0, M: 0, S: 0, L: 0 };
  }
  function formatLocale(locale2) {
    var locale_dateTime = locale2.dateTime, locale_date = locale2.date, locale_time = locale2.time, locale_periods = locale2.periods, locale_weekdays = locale2.days, locale_shortWeekdays = locale2.shortDays, locale_months = locale2.months, locale_shortMonths = locale2.shortMonths;
    var periodRe = formatRe(locale_periods), periodLookup = formatLookup(locale_periods), weekdayRe = formatRe(locale_weekdays), weekdayLookup = formatLookup(locale_weekdays), shortWeekdayRe = formatRe(locale_shortWeekdays), shortWeekdayLookup = formatLookup(locale_shortWeekdays), monthRe = formatRe(locale_months), monthLookup = formatLookup(locale_months), shortMonthRe = formatRe(locale_shortMonths), shortMonthLookup = formatLookup(locale_shortMonths);
    var formats2 = {
      "a": formatShortWeekday,
      "A": formatWeekday,
      "b": formatShortMonth,
      "B": formatMonth,
      "c": null,
      "d": formatDayOfMonth,
      "e": formatDayOfMonth,
      "f": formatMicroseconds,
      "g": formatYearISO,
      "G": formatFullYearISO,
      "H": formatHour24,
      "I": formatHour12,
      "j": formatDayOfYear,
      "L": formatMilliseconds,
      "m": formatMonthNumber,
      "M": formatMinutes,
      "p": formatPeriod,
      "q": formatQuarter,
      "Q": formatUnixTimestamp,
      "s": formatUnixTimestampSeconds,
      "S": formatSeconds,
      "u": formatWeekdayNumberMonday,
      "U": formatWeekNumberSunday,
      "V": formatWeekNumberISO,
      "w": formatWeekdayNumberSunday,
      "W": formatWeekNumberMonday,
      "x": null,
      "X": null,
      "y": formatYear,
      "Y": formatFullYear,
      "Z": formatZone,
      "%": formatLiteralPercent
    };
    var utcFormats = {
      "a": formatUTCShortWeekday,
      "A": formatUTCWeekday,
      "b": formatUTCShortMonth,
      "B": formatUTCMonth,
      "c": null,
      "d": formatUTCDayOfMonth,
      "e": formatUTCDayOfMonth,
      "f": formatUTCMicroseconds,
      "g": formatUTCYearISO,
      "G": formatUTCFullYearISO,
      "H": formatUTCHour24,
      "I": formatUTCHour12,
      "j": formatUTCDayOfYear,
      "L": formatUTCMilliseconds,
      "m": formatUTCMonthNumber,
      "M": formatUTCMinutes,
      "p": formatUTCPeriod,
      "q": formatUTCQuarter,
      "Q": formatUnixTimestamp,
      "s": formatUnixTimestampSeconds,
      "S": formatUTCSeconds,
      "u": formatUTCWeekdayNumberMonday,
      "U": formatUTCWeekNumberSunday,
      "V": formatUTCWeekNumberISO,
      "w": formatUTCWeekdayNumberSunday,
      "W": formatUTCWeekNumberMonday,
      "x": null,
      "X": null,
      "y": formatUTCYear,
      "Y": formatUTCFullYear,
      "Z": formatUTCZone,
      "%": formatLiteralPercent
    };
    var parses = {
      "a": parseShortWeekday,
      "A": parseWeekday,
      "b": parseShortMonth,
      "B": parseMonth,
      "c": parseLocaleDateTime,
      "d": parseDayOfMonth,
      "e": parseDayOfMonth,
      "f": parseMicroseconds,
      "g": parseYear,
      "G": parseFullYear,
      "H": parseHour24,
      "I": parseHour24,
      "j": parseDayOfYear,
      "L": parseMilliseconds,
      "m": parseMonthNumber,
      "M": parseMinutes,
      "p": parsePeriod,
      "q": parseQuarter,
      "Q": parseUnixTimestamp,
      "s": parseUnixTimestampSeconds,
      "S": parseSeconds,
      "u": parseWeekdayNumberMonday,
      "U": parseWeekNumberSunday,
      "V": parseWeekNumberISO,
      "w": parseWeekdayNumberSunday,
      "W": parseWeekNumberMonday,
      "x": parseLocaleDate,
      "X": parseLocaleTime,
      "y": parseYear,
      "Y": parseFullYear,
      "Z": parseZone,
      "%": parseLiteralPercent
    };
    formats2.x = newFormat(locale_date, formats2);
    formats2.X = newFormat(locale_time, formats2);
    formats2.c = newFormat(locale_dateTime, formats2);
    utcFormats.x = newFormat(locale_date, utcFormats);
    utcFormats.X = newFormat(locale_time, utcFormats);
    utcFormats.c = newFormat(locale_dateTime, utcFormats);
    function newFormat(specifier, formats3) {
      return function(date2) {
        var string2 = [], i = -1, j = 0, n = specifier.length, c2, pad2, format2;
        if (!(date2 instanceof Date)) date2 = /* @__PURE__ */ new Date(+date2);
        while (++i < n) {
          if (specifier.charCodeAt(i) === 37) {
            string2.push(specifier.slice(j, i));
            if ((pad2 = pads[c2 = specifier.charAt(++i)]) != null) c2 = specifier.charAt(++i);
            else pad2 = c2 === "e" ? " " : "0";
            if (format2 = formats3[c2]) c2 = format2(date2, pad2);
            string2.push(c2);
            j = i + 1;
          }
        }
        string2.push(specifier.slice(j, i));
        return string2.join("");
      };
    }
    function newParse(specifier, Z) {
      return function(string2) {
        var d = newDate(1900, void 0, 1), i = parseSpecifier(d, specifier, string2 += "", 0), week2, day;
        if (i != string2.length) return null;
        if ("Q" in d) return new Date(d.Q);
        if ("s" in d) return new Date(d.s * 1e3 + ("L" in d ? d.L : 0));
        if (Z && !("Z" in d)) d.Z = 0;
        if ("p" in d) d.H = d.H % 12 + d.p * 12;
        if (d.m === void 0) d.m = "q" in d ? d.q : 0;
        if ("V" in d) {
          if (d.V < 1 || d.V > 53) return null;
          if (!("w" in d)) d.w = 1;
          if ("Z" in d) {
            week2 = utcDate(newDate(d.y, 0, 1)), day = week2.getUTCDay();
            week2 = day > 4 || day === 0 ? utcMonday.ceil(week2) : utcMonday(week2);
            week2 = utcDay.offset(week2, (d.V - 1) * 7);
            d.y = week2.getUTCFullYear();
            d.m = week2.getUTCMonth();
            d.d = week2.getUTCDate() + (d.w + 6) % 7;
          } else {
            week2 = localDate(newDate(d.y, 0, 1)), day = week2.getDay();
            week2 = day > 4 || day === 0 ? timeMonday.ceil(week2) : timeMonday(week2);
            week2 = timeDay.offset(week2, (d.V - 1) * 7);
            d.y = week2.getFullYear();
            d.m = week2.getMonth();
            d.d = week2.getDate() + (d.w + 6) % 7;
          }
        } else if ("W" in d || "U" in d) {
          if (!("w" in d)) d.w = "u" in d ? d.u % 7 : "W" in d ? 1 : 0;
          day = "Z" in d ? utcDate(newDate(d.y, 0, 1)).getUTCDay() : localDate(newDate(d.y, 0, 1)).getDay();
          d.m = 0;
          d.d = "W" in d ? (d.w + 6) % 7 + d.W * 7 - (day + 5) % 7 : d.w + d.U * 7 - (day + 6) % 7;
        }
        if ("Z" in d) {
          d.H += d.Z / 100 | 0;
          d.M += d.Z % 100;
          return utcDate(d);
        }
        return localDate(d);
      };
    }
    function parseSpecifier(d, specifier, string2, j) {
      var i = 0, n = specifier.length, m2 = string2.length, c2, parse2;
      while (i < n) {
        if (j >= m2) return -1;
        c2 = specifier.charCodeAt(i++);
        if (c2 === 37) {
          c2 = specifier.charAt(i++);
          parse2 = parses[c2 in pads ? specifier.charAt(i++) : c2];
          if (!parse2 || (j = parse2(d, string2, j)) < 0) return -1;
        } else if (c2 != string2.charCodeAt(j++)) {
          return -1;
        }
      }
      return j;
    }
    function parsePeriod(d, string2, i) {
      var n = periodRe.exec(string2.slice(i));
      return n ? (d.p = periodLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
    }
    function parseShortWeekday(d, string2, i) {
      var n = shortWeekdayRe.exec(string2.slice(i));
      return n ? (d.w = shortWeekdayLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
    }
    function parseWeekday(d, string2, i) {
      var n = weekdayRe.exec(string2.slice(i));
      return n ? (d.w = weekdayLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
    }
    function parseShortMonth(d, string2, i) {
      var n = shortMonthRe.exec(string2.slice(i));
      return n ? (d.m = shortMonthLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
    }
    function parseMonth(d, string2, i) {
      var n = monthRe.exec(string2.slice(i));
      return n ? (d.m = monthLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
    }
    function parseLocaleDateTime(d, string2, i) {
      return parseSpecifier(d, locale_dateTime, string2, i);
    }
    function parseLocaleDate(d, string2, i) {
      return parseSpecifier(d, locale_date, string2, i);
    }
    function parseLocaleTime(d, string2, i) {
      return parseSpecifier(d, locale_time, string2, i);
    }
    function formatShortWeekday(d) {
      return locale_shortWeekdays[d.getDay()];
    }
    function formatWeekday(d) {
      return locale_weekdays[d.getDay()];
    }
    function formatShortMonth(d) {
      return locale_shortMonths[d.getMonth()];
    }
    function formatMonth(d) {
      return locale_months[d.getMonth()];
    }
    function formatPeriod(d) {
      return locale_periods[+(d.getHours() >= 12)];
    }
    function formatQuarter(d) {
      return 1 + ~~(d.getMonth() / 3);
    }
    function formatUTCShortWeekday(d) {
      return locale_shortWeekdays[d.getUTCDay()];
    }
    function formatUTCWeekday(d) {
      return locale_weekdays[d.getUTCDay()];
    }
    function formatUTCShortMonth(d) {
      return locale_shortMonths[d.getUTCMonth()];
    }
    function formatUTCMonth(d) {
      return locale_months[d.getUTCMonth()];
    }
    function formatUTCPeriod(d) {
      return locale_periods[+(d.getUTCHours() >= 12)];
    }
    function formatUTCQuarter(d) {
      return 1 + ~~(d.getUTCMonth() / 3);
    }
    return {
      format: function(specifier) {
        var f = newFormat(specifier += "", formats2);
        f.toString = function() {
          return specifier;
        };
        return f;
      },
      parse: function(specifier) {
        var p = newParse(specifier += "", false);
        p.toString = function() {
          return specifier;
        };
        return p;
      },
      utcFormat: function(specifier) {
        var f = newFormat(specifier += "", utcFormats);
        f.toString = function() {
          return specifier;
        };
        return f;
      },
      utcParse: function(specifier) {
        var p = newParse(specifier += "", true);
        p.toString = function() {
          return specifier;
        };
        return p;
      }
    };
  }
  var pads = { "-": "", "_": " ", "0": "0" }, numberRe = /^\s*\d+/, percentRe = /^%/, requoteRe = /[\\^$*+?|[\]().{}]/g;
  function pad(value2, fill2, width2) {
    var sign2 = value2 < 0 ? "-" : "", string2 = (sign2 ? -value2 : value2) + "", length2 = string2.length;
    return sign2 + (length2 < width2 ? new Array(width2 - length2 + 1).join(fill2) + string2 : string2);
  }
  function requote(s) {
    return s.replace(requoteRe, "\\$&");
  }
  function formatRe(names) {
    return new RegExp("^(?:" + names.map(requote).join("|") + ")", "i");
  }
  function formatLookup(names) {
    return new Map(names.map((name, i) => [name.toLowerCase(), i]));
  }
  function parseWeekdayNumberSunday(d, string2, i) {
    var n = numberRe.exec(string2.slice(i, i + 1));
    return n ? (d.w = +n[0], i + n[0].length) : -1;
  }
  function parseWeekdayNumberMonday(d, string2, i) {
    var n = numberRe.exec(string2.slice(i, i + 1));
    return n ? (d.u = +n[0], i + n[0].length) : -1;
  }
  function parseWeekNumberSunday(d, string2, i) {
    var n = numberRe.exec(string2.slice(i, i + 2));
    return n ? (d.U = +n[0], i + n[0].length) : -1;
  }
  function parseWeekNumberISO(d, string2, i) {
    var n = numberRe.exec(string2.slice(i, i + 2));
    return n ? (d.V = +n[0], i + n[0].length) : -1;
  }
  function parseWeekNumberMonday(d, string2, i) {
    var n = numberRe.exec(string2.slice(i, i + 2));
    return n ? (d.W = +n[0], i + n[0].length) : -1;
  }
  function parseFullYear(d, string2, i) {
    var n = numberRe.exec(string2.slice(i, i + 4));
    return n ? (d.y = +n[0], i + n[0].length) : -1;
  }
  function parseYear(d, string2, i) {
    var n = numberRe.exec(string2.slice(i, i + 2));
    return n ? (d.y = +n[0] + (+n[0] > 68 ? 1900 : 2e3), i + n[0].length) : -1;
  }
  function parseZone(d, string2, i) {
    var n = /^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(string2.slice(i, i + 6));
    return n ? (d.Z = n[1] ? 0 : -(n[2] + (n[3] || "00")), i + n[0].length) : -1;
  }
  function parseQuarter(d, string2, i) {
    var n = numberRe.exec(string2.slice(i, i + 1));
    return n ? (d.q = n[0] * 3 - 3, i + n[0].length) : -1;
  }
  function parseMonthNumber(d, string2, i) {
    var n = numberRe.exec(string2.slice(i, i + 2));
    return n ? (d.m = n[0] - 1, i + n[0].length) : -1;
  }
  function parseDayOfMonth(d, string2, i) {
    var n = numberRe.exec(string2.slice(i, i + 2));
    return n ? (d.d = +n[0], i + n[0].length) : -1;
  }
  function parseDayOfYear(d, string2, i) {
    var n = numberRe.exec(string2.slice(i, i + 3));
    return n ? (d.m = 0, d.d = +n[0], i + n[0].length) : -1;
  }
  function parseHour24(d, string2, i) {
    var n = numberRe.exec(string2.slice(i, i + 2));
    return n ? (d.H = +n[0], i + n[0].length) : -1;
  }
  function parseMinutes(d, string2, i) {
    var n = numberRe.exec(string2.slice(i, i + 2));
    return n ? (d.M = +n[0], i + n[0].length) : -1;
  }
  function parseSeconds(d, string2, i) {
    var n = numberRe.exec(string2.slice(i, i + 2));
    return n ? (d.S = +n[0], i + n[0].length) : -1;
  }
  function parseMilliseconds(d, string2, i) {
    var n = numberRe.exec(string2.slice(i, i + 3));
    return n ? (d.L = +n[0], i + n[0].length) : -1;
  }
  function parseMicroseconds(d, string2, i) {
    var n = numberRe.exec(string2.slice(i, i + 6));
    return n ? (d.L = Math.floor(n[0] / 1e3), i + n[0].length) : -1;
  }
  function parseLiteralPercent(d, string2, i) {
    var n = percentRe.exec(string2.slice(i, i + 1));
    return n ? i + n[0].length : -1;
  }
  function parseUnixTimestamp(d, string2, i) {
    var n = numberRe.exec(string2.slice(i));
    return n ? (d.Q = +n[0], i + n[0].length) : -1;
  }
  function parseUnixTimestampSeconds(d, string2, i) {
    var n = numberRe.exec(string2.slice(i));
    return n ? (d.s = +n[0], i + n[0].length) : -1;
  }
  function formatDayOfMonth(d, p) {
    return pad(d.getDate(), p, 2);
  }
  function formatHour24(d, p) {
    return pad(d.getHours(), p, 2);
  }
  function formatHour12(d, p) {
    return pad(d.getHours() % 12 || 12, p, 2);
  }
  function formatDayOfYear(d, p) {
    return pad(1 + timeDay.count(timeYear(d), d), p, 3);
  }
  function formatMilliseconds(d, p) {
    return pad(d.getMilliseconds(), p, 3);
  }
  function formatMicroseconds(d, p) {
    return formatMilliseconds(d, p) + "000";
  }
  function formatMonthNumber(d, p) {
    return pad(d.getMonth() + 1, p, 2);
  }
  function formatMinutes(d, p) {
    return pad(d.getMinutes(), p, 2);
  }
  function formatSeconds(d, p) {
    return pad(d.getSeconds(), p, 2);
  }
  function formatWeekdayNumberMonday(d) {
    var day = d.getDay();
    return day === 0 ? 7 : day;
  }
  function formatWeekNumberSunday(d, p) {
    return pad(timeSunday.count(timeYear(d) - 1, d), p, 2);
  }
  function dISO(d) {
    var day = d.getDay();
    return day >= 4 || day === 0 ? timeThursday(d) : timeThursday.ceil(d);
  }
  function formatWeekNumberISO(d, p) {
    d = dISO(d);
    return pad(timeThursday.count(timeYear(d), d) + (timeYear(d).getDay() === 4), p, 2);
  }
  function formatWeekdayNumberSunday(d) {
    return d.getDay();
  }
  function formatWeekNumberMonday(d, p) {
    return pad(timeMonday.count(timeYear(d) - 1, d), p, 2);
  }
  function formatYear(d, p) {
    return pad(d.getFullYear() % 100, p, 2);
  }
  function formatYearISO(d, p) {
    d = dISO(d);
    return pad(d.getFullYear() % 100, p, 2);
  }
  function formatFullYear(d, p) {
    return pad(d.getFullYear() % 1e4, p, 4);
  }
  function formatFullYearISO(d, p) {
    var day = d.getDay();
    d = day >= 4 || day === 0 ? timeThursday(d) : timeThursday.ceil(d);
    return pad(d.getFullYear() % 1e4, p, 4);
  }
  function formatZone(d) {
    var z = d.getTimezoneOffset();
    return (z > 0 ? "-" : (z *= -1, "+")) + pad(z / 60 | 0, "0", 2) + pad(z % 60, "0", 2);
  }
  function formatUTCDayOfMonth(d, p) {
    return pad(d.getUTCDate(), p, 2);
  }
  function formatUTCHour24(d, p) {
    return pad(d.getUTCHours(), p, 2);
  }
  function formatUTCHour12(d, p) {
    return pad(d.getUTCHours() % 12 || 12, p, 2);
  }
  function formatUTCDayOfYear(d, p) {
    return pad(1 + utcDay.count(utcYear(d), d), p, 3);
  }
  function formatUTCMilliseconds(d, p) {
    return pad(d.getUTCMilliseconds(), p, 3);
  }
  function formatUTCMicroseconds(d, p) {
    return formatUTCMilliseconds(d, p) + "000";
  }
  function formatUTCMonthNumber(d, p) {
    return pad(d.getUTCMonth() + 1, p, 2);
  }
  function formatUTCMinutes(d, p) {
    return pad(d.getUTCMinutes(), p, 2);
  }
  function formatUTCSeconds(d, p) {
    return pad(d.getUTCSeconds(), p, 2);
  }
  function formatUTCWeekdayNumberMonday(d) {
    var dow = d.getUTCDay();
    return dow === 0 ? 7 : dow;
  }
  function formatUTCWeekNumberSunday(d, p) {
    return pad(utcSunday.count(utcYear(d) - 1, d), p, 2);
  }
  function UTCdISO(d) {
    var day = d.getUTCDay();
    return day >= 4 || day === 0 ? utcThursday(d) : utcThursday.ceil(d);
  }
  function formatUTCWeekNumberISO(d, p) {
    d = UTCdISO(d);
    return pad(utcThursday.count(utcYear(d), d) + (utcYear(d).getUTCDay() === 4), p, 2);
  }
  function formatUTCWeekdayNumberSunday(d) {
    return d.getUTCDay();
  }
  function formatUTCWeekNumberMonday(d, p) {
    return pad(utcMonday.count(utcYear(d) - 1, d), p, 2);
  }
  function formatUTCYear(d, p) {
    return pad(d.getUTCFullYear() % 100, p, 2);
  }
  function formatUTCYearISO(d, p) {
    d = UTCdISO(d);
    return pad(d.getUTCFullYear() % 100, p, 2);
  }
  function formatUTCFullYear(d, p) {
    return pad(d.getUTCFullYear() % 1e4, p, 4);
  }
  function formatUTCFullYearISO(d, p) {
    var day = d.getUTCDay();
    d = day >= 4 || day === 0 ? utcThursday(d) : utcThursday.ceil(d);
    return pad(d.getUTCFullYear() % 1e4, p, 4);
  }
  function formatUTCZone() {
    return "+0000";
  }
  function formatLiteralPercent() {
    return "%";
  }
  function formatUnixTimestamp(d) {
    return +d;
  }
  function formatUnixTimestampSeconds(d) {
    return Math.floor(+d / 1e3);
  }
  var locale$1;
  var timeFormat$2;
  var timeParse$1;
  var utcFormat$1;
  var utcParse$1;
  defaultLocale$1({
    dateTime: "%x, %X",
    date: "%-m/%-d/%Y",
    time: "%-I:%M:%S %p",
    periods: ["AM", "PM"],
    days: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
    shortDays: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
    months: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
    shortMonths: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]
  });
  function defaultLocale$1(definition2) {
    locale$1 = formatLocale(definition2);
    timeFormat$2 = locale$1.format;
    timeParse$1 = locale$1.parse;
    utcFormat$1 = locale$1.utcFormat;
    utcParse$1 = locale$1.utcParse;
    return locale$1;
  }
  function memoize(method2) {
    const cache2 = {};
    return (spec) => cache2[spec] || (cache2[spec] = method2(spec));
  }
  function trimZeroes(numberFormat2, decimalChar) {
    return (x2) => {
      const str = numberFormat2(x2), dec = str.indexOf(decimalChar);
      if (dec < 0) return str;
      let idx = rightmostDigit(str, dec);
      const end = idx < str.length ? str.slice(idx) : "";
      while (--idx > dec) if (str[idx] !== "0") {
        ++idx;
        break;
      }
      return str.slice(0, idx) + end;
    };
  }
  function rightmostDigit(str, dec) {
    let i = str.lastIndexOf("e"), c2;
    if (i > 0) return i;
    for (i = str.length; --i > dec; ) {
      c2 = str.charCodeAt(i);
      if (c2 >= 48 && c2 <= 57) return i + 1;
    }
  }
  function numberLocale(locale2) {
    const format2 = memoize(locale2.format), formatPrefix2 = locale2.formatPrefix;
    return {
      format: format2,
      formatPrefix: formatPrefix2,
      formatFloat(spec) {
        const s = formatSpecifier(spec || ",");
        if (s.precision == null) {
          s.precision = 12;
          switch (s.type) {
            case "%":
              s.precision -= 2;
              break;
            case "e":
              s.precision -= 1;
              break;
          }
          return trimZeroes(
            format2(s),
            // number format
            format2(".1f")(1)[1]
            // decimal point character
          );
        } else {
          return format2(s);
        }
      },
      formatSpan(start, stop2, count2, specifier) {
        specifier = formatSpecifier(specifier == null ? ",f" : specifier);
        const step = tickStep(start, stop2, count2), value2 = Math.max(Math.abs(start), Math.abs(stop2));
        let precision;
        if (specifier.precision == null) {
          switch (specifier.type) {
            case "s": {
              if (!isNaN(precision = precisionPrefix(step, value2))) {
                specifier.precision = precision;
              }
              return formatPrefix2(specifier, value2);
            }
            case "":
            case "e":
            case "g":
            case "p":
            case "r": {
              if (!isNaN(precision = precisionRound(step, value2))) {
                specifier.precision = precision - (specifier.type === "e");
              }
              break;
            }
            case "f":
            case "%": {
              if (!isNaN(precision = precisionFixed(step))) {
                specifier.precision = precision - (specifier.type === "%") * 2;
              }
              break;
            }
          }
        }
        return format2(specifier);
      }
    };
  }
  let defaultNumberLocale;
  resetNumberFormatDefaultLocale();
  function resetNumberFormatDefaultLocale() {
    return defaultNumberLocale = numberLocale({
      format: format$3,
      formatPrefix
    });
  }
  function numberFormatLocale(definition2) {
    return numberLocale(formatLocale$1(definition2));
  }
  function numberFormatDefaultLocale(definition2) {
    return arguments.length ? defaultNumberLocale = numberFormatLocale(definition2) : defaultNumberLocale;
  }
  function timeMultiFormat(format2, interval2, spec) {
    spec = spec || {};
    if (!isObject(spec)) {
      error$1(`Invalid time multi-format specifier: ${spec}`);
    }
    const second2 = interval2(SECONDS), minute = interval2(MINUTES), hour = interval2(HOURS), day = interval2(DATE), week2 = interval2(WEEK), month = interval2(MONTH), quarter2 = interval2(QUARTER), year = interval2(YEAR), L = format2(spec[MILLISECONDS] || ".%L"), S = format2(spec[SECONDS] || ":%S"), M2 = format2(spec[MINUTES] || "%I:%M"), H = format2(spec[HOURS] || "%I %p"), d = format2(spec[DATE] || spec[DAY] || "%a %d"), w2 = format2(spec[WEEK] || "%b %d"), m2 = format2(spec[MONTH] || "%B"), q = format2(spec[QUARTER] || "%B"), y2 = format2(spec[YEAR] || "%Y");
    return (date2) => (second2(date2) < date2 ? L : minute(date2) < date2 ? S : hour(date2) < date2 ? M2 : day(date2) < date2 ? H : month(date2) < date2 ? week2(date2) < date2 ? d : w2 : year(date2) < date2 ? quarter2(date2) < date2 ? m2 : q : y2)(date2);
  }
  function timeLocale(locale2) {
    const timeFormat2 = memoize(locale2.format), utcFormat2 = memoize(locale2.utcFormat);
    return {
      timeFormat: (spec) => isString(spec) ? timeFormat2(spec) : timeMultiFormat(timeFormat2, timeInterval, spec),
      utcFormat: (spec) => isString(spec) ? utcFormat2(spec) : timeMultiFormat(utcFormat2, utcInterval, spec),
      timeParse: memoize(locale2.parse),
      utcParse: memoize(locale2.utcParse)
    };
  }
  let defaultTimeLocale;
  resetTimeFormatDefaultLocale();
  function resetTimeFormatDefaultLocale() {
    return defaultTimeLocale = timeLocale({
      format: timeFormat$2,
      parse: timeParse$1,
      utcFormat: utcFormat$1,
      utcParse: utcParse$1
    });
  }
  function timeFormatLocale(definition2) {
    return timeLocale(formatLocale(definition2));
  }
  function timeFormatDefaultLocale(definition2) {
    return arguments.length ? defaultTimeLocale = timeFormatLocale(definition2) : defaultTimeLocale;
  }
  const createLocale = (number2, time2) => extend$1({}, number2, time2);
  function locale(numberSpec, timeSpec) {
    const number2 = numberSpec ? numberFormatLocale(numberSpec) : numberFormatDefaultLocale();
    const time2 = timeSpec ? timeFormatLocale(timeSpec) : timeFormatDefaultLocale();
    return createLocale(number2, time2);
  }
  function defaultLocale(numberSpec, timeSpec) {
    const args = arguments.length;
    if (args && args !== 2) {
      error$1("defaultLocale expects either zero or two arguments.");
    }
    return args ? createLocale(numberFormatDefaultLocale(numberSpec), timeFormatDefaultLocale(timeSpec)) : createLocale(numberFormatDefaultLocale(), timeFormatDefaultLocale());
  }
  function resetDefaultLocale() {
    resetNumberFormatDefaultLocale();
    resetTimeFormatDefaultLocale();
    return defaultLocale();
  }
  const protocol_re = /^(data:|([A-Za-z]+:)?\/\/)/;
  const allowed_re = /^(?:(?:(?:f|ht)tps?|mailto|tel|callto|cid|xmpp|file|data):|[^a-z]|[a-z+.\-]+(?:[^a-z+.\-:]|$))/i;
  const whitespace_re = /[\u0000-\u0020\u00A0\u1680\u180E\u2000-\u2029\u205f\u3000]/g;
  const fileProtocol = "file://";
  function loaderFactory(fetch2, fs) {
    return (options) => ({
      options: options || {},
      sanitize,
      load: load$1,
      fileAccess: false,
      file: fileLoader(fs),
      http: httpLoader(fetch2)
    });
  }
  async function load$1(uri, options) {
    const opt = await this.sanitize(uri, options), url = opt.href;
    return opt.localFile ? this.file(url) : this.http(url, options);
  }
  async function sanitize(uri, options) {
    options = extend$1({}, this.options, options);
    const fileAccess = this.fileAccess, result = {
      href: null
    };
    let isFile, loadFile, base;
    const isAllowed = allowed_re.test(uri.replace(whitespace_re, ""));
    if (uri == null || typeof uri !== "string" || !isAllowed) {
      error$1("Sanitize failure, invalid URI: " + $(uri));
    }
    const hasProtocol = protocol_re.test(uri);
    if ((base = options.baseURL) && !hasProtocol) {
      if (!uri.startsWith("/") && !base.endsWith("/")) {
        uri = "/" + uri;
      }
      uri = base + uri;
    }
    loadFile = (isFile = uri.startsWith(fileProtocol)) || options.mode === "file" || options.mode !== "http" && !hasProtocol && fileAccess;
    if (isFile) {
      uri = uri.slice(fileProtocol.length);
    } else if (uri.startsWith("//")) {
      if (options.defaultProtocol === "file") {
        uri = uri.slice(2);
        loadFile = true;
      } else {
        uri = (options.defaultProtocol || "http") + ":" + uri;
      }
    }
    Object.defineProperty(result, "localFile", {
      value: !!loadFile
    });
    result.href = uri;
    if (options.target) {
      result.target = options.target + "";
    }
    if (options.rel) {
      result.rel = options.rel + "";
    }
    if (options.context === "image" && options.crossOrigin) {
      result.crossOrigin = options.crossOrigin + "";
    }
    return result;
  }
  function fileLoader(fs) {
    return fs ? (filename) => new Promise((accept, reject) => {
      fs.readFile(filename, (error2, data2) => {
        if (error2) reject(error2);
        else accept(data2);
      });
    }) : fileReject;
  }
  async function fileReject() {
    error$1("No file system access.");
  }
  function httpLoader(fetch2) {
    return fetch2 ? async function(url, options) {
      const opt = extend$1({}, this.options.http, options), type2 = options && options.response, response = await fetch2(url, opt);
      return !response.ok ? error$1(response.status + "" + response.statusText) : isFunction(response[type2]) ? response[type2]() : response.text();
    } : httpReject;
  }
  async function httpReject() {
    error$1("No HTTP fetch method available.");
  }
  const isValid = (_) => _ != null && _ === _;
  const isBoolean$1 = (_) => _ === "true" || _ === "false" || _ === true || _ === false;
  const isDate = (_) => !Number.isNaN(Date.parse(_));
  const isNumber = (_) => !Number.isNaN(+_) && !(_ instanceof Date);
  const isInteger$1 = (_) => isNumber(_) && Number.isInteger(+_);
  const typeParsers = {
    boolean: toBoolean,
    integer: toNumber,
    number: toNumber,
    date: toDate,
    string: toString,
    unknown: identity$6
  };
  const typeTests = [isBoolean$1, isInteger$1, isNumber, isDate];
  const typeList = ["boolean", "integer", "number", "date"];
  function inferType(values2, field2) {
    if (!values2 || !values2.length) return "unknown";
    const n = values2.length, m2 = typeTests.length, a2 = typeTests.map((_, i) => i + 1);
    for (let i = 0, t = 0, j, value2; i < n; ++i) {
      value2 = field2 ? values2[i][field2] : values2[i];
      for (j = 0; j < m2; ++j) {
        if (a2[j] && isValid(value2) && !typeTests[j](value2)) {
          a2[j] = 0;
          ++t;
          if (t === typeTests.length) return "string";
        }
      }
    }
    return typeList[a2.reduce((u2, v) => u2 === 0 ? v : u2, 0) - 1];
  }
  function inferTypes(data2, fields) {
    return fields.reduce((types, field2) => {
      types[field2] = inferType(data2, field2);
      return types;
    }, {});
  }
  function delimitedFormat(delimiter) {
    const parse2 = function(data2, format2) {
      const delim = {
        delimiter
      };
      return dsv(data2, format2 ? extend$1(format2, delim) : delim);
    };
    parse2.responseType = "text";
    return parse2;
  }
  function dsv(data2, format2) {
    if (format2.header) {
      data2 = format2.header.map($).join(format2.delimiter) + "\n" + data2;
    }
    return dsvFormat(format2.delimiter).parse(data2 + "");
  }
  dsv.responseType = "text";
  function isBuffer(_) {
    return typeof Buffer === "function" && isFunction(Buffer.isBuffer) ? Buffer.isBuffer(_) : false;
  }
  function json(data2, format2) {
    const prop = format2 && format2.property ? field$1(format2.property) : identity$6;
    return isObject(data2) && !isBuffer(data2) ? parseJSON(prop(data2), format2) : prop(JSON.parse(data2));
  }
  json.responseType = "json";
  function parseJSON(data2, format2) {
    if (!isArray(data2) && isIterable(data2)) {
      data2 = [...data2];
    }
    return format2 && format2.copy ? JSON.parse(JSON.stringify(data2)) : data2;
  }
  const filters = {
    interior: (a2, b2) => a2 !== b2,
    exterior: (a2, b2) => a2 === b2
  };
  function topojson(data2, format2) {
    let method2, object2, property2, filter2;
    data2 = json(data2, format2);
    if (format2 && format2.feature) {
      method2 = feature;
      property2 = format2.feature;
    } else if (format2 && format2.mesh) {
      method2 = mesh;
      property2 = format2.mesh;
      filter2 = filters[format2.filter];
    } else {
      error$1("Missing TopoJSON feature or mesh parameter.");
    }
    object2 = (object2 = data2.objects[property2]) ? method2(data2, object2, filter2) : error$1("Invalid TopoJSON object: " + property2);
    return object2 && object2.features || [object2];
  }
  topojson.responseType = "json";
  const format$2 = {
    dsv,
    csv: delimitedFormat(","),
    tsv: delimitedFormat("	"),
    json,
    topojson
  };
  function formats$1(name, reader) {
    if (arguments.length > 1) {
      format$2[name] = reader;
      return this;
    } else {
      return has$1(format$2, name) ? format$2[name] : null;
    }
  }
  function responseType(type2) {
    const f = formats$1(type2);
    return f && f.responseType || "text";
  }
  function read(data2, schema, timeParser, utcParser) {
    schema = schema || {};
    const reader = formats$1(schema.type || "json");
    if (!reader) error$1("Unknown data format type: " + schema.type);
    data2 = reader(data2, schema);
    if (schema.parse) parse$6(data2, schema.parse, timeParser, utcParser);
    if (has$1(data2, "columns")) delete data2.columns;
    return data2;
  }
  function parse$6(data2, types, timeParser, utcParser) {
    if (!data2.length) return;
    const locale2 = timeFormatDefaultLocale();
    timeParser = timeParser || locale2.timeParse;
    utcParser = utcParser || locale2.utcParse;
    let fields = data2.columns || Object.keys(data2[0]), datum2, field2, i, j, n, m2;
    if (types === "auto") types = inferTypes(data2, fields);
    fields = Object.keys(types);
    const parsers = fields.map((field3) => {
      const type2 = types[field3];
      let parts, pattern;
      if (type2 && (type2.startsWith("date:") || type2.startsWith("utc:"))) {
        parts = type2.split(/:(.+)?/, 2);
        pattern = parts[1];
        if (pattern[0] === "'" && pattern[pattern.length - 1] === "'" || pattern[0] === '"' && pattern[pattern.length - 1] === '"') {
          pattern = pattern.slice(1, -1);
        }
        const parse2 = parts[0] === "utc" ? utcParser : timeParser;
        return parse2(pattern);
      }
      if (!typeParsers[type2]) {
        throw Error("Illegal format pattern: " + field3 + ":" + type2);
      }
      return typeParsers[type2];
    });
    for (i = 0, n = data2.length, m2 = fields.length; i < n; ++i) {
      datum2 = data2[i];
      for (j = 0; j < m2; ++j) {
        field2 = fields[j];
        datum2[field2] = parsers[j](datum2[field2]);
      }
    }
  }
  const loader = loaderFactory(
    typeof fetch !== "undefined" && fetch,
    // use built-in fetch API
    null
    // no file system access
  );
  function UniqueList(idFunc) {
    const $2 = idFunc || identity$6, list = [], ids = {};
    list.add = (_) => {
      const id2 = $2(_);
      if (!ids[id2]) {
        ids[id2] = 1;
        list.push(_);
      }
      return list;
    };
    list.remove = (_) => {
      const id2 = $2(_);
      if (ids[id2]) {
        ids[id2] = 0;
        const idx = list.indexOf(_);
        if (idx >= 0) list.splice(idx, 1);
      }
      return list;
    };
    return list;
  }
  async function asyncCallback(df, callback) {
    try {
      await callback(df);
    } catch (err) {
      df.error(err);
    }
  }
  const TUPLE_ID_KEY = Symbol("vega_id");
  let TUPLE_ID = 1;
  function isTuple(t) {
    return !!(t && tupleid(t));
  }
  function tupleid(t) {
    return t[TUPLE_ID_KEY];
  }
  function setid(t, id2) {
    t[TUPLE_ID_KEY] = id2;
    return t;
  }
  function ingest$1(datum2) {
    const t = datum2 === Object(datum2) ? datum2 : {
      data: datum2
    };
    return tupleid(t) ? t : setid(t, TUPLE_ID++);
  }
  function derive(t) {
    return rederive(t, ingest$1({}));
  }
  function rederive(t, d) {
    for (const k in t) d[k] = t[k];
    return d;
  }
  function replace$1(t, d) {
    return setid(d, tupleid(t));
  }
  function stableCompare(cmp, f) {
    return !cmp ? null : f ? (a2, b2) => cmp(a2, b2) || tupleid(f(a2)) - tupleid(f(b2)) : (a2, b2) => cmp(a2, b2) || tupleid(a2) - tupleid(b2);
  }
  function isChangeSet(v) {
    return v && v.constructor === changeset;
  }
  function changeset() {
    const add2 = [], rem2 = [], mod = [], remp = [], modp = [];
    let clean = null, reflow2 = false;
    return {
      constructor: changeset,
      insert(t) {
        const d = array$5(t), n = d.length;
        for (let i = 0; i < n; ++i) add2.push(d[i]);
        return this;
      },
      remove(t) {
        const a2 = isFunction(t) ? remp : rem2, d = array$5(t), n = d.length;
        for (let i = 0; i < n; ++i) a2.push(d[i]);
        return this;
      },
      modify(t, field2, value2) {
        const m2 = {
          field: field2,
          value: constant$5(value2)
        };
        if (isFunction(t)) {
          m2.filter = t;
          modp.push(m2);
        } else {
          m2.tuple = t;
          mod.push(m2);
        }
        return this;
      },
      encode(t, set2) {
        if (isFunction(t)) modp.push({
          filter: t,
          field: set2
        });
        else mod.push({
          tuple: t,
          field: set2
        });
        return this;
      },
      clean(value2) {
        clean = value2;
        return this;
      },
      reflow() {
        reflow2 = true;
        return this;
      },
      pulse(pulse2, tuples) {
        const cur = {}, out = {};
        let i, n, m2, f, t, id2;
        for (i = 0, n = tuples.length; i < n; ++i) {
          cur[tupleid(tuples[i])] = 1;
        }
        for (i = 0, n = rem2.length; i < n; ++i) {
          t = rem2[i];
          cur[tupleid(t)] = -1;
        }
        for (i = 0, n = remp.length; i < n; ++i) {
          f = remp[i];
          tuples.forEach((t4) => {
            if (f(t4)) cur[tupleid(t4)] = -1;
          });
        }
        for (i = 0, n = add2.length; i < n; ++i) {
          t = add2[i];
          id2 = tupleid(t);
          if (cur[id2]) {
            cur[id2] = 1;
          } else {
            pulse2.add.push(ingest$1(add2[i]));
          }
        }
        for (i = 0, n = tuples.length; i < n; ++i) {
          t = tuples[i];
          if (cur[tupleid(t)] < 0) pulse2.rem.push(t);
        }
        function modify2(t4, f2, v) {
          if (v) {
            t4[f2] = v(t4);
          } else {
            pulse2.encode = f2;
          }
          if (!reflow2) out[tupleid(t4)] = t4;
        }
        for (i = 0, n = mod.length; i < n; ++i) {
          m2 = mod[i];
          t = m2.tuple;
          f = m2.field;
          id2 = cur[tupleid(t)];
          if (id2 > 0) {
            modify2(t, f, m2.value);
            pulse2.modifies(f);
          }
        }
        for (i = 0, n = modp.length; i < n; ++i) {
          m2 = modp[i];
          f = m2.filter;
          tuples.forEach((t4) => {
            if (f(t4) && cur[tupleid(t4)] > 0) {
              modify2(t4, m2.field, m2.value);
            }
          });
          pulse2.modifies(m2.field);
        }
        if (reflow2) {
          pulse2.mod = rem2.length || remp.length ? tuples.filter((t4) => cur[tupleid(t4)] > 0) : tuples.slice();
        } else {
          for (id2 in out) pulse2.mod.push(out[id2]);
        }
        if (clean || clean == null && (rem2.length || remp.length)) {
          pulse2.clean(true);
        }
        return pulse2;
      }
    };
  }
  const CACHE = "_:mod:_";
  function Parameters() {
    Object.defineProperty(this, CACHE, {
      writable: true,
      value: {}
    });
  }
  Parameters.prototype = {
    /**
     * Set a parameter value. If the parameter value changes, the parameter
     * will be recorded as modified.
     * @param {string} name - The parameter name.
     * @param {number} index - The index into an array-value parameter. Ignored if
     *   the argument is undefined, null or less than zero.
     * @param {*} value - The parameter value to set.
     * @param {boolean} [force=false] - If true, records the parameter as modified
     *   even if the value is unchanged.
     * @return {Parameters} - This parameter object.
     */
    set(name, index2, value2, force2) {
      const o = this, v = o[name], mod = o[CACHE];
      if (index2 != null && index2 >= 0) {
        if (v[index2] !== value2 || force2) {
          v[index2] = value2;
          mod[index2 + ":" + name] = -1;
          mod[name] = -1;
        }
      } else if (v !== value2 || force2) {
        o[name] = value2;
        mod[name] = isArray(value2) ? 1 + value2.length : -1;
      }
      return o;
    },
    /**
     * Tests if one or more parameters has been modified. If invoked with no
     * arguments, returns true if any parameter value has changed. If the first
     * argument is array, returns trues if any parameter name in the array has
     * changed. Otherwise, tests if the given name and optional array index has
     * changed.
     * @param {string} name - The parameter name to test.
     * @param {number} [index=undefined] - The parameter array index to test.
     * @return {boolean} - Returns true if a queried parameter was modified.
     */
    modified(name, index2) {
      const mod = this[CACHE];
      if (!arguments.length) {
        for (const k in mod) {
          if (mod[k]) return true;
        }
        return false;
      } else if (isArray(name)) {
        for (let k = 0; k < name.length; ++k) {
          if (mod[name[k]]) return true;
        }
        return false;
      }
      return index2 != null && index2 >= 0 ? index2 + 1 < mod[name] || !!mod[index2 + ":" + name] : !!mod[name];
    },
    /**
     * Clears the modification records. After calling this method,
     * all parameters are considered unmodified.
     */
    clear() {
      this[CACHE] = {};
      return this;
    }
  };
  let OP_ID = 0;
  const PULSE = "pulse", NO_PARAMS = new Parameters();
  const SKIP$1$1 = 1, MODIFIED = 2;
  function Operator(init2, update2, params2, react) {
    this.id = ++OP_ID;
    this.value = init2;
    this.stamp = -1;
    this.rank = -1;
    this.qrank = -1;
    this.flags = 0;
    if (update2) {
      this._update = update2;
    }
    if (params2) this.parameters(params2, react);
  }
  function flag(bit) {
    return function(state) {
      const f = this.flags;
      if (arguments.length === 0) return !!(f & bit);
      this.flags = state ? f | bit : f & ~bit;
      return this;
    };
  }
  Operator.prototype = {
    /**
     * Returns a list of target operators dependent on this operator.
     * If this list does not exist, it is created and then returned.
     * @return {UniqueList}
     */
    targets() {
      return this._targets || (this._targets = UniqueList(id));
    },
    /**
     * Sets the value of this operator.
     * @param {*} value - the value to set.
     * @return {Number} Returns 1 if the operator value has changed
     *   according to strict equality, returns 0 otherwise.
     */
    set(value2) {
      if (this.value !== value2) {
        this.value = value2;
        return 1;
      } else {
        return 0;
      }
    },
    /**
     * Indicates that operator evaluation should be skipped on the next pulse.
     * This operator will still propagate incoming pulses, but its update function
     * will not be invoked. The skip flag is reset after every pulse, so calling
     * this method will affect processing of the next pulse only.
     */
    skip: flag(SKIP$1$1),
    /**
     * Indicates that this operator's value has been modified on its most recent
     * pulse. Normally modification is checked via strict equality; however, in
     * some cases it is more efficient to update the internal state of an object.
     * In those cases, the modified flag can be used to trigger propagation. Once
     * set, the modification flag persists across pulses until unset. The flag can
     * be used with the last timestamp to test if a modification is recent.
     */
    modified: flag(MODIFIED),
    /**
     * Sets the parameters for this operator. The parameter values are analyzed for
     * operator instances. If found, this operator will be added as a dependency
     * of the parameterizing operator. Operator values are dynamically marshalled
     * from each operator parameter prior to evaluation. If a parameter value is
     * an array, the array will also be searched for Operator instances. However,
     * the search does not recurse into sub-arrays or object properties.
     * @param {object} params - A hash of operator parameters.
     * @param {boolean} [react=true] - A flag indicating if this operator should
     *   automatically update (react) when parameter values change. In other words,
     *   this flag determines if the operator registers itself as a listener on
     *   any upstream operators included in the parameters.
     * @param {boolean} [initonly=false] - A flag indicating if this operator
     *   should calculate an update only upon its initial evaluation, then
     *   deregister dependencies and suppress all future update invocations.
     * @return {Operator[]} - An array of upstream dependencies.
     */
    parameters(params2, react, initonly) {
      react = react !== false;
      const argval = this._argval = this._argval || new Parameters(), argops = this._argops = this._argops || [], deps = [];
      let name, value2, n, i;
      const add2 = (name2, index2, value3) => {
        if (value3 instanceof Operator) {
          if (value3 !== this) {
            if (react) value3.targets().add(this);
            deps.push(value3);
          }
          argops.push({
            op: value3,
            name: name2,
            index: index2
          });
        } else {
          argval.set(name2, index2, value3);
        }
      };
      for (name in params2) {
        value2 = params2[name];
        if (name === PULSE) {
          array$5(value2).forEach((op) => {
            if (!(op instanceof Operator)) {
              error$1("Pulse parameters must be operator instances.");
            } else if (op !== this) {
              op.targets().add(this);
              deps.push(op);
            }
          });
          this.source = value2;
        } else if (isArray(value2)) {
          argval.set(name, -1, Array(n = value2.length));
          for (i = 0; i < n; ++i) add2(name, i, value2[i]);
        } else {
          add2(name, -1, value2);
        }
      }
      this.marshall().clear();
      if (initonly) argops.initonly = true;
      return deps;
    },
    /**
     * Internal method for marshalling parameter values.
     * Visits each operator dependency to pull the latest value.
     * @return {Parameters} A Parameters object to pass to the update function.
     */
    marshall(stamp) {
      const argval = this._argval || NO_PARAMS, argops = this._argops;
      let item, i, op, mod;
      if (argops) {
        const n = argops.length;
        for (i = 0; i < n; ++i) {
          item = argops[i];
          op = item.op;
          mod = op.modified() && op.stamp === stamp;
          argval.set(item.name, item.index, op.value, mod);
        }
        if (argops.initonly) {
          for (i = 0; i < n; ++i) {
            item = argops[i];
            item.op.targets().remove(this);
          }
          this._argops = null;
          this._update = null;
        }
      }
      return argval;
    },
    /**
     * Detach this operator from the dataflow.
     * Unregisters listeners on upstream dependencies.
     */
    detach() {
      const argops = this._argops;
      let i, n, item, op;
      if (argops) {
        for (i = 0, n = argops.length; i < n; ++i) {
          item = argops[i];
          op = item.op;
          if (op._targets) {
            op._targets.remove(this);
          }
        }
      }
      this.pulse = null;
      this.source = null;
    },
    /**
     * Delegate method to perform operator processing.
     * Subclasses can override this method to perform custom processing.
     * By default, it marshalls parameters and calls the update function
     * if that function is defined. If the update function does not
     * change the operator value then StopPropagation is returned.
     * If no update function is defined, this method does nothing.
     * @param {Pulse} pulse - the current dataflow pulse.
     * @return The output pulse or StopPropagation. A falsy return value
     *   (including undefined) will let the input pulse pass through.
     */
    evaluate(pulse2) {
      const update2 = this._update;
      if (update2) {
        const params2 = this.marshall(pulse2.stamp), v = update2.call(this, params2, pulse2);
        params2.clear();
        if (v !== this.value) {
          this.value = v;
        } else if (!this.modified()) {
          return pulse2.StopPropagation;
        }
      }
    },
    /**
     * Run this operator for the current pulse. If this operator has already
     * been run at (or after) the pulse timestamp, returns StopPropagation.
     * Internally, this method calls {@link evaluate} to perform processing.
     * If {@link evaluate} returns a falsy value, the input pulse is returned.
     * This method should NOT be overridden, instead overrride {@link evaluate}.
     * @param {Pulse} pulse - the current dataflow pulse.
     * @return the output pulse for this operator (or StopPropagation)
     */
    run(pulse2) {
      if (pulse2.stamp < this.stamp) return pulse2.StopPropagation;
      let rv;
      if (this.skip()) {
        this.skip(false);
        rv = 0;
      } else {
        rv = this.evaluate(pulse2);
      }
      return this.pulse = rv || pulse2;
    }
  };
  function add$4(init2, update2, params2, react) {
    let shift = 1, op;
    if (init2 instanceof Operator) {
      op = init2;
    } else if (init2 && init2.prototype instanceof Operator) {
      op = new init2();
    } else if (isFunction(init2)) {
      op = new Operator(null, init2);
    } else {
      shift = 0;
      op = new Operator(init2, update2);
    }
    this.rank(op);
    if (shift) {
      react = params2;
      params2 = update2;
    }
    if (params2) this.connect(op, op.parameters(params2, react));
    this.touch(op);
    return op;
  }
  function connect(target2, sources) {
    const targetRank = target2.rank, n = sources.length;
    for (let i = 0; i < n; ++i) {
      if (targetRank < sources[i].rank) {
        this.rerank(target2);
        return;
      }
    }
  }
  let STREAM_ID = 0;
  function EventStream(filter2, apply2, receive) {
    this.id = ++STREAM_ID;
    this.value = null;
    if (receive) this.receive = receive;
    if (filter2) this._filter = filter2;
    if (apply2) this._apply = apply2;
  }
  function stream(filter2, apply2, receive) {
    return new EventStream(filter2, apply2, receive);
  }
  EventStream.prototype = {
    _filter: truthy,
    _apply: identity$6,
    targets() {
      return this._targets || (this._targets = UniqueList(id));
    },
    consume(_) {
      if (!arguments.length) return !!this._consume;
      this._consume = !!_;
      return this;
    },
    receive(evt) {
      if (this._filter(evt)) {
        const val = this.value = this._apply(evt), trg = this._targets, n = trg ? trg.length : 0;
        for (let i = 0; i < n; ++i) trg[i].receive(val);
        if (this._consume) {
          evt.preventDefault();
          evt.stopPropagation();
        }
      }
    },
    filter(filter2) {
      const s = stream(filter2);
      this.targets().add(s);
      return s;
    },
    apply(apply2) {
      const s = stream(null, apply2);
      this.targets().add(s);
      return s;
    },
    merge() {
      const s = stream();
      this.targets().add(s);
      for (let i = 0, n = arguments.length; i < n; ++i) {
        arguments[i].targets().add(s);
      }
      return s;
    },
    throttle(pause) {
      let t = -1;
      return this.filter(() => {
        const now2 = Date.now();
        if (now2 - t > pause) {
          t = now2;
          return 1;
        } else {
          return 0;
        }
      });
    },
    debounce(delay) {
      const s = stream();
      this.targets().add(stream(null, null, debounce(delay, (e3) => {
        const df = e3.dataflow;
        s.receive(e3);
        if (df && df.run) df.run();
      })));
      return s;
    },
    between(a2, b2) {
      let active = false;
      a2.targets().add(stream(null, null, () => active = true));
      b2.targets().add(stream(null, null, () => active = false));
      return this.filter(() => active);
    },
    detach() {
      this._filter = truthy;
      this._targets = null;
    }
  };
  function events$1(source2, type2, filter2, apply2) {
    const df = this, s = stream(filter2, apply2), send2 = function(e3) {
      e3.dataflow = df;
      try {
        s.receive(e3);
      } catch (error2) {
        df.error(error2);
      } finally {
        df.run();
      }
    };
    let sources;
    if (typeof source2 === "string" && typeof document !== "undefined") {
      sources = document.querySelectorAll(source2);
    } else {
      sources = array$5(source2);
    }
    const n = sources.length;
    for (let i = 0; i < n; ++i) {
      sources[i].addEventListener(type2, send2);
    }
    return s;
  }
  function parse$5(data2, format2) {
    const locale2 = this.locale();
    return read(data2, format2, locale2.timeParse, locale2.utcParse);
  }
  function ingest(target2, data2, format2) {
    data2 = this.parse(data2, format2);
    return this.pulse(target2, this.changeset().insert(data2));
  }
  async function request(url, format2) {
    const df = this;
    let status = 0, data2;
    try {
      data2 = await df.loader().load(url, {
        context: "dataflow",
        response: responseType(format2 && format2.type)
      });
      try {
        data2 = df.parse(data2, format2);
      } catch (err) {
        status = -2;
        df.warn("Data ingestion failed", url, err);
      }
    } catch (err) {
      status = -1;
      df.warn("Loading failed", url, err);
    }
    return {
      data: data2,
      status
    };
  }
  async function preload(target2, url, format2) {
    const df = this, pending = df._pending || loadPending(df);
    pending.requests += 1;
    const res = await df.request(url, format2);
    df.pulse(target2, df.changeset().remove(truthy).insert(res.data || []));
    pending.done();
    return res;
  }
  function loadPending(df) {
    let accept;
    const pending = new Promise((a2) => accept = a2);
    pending.requests = 0;
    pending.done = () => {
      if (--pending.requests === 0) {
        df._pending = null;
        accept(df);
      }
    };
    return df._pending = pending;
  }
  const SKIP$2 = {
    skip: true
  };
  function on(source2, target2, update2, params2, options) {
    const fn = source2 instanceof Operator ? onOperator : onStream;
    fn(this, source2, target2, update2, params2, options);
    return this;
  }
  function onStream(df, stream2, target2, update2, params2, options) {
    const opt = extend$1({}, options, SKIP$2);
    let func, op;
    if (!isFunction(target2)) target2 = constant$5(target2);
    if (update2 === void 0) {
      func = (e3) => df.touch(target2(e3));
    } else if (isFunction(update2)) {
      op = new Operator(null, update2, params2, false);
      func = (e3) => {
        op.evaluate(e3);
        const t = target2(e3), v = op.value;
        isChangeSet(v) ? df.pulse(t, v, options) : df.update(t, v, opt);
      };
    } else {
      func = (e3) => df.update(target2(e3), update2, opt);
    }
    stream2.apply(func);
  }
  function onOperator(df, source2, target2, update2, params2, options) {
    if (update2 === void 0) {
      source2.targets().add(target2);
    } else {
      const opt = options || {}, op = new Operator(null, updater(target2, update2), params2, false);
      op.modified(opt.force);
      op.rank = source2.rank;
      source2.targets().add(op);
      if (target2) {
        op.skip(true);
        op.value = target2.value;
        op.targets().add(target2);
        df.connect(target2, [op]);
      }
    }
  }
  function updater(target2, update2) {
    update2 = isFunction(update2) ? update2 : constant$5(update2);
    return target2 ? function(_, pulse2) {
      const value2 = update2(_, pulse2);
      if (!target2.skip()) {
        target2.skip(value2 !== this.value).value = value2;
      }
      return value2;
    } : update2;
  }
  function rank(op) {
    op.rank = ++this._rank;
  }
  function rerank(op) {
    const queue = [op];
    let cur, list, i;
    while (queue.length) {
      this.rank(cur = queue.pop());
      if (list = cur._targets) {
        for (i = list.length; --i >= 0; ) {
          queue.push(cur = list[i]);
          if (cur === op) error$1("Cycle detected in dataflow graph.");
        }
      }
    }
  }
  const StopPropagation = {};
  const ADD = 1 << 0, REM = 1 << 1, MOD$1 = 1 << 2, ADD_REM = ADD | REM, ADD_MOD = ADD | MOD$1, ALL = ADD | REM | MOD$1, REFLOW = 1 << 3, SOURCE = 1 << 4, NO_SOURCE = 1 << 5, NO_FIELDS = 1 << 6;
  function Pulse(dataflow, stamp, encode2) {
    this.dataflow = dataflow;
    this.stamp = stamp == null ? -1 : stamp;
    this.add = [];
    this.rem = [];
    this.mod = [];
    this.fields = null;
    this.encode = encode2 || null;
  }
  function materialize(data2, filter2) {
    const out = [];
    visitArray(data2, filter2, (_) => out.push(_));
    return out;
  }
  function filter$1(pulse2, flags) {
    const map2 = {};
    pulse2.visit(flags, (t) => {
      map2[tupleid(t)] = 1;
    });
    return (t) => map2[tupleid(t)] ? null : t;
  }
  function addFilter(a2, b2) {
    return a2 ? (t, i) => a2(t, i) && b2(t, i) : b2;
  }
  Pulse.prototype = {
    /**
     * Sentinel value indicating pulse propagation should stop.
     */
    StopPropagation,
    /**
     * Boolean flag indicating ADD (added) tuples.
     */
    ADD,
    /**
     * Boolean flag indicating REM (removed) tuples.
     */
    REM,
    /**
     * Boolean flag indicating MOD (modified) tuples.
     */
    MOD: MOD$1,
    /**
     * Boolean flag indicating ADD (added) and REM (removed) tuples.
     */
    ADD_REM,
    /**
     * Boolean flag indicating ADD (added) and MOD (modified) tuples.
     */
    ADD_MOD,
    /**
     * Boolean flag indicating ADD, REM and MOD tuples.
     */
    ALL,
    /**
     * Boolean flag indicating all tuples in a data source
     * except for the ADD, REM and MOD tuples.
     */
    REFLOW,
    /**
     * Boolean flag indicating a 'pass-through' to a
     * backing data source, ignoring ADD, REM and MOD tuples.
     */
    SOURCE,
    /**
     * Boolean flag indicating that source data should be
     * suppressed when creating a forked pulse.
     */
    NO_SOURCE,
    /**
     * Boolean flag indicating that field modifications should be
     * suppressed when creating a forked pulse.
     */
    NO_FIELDS,
    /**
     * Creates a new pulse based on the values of this pulse.
     * The dataflow, time stamp and field modification values are copied over.
     * By default, new empty ADD, REM and MOD arrays are created.
     * @param {number} flags - Integer of boolean flags indicating which (if any)
     *   tuple arrays should be copied to the new pulse. The supported flag values
     *   are ADD, REM and MOD. Array references are copied directly: new array
     *   instances are not created.
     * @return {Pulse} - The forked pulse instance.
     * @see init
     */
    fork(flags) {
      return new Pulse(this.dataflow).init(this, flags);
    },
    /**
     * Creates a copy of this pulse with new materialized array
     * instances for the ADD, REM, MOD, and SOURCE arrays.
     * The dataflow, time stamp and field modification values are copied over.
     * @return {Pulse} - The cloned pulse instance.
     * @see init
     */
    clone() {
      const p = this.fork(ALL);
      p.add = p.add.slice();
      p.rem = p.rem.slice();
      p.mod = p.mod.slice();
      if (p.source) p.source = p.source.slice();
      return p.materialize(ALL | SOURCE);
    },
    /**
     * Returns a pulse that adds all tuples from a backing source. This is
     * useful for cases where operators are added to a dataflow after an
     * upstream data pipeline has already been processed, ensuring that
     * new operators can observe all tuples within a stream.
     * @return {Pulse} - A pulse instance with all source tuples included
     *   in the add array. If the current pulse already has all source
     *   tuples in its add array, it is returned directly. If the current
     *   pulse does not have a backing source, it is returned directly.
     */
    addAll() {
      let p = this;
      const reuse = !p.source || p.add === p.rem || !p.rem.length && p.source.length === p.add.length;
      if (reuse) {
        return p;
      } else {
        p = new Pulse(this.dataflow).init(this);
        p.add = p.source;
        p.rem = [];
        return p;
      }
    },
    /**
     * Initialize this pulse based on the values of another pulse. This method
     * is used internally by {@link fork} to initialize a new forked tuple.
     * The dataflow, time stamp and field modification values are copied over.
     * By default, new empty ADD, REM and MOD arrays are created.
     * @param {Pulse} src - The source pulse to copy from.
     * @param {number} flags - Integer of boolean flags indicating which (if any)
     *   tuple arrays should be copied to the new pulse. The supported flag values
     *   are ADD, REM and MOD. Array references are copied directly: new array
     *   instances are not created. By default, source data arrays are copied
     *   to the new pulse. Use the NO_SOURCE flag to enforce a null source.
     * @return {Pulse} - Returns this Pulse instance.
     */
    init(src, flags) {
      const p = this;
      p.stamp = src.stamp;
      p.encode = src.encode;
      if (src.fields && !(flags & NO_FIELDS)) {
        p.fields = src.fields;
      }
      if (flags & ADD) {
        p.addF = src.addF;
        p.add = src.add;
      } else {
        p.addF = null;
        p.add = [];
      }
      if (flags & REM) {
        p.remF = src.remF;
        p.rem = src.rem;
      } else {
        p.remF = null;
        p.rem = [];
      }
      if (flags & MOD$1) {
        p.modF = src.modF;
        p.mod = src.mod;
      } else {
        p.modF = null;
        p.mod = [];
      }
      if (flags & NO_SOURCE) {
        p.srcF = null;
        p.source = null;
      } else {
        p.srcF = src.srcF;
        p.source = src.source;
        if (src.cleans) p.cleans = src.cleans;
      }
      return p;
    },
    /**
     * Schedules a function to run after pulse propagation completes.
     * @param {function} func - The function to run.
     */
    runAfter(func) {
      this.dataflow.runAfter(func);
    },
    /**
     * Indicates if tuples have been added, removed or modified.
     * @param {number} [flags] - The tuple types (ADD, REM or MOD) to query.
     *   Defaults to ALL, returning true if any tuple type has changed.
     * @return {boolean} - Returns true if one or more queried tuple types have
     *   changed, false otherwise.
     */
    changed(flags) {
      const f = flags || ALL;
      return f & ADD && this.add.length || f & REM && this.rem.length || f & MOD$1 && this.mod.length;
    },
    /**
     * Forces a "reflow" of tuple values, such that all tuples in the backing
     * source are added to the MOD set, unless already present in the ADD set.
     * @param {boolean} [fork=false] - If true, returns a forked copy of this
     *   pulse, and invokes reflow on that derived pulse.
     * @return {Pulse} - The reflowed pulse instance.
     */
    reflow(fork) {
      if (fork) return this.fork(ALL).reflow();
      const len = this.add.length, src = this.source && this.source.length;
      if (src && src !== len) {
        this.mod = this.source;
        if (len) this.filter(MOD$1, filter$1(this, ADD));
      }
      return this;
    },
    /**
     * Get/set metadata to pulse requesting garbage collection
     * to reclaim currently unused resources.
     */
    clean(value2) {
      if (arguments.length) {
        this.cleans = !!value2;
        return this;
      } else {
        return this.cleans;
      }
    },
    /**
     * Marks one or more data field names as modified to assist dependency
     * tracking and incremental processing by transform operators.
     * @param {string|Array<string>} _ - The field(s) to mark as modified.
     * @return {Pulse} - This pulse instance.
     */
    modifies(_) {
      const hash2 = this.fields || (this.fields = {});
      if (isArray(_)) {
        _.forEach((f) => hash2[f] = true);
      } else {
        hash2[_] = true;
      }
      return this;
    },
    /**
     * Checks if one or more data fields have been modified during this pulse
     * propagation timestamp.
     * @param {string|Array<string>} _ - The field(s) to check for modified.
     * @param {boolean} nomod - If true, will check the modified flag even if
     *   no mod tuples exist. If false (default), mod tuples must be present.
     * @return {boolean} - Returns true if any of the provided fields has been
     *   marked as modified, false otherwise.
     */
    modified(_, nomod) {
      const fields = this.fields;
      return !((nomod || this.mod.length) && fields) ? false : !arguments.length ? !!fields : isArray(_) ? _.some((f) => fields[f]) : fields[_];
    },
    /**
     * Adds a filter function to one more tuple sets. Filters are applied to
     * backing tuple arrays, to determine the actual set of tuples considered
     * added, removed or modified. They can be used to delay materialization of
     * a tuple set in order to avoid expensive array copies. In addition, the
     * filter functions can serve as value transformers: unlike standard predicate
     * function (which return boolean values), Pulse filters should return the
     * actual tuple value to process. If a tuple set is already filtered, the
     * new filter function will be appended into a conjuntive ('and') query.
     * @param {number} flags - Flags indicating the tuple set(s) to filter.
     * @param {function(*):object} filter - Filter function that will be applied
     *   to the tuple set array, and should return a data tuple if the value
     *   should be included in the tuple set, and falsy (or null) otherwise.
     * @return {Pulse} - Returns this pulse instance.
     */
    filter(flags, filter2) {
      const p = this;
      if (flags & ADD) p.addF = addFilter(p.addF, filter2);
      if (flags & REM) p.remF = addFilter(p.remF, filter2);
      if (flags & MOD$1) p.modF = addFilter(p.modF, filter2);
      if (flags & SOURCE) p.srcF = addFilter(p.srcF, filter2);
      return p;
    },
    /**
     * Materialize one or more tuple sets in this pulse. If the tuple set(s) have
     * a registered filter function, it will be applied and the tuple set(s) will
     * be replaced with materialized tuple arrays.
     * @param {number} flags - Flags indicating the tuple set(s) to materialize.
     * @return {Pulse} - Returns this pulse instance.
     */
    materialize(flags) {
      flags = flags || ALL;
      const p = this;
      if (flags & ADD && p.addF) {
        p.add = materialize(p.add, p.addF);
        p.addF = null;
      }
      if (flags & REM && p.remF) {
        p.rem = materialize(p.rem, p.remF);
        p.remF = null;
      }
      if (flags & MOD$1 && p.modF) {
        p.mod = materialize(p.mod, p.modF);
        p.modF = null;
      }
      if (flags & SOURCE && p.srcF) {
        p.source = p.source.filter(p.srcF);
        p.srcF = null;
      }
      return p;
    },
    /**
     * Visit one or more tuple sets in this pulse.
     * @param {number} flags - Flags indicating the tuple set(s) to visit.
     *   Legal values are ADD, REM, MOD and SOURCE (if a backing data source
     *   has been set).
     * @param {function(object):*} - Visitor function invoked per-tuple.
     * @return {Pulse} - Returns this pulse instance.
     */
    visit(flags, visitor) {
      const p = this, v = visitor;
      if (flags & SOURCE) {
        visitArray(p.source, p.srcF, v);
        return p;
      }
      if (flags & ADD) visitArray(p.add, p.addF, v);
      if (flags & REM) visitArray(p.rem, p.remF, v);
      if (flags & MOD$1) visitArray(p.mod, p.modF, v);
      const src = p.source;
      if (flags & REFLOW && src) {
        const sum2 = p.add.length + p.mod.length;
        if (sum2 === src.length) ;
        else if (sum2) {
          visitArray(src, filter$1(p, ADD_MOD), v);
        } else {
          visitArray(src, p.srcF, v);
        }
      }
      return p;
    }
  };
  function MultiPulse(dataflow, stamp, pulses, encode2) {
    const p = this;
    let c2 = 0;
    this.dataflow = dataflow;
    this.stamp = stamp;
    this.fields = null;
    this.encode = encode2 || null;
    this.pulses = pulses;
    for (const pulse2 of pulses) {
      if (pulse2.stamp !== stamp) continue;
      if (pulse2.fields) {
        const hash2 = p.fields || (p.fields = {});
        for (const f in pulse2.fields) {
          hash2[f] = 1;
        }
      }
      if (pulse2.changed(p.ADD)) c2 |= p.ADD;
      if (pulse2.changed(p.REM)) c2 |= p.REM;
      if (pulse2.changed(p.MOD)) c2 |= p.MOD;
    }
    this.changes = c2;
  }
  inherits(MultiPulse, Pulse, {
    /**
     * Creates a new pulse based on the values of this pulse.
     * The dataflow, time stamp and field modification values are copied over.
     * @return {Pulse}
     */
    fork(flags) {
      const p = new Pulse(this.dataflow).init(this, flags & this.NO_FIELDS);
      if (flags !== void 0) {
        if (flags & p.ADD) this.visit(p.ADD, (t) => p.add.push(t));
        if (flags & p.REM) this.visit(p.REM, (t) => p.rem.push(t));
        if (flags & p.MOD) this.visit(p.MOD, (t) => p.mod.push(t));
      }
      return p;
    },
    changed(flags) {
      return this.changes & flags;
    },
    modified(_) {
      const p = this, fields = p.fields;
      return !(fields && p.changes & p.MOD) ? 0 : isArray(_) ? _.some((f) => fields[f]) : fields[_];
    },
    filter() {
      error$1("MultiPulse does not support filtering.");
    },
    materialize() {
      error$1("MultiPulse does not support materialization.");
    },
    visit(flags, visitor) {
      const p = this, pulses = p.pulses, n = pulses.length;
      let i = 0;
      if (flags & p.SOURCE) {
        for (; i < n; ++i) {
          pulses[i].visit(flags, visitor);
        }
      } else {
        for (; i < n; ++i) {
          if (pulses[i].stamp === p.stamp) {
            pulses[i].visit(flags, visitor);
          }
        }
      }
      return p;
    }
  });
  async function evaluate(encode2, prerun, postrun) {
    const df = this, async = [];
    if (df._pulse) return reentrant(df);
    if (df._pending) await df._pending;
    if (prerun) await asyncCallback(df, prerun);
    if (!df._touched.length) {
      df.debug("Dataflow invoked, but nothing to do.");
      return df;
    }
    const stamp = ++df._clock;
    df._pulse = new Pulse(df, stamp, encode2);
    df._touched.forEach((op2) => df._enqueue(op2, true));
    df._touched = UniqueList(id);
    let count2 = 0, op, next, error2;
    try {
      while (df._heap.size() > 0) {
        op = df._heap.pop();
        if (op.rank !== op.qrank) {
          df._enqueue(op, true);
          continue;
        }
        next = op.run(df._getPulse(op, encode2));
        if (next.then) {
          next = await next;
        } else if (next.async) {
          async.push(next.async);
          next = StopPropagation;
        }
        if (next !== StopPropagation) {
          if (op._targets) op._targets.forEach((op2) => df._enqueue(op2));
        }
        ++count2;
      }
    } catch (err) {
      df._heap.clear();
      error2 = err;
    }
    df._input = {};
    df._pulse = null;
    df.debug(`Pulse ${stamp}: ${count2} operators`);
    if (error2) {
      df._postrun = [];
      df.error(error2);
    }
    if (df._postrun.length) {
      const pr = df._postrun.sort((a2, b2) => b2.priority - a2.priority);
      df._postrun = [];
      for (let i = 0; i < pr.length; ++i) {
        await asyncCallback(df, pr[i].callback);
      }
    }
    if (postrun) await asyncCallback(df, postrun);
    if (async.length) {
      Promise.all(async).then((cb) => df.runAsync(null, () => {
        cb.forEach((f) => {
          try {
            f(df);
          } catch (err) {
            df.error(err);
          }
        });
      }));
    }
    return df;
  }
  async function runAsync(encode2, prerun, postrun) {
    while (this._running) await this._running;
    const clear2 = () => this._running = null;
    (this._running = this.evaluate(encode2, prerun, postrun)).then(clear2, clear2);
    return this._running;
  }
  function run(encode2, prerun, postrun) {
    return this._pulse ? reentrant(this) : (this.evaluate(encode2, prerun, postrun), this);
  }
  function runAfter(callback, enqueue2, priority) {
    if (this._pulse || enqueue2) {
      this._postrun.push({
        priority: priority || 0,
        callback
      });
    } else {
      try {
        callback(this);
      } catch (err) {
        this.error(err);
      }
    }
  }
  function reentrant(df) {
    df.error("Dataflow already running. Use runAsync() to chain invocations.");
    return df;
  }
  function enqueue(op, force2) {
    const q = op.stamp < this._clock;
    if (q) op.stamp = this._clock;
    if (q || force2) {
      op.qrank = op.rank;
      this._heap.push(op);
    }
  }
  function getPulse(op, encode2) {
    const s = op.source, stamp = this._clock;
    return s && isArray(s) ? new MultiPulse(this, stamp, s.map((_) => _.pulse), encode2) : this._input[op.id] || singlePulse(this._pulse, s && s.pulse);
  }
  function singlePulse(p, s) {
    if (s && s.stamp === p.stamp) {
      return s;
    }
    p = p.fork();
    if (s && s !== StopPropagation) {
      p.source = s.source;
    }
    return p;
  }
  const NO_OPT = {
    skip: false,
    force: false
  };
  function touch(op, options) {
    const opt = options || NO_OPT;
    if (this._pulse) {
      this._enqueue(op);
    } else {
      this._touched.add(op);
    }
    if (opt.skip) op.skip(true);
    return this;
  }
  function update$6(op, value2, options) {
    const opt = options || NO_OPT;
    if (op.set(value2) || opt.force) {
      this.touch(op, opt);
    }
    return this;
  }
  function pulse(op, changeset2, options) {
    this.touch(op, options || NO_OPT);
    const p = new Pulse(this, this._clock + (this._pulse ? 0 : 1)), t = op.pulse && op.pulse.source || [];
    p.target = op;
    this._input[op.id] = changeset2.pulse(p, t);
    return this;
  }
  function Heap(cmp) {
    let nodes = [];
    return {
      clear: () => nodes = [],
      size: () => nodes.length,
      peek: () => nodes[0],
      push: (x2) => {
        nodes.push(x2);
        return siftdown(nodes, 0, nodes.length - 1, cmp);
      },
      pop: () => {
        const last = nodes.pop();
        let item;
        if (nodes.length) {
          item = nodes[0];
          nodes[0] = last;
          siftup(nodes, 0, cmp);
        } else {
          item = last;
        }
        return item;
      }
    };
  }
  function siftdown(array2, start, idx, cmp) {
    let parent, pidx;
    const item = array2[idx];
    while (idx > start) {
      pidx = idx - 1 >> 1;
      parent = array2[pidx];
      if (cmp(item, parent) < 0) {
        array2[idx] = parent;
        idx = pidx;
        continue;
      }
      break;
    }
    return array2[idx] = item;
  }
  function siftup(array2, idx, cmp) {
    const start = idx, end = array2.length, item = array2[idx];
    let cidx = (idx << 1) + 1, ridx;
    while (cidx < end) {
      ridx = cidx + 1;
      if (ridx < end && cmp(array2[cidx], array2[ridx]) >= 0) {
        cidx = ridx;
      }
      array2[idx] = array2[cidx];
      idx = cidx;
      cidx = (idx << 1) + 1;
    }
    array2[idx] = item;
    return siftdown(array2, start, idx, cmp);
  }
  function Dataflow() {
    this.logger(logger());
    this.logLevel(Error$1);
    this._clock = 0;
    this._rank = 0;
    this._locale = defaultLocale();
    try {
      this._loader = loader();
    } catch (e3) {
    }
    this._touched = UniqueList(id);
    this._input = {};
    this._pulse = null;
    this._heap = Heap((a2, b2) => a2.qrank - b2.qrank);
    this._postrun = [];
  }
  function logMethod(method2) {
    return function() {
      return this._log[method2].apply(this, arguments);
    };
  }
  Dataflow.prototype = {
    /**
     * The current timestamp of this dataflow. This value reflects the
     * timestamp of the previous dataflow run. The dataflow is initialized
     * with a stamp value of 0. The initial run of the dataflow will have
     * a timestap of 1, and so on. This value will match the
     * {@link Pulse.stamp} property.
     * @return {number} - The current timestamp value.
     */
    stamp() {
      return this._clock;
    },
    /**
     * Gets or sets the loader instance to use for data file loading. A
     * loader object must provide a "load" method for loading files and a
     * "sanitize" method for checking URL/filename validity. Both methods
     * should accept a URI and options hash as arguments, and return a Promise
     * that resolves to the loaded file contents (load) or a hash containing
     * sanitized URI data with the sanitized url assigned to the "href" property
     * (sanitize).
     * @param {object} _ - The loader instance to use.
     * @return {object|Dataflow} - If no arguments are provided, returns
     *   the current loader instance. Otherwise returns this Dataflow instance.
     */
    loader(_) {
      if (arguments.length) {
        this._loader = _;
        return this;
      } else {
        return this._loader;
      }
    },
    /**
     * Gets or sets the locale instance to use for formatting and parsing
     * string values. The locale object should be provided by the
     * vega-format library, and include methods such as format, timeFormat,
     * utcFormat, timeParse, and utcParse.
     * @param {object} _ - The locale instance to use.
     * @return {object|Dataflow} - If no arguments are provided, returns
     *   the current locale instance. Otherwise returns this Dataflow instance.
     */
    locale(_) {
      if (arguments.length) {
        this._locale = _;
        return this;
      } else {
        return this._locale;
      }
    },
    /**
     * Get or set the logger instance used to log messages. If no arguments are
     * provided, returns the current logger instance. Otherwise, sets the logger
     * and return this Dataflow instance. Provided loggers must support the full
     * API of logger objects generated by the vega-util logger method. Note that
     * by default the log level of the new logger will be used; use the logLevel
     * method to adjust the log level as needed.
     */
    logger(logger2) {
      if (arguments.length) {
        this._log = logger2;
        return this;
      } else {
        return this._log;
      }
    },
    /**
     * Logs an error message. By default, logged messages are written to console
     * output. The message will only be logged if the current log level is high
     * enough to permit error messages.
     */
    error: logMethod("error"),
    /**
     * Logs a warning message. By default, logged messages are written to console
     * output. The message will only be logged if the current log level is high
     * enough to permit warning messages.
     */
    warn: logMethod("warn"),
    /**
     * Logs a information message. By default, logged messages are written to
     * console output. The message will only be logged if the current log level is
     * high enough to permit information messages.
     */
    info: logMethod("info"),
    /**
     * Logs a debug message. By default, logged messages are written to console
     * output. The message will only be logged if the current log level is high
     * enough to permit debug messages.
     */
    debug: logMethod("debug"),
    /**
     * Get or set the current log level. If an argument is provided, it
     * will be used as the new log level.
     * @param {number} [level] - Should be one of None, Warn, Info
     * @return {number} - The current log level.
     */
    logLevel: logMethod("level"),
    /**
     * Empty entry threshold for garbage cleaning. Map data structures will
     * perform cleaning once the number of empty entries exceeds this value.
     */
    cleanThreshold: 1e4,
    // OPERATOR REGISTRATION
    add: add$4,
    connect,
    rank,
    rerank,
    // OPERATOR UPDATES
    pulse,
    touch,
    update: update$6,
    changeset,
    // DATA LOADING
    ingest,
    parse: parse$5,
    preload,
    request,
    // EVENT HANDLING
    events: events$1,
    on,
    // PULSE PROPAGATION
    evaluate,
    run,
    runAsync,
    runAfter,
    _enqueue: enqueue,
    _getPulse: getPulse
  };
  function Transform(init2, params2) {
    Operator.call(this, init2, null, params2);
  }
  inherits(Transform, Operator, {
    /**
     * Overrides {@link Operator.evaluate} for transform operators.
     * Internally, this method calls {@link evaluate} to perform processing.
     * If {@link evaluate} returns a falsy value, the input pulse is returned.
     * This method should NOT be overridden, instead overrride {@link evaluate}.
     * @param {Pulse} pulse - the current dataflow pulse.
     * @return the output pulse for this operator (or StopPropagation)
     */
    run(pulse2) {
      if (pulse2.stamp < this.stamp) return pulse2.StopPropagation;
      let rv;
      if (this.skip()) {
        this.skip(false);
      } else {
        rv = this.evaluate(pulse2);
      }
      rv = rv || pulse2;
      if (rv.then) {
        rv = rv.then((_) => this.pulse = _);
      } else if (rv !== pulse2.StopPropagation) {
        this.pulse = rv;
      }
      return rv;
    },
    /**
     * Overrides {@link Operator.evaluate} for transform operators.
     * Marshalls parameter values and then invokes {@link transform}.
     * @param {Pulse} pulse - the current dataflow pulse.
     * @return {Pulse} The output pulse (or StopPropagation). A falsy return
         value (including undefined) will let the input pulse pass through.
    */
    evaluate(pulse2) {
      const params2 = this.marshall(pulse2.stamp), out = this.transform(params2, pulse2);
      params2.clear();
      return out;
    },
    /**
     * Process incoming pulses.
     * Subclasses should override this method to implement transforms.
     * @param {Parameters} _ - The operator parameter values.
     * @param {Pulse} pulse - The current dataflow pulse.
     * @return {Pulse} The output pulse (or StopPropagation). A falsy return
     *   value (including undefined) will let the input pulse pass through.
     */
    transform() {
    }
  });
  const transforms = {};
  function definition$1(type2) {
    const t = transform$2(type2);
    return t && t.Definition || null;
  }
  function transform$2(type2) {
    type2 = type2 && type2.toLowerCase();
    return has$1(transforms, type2) ? transforms[type2] : null;
  }
  function* numbers$1(values2, valueof) {
    if (valueof == null) {
      for (let value2 of values2) {
        if (value2 != null && value2 !== "" && (value2 = +value2) >= value2) {
          yield value2;
        }
      }
    } else {
      let index2 = -1;
      for (let value2 of values2) {
        value2 = valueof(value2, ++index2, values2);
        if (value2 != null && value2 !== "" && (value2 = +value2) >= value2) {
          yield value2;
        }
      }
    }
  }
  function quantiles(array2, p, f) {
    const values2 = Float64Array.from(numbers$1(array2, f));
    values2.sort(ascending$1);
    return p.map((_) => quantileSorted(values2, _));
  }
  function quartiles(array2, f) {
    return quantiles(array2, [0.25, 0.5, 0.75], f);
  }
  function estimateBandwidth(array2, f) {
    const n = array2.length, d = deviation(array2, f), q = quartiles(array2, f), h2 = (q[2] - q[0]) / 1.34, v = Math.min(d, h2) || d || Math.abs(q[0]) || 1;
    return 1.06 * v * Math.pow(n, -0.2);
  }
  function bin(_) {
    const maxb = _.maxbins || 20, base = _.base || 10, logb = Math.log(base), div = _.divide || [5, 2];
    let min2 = _.extent[0], max2 = _.extent[1], step, level, minstep, v, i, n;
    const span2 = _.span || max2 - min2 || Math.abs(min2) || 1;
    if (_.step) {
      step = _.step;
    } else if (_.steps) {
      v = span2 / maxb;
      for (i = 0, n = _.steps.length; i < n && _.steps[i] < v; ++i) ;
      step = _.steps[Math.max(0, i - 1)];
    } else {
      level = Math.ceil(Math.log(maxb) / logb);
      minstep = _.minstep || 0;
      step = Math.max(minstep, Math.pow(base, Math.round(Math.log(span2) / logb) - level));
      while (Math.ceil(span2 / step) > maxb) {
        step *= base;
      }
      for (i = 0, n = div.length; i < n; ++i) {
        v = step / div[i];
        if (v >= minstep && span2 / v <= maxb) step = v;
      }
    }
    v = Math.log(step);
    const precision = v >= 0 ? 0 : ~~(-v / logb) + 1, eps = Math.pow(base, -precision - 1);
    if (_.nice || _.nice === void 0) {
      v = Math.floor(min2 / step + eps) * step;
      min2 = min2 < v ? v - step : v;
      max2 = Math.ceil(max2 / step) * step;
    }
    return {
      start: min2,
      stop: max2 === min2 ? min2 + step : max2,
      step
    };
  }
  var random = Math.random;
  function setRandom(r) {
    random = r;
  }
  function bootstrapCI(array2, samples, alpha, f) {
    if (!array2.length) return [void 0, void 0];
    const values2 = Float64Array.from(numbers$1(array2, f)), n = values2.length, m2 = samples;
    let a2, i, j, mu;
    for (j = 0, mu = Array(m2); j < m2; ++j) {
      for (a2 = 0, i = 0; i < n; ++i) {
        a2 += values2[~~(random() * n)];
      }
      mu[j] = a2 / n;
    }
    mu.sort(ascending$1);
    return [quantile$1(mu, alpha / 2), quantile$1(mu, 1 - alpha / 2)];
  }
  function dotbin(array2, step, smooth, f) {
    f = f || ((_) => _);
    const n = array2.length, v = new Float64Array(n);
    let i = 0, j = 1, a2 = f(array2[0]), b2 = a2, w2 = a2 + step, x2;
    for (; j < n; ++j) {
      x2 = f(array2[j]);
      if (x2 >= w2) {
        b2 = (a2 + b2) / 2;
        for (; i < j; ++i) v[i] = b2;
        w2 = x2 + step;
        a2 = x2;
      }
      b2 = x2;
    }
    b2 = (a2 + b2) / 2;
    for (; i < j; ++i) v[i] = b2;
    return smooth ? smoothing(v, step + step / 4) : v;
  }
  function smoothing(v, thresh) {
    const n = v.length;
    let a2 = 0, b2 = 1, c2, d;
    while (v[a2] === v[b2]) ++b2;
    while (b2 < n) {
      c2 = b2 + 1;
      while (v[b2] === v[c2]) ++c2;
      if (v[b2] - v[b2 - 1] < thresh) {
        d = b2 + (a2 + c2 - b2 - b2 >> 1);
        while (d < b2) v[d++] = v[b2];
        while (d > b2) v[d--] = v[a2];
      }
      a2 = b2;
      b2 = c2;
    }
    return v;
  }
  function lcg$2(seed) {
    return function() {
      seed = (1103515245 * seed + 12345) % 2147483647;
      return seed / 2147483647;
    };
  }
  function integer(min2, max2) {
    if (max2 == null) {
      max2 = min2;
      min2 = 0;
    }
    let a2, b2, d;
    const dist2 = {
      min(_) {
        if (arguments.length) {
          a2 = _ || 0;
          d = b2 - a2;
          return dist2;
        } else {
          return a2;
        }
      },
      max(_) {
        if (arguments.length) {
          b2 = _ || 0;
          d = b2 - a2;
          return dist2;
        } else {
          return b2;
        }
      },
      sample() {
        return a2 + Math.floor(d * random());
      },
      pdf(x2) {
        return x2 === Math.floor(x2) && x2 >= a2 && x2 < b2 ? 1 / d : 0;
      },
      cdf(x2) {
        const v = Math.floor(x2);
        return v < a2 ? 0 : v >= b2 ? 1 : (v - a2 + 1) / d;
      },
      icdf(p) {
        return p >= 0 && p <= 1 ? a2 - 1 + Math.floor(p * d) : NaN;
      }
    };
    return dist2.min(min2).max(max2);
  }
  const SQRT2PI = Math.sqrt(2 * Math.PI);
  const SQRT2 = Math.SQRT2;
  let nextSample = NaN;
  function sampleNormal(mean2, stdev) {
    mean2 = mean2 || 0;
    stdev = stdev == null ? 1 : stdev;
    let x2 = 0, y2 = 0, rds, c2;
    if (nextSample === nextSample) {
      x2 = nextSample;
      nextSample = NaN;
    } else {
      do {
        x2 = random() * 2 - 1;
        y2 = random() * 2 - 1;
        rds = x2 * x2 + y2 * y2;
      } while (rds === 0 || rds > 1);
      c2 = Math.sqrt(-2 * Math.log(rds) / rds);
      x2 *= c2;
      nextSample = y2 * c2;
    }
    return mean2 + x2 * stdev;
  }
  function densityNormal(value2, mean2, stdev) {
    stdev = stdev == null ? 1 : stdev;
    const z = (value2 - (mean2 || 0)) / stdev;
    return Math.exp(-0.5 * z * z) / (stdev * SQRT2PI);
  }
  function cumulativeNormal(value2, mean2, stdev) {
    mean2 = mean2 || 0;
    stdev = stdev == null ? 1 : stdev;
    const z = (value2 - mean2) / stdev, Z = Math.abs(z);
    let cd;
    if (Z > 37) {
      cd = 0;
    } else {
      const exp2 = Math.exp(-Z * Z / 2);
      let sum2;
      if (Z < 7.07106781186547) {
        sum2 = 0.0352624965998911 * Z + 0.700383064443688;
        sum2 = sum2 * Z + 6.37396220353165;
        sum2 = sum2 * Z + 33.912866078383;
        sum2 = sum2 * Z + 112.079291497871;
        sum2 = sum2 * Z + 221.213596169931;
        sum2 = sum2 * Z + 220.206867912376;
        cd = exp2 * sum2;
        sum2 = 0.0883883476483184 * Z + 1.75566716318264;
        sum2 = sum2 * Z + 16.064177579207;
        sum2 = sum2 * Z + 86.7807322029461;
        sum2 = sum2 * Z + 296.564248779674;
        sum2 = sum2 * Z + 637.333633378831;
        sum2 = sum2 * Z + 793.826512519948;
        sum2 = sum2 * Z + 440.413735824752;
        cd = cd / sum2;
      } else {
        sum2 = Z + 0.65;
        sum2 = Z + 4 / sum2;
        sum2 = Z + 3 / sum2;
        sum2 = Z + 2 / sum2;
        sum2 = Z + 1 / sum2;
        cd = exp2 / sum2 / 2.506628274631;
      }
    }
    return z > 0 ? 1 - cd : cd;
  }
  function quantileNormal(p, mean2, stdev) {
    if (p < 0 || p > 1) return NaN;
    return (mean2 || 0) + (stdev == null ? 1 : stdev) * SQRT2 * erfinv(2 * p - 1);
  }
  function erfinv(x2) {
    let w2 = -Math.log((1 - x2) * (1 + x2)), p;
    if (w2 < 6.25) {
      w2 -= 3.125;
      p = -364441206401782e-35;
      p = -16850591381820166e-35 + p * w2;
      p = 128584807152564e-32 + p * w2;
      p = 11157877678025181e-33 + p * w2;
      p = -1333171662854621e-31 + p * w2;
      p = 20972767875968562e-33 + p * w2;
      p = 6637638134358324e-30 + p * w2;
      p = -4054566272975207e-29 + p * w2;
      p = -8151934197605472e-29 + p * w2;
      p = 26335093153082323e-28 + p * w2;
      p = -12975133253453532e-27 + p * w2;
      p = -5415412054294628e-26 + p * w2;
      p = 10512122733215323e-25 + p * w2;
      p = -4112633980346984e-24 + p * w2;
      p = -29070369957882005e-24 + p * w2;
      p = 42347877827932404e-23 + p * w2;
      p = -13654692000834679e-22 + p * w2;
      p = -13882523362786469e-21 + p * w2;
      p = 18673420803405714e-20 + p * w2;
      p = -740702534166267e-18 + p * w2;
      p = -0.006033670871430149 + p * w2;
      p = 0.24015818242558962 + p * w2;
      p = 1.6536545626831027 + p * w2;
    } else if (w2 < 16) {
      w2 = Math.sqrt(w2) - 3.25;
      p = 22137376921775787e-25;
      p = 9075656193888539e-23 + p * w2;
      p = -27517406297064545e-23 + p * w2;
      p = 18239629214389228e-24 + p * w2;
      p = 15027403968909828e-22 + p * w2;
      p = -4013867526981546e-21 + p * w2;
      p = 29234449089955446e-22 + p * w2;
      p = 12475304481671779e-21 + p * w2;
      p = -47318229009055734e-21 + p * w2;
      p = 6828485145957318e-20 + p * w2;
      p = 24031110387097894e-21 + p * w2;
      p = -3550375203628475e-19 + p * w2;
      p = 9532893797373805e-19 + p * w2;
      p = -0.0016882755560235047 + p * w2;
      p = 0.002491442096107851 + p * w2;
      p = -0.003751208507569241 + p * w2;
      p = 0.005370914553590064 + p * w2;
      p = 1.0052589676941592 + p * w2;
      p = 3.0838856104922208 + p * w2;
    } else if (Number.isFinite(w2)) {
      w2 = Math.sqrt(w2) - 5;
      p = -27109920616438573e-27;
      p = -2555641816996525e-25 + p * w2;
      p = 15076572693500548e-25 + p * w2;
      p = -3789465440126737e-24 + p * w2;
      p = 761570120807834e-23 + p * w2;
      p = -1496002662714924e-23 + p * w2;
      p = 2914795345090108e-23 + p * w2;
      p = -6771199775845234e-23 + p * w2;
      p = 22900482228026655e-23 + p * w2;
      p = -99298272942317e-20 + p * w2;
      p = 4526062597223154e-21 + p * w2;
      p = -1968177810553167e-20 + p * w2;
      p = 7599527703001776e-20 + p * w2;
      p = -21503011930044477e-20 + p * w2;
      p = -13871931833623122e-20 + p * w2;
      p = 1.0103004648645344 + p * w2;
      p = 4.849906401408584 + p * w2;
    } else {
      p = Infinity;
    }
    return p * x2;
  }
  function gaussian(mean2, stdev) {
    let mu, sigma;
    const dist2 = {
      mean(_) {
        if (arguments.length) {
          mu = _ || 0;
          return dist2;
        } else {
          return mu;
        }
      },
      stdev(_) {
        if (arguments.length) {
          sigma = _ == null ? 1 : _;
          return dist2;
        } else {
          return sigma;
        }
      },
      sample: () => sampleNormal(mu, sigma),
      pdf: (value2) => densityNormal(value2, mu, sigma),
      cdf: (value2) => cumulativeNormal(value2, mu, sigma),
      icdf: (p) => quantileNormal(p, mu, sigma)
    };
    return dist2.mean(mean2).stdev(stdev);
  }
  function kde(support, bandwidth2) {
    const kernel = gaussian();
    let n = 0;
    const dist2 = {
      data(_) {
        if (arguments.length) {
          support = _;
          n = _ ? _.length : 0;
          return dist2.bandwidth(bandwidth2);
        } else {
          return support;
        }
      },
      bandwidth(_) {
        if (!arguments.length) return bandwidth2;
        bandwidth2 = _;
        if (!bandwidth2 && support) bandwidth2 = estimateBandwidth(support);
        return dist2;
      },
      sample() {
        return support[~~(random() * n)] + bandwidth2 * kernel.sample();
      },
      pdf(x2) {
        let y2 = 0, i = 0;
        for (; i < n; ++i) {
          y2 += kernel.pdf((x2 - support[i]) / bandwidth2);
        }
        return y2 / bandwidth2 / n;
      },
      cdf(x2) {
        let y2 = 0, i = 0;
        for (; i < n; ++i) {
          y2 += kernel.cdf((x2 - support[i]) / bandwidth2);
        }
        return y2 / n;
      },
      icdf() {
        throw Error("KDE icdf not supported.");
      }
    };
    return dist2.data(support);
  }
  function sampleLogNormal(mean2, stdev) {
    mean2 = mean2 || 0;
    stdev = stdev == null ? 1 : stdev;
    return Math.exp(mean2 + sampleNormal() * stdev);
  }
  function densityLogNormal(value2, mean2, stdev) {
    if (value2 <= 0) return 0;
    mean2 = mean2 || 0;
    stdev = stdev == null ? 1 : stdev;
    const z = (Math.log(value2) - mean2) / stdev;
    return Math.exp(-0.5 * z * z) / (stdev * SQRT2PI * value2);
  }
  function cumulativeLogNormal(value2, mean2, stdev) {
    return cumulativeNormal(Math.log(value2), mean2, stdev);
  }
  function quantileLogNormal(p, mean2, stdev) {
    return Math.exp(quantileNormal(p, mean2, stdev));
  }
  function lognormal(mean2, stdev) {
    let mu, sigma;
    const dist2 = {
      mean(_) {
        if (arguments.length) {
          mu = _ || 0;
          return dist2;
        } else {
          return mu;
        }
      },
      stdev(_) {
        if (arguments.length) {
          sigma = _ == null ? 1 : _;
          return dist2;
        } else {
          return sigma;
        }
      },
      sample: () => sampleLogNormal(mu, sigma),
      pdf: (value2) => densityLogNormal(value2, mu, sigma),
      cdf: (value2) => cumulativeLogNormal(value2, mu, sigma),
      icdf: (p) => quantileLogNormal(p, mu, sigma)
    };
    return dist2.mean(mean2).stdev(stdev);
  }
  function mixture$1(dists, weights) {
    let m2 = 0, w2;
    function normalize2(x2) {
      const w3 = [];
      let sum2 = 0, i;
      for (i = 0; i < m2; ++i) {
        sum2 += w3[i] = x2[i] == null ? 1 : +x2[i];
      }
      for (i = 0; i < m2; ++i) {
        w3[i] /= sum2;
      }
      return w3;
    }
    const dist2 = {
      weights(_) {
        if (arguments.length) {
          w2 = normalize2(weights = _ || []);
          return dist2;
        }
        return weights;
      },
      distributions(_) {
        if (arguments.length) {
          if (_) {
            m2 = _.length;
            dists = _;
          } else {
            m2 = 0;
            dists = [];
          }
          return dist2.weights(weights);
        }
        return dists;
      },
      sample() {
        const r = random();
        let d = dists[m2 - 1], v = w2[0], i = 0;
        for (; i < m2 - 1; v += w2[++i]) {
          if (r < v) {
            d = dists[i];
            break;
          }
        }
        return d.sample();
      },
      pdf(x2) {
        let p = 0, i = 0;
        for (; i < m2; ++i) {
          p += w2[i] * dists[i].pdf(x2);
        }
        return p;
      },
      cdf(x2) {
        let p = 0, i = 0;
        for (; i < m2; ++i) {
          p += w2[i] * dists[i].cdf(x2);
        }
        return p;
      },
      icdf() {
        throw Error("Mixture icdf not supported.");
      }
    };
    return dist2.distributions(dists).weights(weights);
  }
  function sampleUniform(min2, max2) {
    if (max2 == null) {
      max2 = min2 == null ? 1 : min2;
      min2 = 0;
    }
    return min2 + (max2 - min2) * random();
  }
  function densityUniform(value2, min2, max2) {
    if (max2 == null) {
      max2 = min2 == null ? 1 : min2;
      min2 = 0;
    }
    return value2 >= min2 && value2 <= max2 ? 1 / (max2 - min2) : 0;
  }
  function cumulativeUniform(value2, min2, max2) {
    if (max2 == null) {
      max2 = min2 == null ? 1 : min2;
      min2 = 0;
    }
    return value2 < min2 ? 0 : value2 > max2 ? 1 : (value2 - min2) / (max2 - min2);
  }
  function quantileUniform(p, min2, max2) {
    if (max2 == null) {
      max2 = min2 == null ? 1 : min2;
      min2 = 0;
    }
    return p >= 0 && p <= 1 ? min2 + p * (max2 - min2) : NaN;
  }
  function uniform(min2, max2) {
    let a2, b2;
    const dist2 = {
      min(_) {
        if (arguments.length) {
          a2 = _ || 0;
          return dist2;
        } else {
          return a2;
        }
      },
      max(_) {
        if (arguments.length) {
          b2 = _ == null ? 1 : _;
          return dist2;
        } else {
          return b2;
        }
      },
      sample: () => sampleUniform(a2, b2),
      pdf: (value2) => densityUniform(value2, a2, b2),
      cdf: (value2) => cumulativeUniform(value2, a2, b2),
      icdf: (p) => quantileUniform(p, a2, b2)
    };
    if (max2 == null) {
      max2 = min2 == null ? 1 : min2;
      min2 = 0;
    }
    return dist2.min(min2).max(max2);
  }
  function constant$4(data2, x2, y2) {
    let mean2 = 0, n = 0;
    for (const d of data2) {
      const val = y2(d);
      if (x2(d) == null || val == null || isNaN(val)) continue;
      mean2 += (val - mean2) / ++n;
    }
    return {
      coef: [mean2],
      predict: () => mean2,
      rSquared: 0
    };
  }
  function ols(uX, uY, uXY, uX2) {
    const delta = uX2 - uX * uX, slope = Math.abs(delta) < 1e-24 ? 0 : (uXY - uX * uY) / delta, intercept = uY - slope * uX;
    return [intercept, slope];
  }
  function points(data2, x2, y2, sort2) {
    data2 = data2.filter((d2) => {
      let u2 = x2(d2), v = y2(d2);
      return u2 != null && (u2 = +u2) >= u2 && v != null && (v = +v) >= v;
    });
    if (sort2) {
      data2.sort((a2, b2) => x2(a2) - x2(b2));
    }
    const n = data2.length, X3 = new Float64Array(n), Y3 = new Float64Array(n);
    let i = 0, ux = 0, uy = 0, xv, yv, d;
    for (d of data2) {
      X3[i] = xv = +x2(d);
      Y3[i] = yv = +y2(d);
      ++i;
      ux += (xv - ux) / i;
      uy += (yv - uy) / i;
    }
    for (i = 0; i < n; ++i) {
      X3[i] -= ux;
      Y3[i] -= uy;
    }
    return [X3, Y3, ux, uy];
  }
  function visitPoints(data2, x2, y2, callback) {
    let i = -1, u2, v;
    for (const d of data2) {
      u2 = x2(d);
      v = y2(d);
      if (u2 != null && (u2 = +u2) >= u2 && v != null && (v = +v) >= v) {
        callback(u2, v, ++i);
      }
    }
  }
  function rSquared(data2, x2, y2, uY, predict) {
    let SSE = 0, SST = 0;
    visitPoints(data2, x2, y2, (dx, dy) => {
      const sse = dy - predict(dx), sst = dy - uY;
      SSE += sse * sse;
      SST += sst * sst;
    });
    return 1 - SSE / SST;
  }
  function linear$2(data2, x2, y2) {
    let X3 = 0, Y3 = 0, XY = 0, X22 = 0, n = 0;
    visitPoints(data2, x2, y2, (dx, dy) => {
      ++n;
      X3 += (dx - X3) / n;
      Y3 += (dy - Y3) / n;
      XY += (dx * dy - XY) / n;
      X22 += (dx * dx - X22) / n;
    });
    const coef = ols(X3, Y3, XY, X22), predict = (x3) => coef[0] + coef[1] * x3;
    return {
      coef,
      predict,
      rSquared: rSquared(data2, x2, y2, Y3, predict)
    };
  }
  function log$3(data2, x2, y2) {
    let X3 = 0, Y3 = 0, XY = 0, X22 = 0, n = 0;
    visitPoints(data2, x2, y2, (dx, dy) => {
      ++n;
      dx = Math.log(dx);
      X3 += (dx - X3) / n;
      Y3 += (dy - Y3) / n;
      XY += (dx * dy - XY) / n;
      X22 += (dx * dx - X22) / n;
    });
    const coef = ols(X3, Y3, XY, X22), predict = (x3) => coef[0] + coef[1] * Math.log(x3);
    return {
      coef,
      predict,
      rSquared: rSquared(data2, x2, y2, Y3, predict)
    };
  }
  function exp$1(data2, x2, y2) {
    const [xv, yv, ux, uy] = points(data2, x2, y2);
    let YL = 0, XY = 0, XYL = 0, X2Y = 0, n = 0, dx, ly2, xy;
    visitPoints(data2, x2, y2, (_, dy) => {
      dx = xv[n++];
      ly2 = Math.log(dy);
      xy = dx * dy;
      YL += (dy * ly2 - YL) / n;
      XY += (xy - XY) / n;
      XYL += (xy * ly2 - XYL) / n;
      X2Y += (dx * xy - X2Y) / n;
    });
    const [c0, c1] = ols(XY / uy, YL / uy, XYL / uy, X2Y / uy), predict = (x3) => Math.exp(c0 + c1 * (x3 - ux));
    return {
      coef: [Math.exp(c0 - c1 * ux), c1],
      predict,
      rSquared: rSquared(data2, x2, y2, uy, predict)
    };
  }
  function pow$3(data2, x2, y2) {
    let X3 = 0, Y3 = 0, XY = 0, X22 = 0, YS = 0, n = 0;
    visitPoints(data2, x2, y2, (dx, dy) => {
      const lx2 = Math.log(dx), ly2 = Math.log(dy);
      ++n;
      X3 += (lx2 - X3) / n;
      Y3 += (ly2 - Y3) / n;
      XY += (lx2 * ly2 - XY) / n;
      X22 += (lx2 * lx2 - X22) / n;
      YS += (dy - YS) / n;
    });
    const coef = ols(X3, Y3, XY, X22), predict = (x3) => coef[0] * Math.pow(x3, coef[1]);
    coef[0] = Math.exp(coef[0]);
    return {
      coef,
      predict,
      rSquared: rSquared(data2, x2, y2, YS, predict)
    };
  }
  function quad(data2, x2, y2) {
    const [xv, yv, ux, uy] = points(data2, x2, y2), n = xv.length;
    let X22 = 0, X3 = 0, X4 = 0, XY = 0, X2Y = 0, i, dx, dy, x22;
    for (i = 0; i < n; ) {
      dx = xv[i];
      dy = yv[i++];
      x22 = dx * dx;
      X22 += (x22 - X22) / i;
      X3 += (x22 * dx - X3) / i;
      X4 += (x22 * x22 - X4) / i;
      XY += (dx * dy - XY) / i;
      X2Y += (x22 * dy - X2Y) / i;
    }
    const X2X2 = X4 - X22 * X22, d = X22 * X2X2 - X3 * X3, a2 = (X2Y * X22 - XY * X3) / d, b2 = (XY * X2X2 - X2Y * X3) / d, c2 = -a2 * X22, predict = (x3) => {
      x3 = x3 - ux;
      return a2 * x3 * x3 + b2 * x3 + c2 + uy;
    };
    return {
      coef: [c2 - b2 * ux + a2 * ux * ux + uy, b2 - 2 * a2 * ux, a2],
      predict,
      rSquared: rSquared(data2, x2, y2, uy, predict)
    };
  }
  function poly(data2, x2, y2, order) {
    if (order === 0) return constant$4(data2, x2, y2);
    if (order === 1) return linear$2(data2, x2, y2);
    if (order === 2) return quad(data2, x2, y2);
    const [xv, yv, ux, uy] = points(data2, x2, y2), n = xv.length, lhs = [], rhs = [], k = order + 1;
    let i, j, l, v, c2;
    for (i = 0; i < k; ++i) {
      for (l = 0, v = 0; l < n; ++l) {
        v += Math.pow(xv[l], i) * yv[l];
      }
      lhs.push(v);
      c2 = new Float64Array(k);
      for (j = 0; j < k; ++j) {
        for (l = 0, v = 0; l < n; ++l) {
          v += Math.pow(xv[l], i + j);
        }
        c2[j] = v;
      }
      rhs.push(c2);
    }
    rhs.push(lhs);
    const coef = gaussianElimination(rhs), predict = (x3) => {
      x3 -= ux;
      let y3 = uy + coef[0] + coef[1] * x3 + coef[2] * x3 * x3;
      for (i = 3; i < k; ++i) y3 += coef[i] * Math.pow(x3, i);
      return y3;
    };
    return {
      coef: uncenter(k, coef, -ux, uy),
      predict,
      rSquared: rSquared(data2, x2, y2, uy, predict)
    };
  }
  function uncenter(k, a2, x2, y2) {
    const z = Array(k);
    let i, j, v, c2;
    for (i = 0; i < k; ++i) z[i] = 0;
    for (i = k - 1; i >= 0; --i) {
      v = a2[i];
      c2 = 1;
      z[i] += v;
      for (j = 1; j <= i; ++j) {
        c2 *= (i + 1 - j) / j;
        z[i - j] += v * Math.pow(x2, j) * c2;
      }
    }
    z[0] += y2;
    return z;
  }
  function gaussianElimination(matrix) {
    const n = matrix.length - 1, coef = [];
    let i, j, k, r, t;
    for (i = 0; i < n; ++i) {
      r = i;
      for (j = i + 1; j < n; ++j) {
        if (Math.abs(matrix[i][j]) > Math.abs(matrix[i][r])) {
          r = j;
        }
      }
      for (k = i; k < n + 1; ++k) {
        t = matrix[k][i];
        matrix[k][i] = matrix[k][r];
        matrix[k][r] = t;
      }
      for (j = i + 1; j < n; ++j) {
        for (k = n; k >= i; k--) {
          matrix[k][j] -= matrix[k][i] * matrix[i][j] / matrix[i][i];
        }
      }
    }
    for (j = n - 1; j >= 0; --j) {
      t = 0;
      for (k = j + 1; k < n; ++k) {
        t += matrix[k][j] * coef[k];
      }
      coef[j] = (matrix[n][j] - t) / matrix[j][j];
    }
    return coef;
  }
  const maxiters = 2, epsilon$6 = 1e-12;
  function loess(data2, x2, y2, bandwidth2) {
    const [xv, yv, ux, uy] = points(data2, x2, y2, true), n = xv.length, bw = Math.max(2, ~~(bandwidth2 * n)), yhat = new Float64Array(n), residuals = new Float64Array(n), robustWeights = new Float64Array(n).fill(1);
    for (let iter = -1; ++iter <= maxiters; ) {
      const interval2 = [0, bw - 1];
      for (let i = 0; i < n; ++i) {
        const dx = xv[i], i0 = interval2[0], i1 = interval2[1], edge = dx - xv[i0] > xv[i1] - dx ? i0 : i1;
        let W = 0, X3 = 0, Y3 = 0, XY = 0, X22 = 0;
        const denom = 1 / Math.abs(xv[edge] - dx || 1);
        for (let k = i0; k <= i1; ++k) {
          const xk = xv[k], yk = yv[k], w2 = tricube(Math.abs(dx - xk) * denom) * robustWeights[k], xkw = xk * w2;
          W += w2;
          X3 += xkw;
          Y3 += yk * w2;
          XY += yk * xkw;
          X22 += xk * xkw;
        }
        const [a2, b2] = ols(X3 / W, Y3 / W, XY / W, X22 / W);
        yhat[i] = a2 + b2 * dx;
        residuals[i] = Math.abs(yv[i] - yhat[i]);
        updateInterval(xv, i + 1, interval2);
      }
      if (iter === maxiters) {
        break;
      }
      const medianResidual = median(residuals);
      if (Math.abs(medianResidual) < epsilon$6) break;
      for (let i = 0, arg, w2; i < n; ++i) {
        arg = residuals[i] / (6 * medianResidual);
        robustWeights[i] = arg >= 1 ? epsilon$6 : (w2 = 1 - arg * arg) * w2;
      }
    }
    return output$1(xv, yhat, ux, uy);
  }
  function tricube(x2) {
    return (x2 = 1 - x2 * x2 * x2) * x2 * x2;
  }
  function updateInterval(xv, i, interval2) {
    const val = xv[i];
    let left = interval2[0], right = interval2[1] + 1;
    if (right >= xv.length) return;
    while (i > left && xv[right] - val <= val - xv[left]) {
      interval2[0] = ++left;
      interval2[1] = right;
      ++right;
    }
  }
  function output$1(xv, yhat, ux, uy) {
    const n = xv.length, out = [];
    let i = 0, cnt = 0, prev = [], v;
    for (; i < n; ++i) {
      v = xv[i] + ux;
      if (prev[0] === v) {
        prev[1] += (yhat[i] - prev[1]) / ++cnt;
      } else {
        cnt = 0;
        prev[1] += uy;
        prev = [v, yhat[i]];
        out.push(prev);
      }
    }
    prev[1] += uy;
    return out;
  }
  const MIN_RADIANS = 0.5 * Math.PI / 180;
  function sampleCurve(f, extent2, minSteps, maxSteps) {
    minSteps = minSteps || 25;
    maxSteps = Math.max(minSteps, maxSteps || 200);
    const point2 = (x2) => [x2, f(x2)], minX = extent2[0], maxX = extent2[1], span2 = maxX - minX, stop2 = span2 / maxSteps, prev = [point2(minX)], next = [];
    if (minSteps === maxSteps) {
      for (let i = 1; i < maxSteps; ++i) {
        prev.push(point2(minX + i / minSteps * span2));
      }
      prev.push(point2(maxX));
      return prev;
    } else {
      next.push(point2(maxX));
      for (let i = minSteps; --i > 0; ) {
        next.push(point2(minX + i / minSteps * span2));
      }
    }
    let p02 = prev[0];
    let p1 = next[next.length - 1];
    const sx = 1 / span2;
    const sy = scaleY(p02[1], next);
    while (p1) {
      const pm = point2((p02[0] + p1[0]) / 2);
      const dx = pm[0] - p02[0] >= stop2;
      if (dx && angleDelta(p02, pm, p1, sx, sy) > MIN_RADIANS) {
        next.push(pm);
      } else {
        p02 = p1;
        prev.push(p1);
        next.pop();
      }
      p1 = next[next.length - 1];
    }
    return prev;
  }
  function scaleY(init2, points2) {
    let ymin = init2;
    let ymax = init2;
    const n = points2.length;
    for (let i = 0; i < n; ++i) {
      const y2 = points2[i][1];
      if (y2 < ymin) ymin = y2;
      if (y2 > ymax) ymax = y2;
    }
    return 1 / (ymax - ymin);
  }
  function angleDelta(p, q, r, sx, sy) {
    const a0 = Math.atan2(sy * (r[1] - p[1]), sx * (r[0] - p[0])), a1 = Math.atan2(sy * (q[1] - p[1]), sx * (q[0] - p[0]));
    return Math.abs(a0 - a1);
  }
  function multikey(f) {
    return (x2) => {
      const n = f.length;
      let i = 1, k = String(f[0](x2));
      for (; i < n; ++i) {
        k += "|" + f[i](x2);
      }
      return k;
    };
  }
  function groupkey(fields) {
    return !fields || !fields.length ? function() {
      return "";
    } : fields.length === 1 ? fields[0] : multikey(fields);
  }
  function measureName(op, field2, as) {
    return as || op + (!field2 ? "" : "_" + field2);
  }
  const noop$4 = () => {
  };
  const base_op = {
    init: noop$4,
    add: noop$4,
    rem: noop$4,
    idx: 0
  };
  const AggregateOps = {
    values: {
      init: (m2) => m2.cell.store = true,
      value: (m2) => m2.cell.data.values(),
      idx: -1
    },
    count: {
      value: (m2) => m2.cell.num
    },
    __count__: {
      value: (m2) => m2.missing + m2.valid
    },
    missing: {
      value: (m2) => m2.missing
    },
    valid: {
      value: (m2) => m2.valid
    },
    sum: {
      init: (m2) => m2.sum = 0,
      value: (m2) => m2.valid ? m2.sum : void 0,
      add: (m2, v) => m2.sum += +v,
      rem: (m2, v) => m2.sum -= v
    },
    product: {
      init: (m2) => m2.product = 1,
      value: (m2) => m2.valid ? m2.product : void 0,
      add: (m2, v) => m2.product *= v,
      rem: (m2, v) => m2.product /= v
    },
    mean: {
      init: (m2) => m2.mean = 0,
      value: (m2) => m2.valid ? m2.mean : void 0,
      add: (m2, v) => (m2.mean_d = v - m2.mean, m2.mean += m2.mean_d / m2.valid),
      rem: (m2, v) => (m2.mean_d = v - m2.mean, m2.mean -= m2.valid ? m2.mean_d / m2.valid : m2.mean)
    },
    average: {
      value: (m2) => m2.valid ? m2.mean : void 0,
      req: ["mean"],
      idx: 1
    },
    variance: {
      init: (m2) => m2.dev = 0,
      value: (m2) => m2.valid > 1 ? m2.dev / (m2.valid - 1) : void 0,
      add: (m2, v) => m2.dev += m2.mean_d * (v - m2.mean),
      rem: (m2, v) => m2.dev -= m2.mean_d * (v - m2.mean),
      req: ["mean"],
      idx: 1
    },
    variancep: {
      value: (m2) => m2.valid > 1 ? m2.dev / m2.valid : void 0,
      req: ["variance"],
      idx: 2
    },
    stdev: {
      value: (m2) => m2.valid > 1 ? Math.sqrt(m2.dev / (m2.valid - 1)) : void 0,
      req: ["variance"],
      idx: 2
    },
    stdevp: {
      value: (m2) => m2.valid > 1 ? Math.sqrt(m2.dev / m2.valid) : void 0,
      req: ["variance"],
      idx: 2
    },
    stderr: {
      value: (m2) => m2.valid > 1 ? Math.sqrt(m2.dev / (m2.valid * (m2.valid - 1))) : void 0,
      req: ["variance"],
      idx: 2
    },
    distinct: {
      value: (m2) => m2.cell.data.distinct(m2.get),
      req: ["values"],
      idx: 3
    },
    ci0: {
      value: (m2) => m2.cell.data.ci0(m2.get),
      req: ["values"],
      idx: 3
    },
    ci1: {
      value: (m2) => m2.cell.data.ci1(m2.get),
      req: ["values"],
      idx: 3
    },
    median: {
      value: (m2) => m2.cell.data.q2(m2.get),
      req: ["values"],
      idx: 3
    },
    q1: {
      value: (m2) => m2.cell.data.q1(m2.get),
      req: ["values"],
      idx: 3
    },
    q3: {
      value: (m2) => m2.cell.data.q3(m2.get),
      req: ["values"],
      idx: 3
    },
    min: {
      init: (m2) => m2.min = void 0,
      value: (m2) => m2.min = Number.isNaN(m2.min) ? m2.cell.data.min(m2.get) : m2.min,
      add: (m2, v) => {
        if (v < m2.min || m2.min === void 0) m2.min = v;
      },
      rem: (m2, v) => {
        if (v <= m2.min) m2.min = NaN;
      },
      req: ["values"],
      idx: 4
    },
    max: {
      init: (m2) => m2.max = void 0,
      value: (m2) => m2.max = Number.isNaN(m2.max) ? m2.cell.data.max(m2.get) : m2.max,
      add: (m2, v) => {
        if (v > m2.max || m2.max === void 0) m2.max = v;
      },
      rem: (m2, v) => {
        if (v >= m2.max) m2.max = NaN;
      },
      req: ["values"],
      idx: 4
    },
    argmin: {
      init: (m2) => m2.argmin = void 0,
      value: (m2) => m2.argmin || m2.cell.data.argmin(m2.get),
      add: (m2, v, t) => {
        if (v < m2.min) m2.argmin = t;
      },
      rem: (m2, v) => {
        if (v <= m2.min) m2.argmin = void 0;
      },
      req: ["min", "values"],
      idx: 3
    },
    argmax: {
      init: (m2) => m2.argmax = void 0,
      value: (m2) => m2.argmax || m2.cell.data.argmax(m2.get),
      add: (m2, v, t) => {
        if (v > m2.max) m2.argmax = t;
      },
      rem: (m2, v) => {
        if (v >= m2.max) m2.argmax = void 0;
      },
      req: ["max", "values"],
      idx: 3
    },
    exponential: {
      init: (m2, r) => {
        m2.exp = 0;
        m2.exp_r = r;
      },
      value: (m2) => m2.valid ? m2.exp * (1 - m2.exp_r) / (1 - m2.exp_r ** m2.valid) : void 0,
      add: (m2, v) => m2.exp = m2.exp_r * m2.exp + v,
      rem: (m2, v) => m2.exp = (m2.exp - v / m2.exp_r ** (m2.valid - 1)) / m2.exp_r
    },
    exponentialb: {
      value: (m2) => m2.valid ? m2.exp * (1 - m2.exp_r) : void 0,
      req: ["exponential"],
      idx: 1
    }
  };
  const ValidAggregateOps = Object.keys(AggregateOps).filter((d) => d !== "__count__");
  function measure(key2, value2) {
    return (out, aggregate_param) => extend$1({
      name: key2,
      aggregate_param,
      out: out || key2
    }, base_op, value2);
  }
  [...ValidAggregateOps, "__count__"].forEach((key2) => {
    AggregateOps[key2] = measure(key2, AggregateOps[key2]);
  });
  function createMeasure(op, param2, name) {
    return AggregateOps[op](name, param2);
  }
  function compareIndex(a2, b2) {
    return a2.idx - b2.idx;
  }
  function resolve(agg) {
    const map2 = {};
    agg.forEach((a2) => map2[a2.name] = a2);
    const getreqs = (a2) => {
      if (!a2.req) return;
      a2.req.forEach((key2) => {
        if (!map2[key2]) getreqs(map2[key2] = AggregateOps[key2]());
      });
    };
    agg.forEach(getreqs);
    return Object.values(map2).sort(compareIndex);
  }
  function init() {
    this.valid = 0;
    this.missing = 0;
    this._ops.forEach((op) => op.aggregate_param == null ? op.init(this) : op.init(this, op.aggregate_param));
  }
  function add$3(v, t) {
    if (v == null || v === "") {
      ++this.missing;
      return;
    }
    if (v !== v) return;
    ++this.valid;
    this._ops.forEach((op) => op.add(this, v, t));
  }
  function rem(v, t) {
    if (v == null || v === "") {
      --this.missing;
      return;
    }
    if (v !== v) return;
    --this.valid;
    this._ops.forEach((op) => op.rem(this, v, t));
  }
  function set$4(t) {
    this._out.forEach((op) => t[op.out] = op.value(this));
    return t;
  }
  function compileMeasures(agg, field2) {
    const get2 = field2 || identity$6, ops2 = resolve(agg), out = agg.slice().sort(compareIndex);
    function ctr(cell2) {
      this._ops = ops2;
      this._out = out;
      this.cell = cell2;
      this.init();
    }
    ctr.prototype.init = init;
    ctr.prototype.add = add$3;
    ctr.prototype.rem = rem;
    ctr.prototype.set = set$4;
    ctr.prototype.get = get2;
    ctr.fields = agg.map((op) => op.out);
    return ctr;
  }
  function TupleStore(key2) {
    this._key = key2 ? field$1(key2) : tupleid;
    this.reset();
  }
  const prototype$1 = TupleStore.prototype;
  prototype$1.reset = function() {
    this._add = [];
    this._rem = [];
    this._ext = null;
    this._get = null;
    this._q = null;
  };
  prototype$1.add = function(v) {
    this._add.push(v);
  };
  prototype$1.rem = function(v) {
    this._rem.push(v);
  };
  prototype$1.values = function() {
    this._get = null;
    if (this._rem.length === 0) return this._add;
    const a2 = this._add, r = this._rem, k = this._key, n = a2.length, m2 = r.length, x2 = Array(n - m2), map2 = {};
    let i, j, v;
    for (i = 0; i < m2; ++i) {
      map2[k(r[i])] = 1;
    }
    for (i = 0, j = 0; i < n; ++i) {
      if (map2[k(v = a2[i])]) {
        map2[k(v)] = 0;
      } else {
        x2[j++] = v;
      }
    }
    this._rem = [];
    return this._add = x2;
  };
  prototype$1.distinct = function(get2) {
    const v = this.values(), map2 = {};
    let n = v.length, count2 = 0, s;
    while (--n >= 0) {
      s = get2(v[n]) + "";
      if (!has$1(map2, s)) {
        map2[s] = 1;
        ++count2;
      }
    }
    return count2;
  };
  prototype$1.extent = function(get2) {
    if (this._get !== get2 || !this._ext) {
      const v = this.values(), i = extentIndex(v, get2);
      this._ext = [v[i[0]], v[i[1]]];
      this._get = get2;
    }
    return this._ext;
  };
  prototype$1.argmin = function(get2) {
    return this.extent(get2)[0] || {};
  };
  prototype$1.argmax = function(get2) {
    return this.extent(get2)[1] || {};
  };
  prototype$1.min = function(get2) {
    const m2 = this.extent(get2)[0];
    return m2 != null ? get2(m2) : void 0;
  };
  prototype$1.max = function(get2) {
    const m2 = this.extent(get2)[1];
    return m2 != null ? get2(m2) : void 0;
  };
  prototype$1.quartile = function(get2) {
    if (this._get !== get2 || !this._q) {
      this._q = quartiles(this.values(), get2);
      this._get = get2;
    }
    return this._q;
  };
  prototype$1.q1 = function(get2) {
    return this.quartile(get2)[0];
  };
  prototype$1.q2 = function(get2) {
    return this.quartile(get2)[1];
  };
  prototype$1.q3 = function(get2) {
    return this.quartile(get2)[2];
  };
  prototype$1.ci = function(get2) {
    if (this._get !== get2 || !this._ci) {
      this._ci = bootstrapCI(this.values(), 1e3, 0.05, get2);
      this._get = get2;
    }
    return this._ci;
  };
  prototype$1.ci0 = function(get2) {
    return this.ci(get2)[0];
  };
  prototype$1.ci1 = function(get2) {
    return this.ci(get2)[1];
  };
  function Aggregate$1(params2) {
    Transform.call(this, null, params2);
    this._adds = [];
    this._mods = [];
    this._alen = 0;
    this._mlen = 0;
    this._drop = true;
    this._cross = false;
    this._dims = [];
    this._dnames = [];
    this._measures = [];
    this._countOnly = false;
    this._counts = null;
    this._prev = null;
    this._inputs = null;
    this._outputs = null;
  }
  Aggregate$1.Definition = {
    "type": "Aggregate",
    "metadata": {
      "generates": true,
      "changes": true
    },
    "params": [{
      "name": "groupby",
      "type": "field",
      "array": true
    }, {
      "name": "ops",
      "type": "enum",
      "array": true,
      "values": ValidAggregateOps
    }, {
      "name": "aggregate_params",
      "type": "number",
      "null": true,
      "array": true
    }, {
      "name": "fields",
      "type": "field",
      "null": true,
      "array": true
    }, {
      "name": "as",
      "type": "string",
      "null": true,
      "array": true
    }, {
      "name": "drop",
      "type": "boolean",
      "default": true
    }, {
      "name": "cross",
      "type": "boolean",
      "default": false
    }, {
      "name": "key",
      "type": "field"
    }]
  };
  inherits(Aggregate$1, Transform, {
    transform(_, pulse2) {
      const aggr = this, out = pulse2.fork(pulse2.NO_SOURCE | pulse2.NO_FIELDS), mod = _.modified();
      aggr.stamp = out.stamp;
      if (aggr.value && (mod || pulse2.modified(aggr._inputs, true))) {
        aggr._prev = aggr.value;
        aggr.value = mod ? aggr.init(_) : /* @__PURE__ */ Object.create(null);
        pulse2.visit(pulse2.SOURCE, (t) => aggr.add(t));
      } else {
        aggr.value = aggr.value || aggr.init(_);
        pulse2.visit(pulse2.REM, (t) => aggr.rem(t));
        pulse2.visit(pulse2.ADD, (t) => aggr.add(t));
      }
      out.modifies(aggr._outputs);
      aggr._drop = _.drop !== false;
      if (_.cross && aggr._dims.length > 1) {
        aggr._drop = false;
        aggr.cross();
      }
      if (pulse2.clean() && aggr._drop) {
        out.clean(true).runAfter(() => this.clean());
      }
      return aggr.changes(out);
    },
    cross() {
      const aggr = this, curr = aggr.value, dims = aggr._dnames, vals2 = dims.map(() => ({})), n = dims.length;
      function collect2(cells) {
        let key2, i, t, v;
        for (key2 in cells) {
          t = cells[key2].tuple;
          for (i = 0; i < n; ++i) {
            vals2[i][v = t[dims[i]]] = v;
          }
        }
      }
      collect2(aggr._prev);
      collect2(curr);
      function generate2(base, tuple, index2) {
        const name = dims[index2], v = vals2[index2++];
        for (const k in v) {
          const key2 = base ? base + "|" + k : k;
          tuple[name] = v[k];
          if (index2 < n) generate2(key2, tuple, index2);
          else if (!curr[key2]) aggr.cell(key2, tuple);
        }
      }
      generate2("", {}, 0);
    },
    init(_) {
      const inputs = this._inputs = [], outputs = this._outputs = [], inputMap = {};
      function inputVisit(get2) {
        const fields2 = array$5(accessorFields(get2)), n2 = fields2.length;
        let i2 = 0, f;
        for (; i2 < n2; ++i2) {
          if (!inputMap[f = fields2[i2]]) {
            inputMap[f] = 1;
            inputs.push(f);
          }
        }
      }
      this._dims = array$5(_.groupby);
      this._dnames = this._dims.map((d) => {
        const dname = accessorName(d);
        inputVisit(d);
        outputs.push(dname);
        return dname;
      });
      this.cellkey = _.key ? _.key : groupkey(this._dims);
      this._countOnly = true;
      this._counts = [];
      this._measures = [];
      const fields = _.fields || [null], ops2 = _.ops || ["count"], aggregate_params = _.aggregate_params || [null], as = _.as || [], n = fields.length, map2 = {};
      let field2, op, aggregate_param, m2, mname, outname, i;
      if (n !== ops2.length) {
        error$1("Unmatched number of fields and aggregate ops.");
      }
      for (i = 0; i < n; ++i) {
        field2 = fields[i];
        op = ops2[i];
        aggregate_param = aggregate_params[i] || null;
        if (field2 == null && op !== "count") {
          error$1("Null aggregate field specified.");
        }
        mname = accessorName(field2);
        outname = measureName(op, mname, as[i]);
        outputs.push(outname);
        if (op === "count") {
          this._counts.push(outname);
          continue;
        }
        m2 = map2[mname];
        if (!m2) {
          inputVisit(field2);
          m2 = map2[mname] = [];
          m2.field = field2;
          this._measures.push(m2);
        }
        if (op !== "count") this._countOnly = false;
        m2.push(createMeasure(op, aggregate_param, outname));
      }
      this._measures = this._measures.map((m3) => compileMeasures(m3, m3.field));
      return /* @__PURE__ */ Object.create(null);
    },
    // -- Cell Management -----
    cellkey: groupkey(),
    cell(key2, t) {
      let cell2 = this.value[key2];
      if (!cell2) {
        cell2 = this.value[key2] = this.newcell(key2, t);
        this._adds[this._alen++] = cell2;
      } else if (cell2.num === 0 && this._drop && cell2.stamp < this.stamp) {
        cell2.stamp = this.stamp;
        this._adds[this._alen++] = cell2;
      } else if (cell2.stamp < this.stamp) {
        cell2.stamp = this.stamp;
        this._mods[this._mlen++] = cell2;
      }
      return cell2;
    },
    newcell(key2, t) {
      const cell2 = {
        key: key2,
        num: 0,
        agg: null,
        tuple: this.newtuple(t, this._prev && this._prev[key2]),
        stamp: this.stamp,
        store: false
      };
      if (!this._countOnly) {
        const measures = this._measures, n = measures.length;
        cell2.agg = Array(n);
        for (let i = 0; i < n; ++i) {
          cell2.agg[i] = new measures[i](cell2);
        }
      }
      if (cell2.store) {
        cell2.data = new TupleStore();
      }
      return cell2;
    },
    newtuple(t, p) {
      const names = this._dnames, dims = this._dims, n = dims.length, x2 = {};
      for (let i = 0; i < n; ++i) {
        x2[names[i]] = dims[i](t);
      }
      return p ? replace$1(p.tuple, x2) : ingest$1(x2);
    },
    clean() {
      const cells = this.value;
      for (const key2 in cells) {
        if (cells[key2].num === 0) {
          delete cells[key2];
        }
      }
    },
    // -- Process Tuples -----
    add(t) {
      const key2 = this.cellkey(t), cell2 = this.cell(key2, t);
      cell2.num += 1;
      if (this._countOnly) return;
      if (cell2.store) cell2.data.add(t);
      const agg = cell2.agg;
      for (let i = 0, n = agg.length; i < n; ++i) {
        agg[i].add(agg[i].get(t), t);
      }
    },
    rem(t) {
      const key2 = this.cellkey(t), cell2 = this.cell(key2, t);
      cell2.num -= 1;
      if (this._countOnly) return;
      if (cell2.store) cell2.data.rem(t);
      const agg = cell2.agg;
      for (let i = 0, n = agg.length; i < n; ++i) {
        agg[i].rem(agg[i].get(t), t);
      }
    },
    celltuple(cell2) {
      const tuple = cell2.tuple, counts = this._counts;
      if (cell2.store) {
        cell2.data.values();
      }
      for (let i = 0, n = counts.length; i < n; ++i) {
        tuple[counts[i]] = cell2.num;
      }
      if (!this._countOnly) {
        const agg = cell2.agg;
        for (let i = 0, n = agg.length; i < n; ++i) {
          agg[i].set(tuple);
        }
      }
      return tuple;
    },
    changes(out) {
      const adds = this._adds, mods = this._mods, prev = this._prev, drop = this._drop, add2 = out.add, rem2 = out.rem, mod = out.mod;
      let cell2, key2, i, n;
      if (prev) for (key2 in prev) {
        cell2 = prev[key2];
        if (!drop || cell2.num) rem2.push(cell2.tuple);
      }
      for (i = 0, n = this._alen; i < n; ++i) {
        add2.push(this.celltuple(adds[i]));
        adds[i] = null;
      }
      for (i = 0, n = this._mlen; i < n; ++i) {
        cell2 = mods[i];
        (cell2.num === 0 && drop ? rem2 : mod).push(this.celltuple(cell2));
        mods[i] = null;
      }
      this._alen = this._mlen = 0;
      this._prev = null;
      return out;
    }
  });
  const EPSILON$1 = 1e-14;
  function Bin(params2) {
    Transform.call(this, null, params2);
  }
  Bin.Definition = {
    "type": "Bin",
    "metadata": {
      "modifies": true
    },
    "params": [{
      "name": "field",
      "type": "field",
      "required": true
    }, {
      "name": "interval",
      "type": "boolean",
      "default": true
    }, {
      "name": "anchor",
      "type": "number"
    }, {
      "name": "maxbins",
      "type": "number",
      "default": 20
    }, {
      "name": "base",
      "type": "number",
      "default": 10
    }, {
      "name": "divide",
      "type": "number",
      "array": true,
      "default": [5, 2]
    }, {
      "name": "extent",
      "type": "number",
      "array": true,
      "length": 2,
      "required": true
    }, {
      "name": "span",
      "type": "number"
    }, {
      "name": "step",
      "type": "number"
    }, {
      "name": "steps",
      "type": "number",
      "array": true
    }, {
      "name": "minstep",
      "type": "number",
      "default": 0
    }, {
      "name": "nice",
      "type": "boolean",
      "default": true
    }, {
      "name": "name",
      "type": "string"
    }, {
      "name": "as",
      "type": "string",
      "array": true,
      "length": 2,
      "default": ["bin0", "bin1"]
    }]
  };
  inherits(Bin, Transform, {
    transform(_, pulse2) {
      const band2 = _.interval !== false, bins2 = this._bins(_), start = bins2.start, step = bins2.step, as = _.as || ["bin0", "bin1"], b0 = as[0], b1 = as[1];
      let flag2;
      if (_.modified()) {
        pulse2 = pulse2.reflow(true);
        flag2 = pulse2.SOURCE;
      } else {
        flag2 = pulse2.modified(accessorFields(_.field)) ? pulse2.ADD_MOD : pulse2.ADD;
      }
      pulse2.visit(flag2, band2 ? (t) => {
        const v = bins2(t);
        t[b0] = v;
        t[b1] = v == null ? null : start + step * (1 + (v - start) / step);
      } : (t) => t[b0] = bins2(t));
      return pulse2.modifies(band2 ? as : b0);
    },
    _bins(_) {
      if (this.value && !_.modified()) {
        return this.value;
      }
      const field2 = _.field, bins2 = bin(_), step = bins2.step;
      let start = bins2.start, stop2 = start + Math.ceil((bins2.stop - start) / step) * step, a2, d;
      if ((a2 = _.anchor) != null) {
        d = a2 - (start + step * Math.floor((a2 - start) / step));
        start += d;
        stop2 += d;
      }
      const f = function(t) {
        let v = toNumber(field2(t));
        return v == null ? null : v < start ? -Infinity : v > stop2 ? Infinity : (v = Math.max(start, Math.min(v, stop2 - step)), start + step * Math.floor(EPSILON$1 + (v - start) / step));
      };
      f.start = start;
      f.stop = bins2.stop;
      f.step = step;
      return this.value = accessor(f, accessorFields(field2), _.name || "bin_" + accessorName(field2));
    }
  });
  function SortedList(idFunc, source2, input) {
    const $2 = idFunc;
    let data2 = source2 || [], add2 = input || [], rem2 = {}, cnt = 0;
    return {
      add: (t) => add2.push(t),
      remove: (t) => rem2[$2(t)] = ++cnt,
      size: () => data2.length,
      data: (compare2, resort) => {
        if (cnt) {
          data2 = data2.filter((t) => !rem2[$2(t)]);
          rem2 = {};
          cnt = 0;
        }
        if (resort && compare2) {
          data2.sort(compare2);
        }
        if (add2.length) {
          data2 = compare2 ? merge$3(compare2, data2, add2.sort(compare2)) : data2.concat(add2);
          add2 = [];
        }
        return data2;
      }
    };
  }
  function Collect$1(params2) {
    Transform.call(this, [], params2);
  }
  Collect$1.Definition = {
    "type": "Collect",
    "metadata": {
      "source": true
    },
    "params": [{
      "name": "sort",
      "type": "compare"
    }]
  };
  inherits(Collect$1, Transform, {
    transform(_, pulse2) {
      const out = pulse2.fork(pulse2.ALL), list = SortedList(tupleid, this.value, out.materialize(out.ADD).add), sort2 = _.sort, mod = pulse2.changed() || sort2 && (_.modified("sort") || pulse2.modified(sort2.fields));
      out.visit(out.REM, list.remove);
      this.modified(mod);
      this.value = out.source = list.data(stableCompare(sort2), mod);
      if (pulse2.source && pulse2.source.root) {
        this.value.root = pulse2.source.root;
      }
      return out;
    }
  });
  function Compare$1(params2) {
    Operator.call(this, null, update$5, params2);
  }
  inherits(Compare$1, Operator);
  function update$5(_) {
    return this.value && !_.modified() ? this.value : compare$2(_.fields, _.orders);
  }
  function CountPattern(params2) {
    Transform.call(this, null, params2);
  }
  CountPattern.Definition = {
    "type": "CountPattern",
    "metadata": {
      "generates": true,
      "changes": true
    },
    "params": [{
      "name": "field",
      "type": "field",
      "required": true
    }, {
      "name": "case",
      "type": "enum",
      "values": ["upper", "lower", "mixed"],
      "default": "mixed"
    }, {
      "name": "pattern",
      "type": "string",
      "default": '[\\w"]+'
    }, {
      "name": "stopwords",
      "type": "string",
      "default": ""
    }, {
      "name": "as",
      "type": "string",
      "array": true,
      "length": 2,
      "default": ["text", "count"]
    }]
  };
  function tokenize(text2, tcase, match2) {
    switch (tcase) {
      case "upper":
        text2 = text2.toUpperCase();
        break;
      case "lower":
        text2 = text2.toLowerCase();
        break;
    }
    return text2.match(match2);
  }
  inherits(CountPattern, Transform, {
    transform(_, pulse2) {
      const process2 = (update2) => (tuple) => {
        var tokens = tokenize(get2(tuple), _.case, match2) || [], t;
        for (var i = 0, n = tokens.length; i < n; ++i) {
          if (!stop2.test(t = tokens[i])) update2(t);
        }
      };
      const init2 = this._parameterCheck(_, pulse2), counts = this._counts, match2 = this._match, stop2 = this._stop, get2 = _.field, as = _.as || ["text", "count"], add2 = process2((t) => counts[t] = 1 + (counts[t] || 0)), rem2 = process2((t) => counts[t] -= 1);
      if (init2) {
        pulse2.visit(pulse2.SOURCE, add2);
      } else {
        pulse2.visit(pulse2.ADD, add2);
        pulse2.visit(pulse2.REM, rem2);
      }
      return this._finish(pulse2, as);
    },
    _parameterCheck(_, pulse2) {
      let init2 = false;
      if (_.modified("stopwords") || !this._stop) {
        this._stop = new RegExp("^" + (_.stopwords || "") + "$", "i");
        init2 = true;
      }
      if (_.modified("pattern") || !this._match) {
        this._match = new RegExp(_.pattern || "[\\w']+", "g");
        init2 = true;
      }
      if (_.modified("field") || pulse2.modified(_.field.fields)) {
        init2 = true;
      }
      if (init2) this._counts = {};
      return init2;
    },
    _finish(pulse2, as) {
      const counts = this._counts, tuples = this._tuples || (this._tuples = {}), text2 = as[0], count2 = as[1], out = pulse2.fork(pulse2.NO_SOURCE | pulse2.NO_FIELDS);
      let w2, t, c2;
      for (w2 in counts) {
        t = tuples[w2];
        c2 = counts[w2] || 0;
        if (!t && c2) {
          tuples[w2] = t = ingest$1({});
          t[text2] = w2;
          t[count2] = c2;
          out.add.push(t);
        } else if (c2 === 0) {
          if (t) out.rem.push(t);
          counts[w2] = null;
          tuples[w2] = null;
        } else if (t[count2] !== c2) {
          t[count2] = c2;
          out.mod.push(t);
        }
      }
      return out.modifies(as);
    }
  });
  function Cross(params2) {
    Transform.call(this, null, params2);
  }
  Cross.Definition = {
    "type": "Cross",
    "metadata": {
      "generates": true
    },
    "params": [{
      "name": "filter",
      "type": "expr"
    }, {
      "name": "as",
      "type": "string",
      "array": true,
      "length": 2,
      "default": ["a", "b"]
    }]
  };
  inherits(Cross, Transform, {
    transform(_, pulse2) {
      const out = pulse2.fork(pulse2.NO_SOURCE), as = _.as || ["a", "b"], a2 = as[0], b2 = as[1], reset2 = !this.value || pulse2.changed(pulse2.ADD_REM) || _.modified("as") || _.modified("filter");
      let data2 = this.value;
      if (reset2) {
        if (data2) out.rem = data2;
        data2 = pulse2.materialize(pulse2.SOURCE).source;
        out.add = this.value = cross(data2, a2, b2, _.filter || truthy);
      } else {
        out.mod = data2;
      }
      out.source = this.value;
      return out.modifies(as);
    }
  });
  function cross(input, a2, b2, filter2) {
    var data2 = [], t = {}, n = input.length, i = 0, j, left;
    for (; i < n; ++i) {
      t[a2] = left = input[i];
      for (j = 0; j < n; ++j) {
        t[b2] = input[j];
        if (filter2(t)) {
          data2.push(ingest$1(t));
          t = {};
          t[a2] = left;
        }
      }
    }
    return data2;
  }
  const Distributions = {
    kde,
    mixture: mixture$1,
    normal: gaussian,
    lognormal,
    uniform
  };
  const DISTRIBUTIONS = "distributions", FUNCTION = "function", FIELD = "field";
  function parse$4(def2, data2) {
    const func = def2[FUNCTION];
    if (!has$1(Distributions, func)) {
      error$1("Unknown distribution function: " + func);
    }
    const d = Distributions[func]();
    for (const name in def2) {
      if (name === FIELD) {
        d.data((def2.from || data2()).map(def2[name]));
      } else if (name === DISTRIBUTIONS) {
        d[name](def2[name].map((_) => parse$4(_, data2)));
      } else if (typeof d[name] === FUNCTION) {
        d[name](def2[name]);
      }
    }
    return d;
  }
  function Density(params2) {
    Transform.call(this, null, params2);
  }
  const distributions = [{
    "key": {
      "function": "normal"
    },
    "params": [{
      "name": "mean",
      "type": "number",
      "default": 0
    }, {
      "name": "stdev",
      "type": "number",
      "default": 1
    }]
  }, {
    "key": {
      "function": "lognormal"
    },
    "params": [{
      "name": "mean",
      "type": "number",
      "default": 0
    }, {
      "name": "stdev",
      "type": "number",
      "default": 1
    }]
  }, {
    "key": {
      "function": "uniform"
    },
    "params": [{
      "name": "min",
      "type": "number",
      "default": 0
    }, {
      "name": "max",
      "type": "number",
      "default": 1
    }]
  }, {
    "key": {
      "function": "kde"
    },
    "params": [{
      "name": "field",
      "type": "field",
      "required": true
    }, {
      "name": "from",
      "type": "data"
    }, {
      "name": "bandwidth",
      "type": "number",
      "default": 0
    }]
  }];
  const mixture = {
    "key": {
      "function": "mixture"
    },
    "params": [{
      "name": "distributions",
      "type": "param",
      "array": true,
      "params": distributions
    }, {
      "name": "weights",
      "type": "number",
      "array": true
    }]
  };
  Density.Definition = {
    "type": "Density",
    "metadata": {
      "generates": true
    },
    "params": [{
      "name": "extent",
      "type": "number",
      "array": true,
      "length": 2
    }, {
      "name": "steps",
      "type": "number"
    }, {
      "name": "minsteps",
      "type": "number",
      "default": 25
    }, {
      "name": "maxsteps",
      "type": "number",
      "default": 200
    }, {
      "name": "method",
      "type": "string",
      "default": "pdf",
      "values": ["pdf", "cdf"]
    }, {
      "name": "distribution",
      "type": "param",
      "params": distributions.concat(mixture)
    }, {
      "name": "as",
      "type": "string",
      "array": true,
      "default": ["value", "density"]
    }]
  };
  inherits(Density, Transform, {
    transform(_, pulse2) {
      const out = pulse2.fork(pulse2.NO_SOURCE | pulse2.NO_FIELDS);
      if (!this.value || pulse2.changed() || _.modified()) {
        const dist2 = parse$4(_.distribution, source$2(pulse2)), minsteps = _.steps || _.minsteps || 25, maxsteps = _.steps || _.maxsteps || 200;
        let method2 = _.method || "pdf";
        if (method2 !== "pdf" && method2 !== "cdf") {
          error$1("Invalid density method: " + method2);
        }
        if (!_.extent && !dist2.data) {
          error$1("Missing density extent parameter.");
        }
        method2 = dist2[method2];
        const as = _.as || ["value", "density"], domain2 = _.extent || extent(dist2.data()), values2 = sampleCurve(method2, domain2, minsteps, maxsteps).map((v) => {
          const tuple = {};
          tuple[as[0]] = v[0];
          tuple[as[1]] = v[1];
          return ingest$1(tuple);
        });
        if (this.value) out.rem = this.value;
        this.value = out.add = out.source = values2;
      }
      return out;
    }
  });
  function source$2(pulse2) {
    return () => pulse2.materialize(pulse2.SOURCE).source;
  }
  function fieldNames(fields, as) {
    if (!fields) return null;
    return fields.map((f, i) => as[i] || accessorName(f));
  }
  function partition$1$1(data2, groupby, field2) {
    const groups = [], get2 = (f) => f(t);
    let map2, i, n, t, k, g;
    if (groupby == null) {
      groups.push(data2.map(field2));
    } else {
      for (map2 = {}, i = 0, n = data2.length; i < n; ++i) {
        t = data2[i];
        k = groupby.map(get2);
        g = map2[k];
        if (!g) {
          map2[k] = g = [];
          g.dims = k;
          groups.push(g);
        }
        g.push(field2(t));
      }
    }
    return groups;
  }
  const Output$5 = "bin";
  function DotBin(params2) {
    Transform.call(this, null, params2);
  }
  DotBin.Definition = {
    "type": "DotBin",
    "metadata": {
      "modifies": true
    },
    "params": [{
      "name": "field",
      "type": "field",
      "required": true
    }, {
      "name": "groupby",
      "type": "field",
      "array": true
    }, {
      "name": "step",
      "type": "number"
    }, {
      "name": "smooth",
      "type": "boolean",
      "default": false
    }, {
      "name": "as",
      "type": "string",
      "default": Output$5
    }]
  };
  const autostep = (data2, field2) => span(extent(data2, field2)) / 30;
  inherits(DotBin, Transform, {
    transform(_, pulse2) {
      if (this.value && !(_.modified() || pulse2.changed())) {
        return pulse2;
      }
      const source2 = pulse2.materialize(pulse2.SOURCE).source, groups = partition$1$1(pulse2.source, _.groupby, identity$6), smooth = _.smooth || false, field2 = _.field, step = _.step || autostep(source2, field2), sort2 = stableCompare((a2, b2) => field2(a2) - field2(b2)), as = _.as || Output$5, n = groups.length;
      let min2 = Infinity, max2 = -Infinity, i = 0, j;
      for (; i < n; ++i) {
        const g = groups[i].sort(sort2);
        j = -1;
        for (const v of dotbin(g, step, smooth, field2)) {
          if (v < min2) min2 = v;
          if (v > max2) max2 = v;
          g[++j][as] = v;
        }
      }
      this.value = {
        start: min2,
        stop: max2,
        step
      };
      return pulse2.reflow(true).modifies(as);
    }
  });
  function Expression$1(params2) {
    Operator.call(this, null, update$4, params2);
    this.modified(true);
  }
  inherits(Expression$1, Operator);
  function update$4(_) {
    const expr2 = _.expr;
    return this.value && !_.modified("expr") ? this.value : accessor((datum2) => expr2(datum2, _), accessorFields(expr2), accessorName(expr2));
  }
  function Extent(params2) {
    Transform.call(this, [void 0, void 0], params2);
  }
  Extent.Definition = {
    "type": "Extent",
    "metadata": {},
    "params": [{
      "name": "field",
      "type": "field",
      "required": true
    }]
  };
  inherits(Extent, Transform, {
    transform(_, pulse2) {
      const extent2 = this.value, field2 = _.field, mod = pulse2.changed() || pulse2.modified(field2.fields) || _.modified("field");
      let min2 = extent2[0], max2 = extent2[1];
      if (mod || min2 == null) {
        min2 = Infinity;
        max2 = -Infinity;
      }
      pulse2.visit(mod ? pulse2.SOURCE : pulse2.ADD, (t) => {
        const v = toNumber(field2(t));
        if (v != null) {
          if (v < min2) min2 = v;
          if (v > max2) max2 = v;
        }
      });
      if (!Number.isFinite(min2) || !Number.isFinite(max2)) {
        let name = accessorName(field2);
        if (name) name = ` for field "${name}"`;
        pulse2.dataflow.warn(`Infinite extent${name}: [${min2}, ${max2}]`);
        min2 = max2 = void 0;
      }
      this.value = [min2, max2];
    }
  });
  function Subflow(pulse2, parent) {
    Operator.call(this, pulse2);
    this.parent = parent;
    this.count = 0;
  }
  inherits(Subflow, Operator, {
    /**
     * Routes pulses from this subflow to a target transform.
     * @param {Transform} target - A transform that receives the subflow of tuples.
     */
    connect(target2) {
      this.detachSubflow = target2.detachSubflow;
      this.targets().add(target2);
      return target2.source = this;
    },
    /**
     * Add an 'add' tuple to the subflow pulse.
     * @param {Tuple} t - The tuple being added.
     */
    add(t) {
      this.count += 1;
      this.value.add.push(t);
    },
    /**
     * Add a 'rem' tuple to the subflow pulse.
     * @param {Tuple} t - The tuple being removed.
     */
    rem(t) {
      this.count -= 1;
      this.value.rem.push(t);
    },
    /**
     * Add a 'mod' tuple to the subflow pulse.
     * @param {Tuple} t - The tuple being modified.
     */
    mod(t) {
      this.value.mod.push(t);
    },
    /**
     * Re-initialize this operator's pulse value.
     * @param {Pulse} pulse - The pulse to copy from.
     * @see Pulse.init
     */
    init(pulse2) {
      this.value.init(pulse2, pulse2.NO_SOURCE);
    },
    /**
     * Evaluate this operator. This method overrides the
     * default behavior to simply return the contained pulse value.
     * @return {Pulse}
     */
    evaluate() {
      return this.value;
    }
  });
  function Facet$1(params2) {
    Transform.call(this, {}, params2);
    this._keys = fastmap();
    const a2 = this._targets = [];
    a2.active = 0;
    a2.forEach = (f) => {
      for (let i = 0, n = a2.active; i < n; ++i) {
        f(a2[i], i, a2);
      }
    };
  }
  inherits(Facet$1, Transform, {
    activate(flow) {
      this._targets[this._targets.active++] = flow;
    },
    // parent argument provided by PreFacet subclass
    subflow(key2, flow, pulse2, parent) {
      const flows = this.value;
      let sf = has$1(flows, key2) && flows[key2], df, p;
      if (!sf) {
        p = parent || (p = this._group[key2]) && p.tuple;
        df = pulse2.dataflow;
        sf = new Subflow(pulse2.fork(pulse2.NO_SOURCE), this);
        df.add(sf).connect(flow(df, key2, p));
        flows[key2] = sf;
        this.activate(sf);
      } else if (sf.value.stamp < pulse2.stamp) {
        sf.init(pulse2);
        this.activate(sf);
      }
      return sf;
    },
    clean() {
      const flows = this.value;
      let detached = 0;
      for (const key2 in flows) {
        if (flows[key2].count === 0) {
          const detach2 = flows[key2].detachSubflow;
          if (detach2) detach2();
          delete flows[key2];
          ++detached;
        }
      }
      if (detached) {
        const active = this._targets.filter((sf) => sf && sf.count > 0);
        this.initTargets(active);
      }
    },
    initTargets(act) {
      const a2 = this._targets, n = a2.length, m2 = act ? act.length : 0;
      let i = 0;
      for (; i < m2; ++i) {
        a2[i] = act[i];
      }
      for (; i < n && a2[i] != null; ++i) {
        a2[i] = null;
      }
      a2.active = m2;
    },
    transform(_, pulse2) {
      const df = pulse2.dataflow, key2 = _.key, flow = _.subflow, cache2 = this._keys, rekey = _.modified("key"), subflow = (key3) => this.subflow(key3, flow, pulse2);
      this._group = _.group || {};
      this.initTargets();
      pulse2.visit(pulse2.REM, (t) => {
        const id2 = tupleid(t), k = cache2.get(id2);
        if (k !== void 0) {
          cache2.delete(id2);
          subflow(k).rem(t);
        }
      });
      pulse2.visit(pulse2.ADD, (t) => {
        const k = key2(t);
        cache2.set(tupleid(t), k);
        subflow(k).add(t);
      });
      if (rekey || pulse2.modified(key2.fields)) {
        pulse2.visit(pulse2.MOD, (t) => {
          const id2 = tupleid(t), k0 = cache2.get(id2), k1 = key2(t);
          if (k0 === k1) {
            subflow(k1).mod(t);
          } else {
            cache2.set(id2, k1);
            subflow(k0).rem(t);
            subflow(k1).add(t);
          }
        });
      } else if (pulse2.changed(pulse2.MOD)) {
        pulse2.visit(pulse2.MOD, (t) => {
          subflow(cache2.get(tupleid(t))).mod(t);
        });
      }
      if (rekey) {
        pulse2.visit(pulse2.REFLOW, (t) => {
          const id2 = tupleid(t), k0 = cache2.get(id2), k1 = key2(t);
          if (k0 !== k1) {
            cache2.set(id2, k1);
            subflow(k0).rem(t);
            subflow(k1).add(t);
          }
        });
      }
      if (pulse2.clean()) {
        df.runAfter(() => {
          this.clean();
          cache2.clean();
        });
      } else if (cache2.empty > df.cleanThreshold) {
        df.runAfter(cache2.clean);
      }
      return pulse2;
    }
  });
  function Field$1(params2) {
    Operator.call(this, null, update$3, params2);
  }
  inherits(Field$1, Operator);
  function update$3(_) {
    return this.value && !_.modified() ? this.value : isArray(_.name) ? array$5(_.name).map((f) => field$1(f)) : field$1(_.name, _.as);
  }
  function Filter(params2) {
    Transform.call(this, fastmap(), params2);
  }
  Filter.Definition = {
    "type": "Filter",
    "metadata": {
      "changes": true
    },
    "params": [{
      "name": "expr",
      "type": "expr",
      "required": true
    }]
  };
  inherits(Filter, Transform, {
    transform(_, pulse2) {
      const df = pulse2.dataflow, cache2 = this.value, output2 = pulse2.fork(), add2 = output2.add, rem2 = output2.rem, mod = output2.mod, test2 = _.expr;
      let isMod = true;
      pulse2.visit(pulse2.REM, (t) => {
        const id2 = tupleid(t);
        if (!cache2.has(id2)) rem2.push(t);
        else cache2.delete(id2);
      });
      pulse2.visit(pulse2.ADD, (t) => {
        if (test2(t, _)) add2.push(t);
        else cache2.set(tupleid(t), 1);
      });
      function revisit(t) {
        const id2 = tupleid(t), b2 = test2(t, _), s = cache2.get(id2);
        if (b2 && s) {
          cache2.delete(id2);
          add2.push(t);
        } else if (!b2 && !s) {
          cache2.set(id2, 1);
          rem2.push(t);
        } else if (isMod && b2 && !s) {
          mod.push(t);
        }
      }
      pulse2.visit(pulse2.MOD, revisit);
      if (_.modified()) {
        isMod = false;
        pulse2.visit(pulse2.REFLOW, revisit);
      }
      if (cache2.empty > df.cleanThreshold) df.runAfter(cache2.clean);
      return output2;
    }
  });
  function Flatten(params2) {
    Transform.call(this, [], params2);
  }
  Flatten.Definition = {
    "type": "Flatten",
    "metadata": {
      "generates": true
    },
    "params": [{
      "name": "fields",
      "type": "field",
      "array": true,
      "required": true
    }, {
      "name": "index",
      "type": "string"
    }, {
      "name": "as",
      "type": "string",
      "array": true
    }]
  };
  inherits(Flatten, Transform, {
    transform(_, pulse2) {
      const out = pulse2.fork(pulse2.NO_SOURCE), fields = _.fields, as = fieldNames(fields, _.as || []), index2 = _.index || null, m2 = as.length;
      out.rem = this.value;
      pulse2.visit(pulse2.SOURCE, (t) => {
        const arrays = fields.map((f) => f(t)), maxlen = arrays.reduce((l, a2) => Math.max(l, a2.length), 0);
        let i = 0, j, d, v;
        for (; i < maxlen; ++i) {
          d = derive(t);
          for (j = 0; j < m2; ++j) {
            d[as[j]] = (v = arrays[j][i]) == null ? null : v;
          }
          if (index2) {
            d[index2] = i;
          }
          out.add.push(d);
        }
      });
      this.value = out.source = out.add;
      if (index2) out.modifies(index2);
      return out.modifies(as);
    }
  });
  function Fold(params2) {
    Transform.call(this, [], params2);
  }
  Fold.Definition = {
    "type": "Fold",
    "metadata": {
      "generates": true
    },
    "params": [{
      "name": "fields",
      "type": "field",
      "array": true,
      "required": true
    }, {
      "name": "as",
      "type": "string",
      "array": true,
      "length": 2,
      "default": ["key", "value"]
    }]
  };
  inherits(Fold, Transform, {
    transform(_, pulse2) {
      const out = pulse2.fork(pulse2.NO_SOURCE), fields = _.fields, fnames = fields.map(accessorName), as = _.as || ["key", "value"], k = as[0], v = as[1], n = fields.length;
      out.rem = this.value;
      pulse2.visit(pulse2.SOURCE, (t) => {
        for (let i = 0, d; i < n; ++i) {
          d = derive(t);
          d[k] = fnames[i];
          d[v] = fields[i](t);
          out.add.push(d);
        }
      });
      this.value = out.source = out.add;
      return out.modifies(as);
    }
  });
  function Formula(params2) {
    Transform.call(this, null, params2);
  }
  Formula.Definition = {
    "type": "Formula",
    "metadata": {
      "modifies": true
    },
    "params": [{
      "name": "expr",
      "type": "expr",
      "required": true
    }, {
      "name": "as",
      "type": "string",
      "required": true
    }, {
      "name": "initonly",
      "type": "boolean"
    }]
  };
  inherits(Formula, Transform, {
    transform(_, pulse2) {
      const func = _.expr, as = _.as, mod = _.modified(), flag2 = _.initonly ? pulse2.ADD : mod ? pulse2.SOURCE : pulse2.modified(func.fields) || pulse2.modified(as) ? pulse2.ADD_MOD : pulse2.ADD;
      if (mod) {
        pulse2 = pulse2.materialize().reflow(true);
      }
      if (!_.initonly) {
        pulse2.modifies(as);
      }
      return pulse2.visit(flag2, (t) => t[as] = func(t, _));
    }
  });
  function Generate(params2) {
    Transform.call(this, [], params2);
  }
  inherits(Generate, Transform, {
    transform(_, pulse2) {
      const out = pulse2.fork(pulse2.ALL), gen = _.generator;
      let data2 = this.value, num = _.size - data2.length, add2, rem2, t;
      if (num > 0) {
        for (add2 = []; --num >= 0; ) {
          add2.push(t = ingest$1(gen(_)));
          data2.push(t);
        }
        out.add = out.add.length ? out.materialize(out.ADD).add.concat(add2) : add2;
      } else {
        rem2 = data2.slice(0, -num);
        out.rem = out.rem.length ? out.materialize(out.REM).rem.concat(rem2) : rem2;
        data2 = data2.slice(-num);
      }
      out.source = this.value = data2;
      return out;
    }
  });
  const Methods$1 = {
    value: "value",
    median,
    mean,
    min: min$2,
    max: max$2
  };
  const Empty$1 = [];
  function Impute(params2) {
    Transform.call(this, [], params2);
  }
  Impute.Definition = {
    "type": "Impute",
    "metadata": {
      "changes": true
    },
    "params": [{
      "name": "field",
      "type": "field",
      "required": true
    }, {
      "name": "key",
      "type": "field",
      "required": true
    }, {
      "name": "keyvals",
      "array": true
    }, {
      "name": "groupby",
      "type": "field",
      "array": true
    }, {
      "name": "method",
      "type": "enum",
      "default": "value",
      "values": ["value", "mean", "median", "max", "min"]
    }, {
      "name": "value",
      "default": 0
    }]
  };
  function getValue(_) {
    var m2 = _.method || Methods$1.value, v;
    if (Methods$1[m2] == null) {
      error$1("Unrecognized imputation method: " + m2);
    } else if (m2 === Methods$1.value) {
      v = _.value !== void 0 ? _.value : 0;
      return () => v;
    } else {
      return Methods$1[m2];
    }
  }
  function getField$1(_) {
    const f = _.field;
    return (t) => t ? f(t) : NaN;
  }
  inherits(Impute, Transform, {
    transform(_, pulse2) {
      var out = pulse2.fork(pulse2.ALL), impute = getValue(_), field2 = getField$1(_), fName = accessorName(_.field), kName = accessorName(_.key), gNames = (_.groupby || []).map(accessorName), groups = partition$4(pulse2.source, _.groupby, _.key, _.keyvals), curr = [], prev = this.value, m2 = groups.domain.length, group2, value2, gVals, kVal, g, i, j, l, n, t;
      for (g = 0, l = groups.length; g < l; ++g) {
        group2 = groups[g];
        gVals = group2.values;
        value2 = NaN;
        for (j = 0; j < m2; ++j) {
          if (group2[j] != null) continue;
          kVal = groups.domain[j];
          t = {
            _impute: true
          };
          for (i = 0, n = gVals.length; i < n; ++i) t[gNames[i]] = gVals[i];
          t[kName] = kVal;
          t[fName] = Number.isNaN(value2) ? value2 = impute(group2, field2) : value2;
          curr.push(ingest$1(t));
        }
      }
      if (curr.length) out.add = out.materialize(out.ADD).add.concat(curr);
      if (prev.length) out.rem = out.materialize(out.REM).rem.concat(prev);
      this.value = curr;
      return out;
    }
  });
  function partition$4(data2, groupby, key2, keyvals) {
    var get2 = (f) => f(t), groups = [], domain2 = keyvals ? keyvals.slice() : [], kMap = {}, gMap = {}, gVals, gKey, group2, i, j, k, n, t;
    domain2.forEach((k2, i2) => kMap[k2] = i2 + 1);
    for (i = 0, n = data2.length; i < n; ++i) {
      t = data2[i];
      k = key2(t);
      j = kMap[k] || (kMap[k] = domain2.push(k));
      gKey = (gVals = groupby ? groupby.map(get2) : Empty$1) + "";
      if (!(group2 = gMap[gKey])) {
        group2 = gMap[gKey] = [];
        groups.push(group2);
        group2.values = gVals;
      }
      group2[j - 1] = t;
    }
    groups.domain = domain2;
    return groups;
  }
  function JoinAggregate(params2) {
    Aggregate$1.call(this, params2);
  }
  JoinAggregate.Definition = {
    "type": "JoinAggregate",
    "metadata": {
      "modifies": true
    },
    "params": [{
      "name": "groupby",
      "type": "field",
      "array": true
    }, {
      "name": "fields",
      "type": "field",
      "null": true,
      "array": true
    }, {
      "name": "ops",
      "type": "enum",
      "array": true,
      "values": ValidAggregateOps
    }, {
      "name": "as",
      "type": "string",
      "null": true,
      "array": true
    }, {
      "name": "key",
      "type": "field"
    }]
  };
  inherits(JoinAggregate, Aggregate$1, {
    transform(_, pulse2) {
      const aggr = this, mod = _.modified();
      let cells;
      if (aggr.value && (mod || pulse2.modified(aggr._inputs, true))) {
        cells = aggr.value = mod ? aggr.init(_) : {};
        pulse2.visit(pulse2.SOURCE, (t) => aggr.add(t));
      } else {
        cells = aggr.value = aggr.value || this.init(_);
        pulse2.visit(pulse2.REM, (t) => aggr.rem(t));
        pulse2.visit(pulse2.ADD, (t) => aggr.add(t));
      }
      aggr.changes();
      pulse2.visit(pulse2.SOURCE, (t) => {
        extend$1(t, cells[aggr.cellkey(t)].tuple);
      });
      return pulse2.reflow(mod).modifies(this._outputs);
    },
    changes() {
      const adds = this._adds, mods = this._mods;
      let i, n;
      for (i = 0, n = this._alen; i < n; ++i) {
        this.celltuple(adds[i]);
        adds[i] = null;
      }
      for (i = 0, n = this._mlen; i < n; ++i) {
        this.celltuple(mods[i]);
        mods[i] = null;
      }
      this._alen = this._mlen = 0;
    }
  });
  function KDE(params2) {
    Transform.call(this, null, params2);
  }
  KDE.Definition = {
    "type": "KDE",
    "metadata": {
      "generates": true
    },
    "params": [{
      "name": "groupby",
      "type": "field",
      "array": true
    }, {
      "name": "field",
      "type": "field",
      "required": true
    }, {
      "name": "cumulative",
      "type": "boolean",
      "default": false
    }, {
      "name": "counts",
      "type": "boolean",
      "default": false
    }, {
      "name": "bandwidth",
      "type": "number",
      "default": 0
    }, {
      "name": "extent",
      "type": "number",
      "array": true,
      "length": 2
    }, {
      "name": "resolve",
      "type": "enum",
      "values": ["shared", "independent"],
      "default": "independent"
    }, {
      "name": "steps",
      "type": "number"
    }, {
      "name": "minsteps",
      "type": "number",
      "default": 25
    }, {
      "name": "maxsteps",
      "type": "number",
      "default": 200
    }, {
      "name": "as",
      "type": "string",
      "array": true,
      "default": ["value", "density"]
    }]
  };
  inherits(KDE, Transform, {
    transform(_, pulse2) {
      const out = pulse2.fork(pulse2.NO_SOURCE | pulse2.NO_FIELDS);
      if (!this.value || pulse2.changed() || _.modified()) {
        const source2 = pulse2.materialize(pulse2.SOURCE).source, groups = partition$1$1(source2, _.groupby, _.field), names = (_.groupby || []).map(accessorName), bandwidth2 = _.bandwidth, method2 = _.cumulative ? "cdf" : "pdf", as = _.as || ["value", "density"], values2 = [];
        let domain2 = _.extent, minsteps = _.steps || _.minsteps || 25, maxsteps = _.steps || _.maxsteps || 200;
        if (method2 !== "pdf" && method2 !== "cdf") {
          error$1("Invalid density method: " + method2);
        }
        if (_.resolve === "shared") {
          if (!domain2) domain2 = extent(source2, _.field);
          minsteps = maxsteps = _.steps || maxsteps;
        }
        groups.forEach((g) => {
          const density = kde(g, bandwidth2)[method2], scale2 = _.counts ? g.length : 1, local = domain2 || extent(g);
          sampleCurve(density, local, minsteps, maxsteps).forEach((v) => {
            const t = {};
            for (let i = 0; i < names.length; ++i) {
              t[names[i]] = g.dims[i];
            }
            t[as[0]] = v[0];
            t[as[1]] = v[1] * scale2;
            values2.push(ingest$1(t));
          });
        });
        if (this.value) out.rem = this.value;
        this.value = out.add = out.source = values2;
      }
      return out;
    }
  });
  function Key$1(params2) {
    Operator.call(this, null, update$2, params2);
  }
  inherits(Key$1, Operator);
  function update$2(_) {
    return this.value && !_.modified() ? this.value : key(_.fields, _.flat);
  }
  function Load$1(params2) {
    Transform.call(this, [], params2);
    this._pending = null;
  }
  inherits(Load$1, Transform, {
    transform(_, pulse2) {
      const df = pulse2.dataflow;
      if (this._pending) {
        return output(this, pulse2, this._pending);
      }
      if (stop(_)) return pulse2.StopPropagation;
      if (_.values) {
        return output(this, pulse2, df.parse(_.values, _.format));
      } else if (_.async) {
        const p = df.request(_.url, _.format).then((res) => {
          this._pending = array$5(res.data);
          return (df2) => df2.touch(this);
        });
        return {
          async: p
        };
      } else {
        return df.request(_.url, _.format).then((res) => output(this, pulse2, array$5(res.data)));
      }
    }
  });
  function stop(_) {
    return _.modified("async") && !(_.modified("values") || _.modified("url") || _.modified("format"));
  }
  function output(op, pulse2, data2) {
    data2.forEach(ingest$1);
    const out = pulse2.fork(pulse2.NO_FIELDS & pulse2.NO_SOURCE);
    out.rem = op.value;
    op.value = out.source = out.add = data2;
    op._pending = null;
    if (out.rem.length) out.clean(true);
    return out;
  }
  function Lookup(params2) {
    Transform.call(this, {}, params2);
  }
  Lookup.Definition = {
    "type": "Lookup",
    "metadata": {
      "modifies": true
    },
    "params": [{
      "name": "index",
      "type": "index",
      "params": [{
        "name": "from",
        "type": "data",
        "required": true
      }, {
        "name": "key",
        "type": "field",
        "required": true
      }]
    }, {
      "name": "values",
      "type": "field",
      "array": true
    }, {
      "name": "fields",
      "type": "field",
      "array": true,
      "required": true
    }, {
      "name": "as",
      "type": "string",
      "array": true
    }, {
      "name": "default",
      "default": null
    }]
  };
  inherits(Lookup, Transform, {
    transform(_, pulse2) {
      const keys2 = _.fields, index2 = _.index, values2 = _.values, defaultValue = _.default == null ? null : _.default, reset2 = _.modified(), n = keys2.length;
      let flag2 = reset2 ? pulse2.SOURCE : pulse2.ADD, out = pulse2, as = _.as, set2, m2, mods;
      if (values2) {
        m2 = values2.length;
        if (n > 1 && !as) {
          error$1('Multi-field lookup requires explicit "as" parameter.');
        }
        if (as && as.length !== n * m2) {
          error$1('The "as" parameter has too few output field names.');
        }
        as = as || values2.map(accessorName);
        set2 = function(t) {
          for (var i = 0, k = 0, j, v; i < n; ++i) {
            v = index2.get(keys2[i](t));
            if (v == null) for (j = 0; j < m2; ++j, ++k) t[as[k]] = defaultValue;
            else for (j = 0; j < m2; ++j, ++k) t[as[k]] = values2[j](v);
          }
        };
      } else {
        if (!as) {
          error$1("Missing output field names.");
        }
        set2 = function(t) {
          for (var i = 0, v; i < n; ++i) {
            v = index2.get(keys2[i](t));
            t[as[i]] = v == null ? defaultValue : v;
          }
        };
      }
      if (reset2) {
        out = pulse2.reflow(true);
      } else {
        mods = keys2.some((k) => pulse2.modified(k.fields));
        flag2 |= mods ? pulse2.MOD : 0;
      }
      pulse2.visit(flag2, set2);
      return out.modifies(as);
    }
  });
  function MultiExtent$1(params2) {
    Operator.call(this, null, update$1, params2);
  }
  inherits(MultiExtent$1, Operator);
  function update$1(_) {
    if (this.value && !_.modified()) {
      return this.value;
    }
    const ext = _.extents, n = ext.length;
    let min2 = Infinity, max2 = -Infinity, i, e3;
    for (i = 0; i < n; ++i) {
      e3 = ext[i];
      if (e3[0] < min2) min2 = e3[0];
      if (e3[1] > max2) max2 = e3[1];
    }
    return [min2, max2];
  }
  function MultiValues$1(params2) {
    Operator.call(this, null, update, params2);
  }
  inherits(MultiValues$1, Operator);
  function update(_) {
    return this.value && !_.modified() ? this.value : _.values.reduce((data2, _2) => data2.concat(_2), []);
  }
  function Params$2(params2) {
    Transform.call(this, null, params2);
  }
  inherits(Params$2, Transform, {
    transform(_, pulse2) {
      this.modified(_.modified());
      this.value = _;
      return pulse2.fork(pulse2.NO_SOURCE | pulse2.NO_FIELDS);
    }
  });
  function Pivot(params2) {
    Aggregate$1.call(this, params2);
  }
  Pivot.Definition = {
    "type": "Pivot",
    "metadata": {
      "generates": true,
      "changes": true
    },
    "params": [{
      "name": "groupby",
      "type": "field",
      "array": true
    }, {
      "name": "field",
      "type": "field",
      "required": true
    }, {
      "name": "value",
      "type": "field",
      "required": true
    }, {
      "name": "op",
      "type": "enum",
      "values": ValidAggregateOps,
      "default": "sum"
    }, {
      "name": "limit",
      "type": "number",
      "default": 0
    }, {
      "name": "key",
      "type": "field"
    }]
  };
  inherits(Pivot, Aggregate$1, {
    _transform: Aggregate$1.prototype.transform,
    transform(_, pulse2) {
      return this._transform(aggregateParams(_, pulse2), pulse2);
    }
  });
  function aggregateParams(_, pulse2) {
    const key2 = _.field, value2 = _.value, op = (_.op === "count" ? "__count__" : _.op) || "sum", fields = accessorFields(key2).concat(accessorFields(value2)), keys2 = pivotKeys(key2, _.limit || 0, pulse2);
    if (pulse2.changed()) _.set("__pivot__", null, null, true);
    return {
      key: _.key,
      groupby: _.groupby,
      ops: keys2.map(() => op),
      fields: keys2.map((k) => get$4(k, key2, value2, fields)),
      as: keys2.map((k) => k + ""),
      modified: _.modified.bind(_)
    };
  }
  function get$4(k, key2, value2, fields) {
    return accessor((d) => key2(d) === k ? value2(d) : NaN, fields, k + "");
  }
  function pivotKeys(key2, limit, pulse2) {
    const map2 = {}, list = [];
    pulse2.visit(pulse2.SOURCE, (t) => {
      const k = key2(t);
      if (!map2[k]) {
        map2[k] = 1;
        list.push(k);
      }
    });
    list.sort(ascending$2);
    return limit ? list.slice(0, limit) : list;
  }
  function PreFacet$1(params2) {
    Facet$1.call(this, params2);
  }
  inherits(PreFacet$1, Facet$1, {
    transform(_, pulse2) {
      const flow = _.subflow, field2 = _.field, subflow = (t) => this.subflow(tupleid(t), flow, pulse2, t);
      if (_.modified("field") || field2 && pulse2.modified(accessorFields(field2))) {
        error$1("PreFacet does not support field modification.");
      }
      this.initTargets();
      if (field2) {
        pulse2.visit(pulse2.MOD, (t) => {
          const sf = subflow(t);
          field2(t).forEach((_2) => sf.mod(_2));
        });
        pulse2.visit(pulse2.ADD, (t) => {
          const sf = subflow(t);
          field2(t).forEach((_2) => sf.add(ingest$1(_2)));
        });
        pulse2.visit(pulse2.REM, (t) => {
          const sf = subflow(t);
          field2(t).forEach((_2) => sf.rem(_2));
        });
      } else {
        pulse2.visit(pulse2.MOD, (t) => subflow(t).mod(t));
        pulse2.visit(pulse2.ADD, (t) => subflow(t).add(t));
        pulse2.visit(pulse2.REM, (t) => subflow(t).rem(t));
      }
      if (pulse2.clean()) {
        pulse2.runAfter(() => this.clean());
      }
      return pulse2;
    }
  });
  function Project(params2) {
    Transform.call(this, null, params2);
  }
  Project.Definition = {
    "type": "Project",
    "metadata": {
      "generates": true,
      "changes": true
    },
    "params": [{
      "name": "fields",
      "type": "field",
      "array": true
    }, {
      "name": "as",
      "type": "string",
      "null": true,
      "array": true
    }]
  };
  inherits(Project, Transform, {
    transform(_, pulse2) {
      const out = pulse2.fork(pulse2.NO_SOURCE), fields = _.fields, as = fieldNames(_.fields, _.as || []), derive2 = fields ? (s, t) => project$1(s, t, fields, as) : rederive;
      let lut;
      if (this.value) {
        lut = this.value;
      } else {
        pulse2 = pulse2.addAll();
        lut = this.value = {};
      }
      pulse2.visit(pulse2.REM, (t) => {
        const id2 = tupleid(t);
        out.rem.push(lut[id2]);
        lut[id2] = null;
      });
      pulse2.visit(pulse2.ADD, (t) => {
        const dt = derive2(t, ingest$1({}));
        lut[tupleid(t)] = dt;
        out.add.push(dt);
      });
      pulse2.visit(pulse2.MOD, (t) => {
        out.mod.push(derive2(t, lut[tupleid(t)]));
      });
      return out;
    }
  });
  function project$1(s, t, fields, as) {
    for (let i = 0, n = fields.length; i < n; ++i) {
      t[as[i]] = fields[i](s);
    }
    return t;
  }
  function Proxy$1(params2) {
    Transform.call(this, null, params2);
  }
  inherits(Proxy$1, Transform, {
    transform(_, pulse2) {
      this.value = _.value;
      return _.modified("value") ? pulse2.fork(pulse2.NO_SOURCE | pulse2.NO_FIELDS) : pulse2.StopPropagation;
    }
  });
  function Quantile$1(params2) {
    Transform.call(this, null, params2);
  }
  Quantile$1.Definition = {
    "type": "Quantile",
    "metadata": {
      "generates": true,
      "changes": true
    },
    "params": [{
      "name": "groupby",
      "type": "field",
      "array": true
    }, {
      "name": "field",
      "type": "field",
      "required": true
    }, {
      "name": "probs",
      "type": "number",
      "array": true
    }, {
      "name": "step",
      "type": "number",
      "default": 0.01
    }, {
      "name": "as",
      "type": "string",
      "array": true,
      "default": ["prob", "value"]
    }]
  };
  const EPSILON$2 = 1e-14;
  inherits(Quantile$1, Transform, {
    transform(_, pulse2) {
      const out = pulse2.fork(pulse2.NO_SOURCE | pulse2.NO_FIELDS), as = _.as || ["prob", "value"];
      if (this.value && !_.modified() && !pulse2.changed()) {
        out.source = this.value;
        return out;
      }
      const source2 = pulse2.materialize(pulse2.SOURCE).source, groups = partition$1$1(source2, _.groupby, _.field), names = (_.groupby || []).map(accessorName), values2 = [], step = _.step || 0.01, p = _.probs || range$5(step / 2, 1 - EPSILON$2, step), n = p.length;
      groups.forEach((g) => {
        const q = quantiles(g, p);
        for (let i = 0; i < n; ++i) {
          const t = {};
          for (let i2 = 0; i2 < names.length; ++i2) {
            t[names[i2]] = g.dims[i2];
          }
          t[as[0]] = p[i];
          t[as[1]] = q[i];
          values2.push(ingest$1(t));
        }
      });
      if (this.value) out.rem = this.value;
      this.value = out.add = out.source = values2;
      return out;
    }
  });
  function Relay$1(params2) {
    Transform.call(this, null, params2);
  }
  inherits(Relay$1, Transform, {
    transform(_, pulse2) {
      let out, lut;
      if (this.value) {
        lut = this.value;
      } else {
        out = pulse2 = pulse2.addAll();
        lut = this.value = {};
      }
      if (_.derive) {
        out = pulse2.fork(pulse2.NO_SOURCE);
        pulse2.visit(pulse2.REM, (t) => {
          const id2 = tupleid(t);
          out.rem.push(lut[id2]);
          lut[id2] = null;
        });
        pulse2.visit(pulse2.ADD, (t) => {
          const dt = derive(t);
          lut[tupleid(t)] = dt;
          out.add.push(dt);
        });
        pulse2.visit(pulse2.MOD, (t) => {
          const dt = lut[tupleid(t)];
          for (const k in t) {
            dt[k] = t[k];
            out.modifies(k);
          }
          out.mod.push(dt);
        });
      }
      return out;
    }
  });
  function Sample(params2) {
    Transform.call(this, [], params2);
    this.count = 0;
  }
  Sample.Definition = {
    "type": "Sample",
    "metadata": {},
    "params": [{
      "name": "size",
      "type": "number",
      "default": 1e3
    }]
  };
  inherits(Sample, Transform, {
    transform(_, pulse2) {
      const out = pulse2.fork(pulse2.NO_SOURCE), mod = _.modified("size"), num = _.size, map2 = this.value.reduce((m2, t) => (m2[tupleid(t)] = 1, m2), {});
      let res = this.value, cnt = this.count, cap = 0;
      function update2(t) {
        let p, idx;
        if (res.length < num) {
          res.push(t);
        } else {
          idx = ~~((cnt + 1) * random());
          if (idx < res.length && idx >= cap) {
            p = res[idx];
            if (map2[tupleid(p)]) out.rem.push(p);
            res[idx] = t;
          }
        }
        ++cnt;
      }
      if (pulse2.rem.length) {
        pulse2.visit(pulse2.REM, (t) => {
          const id2 = tupleid(t);
          if (map2[id2]) {
            map2[id2] = -1;
            out.rem.push(t);
          }
          --cnt;
        });
        res = res.filter((t) => map2[tupleid(t)] !== -1);
      }
      if ((pulse2.rem.length || mod) && res.length < num && pulse2.source) {
        cap = cnt = res.length;
        pulse2.visit(pulse2.SOURCE, (t) => {
          if (!map2[tupleid(t)]) update2(t);
        });
        cap = -1;
      }
      if (mod && res.length > num) {
        const n = res.length - num;
        for (let i = 0; i < n; ++i) {
          map2[tupleid(res[i])] = -1;
          out.rem.push(res[i]);
        }
        res = res.slice(n);
      }
      if (pulse2.mod.length) {
        pulse2.visit(pulse2.MOD, (t) => {
          if (map2[tupleid(t)]) out.mod.push(t);
        });
      }
      if (pulse2.add.length) {
        pulse2.visit(pulse2.ADD, update2);
      }
      if (pulse2.add.length || cap < 0) {
        out.add = res.filter((t) => !map2[tupleid(t)]);
      }
      this.count = cnt;
      this.value = out.source = res;
      return out;
    }
  });
  function Sequence(params2) {
    Transform.call(this, null, params2);
  }
  Sequence.Definition = {
    "type": "Sequence",
    "metadata": {
      "generates": true,
      "changes": true
    },
    "params": [{
      "name": "start",
      "type": "number",
      "required": true
    }, {
      "name": "stop",
      "type": "number",
      "required": true
    }, {
      "name": "step",
      "type": "number",
      "default": 1
    }, {
      "name": "as",
      "type": "string",
      "default": "data"
    }]
  };
  inherits(Sequence, Transform, {
    transform(_, pulse2) {
      if (this.value && !_.modified()) return;
      const out = pulse2.materialize().fork(pulse2.MOD), as = _.as || "data";
      out.rem = this.value ? pulse2.rem.concat(this.value) : pulse2.rem;
      this.value = range$5(_.start, _.stop, _.step || 1).map((v) => {
        const t = {};
        t[as] = v;
        return ingest$1(t);
      });
      out.add = pulse2.add.concat(this.value);
      return out;
    }
  });
  function Sieve$1(params2) {
    Transform.call(this, null, params2);
    this.modified(true);
  }
  inherits(Sieve$1, Transform, {
    transform(_, pulse2) {
      this.value = pulse2.source;
      return pulse2.changed() ? pulse2.fork(pulse2.NO_SOURCE | pulse2.NO_FIELDS) : pulse2.StopPropagation;
    }
  });
  function TimeUnit(params2) {
    Transform.call(this, null, params2);
  }
  const OUTPUT = ["unit0", "unit1"];
  TimeUnit.Definition = {
    "type": "TimeUnit",
    "metadata": {
      "modifies": true
    },
    "params": [{
      "name": "field",
      "type": "field",
      "required": true
    }, {
      "name": "interval",
      "type": "boolean",
      "default": true
    }, {
      "name": "units",
      "type": "enum",
      "values": TIME_UNITS,
      "array": true
    }, {
      "name": "step",
      "type": "number",
      "default": 1
    }, {
      "name": "maxbins",
      "type": "number",
      "default": 40
    }, {
      "name": "extent",
      "type": "date",
      "array": true
    }, {
      "name": "timezone",
      "type": "enum",
      "default": "local",
      "values": ["local", "utc"]
    }, {
      "name": "as",
      "type": "string",
      "array": true,
      "length": 2,
      "default": OUTPUT
    }]
  };
  inherits(TimeUnit, Transform, {
    transform(_, pulse2) {
      const field2 = _.field, band2 = _.interval !== false, utc = _.timezone === "utc", floor2 = this._floor(_, pulse2), offset2 = (utc ? utcInterval : timeInterval)(floor2.unit).offset, as = _.as || OUTPUT, u0 = as[0], u1 = as[1], step = floor2.step;
      let min2 = floor2.start || Infinity, max2 = floor2.stop || -Infinity, flag2 = pulse2.ADD;
      if (_.modified() || pulse2.changed(pulse2.REM) || pulse2.modified(accessorFields(field2))) {
        pulse2 = pulse2.reflow(true);
        flag2 = pulse2.SOURCE;
        min2 = Infinity;
        max2 = -Infinity;
      }
      pulse2.visit(flag2, (t) => {
        const v = field2(t);
        let a2, b2;
        if (v == null) {
          t[u0] = null;
          if (band2) t[u1] = null;
        } else {
          t[u0] = a2 = b2 = floor2(v);
          if (band2) t[u1] = b2 = offset2(a2, step);
          if (a2 < min2) min2 = a2;
          if (b2 > max2) max2 = b2;
        }
      });
      floor2.start = min2;
      floor2.stop = max2;
      return pulse2.modifies(band2 ? as : u0);
    },
    _floor(_, pulse2) {
      const utc = _.timezone === "utc";
      const {
        units,
        step
      } = _.units ? {
        units: _.units,
        step: _.step || 1
      } : bin$1({
        extent: _.extent || extent(pulse2.materialize(pulse2.SOURCE).source, _.field),
        maxbins: _.maxbins
      });
      const tunits = timeUnits(units), prev = this.value || {}, floor2 = (utc ? utcFloor : timeFloor)(tunits, step);
      floor2.unit = peek$2(tunits);
      floor2.units = tunits;
      floor2.step = step;
      floor2.start = prev.start;
      floor2.stop = prev.stop;
      return this.value = floor2;
    }
  });
  function TupleIndex(params2) {
    Transform.call(this, fastmap(), params2);
  }
  inherits(TupleIndex, Transform, {
    transform(_, pulse2) {
      const df = pulse2.dataflow, field2 = _.field, index2 = this.value, set2 = (t) => index2.set(field2(t), t);
      let mod = true;
      if (_.modified("field") || pulse2.modified(field2.fields)) {
        index2.clear();
        pulse2.visit(pulse2.SOURCE, set2);
      } else if (pulse2.changed()) {
        pulse2.visit(pulse2.REM, (t) => index2.delete(field2(t)));
        pulse2.visit(pulse2.ADD, set2);
      } else {
        mod = false;
      }
      this.modified(mod);
      if (index2.empty > df.cleanThreshold) df.runAfter(index2.clean);
      return pulse2.fork();
    }
  });
  function Values$1(params2) {
    Transform.call(this, null, params2);
  }
  inherits(Values$1, Transform, {
    transform(_, pulse2) {
      const run2 = !this.value || _.modified("field") || _.modified("sort") || pulse2.changed() || _.sort && pulse2.modified(_.sort.fields);
      if (run2) {
        this.value = (_.sort ? pulse2.source.slice().sort(stableCompare(_.sort)) : pulse2.source).map(_.field);
      }
    }
  });
  function WindowOp(op, field2, param2, as) {
    const fn = WindowOps[op](field2, param2);
    return {
      init: fn.init || zero$4,
      update: function(w2, t) {
        t[as] = fn.next(w2);
      }
    };
  }
  const WindowOps = {
    row_number: function() {
      return {
        next: (w2) => w2.index + 1
      };
    },
    rank: function() {
      let rank2;
      return {
        init: () => rank2 = 1,
        next: (w2) => {
          const i = w2.index, data2 = w2.data;
          return i && w2.compare(data2[i - 1], data2[i]) ? rank2 = i + 1 : rank2;
        }
      };
    },
    dense_rank: function() {
      let drank;
      return {
        init: () => drank = 1,
        next: (w2) => {
          const i = w2.index, d = w2.data;
          return i && w2.compare(d[i - 1], d[i]) ? ++drank : drank;
        }
      };
    },
    percent_rank: function() {
      const rank2 = WindowOps.rank(), next = rank2.next;
      return {
        init: rank2.init,
        next: (w2) => (next(w2) - 1) / (w2.data.length - 1)
      };
    },
    cume_dist: function() {
      let cume;
      return {
        init: () => cume = 0,
        next: (w2) => {
          const d = w2.data, c2 = w2.compare;
          let i = w2.index;
          if (cume < i) {
            while (i + 1 < d.length && !c2(d[i], d[i + 1])) ++i;
            cume = i;
          }
          return (1 + cume) / d.length;
        }
      };
    },
    ntile: function(field2, num) {
      num = +num;
      if (!(num > 0)) error$1("ntile num must be greater than zero.");
      const cume = WindowOps.cume_dist(), next = cume.next;
      return {
        init: cume.init,
        next: (w2) => Math.ceil(num * next(w2))
      };
    },
    lag: function(field2, offset2) {
      offset2 = +offset2 || 1;
      return {
        next: (w2) => {
          const i = w2.index - offset2;
          return i >= 0 ? field2(w2.data[i]) : null;
        }
      };
    },
    lead: function(field2, offset2) {
      offset2 = +offset2 || 1;
      return {
        next: (w2) => {
          const i = w2.index + offset2, d = w2.data;
          return i < d.length ? field2(d[i]) : null;
        }
      };
    },
    first_value: function(field2) {
      return {
        next: (w2) => field2(w2.data[w2.i0])
      };
    },
    last_value: function(field2) {
      return {
        next: (w2) => field2(w2.data[w2.i1 - 1])
      };
    },
    nth_value: function(field2, nth) {
      nth = +nth;
      if (!(nth > 0)) error$1("nth_value nth must be greater than zero.");
      return {
        next: (w2) => {
          const i = w2.i0 + (nth - 1);
          return i < w2.i1 ? field2(w2.data[i]) : null;
        }
      };
    },
    prev_value: function(field2) {
      let prev;
      return {
        init: () => prev = null,
        next: (w2) => {
          const v = field2(w2.data[w2.index]);
          return v != null ? prev = v : prev;
        }
      };
    },
    next_value: function(field2) {
      let v, i;
      return {
        init: () => (v = null, i = -1),
        next: (w2) => {
          const d = w2.data;
          return w2.index <= i ? v : (i = find$2(field2, d, w2.index)) < 0 ? (i = d.length, v = null) : v = field2(d[i]);
        }
      };
    }
  };
  function find$2(field2, data2, index2) {
    for (let n = data2.length; index2 < n; ++index2) {
      const v = field2(data2[index2]);
      if (v != null) return index2;
    }
    return -1;
  }
  const ValidWindowOps = Object.keys(WindowOps);
  function WindowState(_) {
    const ops2 = array$5(_.ops), fields = array$5(_.fields), params2 = array$5(_.params), aggregate_params = array$5(_.aggregate_params), as = array$5(_.as), outputs = this.outputs = [], windows = this.windows = [], inputs = {}, map2 = {}, counts = [], measures = [];
    let countOnly = true;
    function visitInputs(f) {
      array$5(accessorFields(f)).forEach((_2) => inputs[_2] = 1);
    }
    visitInputs(_.sort);
    ops2.forEach((op, i) => {
      const field2 = fields[i], param2 = params2[i], aggregate_param = aggregate_params[i] || null, mname = accessorName(field2), name = measureName(op, mname, as[i]);
      visitInputs(field2);
      outputs.push(name);
      if (has$1(WindowOps, op)) {
        windows.push(WindowOp(op, field2, param2, name));
      } else {
        if (field2 == null && op !== "count") {
          error$1("Null aggregate field specified.");
        }
        if (op === "count") {
          counts.push(name);
          return;
        }
        countOnly = false;
        let m2 = map2[mname];
        if (!m2) {
          m2 = map2[mname] = [];
          m2.field = field2;
          measures.push(m2);
        }
        m2.push(createMeasure(op, aggregate_param, name));
      }
    });
    if (counts.length || measures.length) {
      this.cell = cell(measures, counts, countOnly);
    }
    this.inputs = Object.keys(inputs);
  }
  const prototype = WindowState.prototype;
  prototype.init = function() {
    this.windows.forEach((_) => _.init());
    if (this.cell) this.cell.init();
  };
  prototype.update = function(w2, t) {
    const cell2 = this.cell, wind = this.windows, data2 = w2.data, m2 = wind && wind.length;
    let j;
    if (cell2) {
      for (j = w2.p0; j < w2.i0; ++j) cell2.rem(data2[j]);
      for (j = w2.p1; j < w2.i1; ++j) cell2.add(data2[j]);
      cell2.set(t);
    }
    for (j = 0; j < m2; ++j) wind[j].update(w2, t);
  };
  function cell(measures, counts, countOnly) {
    measures = measures.map((m2) => compileMeasures(m2, m2.field));
    const cell2 = {
      num: 0,
      agg: null,
      store: false,
      count: counts
    };
    if (!countOnly) {
      var n = measures.length, a2 = cell2.agg = Array(n), i = 0;
      for (; i < n; ++i) a2[i] = new measures[i](cell2);
    }
    if (cell2.store) {
      var store = cell2.data = new TupleStore();
    }
    cell2.add = function(t) {
      cell2.num += 1;
      if (countOnly) return;
      if (store) store.add(t);
      for (let i2 = 0; i2 < n; ++i2) {
        a2[i2].add(a2[i2].get(t), t);
      }
    };
    cell2.rem = function(t) {
      cell2.num -= 1;
      if (countOnly) return;
      if (store) store.rem(t);
      for (let i2 = 0; i2 < n; ++i2) {
        a2[i2].rem(a2[i2].get(t), t);
      }
    };
    cell2.set = function(t) {
      let i2, n2;
      if (store) store.values();
      for (i2 = 0, n2 = counts.length; i2 < n2; ++i2) t[counts[i2]] = cell2.num;
      if (!countOnly) for (i2 = 0, n2 = a2.length; i2 < n2; ++i2) a2[i2].set(t);
    };
    cell2.init = function() {
      cell2.num = 0;
      if (store) store.reset();
      for (let i2 = 0; i2 < n; ++i2) a2[i2].init();
    };
    return cell2;
  }
  function Window(params2) {
    Transform.call(this, {}, params2);
    this._mlen = 0;
    this._mods = [];
  }
  Window.Definition = {
    "type": "Window",
    "metadata": {
      "modifies": true
    },
    "params": [{
      "name": "sort",
      "type": "compare"
    }, {
      "name": "groupby",
      "type": "field",
      "array": true
    }, {
      "name": "ops",
      "type": "enum",
      "array": true,
      "values": ValidWindowOps.concat(ValidAggregateOps)
    }, {
      "name": "params",
      "type": "number",
      "null": true,
      "array": true
    }, {
      "name": "aggregate_params",
      "type": "number",
      "null": true,
      "array": true
    }, {
      "name": "fields",
      "type": "field",
      "null": true,
      "array": true
    }, {
      "name": "as",
      "type": "string",
      "null": true,
      "array": true
    }, {
      "name": "frame",
      "type": "number",
      "null": true,
      "array": true,
      "length": 2,
      "default": [null, 0]
    }, {
      "name": "ignorePeers",
      "type": "boolean",
      "default": false
    }]
  };
  inherits(Window, Transform, {
    transform(_, pulse2) {
      this.stamp = pulse2.stamp;
      const mod = _.modified(), cmp = stableCompare(_.sort), key2 = groupkey(_.groupby), group2 = (t) => this.group(key2(t));
      let state = this.state;
      if (!state || mod) {
        state = this.state = new WindowState(_);
      }
      if (mod || pulse2.modified(state.inputs)) {
        this.value = {};
        pulse2.visit(pulse2.SOURCE, (t) => group2(t).add(t));
      } else {
        pulse2.visit(pulse2.REM, (t) => group2(t).remove(t));
        pulse2.visit(pulse2.ADD, (t) => group2(t).add(t));
      }
      for (let i = 0, n = this._mlen; i < n; ++i) {
        processPartition(this._mods[i], state, cmp, _);
      }
      this._mlen = 0;
      this._mods = [];
      return pulse2.reflow(mod).modifies(state.outputs);
    },
    group(key2) {
      let group2 = this.value[key2];
      if (!group2) {
        group2 = this.value[key2] = SortedList(tupleid);
        group2.stamp = -1;
      }
      if (group2.stamp < this.stamp) {
        group2.stamp = this.stamp;
        this._mods[this._mlen++] = group2;
      }
      return group2;
    }
  });
  function processPartition(list, state, cmp, _) {
    const sort2 = _.sort, range2 = sort2 && !_.ignorePeers, frame2 = _.frame || [null, 0], data2 = list.data(cmp), n = data2.length, b2 = range2 ? bisector(sort2) : null, w2 = {
      i0: 0,
      i1: 0,
      p0: 0,
      p1: 0,
      index: 0,
      data: data2,
      compare: sort2 || constant$5(-1)
    };
    state.init();
    for (let i = 0; i < n; ++i) {
      setWindow(w2, frame2, i, n);
      if (range2) adjustRange(w2, b2);
      state.update(w2, data2[i]);
    }
  }
  function setWindow(w2, f, i, n) {
    w2.p0 = w2.i0;
    w2.p1 = w2.i1;
    w2.i0 = f[0] == null ? 0 : Math.max(0, i - Math.abs(f[0]));
    w2.i1 = f[1] == null ? n : Math.min(n, i + Math.abs(f[1]) + 1);
    w2.index = i;
  }
  function adjustRange(w2, bisect2) {
    const r0 = w2.i0, r1 = w2.i1 - 1, c2 = w2.compare, d = w2.data, n = d.length - 1;
    if (r0 > 0 && !c2(d[r0], d[r0 - 1])) w2.i0 = bisect2.left(d, d[r0]);
    if (r1 < n && !c2(d[r1], d[r1 + 1])) w2.i1 = bisect2.right(d, d[r1]);
  }
  const tx = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
    __proto__: null,
    aggregate: Aggregate$1,
    bin: Bin,
    collect: Collect$1,
    compare: Compare$1,
    countpattern: CountPattern,
    cross: Cross,
    density: Density,
    dotbin: DotBin,
    expression: Expression$1,
    extent: Extent,
    facet: Facet$1,
    field: Field$1,
    filter: Filter,
    flatten: Flatten,
    fold: Fold,
    formula: Formula,
    generate: Generate,
    impute: Impute,
    joinaggregate: JoinAggregate,
    kde: KDE,
    key: Key$1,
    load: Load$1,
    lookup: Lookup,
    multiextent: MultiExtent$1,
    multivalues: MultiValues$1,
    params: Params$2,
    pivot: Pivot,
    prefacet: PreFacet$1,
    project: Project,
    proxy: Proxy$1,
    quantile: Quantile$1,
    relay: Relay$1,
    sample: Sample,
    sequence: Sequence,
    sieve: Sieve$1,
    subflow: Subflow,
    timeunit: TimeUnit,
    tupleindex: TupleIndex,
    values: Values$1,
    window: Window
  }, Symbol.toStringTag, { value: "Module" }));
  function constant$3(x2) {
    return function constant2() {
      return x2;
    };
  }
  const abs$2 = Math.abs;
  const atan2$1 = Math.atan2;
  const cos$2 = Math.cos;
  const max$1 = Math.max;
  const min$1 = Math.min;
  const sin$2 = Math.sin;
  const sqrt$3 = Math.sqrt;
  const epsilon$5 = 1e-12;
  const pi$3 = Math.PI;
  const halfPi$2 = pi$3 / 2;
  const tau$3 = 2 * pi$3;
  function acos$1(x2) {
    return x2 > 1 ? 0 : x2 < -1 ? pi$3 : Math.acos(x2);
  }
  function asin$2(x2) {
    return x2 >= 1 ? halfPi$2 : x2 <= -1 ? -halfPi$2 : Math.asin(x2);
  }
  const pi$2 = Math.PI, tau$2 = 2 * pi$2, epsilon$4 = 1e-6, tauEpsilon = tau$2 - epsilon$4;
  function append$1(strings) {
    this._ += strings[0];
    for (let i = 1, n = strings.length; i < n; ++i) {
      this._ += arguments[i] + strings[i];
    }
  }
  function appendRound$1(digits) {
    let d = Math.floor(digits);
    if (!(d >= 0)) throw new Error(`invalid digits: ${digits}`);
    if (d > 15) return append$1;
    const k = 10 ** d;
    return function(strings) {
      this._ += strings[0];
      for (let i = 1, n = strings.length; i < n; ++i) {
        this._ += Math.round(arguments[i] * k) / k + strings[i];
      }
    };
  }
  let Path$1 = class Path {
    constructor(digits) {
      this._x0 = this._y0 = // start of current subpath
      this._x1 = this._y1 = null;
      this._ = "";
      this._append = digits == null ? append$1 : appendRound$1(digits);
    }
    moveTo(x2, y2) {
      this._append`M${this._x0 = this._x1 = +x2},${this._y0 = this._y1 = +y2}`;
    }
    closePath() {
      if (this._x1 !== null) {
        this._x1 = this._x0, this._y1 = this._y0;
        this._append`Z`;
      }
    }
    lineTo(x2, y2) {
      this._append`L${this._x1 = +x2},${this._y1 = +y2}`;
    }
    quadraticCurveTo(x12, y12, x2, y2) {
      this._append`Q${+x12},${+y12},${this._x1 = +x2},${this._y1 = +y2}`;
    }
    bezierCurveTo(x12, y12, x2, y2, x3, y3) {
      this._append`C${+x12},${+y12},${+x2},${+y2},${this._x1 = +x3},${this._y1 = +y3}`;
    }
    arcTo(x12, y12, x2, y2, r) {
      x12 = +x12, y12 = +y12, x2 = +x2, y2 = +y2, r = +r;
      if (r < 0) throw new Error(`negative radius: ${r}`);
      let x02 = this._x1, y02 = this._y1, x21 = x2 - x12, y21 = y2 - y12, x01 = x02 - x12, y01 = y02 - y12, l01_2 = x01 * x01 + y01 * y01;
      if (this._x1 === null) {
        this._append`M${this._x1 = x12},${this._y1 = y12}`;
      } else if (!(l01_2 > epsilon$4)) ;
      else if (!(Math.abs(y01 * x21 - y21 * x01) > epsilon$4) || !r) {
        this._append`L${this._x1 = x12},${this._y1 = y12}`;
      } else {
        let x20 = x2 - x02, y20 = y2 - y02, l21_2 = x21 * x21 + y21 * y21, l20_2 = x20 * x20 + y20 * y20, l21 = Math.sqrt(l21_2), l01 = Math.sqrt(l01_2), l = r * Math.tan((pi$2 - Math.acos((l21_2 + l01_2 - l20_2) / (2 * l21 * l01))) / 2), t01 = l / l01, t21 = l / l21;
        if (Math.abs(t01 - 1) > epsilon$4) {
          this._append`L${x12 + t01 * x01},${y12 + t01 * y01}`;
        }
        this._append`A${r},${r},0,0,${+(y01 * x20 > x01 * y20)},${this._x1 = x12 + t21 * x21},${this._y1 = y12 + t21 * y21}`;
      }
    }
    arc(x2, y2, r, a0, a1, ccw) {
      x2 = +x2, y2 = +y2, r = +r, ccw = !!ccw;
      if (r < 0) throw new Error(`negative radius: ${r}`);
      let dx = r * Math.cos(a0), dy = r * Math.sin(a0), x02 = x2 + dx, y02 = y2 + dy, cw2 = 1 ^ ccw, da = ccw ? a0 - a1 : a1 - a0;
      if (this._x1 === null) {
        this._append`M${x02},${y02}`;
      } else if (Math.abs(this._x1 - x02) > epsilon$4 || Math.abs(this._y1 - y02) > epsilon$4) {
        this._append`L${x02},${y02}`;
      }
      if (!r) return;
      if (da < 0) da = da % tau$2 + tau$2;
      if (da > tauEpsilon) {
        this._append`A${r},${r},0,1,${cw2},${x2 - dx},${y2 - dy}A${r},${r},0,1,${cw2},${this._x1 = x02},${this._y1 = y02}`;
      } else if (da > epsilon$4) {
        this._append`A${r},${r},0,${+(da >= pi$2)},${cw2},${this._x1 = x2 + r * Math.cos(a1)},${this._y1 = y2 + r * Math.sin(a1)}`;
      }
    }
    rect(x2, y2, w2, h2) {
      this._append`M${this._x0 = this._x1 = +x2},${this._y0 = this._y1 = +y2}h${w2 = +w2}v${+h2}h${-w2}Z`;
    }
    toString() {
      return this._;
    }
  };
  function path$3() {
    return new Path$1();
  }
  path$3.prototype = Path$1.prototype;
  function withPath(shape2) {
    let digits = 3;
    shape2.digits = function(_) {
      if (!arguments.length) return digits;
      if (_ == null) {
        digits = null;
      } else {
        const d = Math.floor(_);
        if (!(d >= 0)) throw new RangeError(`invalid digits: ${_}`);
        digits = d;
      }
      return shape2;
    };
    return () => new Path$1(digits);
  }
  function arcInnerRadius(d) {
    return d.innerRadius;
  }
  function arcOuterRadius(d) {
    return d.outerRadius;
  }
  function arcStartAngle(d) {
    return d.startAngle;
  }
  function arcEndAngle(d) {
    return d.endAngle;
  }
  function arcPadAngle(d) {
    return d && d.padAngle;
  }
  function intersect$3(x02, y02, x12, y12, x2, y2, x3, y3) {
    var x10 = x12 - x02, y10 = y12 - y02, x32 = x3 - x2, y32 = y3 - y2, t = y32 * x10 - x32 * y10;
    if (t * t < epsilon$5) return;
    t = (x32 * (y02 - y2) - y32 * (x02 - x2)) / t;
    return [x02 + t * x10, y02 + t * y10];
  }
  function cornerTangents(x02, y02, x12, y12, r1, rc, cw2) {
    var x01 = x02 - x12, y01 = y02 - y12, lo = (cw2 ? rc : -rc) / sqrt$3(x01 * x01 + y01 * y01), ox = lo * y01, oy = -lo * x01, x11 = x02 + ox, y11 = y02 + oy, x10 = x12 + ox, y10 = y12 + oy, x002 = (x11 + x10) / 2, y002 = (y11 + y10) / 2, dx = x10 - x11, dy = y10 - y11, d2 = dx * dx + dy * dy, r = r1 - rc, D2 = x11 * y10 - x10 * y11, d = (dy < 0 ? -1 : 1) * sqrt$3(max$1(0, r * r * d2 - D2 * D2)), cx0 = (D2 * dy - dx * d) / d2, cy0 = (-D2 * dx - dy * d) / d2, cx1 = (D2 * dy + dx * d) / d2, cy1 = (-D2 * dx + dy * d) / d2, dx0 = cx0 - x002, dy0 = cy0 - y002, dx1 = cx1 - x002, dy1 = cy1 - y002;
    if (dx0 * dx0 + dy0 * dy0 > dx1 * dx1 + dy1 * dy1) cx0 = cx1, cy0 = cy1;
    return {
      cx: cx0,
      cy: cy0,
      x01: -ox,
      y01: -oy,
      x11: cx0 * (r1 / r - 1),
      y11: cy0 * (r1 / r - 1)
    };
  }
  function arc$2$1() {
    var innerRadius = arcInnerRadius, outerRadius = arcOuterRadius, cornerRadius = constant$3(0), padRadius = null, startAngle = arcStartAngle, endAngle = arcEndAngle, padAngle = arcPadAngle, context2 = null, path2 = withPath(arc2);
    function arc2() {
      var buffer, r, r0 = +innerRadius.apply(this, arguments), r1 = +outerRadius.apply(this, arguments), a0 = startAngle.apply(this, arguments) - halfPi$2, a1 = endAngle.apply(this, arguments) - halfPi$2, da = abs$2(a1 - a0), cw2 = a1 > a0;
      if (!context2) context2 = buffer = path2();
      if (r1 < r0) r = r1, r1 = r0, r0 = r;
      if (!(r1 > epsilon$5)) context2.moveTo(0, 0);
      else if (da > tau$3 - epsilon$5) {
        context2.moveTo(r1 * cos$2(a0), r1 * sin$2(a0));
        context2.arc(0, 0, r1, a0, a1, !cw2);
        if (r0 > epsilon$5) {
          context2.moveTo(r0 * cos$2(a1), r0 * sin$2(a1));
          context2.arc(0, 0, r0, a1, a0, cw2);
        }
      } else {
        var a01 = a0, a11 = a1, a00 = a0, a10 = a1, da0 = da, da1 = da, ap = padAngle.apply(this, arguments) / 2, rp = ap > epsilon$5 && (padRadius ? +padRadius.apply(this, arguments) : sqrt$3(r0 * r0 + r1 * r1)), rc = min$1(abs$2(r1 - r0) / 2, +cornerRadius.apply(this, arguments)), rc0 = rc, rc1 = rc, t02, t12;
        if (rp > epsilon$5) {
          var p02 = asin$2(rp / r0 * sin$2(ap)), p1 = asin$2(rp / r1 * sin$2(ap));
          if ((da0 -= p02 * 2) > epsilon$5) p02 *= cw2 ? 1 : -1, a00 += p02, a10 -= p02;
          else da0 = 0, a00 = a10 = (a0 + a1) / 2;
          if ((da1 -= p1 * 2) > epsilon$5) p1 *= cw2 ? 1 : -1, a01 += p1, a11 -= p1;
          else da1 = 0, a01 = a11 = (a0 + a1) / 2;
        }
        var x01 = r1 * cos$2(a01), y01 = r1 * sin$2(a01), x10 = r0 * cos$2(a10), y10 = r0 * sin$2(a10);
        if (rc > epsilon$5) {
          var x11 = r1 * cos$2(a11), y11 = r1 * sin$2(a11), x002 = r0 * cos$2(a00), y002 = r0 * sin$2(a00), oc;
          if (da < pi$3) {
            if (oc = intersect$3(x01, y01, x002, y002, x11, y11, x10, y10)) {
              var ax = x01 - oc[0], ay = y01 - oc[1], bx = x11 - oc[0], by = y11 - oc[1], kc = 1 / sin$2(acos$1((ax * bx + ay * by) / (sqrt$3(ax * ax + ay * ay) * sqrt$3(bx * bx + by * by))) / 2), lc = sqrt$3(oc[0] * oc[0] + oc[1] * oc[1]);
              rc0 = min$1(rc, (r0 - lc) / (kc - 1));
              rc1 = min$1(rc, (r1 - lc) / (kc + 1));
            } else {
              rc0 = rc1 = 0;
            }
          }
        }
        if (!(da1 > epsilon$5)) context2.moveTo(x01, y01);
        else if (rc1 > epsilon$5) {
          t02 = cornerTangents(x002, y002, x01, y01, r1, rc1, cw2);
          t12 = cornerTangents(x11, y11, x10, y10, r1, rc1, cw2);
          context2.moveTo(t02.cx + t02.x01, t02.cy + t02.y01);
          if (rc1 < rc) context2.arc(t02.cx, t02.cy, rc1, atan2$1(t02.y01, t02.x01), atan2$1(t12.y01, t12.x01), !cw2);
          else {
            context2.arc(t02.cx, t02.cy, rc1, atan2$1(t02.y01, t02.x01), atan2$1(t02.y11, t02.x11), !cw2);
            context2.arc(0, 0, r1, atan2$1(t02.cy + t02.y11, t02.cx + t02.x11), atan2$1(t12.cy + t12.y11, t12.cx + t12.x11), !cw2);
            context2.arc(t12.cx, t12.cy, rc1, atan2$1(t12.y11, t12.x11), atan2$1(t12.y01, t12.x01), !cw2);
          }
        } else context2.moveTo(x01, y01), context2.arc(0, 0, r1, a01, a11, !cw2);
        if (!(r0 > epsilon$5) || !(da0 > epsilon$5)) context2.lineTo(x10, y10);
        else if (rc0 > epsilon$5) {
          t02 = cornerTangents(x10, y10, x11, y11, r0, -rc0, cw2);
          t12 = cornerTangents(x01, y01, x002, y002, r0, -rc0, cw2);
          context2.lineTo(t02.cx + t02.x01, t02.cy + t02.y01);
          if (rc0 < rc) context2.arc(t02.cx, t02.cy, rc0, atan2$1(t02.y01, t02.x01), atan2$1(t12.y01, t12.x01), !cw2);
          else {
            context2.arc(t02.cx, t02.cy, rc0, atan2$1(t02.y01, t02.x01), atan2$1(t02.y11, t02.x11), !cw2);
            context2.arc(0, 0, r0, atan2$1(t02.cy + t02.y11, t02.cx + t02.x11), atan2$1(t12.cy + t12.y11, t12.cx + t12.x11), cw2);
            context2.arc(t12.cx, t12.cy, rc0, atan2$1(t12.y11, t12.x11), atan2$1(t12.y01, t12.x01), !cw2);
          }
        } else context2.arc(0, 0, r0, a10, a00, cw2);
      }
      context2.closePath();
      if (buffer) return context2 = null, buffer + "" || null;
    }
    arc2.centroid = function() {
      var r = (+innerRadius.apply(this, arguments) + +outerRadius.apply(this, arguments)) / 2, a2 = (+startAngle.apply(this, arguments) + +endAngle.apply(this, arguments)) / 2 - pi$3 / 2;
      return [cos$2(a2) * r, sin$2(a2) * r];
    };
    arc2.innerRadius = function(_) {
      return arguments.length ? (innerRadius = typeof _ === "function" ? _ : constant$3(+_), arc2) : innerRadius;
    };
    arc2.outerRadius = function(_) {
      return arguments.length ? (outerRadius = typeof _ === "function" ? _ : constant$3(+_), arc2) : outerRadius;
    };
    arc2.cornerRadius = function(_) {
      return arguments.length ? (cornerRadius = typeof _ === "function" ? _ : constant$3(+_), arc2) : cornerRadius;
    };
    arc2.padRadius = function(_) {
      return arguments.length ? (padRadius = _ == null ? null : typeof _ === "function" ? _ : constant$3(+_), arc2) : padRadius;
    };
    arc2.startAngle = function(_) {
      return arguments.length ? (startAngle = typeof _ === "function" ? _ : constant$3(+_), arc2) : startAngle;
    };
    arc2.endAngle = function(_) {
      return arguments.length ? (endAngle = typeof _ === "function" ? _ : constant$3(+_), arc2) : endAngle;
    };
    arc2.padAngle = function(_) {
      return arguments.length ? (padAngle = typeof _ === "function" ? _ : constant$3(+_), arc2) : padAngle;
    };
    arc2.context = function(_) {
      return arguments.length ? (context2 = _ == null ? null : _, arc2) : context2;
    };
    return arc2;
  }
  function array$4(x2) {
    return typeof x2 === "object" && "length" in x2 ? x2 : Array.from(x2);
  }
  function Linear$1(context2) {
    this._context = context2;
  }
  Linear$1.prototype = {
    areaStart: function() {
      this._line = 0;
    },
    areaEnd: function() {
      this._line = NaN;
    },
    lineStart: function() {
      this._point = 0;
    },
    lineEnd: function() {
      if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
      this._line = 1 - this._line;
    },
    point: function(x2, y2) {
      x2 = +x2, y2 = +y2;
      switch (this._point) {
        case 0:
          this._point = 1;
          this._line ? this._context.lineTo(x2, y2) : this._context.moveTo(x2, y2);
          break;
        case 1:
          this._point = 2;
        default:
          this._context.lineTo(x2, y2);
          break;
      }
    }
  };
  function curveLinear(context2) {
    return new Linear$1(context2);
  }
  function x$3(p) {
    return p[0];
  }
  function y$3(p) {
    return p[1];
  }
  function line$2$1(x2, y2) {
    var defined2 = constant$3(true), context2 = null, curve2 = curveLinear, output2 = null, path2 = withPath(line2);
    x2 = typeof x2 === "function" ? x2 : x2 === void 0 ? x$3 : constant$3(x2);
    y2 = typeof y2 === "function" ? y2 : y2 === void 0 ? y$3 : constant$3(y2);
    function line2(data2) {
      var i, n = (data2 = array$4(data2)).length, d, defined0 = false, buffer;
      if (context2 == null) output2 = curve2(buffer = path2());
      for (i = 0; i <= n; ++i) {
        if (!(i < n && defined2(d = data2[i], i, data2)) === defined0) {
          if (defined0 = !defined0) output2.lineStart();
          else output2.lineEnd();
        }
        if (defined0) output2.point(+x2(d, i, data2), +y2(d, i, data2));
      }
      if (buffer) return output2 = null, buffer + "" || null;
    }
    line2.x = function(_) {
      return arguments.length ? (x2 = typeof _ === "function" ? _ : constant$3(+_), line2) : x2;
    };
    line2.y = function(_) {
      return arguments.length ? (y2 = typeof _ === "function" ? _ : constant$3(+_), line2) : y2;
    };
    line2.defined = function(_) {
      return arguments.length ? (defined2 = typeof _ === "function" ? _ : constant$3(!!_), line2) : defined2;
    };
    line2.curve = function(_) {
      return arguments.length ? (curve2 = _, context2 != null && (output2 = curve2(context2)), line2) : curve2;
    };
    line2.context = function(_) {
      return arguments.length ? (_ == null ? context2 = output2 = null : output2 = curve2(context2 = _), line2) : context2;
    };
    return line2;
  }
  function area$2$1(x02, y02, y12) {
    var x12 = null, defined2 = constant$3(true), context2 = null, curve2 = curveLinear, output2 = null, path2 = withPath(area2);
    x02 = typeof x02 === "function" ? x02 : x02 === void 0 ? x$3 : constant$3(+x02);
    y02 = typeof y02 === "function" ? y02 : y02 === void 0 ? constant$3(0) : constant$3(+y02);
    y12 = typeof y12 === "function" ? y12 : y12 === void 0 ? y$3 : constant$3(+y12);
    function area2(data2) {
      var i, j, k, n = (data2 = array$4(data2)).length, d, defined0 = false, buffer, x0z = new Array(n), y0z = new Array(n);
      if (context2 == null) output2 = curve2(buffer = path2());
      for (i = 0; i <= n; ++i) {
        if (!(i < n && defined2(d = data2[i], i, data2)) === defined0) {
          if (defined0 = !defined0) {
            j = i;
            output2.areaStart();
            output2.lineStart();
          } else {
            output2.lineEnd();
            output2.lineStart();
            for (k = i - 1; k >= j; --k) {
              output2.point(x0z[k], y0z[k]);
            }
            output2.lineEnd();
            output2.areaEnd();
          }
        }
        if (defined0) {
          x0z[i] = +x02(d, i, data2), y0z[i] = +y02(d, i, data2);
          output2.point(x12 ? +x12(d, i, data2) : x0z[i], y12 ? +y12(d, i, data2) : y0z[i]);
        }
      }
      if (buffer) return output2 = null, buffer + "" || null;
    }
    function arealine() {
      return line$2$1().defined(defined2).curve(curve2).context(context2);
    }
    area2.x = function(_) {
      return arguments.length ? (x02 = typeof _ === "function" ? _ : constant$3(+_), x12 = null, area2) : x02;
    };
    area2.x0 = function(_) {
      return arguments.length ? (x02 = typeof _ === "function" ? _ : constant$3(+_), area2) : x02;
    };
    area2.x1 = function(_) {
      return arguments.length ? (x12 = _ == null ? null : typeof _ === "function" ? _ : constant$3(+_), area2) : x12;
    };
    area2.y = function(_) {
      return arguments.length ? (y02 = typeof _ === "function" ? _ : constant$3(+_), y12 = null, area2) : y02;
    };
    area2.y0 = function(_) {
      return arguments.length ? (y02 = typeof _ === "function" ? _ : constant$3(+_), area2) : y02;
    };
    area2.y1 = function(_) {
      return arguments.length ? (y12 = _ == null ? null : typeof _ === "function" ? _ : constant$3(+_), area2) : y12;
    };
    area2.lineX0 = area2.lineY0 = function() {
      return arealine().x(x02).y(y02);
    };
    area2.lineY1 = function() {
      return arealine().x(x02).y(y12);
    };
    area2.lineX1 = function() {
      return arealine().x(x12).y(y02);
    };
    area2.defined = function(_) {
      return arguments.length ? (defined2 = typeof _ === "function" ? _ : constant$3(!!_), area2) : defined2;
    };
    area2.curve = function(_) {
      return arguments.length ? (curve2 = _, context2 != null && (output2 = curve2(context2)), area2) : curve2;
    };
    area2.context = function(_) {
      return arguments.length ? (_ == null ? context2 = output2 = null : output2 = curve2(context2 = _), area2) : context2;
    };
    return area2;
  }
  const circle$1 = {
    draw(context2, size) {
      const r = sqrt$3(size / pi$3);
      context2.moveTo(r, 0);
      context2.arc(0, 0, r, 0, tau$3);
    }
  };
  function Symbol$1(type2, size) {
    let context2 = null, path2 = withPath(symbol2);
    type2 = typeof type2 === "function" ? type2 : constant$3(type2 || circle$1);
    size = typeof size === "function" ? size : constant$3(size === void 0 ? 64 : +size);
    function symbol2() {
      let buffer;
      if (!context2) context2 = buffer = path2();
      type2.apply(this, arguments).draw(context2, +size.apply(this, arguments));
      if (buffer) return context2 = null, buffer + "" || null;
    }
    symbol2.type = function(_) {
      return arguments.length ? (type2 = typeof _ === "function" ? _ : constant$3(_), symbol2) : type2;
    };
    symbol2.size = function(_) {
      return arguments.length ? (size = typeof _ === "function" ? _ : constant$3(+_), symbol2) : size;
    };
    symbol2.context = function(_) {
      return arguments.length ? (context2 = _ == null ? null : _, symbol2) : context2;
    };
    return symbol2;
  }
  function noop$3() {
  }
  function point$7(that, x2, y2) {
    that._context.bezierCurveTo(
      (2 * that._x0 + that._x1) / 3,
      (2 * that._y0 + that._y1) / 3,
      (that._x0 + 2 * that._x1) / 3,
      (that._y0 + 2 * that._y1) / 3,
      (that._x0 + 4 * that._x1 + x2) / 6,
      (that._y0 + 4 * that._y1 + y2) / 6
    );
  }
  function Basis(context2) {
    this._context = context2;
  }
  Basis.prototype = {
    areaStart: function() {
      this._line = 0;
    },
    areaEnd: function() {
      this._line = NaN;
    },
    lineStart: function() {
      this._x0 = this._x1 = this._y0 = this._y1 = NaN;
      this._point = 0;
    },
    lineEnd: function() {
      switch (this._point) {
        case 3:
          point$7(this, this._x1, this._y1);
        case 2:
          this._context.lineTo(this._x1, this._y1);
          break;
      }
      if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
      this._line = 1 - this._line;
    },
    point: function(x2, y2) {
      x2 = +x2, y2 = +y2;
      switch (this._point) {
        case 0:
          this._point = 1;
          this._line ? this._context.lineTo(x2, y2) : this._context.moveTo(x2, y2);
          break;
        case 1:
          this._point = 2;
          break;
        case 2:
          this._point = 3;
          this._context.lineTo((5 * this._x0 + this._x1) / 6, (5 * this._y0 + this._y1) / 6);
        default:
          point$7(this, x2, y2);
          break;
      }
      this._x0 = this._x1, this._x1 = x2;
      this._y0 = this._y1, this._y1 = y2;
    }
  };
  function curveBasis(context2) {
    return new Basis(context2);
  }
  function BasisClosed(context2) {
    this._context = context2;
  }
  BasisClosed.prototype = {
    areaStart: noop$3,
    areaEnd: noop$3,
    lineStart: function() {
      this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = NaN;
      this._point = 0;
    },
    lineEnd: function() {
      switch (this._point) {
        case 1: {
          this._context.moveTo(this._x2, this._y2);
          this._context.closePath();
          break;
        }
        case 2: {
          this._context.moveTo((this._x2 + 2 * this._x3) / 3, (this._y2 + 2 * this._y3) / 3);
          this._context.lineTo((this._x3 + 2 * this._x2) / 3, (this._y3 + 2 * this._y2) / 3);
          this._context.closePath();
          break;
        }
        case 3: {
          this.point(this._x2, this._y2);
          this.point(this._x3, this._y3);
          this.point(this._x4, this._y4);
          break;
        }
      }
    },
    point: function(x2, y2) {
      x2 = +x2, y2 = +y2;
      switch (this._point) {
        case 0:
          this._point = 1;
          this._x2 = x2, this._y2 = y2;
          break;
        case 1:
          this._point = 2;
          this._x3 = x2, this._y3 = y2;
          break;
        case 2:
          this._point = 3;
          this._x4 = x2, this._y4 = y2;
          this._context.moveTo((this._x0 + 4 * this._x1 + x2) / 6, (this._y0 + 4 * this._y1 + y2) / 6);
          break;
        default:
          point$7(this, x2, y2);
          break;
      }
      this._x0 = this._x1, this._x1 = x2;
      this._y0 = this._y1, this._y1 = y2;
    }
  };
  function curveBasisClosed(context2) {
    return new BasisClosed(context2);
  }
  function BasisOpen(context2) {
    this._context = context2;
  }
  BasisOpen.prototype = {
    areaStart: function() {
      this._line = 0;
    },
    areaEnd: function() {
      this._line = NaN;
    },
    lineStart: function() {
      this._x0 = this._x1 = this._y0 = this._y1 = NaN;
      this._point = 0;
    },
    lineEnd: function() {
      if (this._line || this._line !== 0 && this._point === 3) this._context.closePath();
      this._line = 1 - this._line;
    },
    point: function(x2, y2) {
      x2 = +x2, y2 = +y2;
      switch (this._point) {
        case 0:
          this._point = 1;
          break;
        case 1:
          this._point = 2;
          break;
        case 2:
          this._point = 3;
          var x02 = (this._x0 + 4 * this._x1 + x2) / 6, y02 = (this._y0 + 4 * this._y1 + y2) / 6;
          this._line ? this._context.lineTo(x02, y02) : this._context.moveTo(x02, y02);
          break;
        case 3:
          this._point = 4;
        default:
          point$7(this, x2, y2);
          break;
      }
      this._x0 = this._x1, this._x1 = x2;
      this._y0 = this._y1, this._y1 = y2;
    }
  };
  function curveBasisOpen(context2) {
    return new BasisOpen(context2);
  }
  function Bundle(context2, beta) {
    this._basis = new Basis(context2);
    this._beta = beta;
  }
  Bundle.prototype = {
    lineStart: function() {
      this._x = [];
      this._y = [];
      this._basis.lineStart();
    },
    lineEnd: function() {
      var x2 = this._x, y2 = this._y, j = x2.length - 1;
      if (j > 0) {
        var x02 = x2[0], y02 = y2[0], dx = x2[j] - x02, dy = y2[j] - y02, i = -1, t;
        while (++i <= j) {
          t = i / j;
          this._basis.point(
            this._beta * x2[i] + (1 - this._beta) * (x02 + t * dx),
            this._beta * y2[i] + (1 - this._beta) * (y02 + t * dy)
          );
        }
      }
      this._x = this._y = null;
      this._basis.lineEnd();
    },
    point: function(x2, y2) {
      this._x.push(+x2);
      this._y.push(+y2);
    }
  };
  const curveBundle = function custom2(beta) {
    function bundle2(context2) {
      return beta === 1 ? new Basis(context2) : new Bundle(context2, beta);
    }
    bundle2.beta = function(beta2) {
      return custom2(+beta2);
    };
    return bundle2;
  }(0.85);
  function point$6(that, x2, y2) {
    that._context.bezierCurveTo(
      that._x1 + that._k * (that._x2 - that._x0),
      that._y1 + that._k * (that._y2 - that._y0),
      that._x2 + that._k * (that._x1 - x2),
      that._y2 + that._k * (that._y1 - y2),
      that._x2,
      that._y2
    );
  }
  function Cardinal(context2, tension) {
    this._context = context2;
    this._k = (1 - tension) / 6;
  }
  Cardinal.prototype = {
    areaStart: function() {
      this._line = 0;
    },
    areaEnd: function() {
      this._line = NaN;
    },
    lineStart: function() {
      this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
      this._point = 0;
    },
    lineEnd: function() {
      switch (this._point) {
        case 2:
          this._context.lineTo(this._x2, this._y2);
          break;
        case 3:
          point$6(this, this._x1, this._y1);
          break;
      }
      if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
      this._line = 1 - this._line;
    },
    point: function(x2, y2) {
      x2 = +x2, y2 = +y2;
      switch (this._point) {
        case 0:
          this._point = 1;
          this._line ? this._context.lineTo(x2, y2) : this._context.moveTo(x2, y2);
          break;
        case 1:
          this._point = 2;
          this._x1 = x2, this._y1 = y2;
          break;
        case 2:
          this._point = 3;
        default:
          point$6(this, x2, y2);
          break;
      }
      this._x0 = this._x1, this._x1 = this._x2, this._x2 = x2;
      this._y0 = this._y1, this._y1 = this._y2, this._y2 = y2;
    }
  };
  const curveCardinal = function custom2(tension) {
    function cardinal(context2) {
      return new Cardinal(context2, tension);
    }
    cardinal.tension = function(tension2) {
      return custom2(+tension2);
    };
    return cardinal;
  }(0);
  function CardinalClosed(context2, tension) {
    this._context = context2;
    this._k = (1 - tension) / 6;
  }
  CardinalClosed.prototype = {
    areaStart: noop$3,
    areaEnd: noop$3,
    lineStart: function() {
      this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 = this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN;
      this._point = 0;
    },
    lineEnd: function() {
      switch (this._point) {
        case 1: {
          this._context.moveTo(this._x3, this._y3);
          this._context.closePath();
          break;
        }
        case 2: {
          this._context.lineTo(this._x3, this._y3);
          this._context.closePath();
          break;
        }
        case 3: {
          this.point(this._x3, this._y3);
          this.point(this._x4, this._y4);
          this.point(this._x5, this._y5);
          break;
        }
      }
    },
    point: function(x2, y2) {
      x2 = +x2, y2 = +y2;
      switch (this._point) {
        case 0:
          this._point = 1;
          this._x3 = x2, this._y3 = y2;
          break;
        case 1:
          this._point = 2;
          this._context.moveTo(this._x4 = x2, this._y4 = y2);
          break;
        case 2:
          this._point = 3;
          this._x5 = x2, this._y5 = y2;
          break;
        default:
          point$6(this, x2, y2);
          break;
      }
      this._x0 = this._x1, this._x1 = this._x2, this._x2 = x2;
      this._y0 = this._y1, this._y1 = this._y2, this._y2 = y2;
    }
  };
  const curveCardinalClosed = function custom2(tension) {
    function cardinal(context2) {
      return new CardinalClosed(context2, tension);
    }
    cardinal.tension = function(tension2) {
      return custom2(+tension2);
    };
    return cardinal;
  }(0);
  function CardinalOpen(context2, tension) {
    this._context = context2;
    this._k = (1 - tension) / 6;
  }
  CardinalOpen.prototype = {
    areaStart: function() {
      this._line = 0;
    },
    areaEnd: function() {
      this._line = NaN;
    },
    lineStart: function() {
      this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
      this._point = 0;
    },
    lineEnd: function() {
      if (this._line || this._line !== 0 && this._point === 3) this._context.closePath();
      this._line = 1 - this._line;
    },
    point: function(x2, y2) {
      x2 = +x2, y2 = +y2;
      switch (this._point) {
        case 0:
          this._point = 1;
          break;
        case 1:
          this._point = 2;
          break;
        case 2:
          this._point = 3;
          this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2);
          break;
        case 3:
          this._point = 4;
        default:
          point$6(this, x2, y2);
          break;
      }
      this._x0 = this._x1, this._x1 = this._x2, this._x2 = x2;
      this._y0 = this._y1, this._y1 = this._y2, this._y2 = y2;
    }
  };
  const curveCardinalOpen = function custom2(tension) {
    function cardinal(context2) {
      return new CardinalOpen(context2, tension);
    }
    cardinal.tension = function(tension2) {
      return custom2(+tension2);
    };
    return cardinal;
  }(0);
  function point$5(that, x2, y2) {
    var x12 = that._x1, y12 = that._y1, x22 = that._x2, y22 = that._y2;
    if (that._l01_a > epsilon$5) {
      var a2 = 2 * that._l01_2a + 3 * that._l01_a * that._l12_a + that._l12_2a, n = 3 * that._l01_a * (that._l01_a + that._l12_a);
      x12 = (x12 * a2 - that._x0 * that._l12_2a + that._x2 * that._l01_2a) / n;
      y12 = (y12 * a2 - that._y0 * that._l12_2a + that._y2 * that._l01_2a) / n;
    }
    if (that._l23_a > epsilon$5) {
      var b2 = 2 * that._l23_2a + 3 * that._l23_a * that._l12_a + that._l12_2a, m2 = 3 * that._l23_a * (that._l23_a + that._l12_a);
      x22 = (x22 * b2 + that._x1 * that._l23_2a - x2 * that._l12_2a) / m2;
      y22 = (y22 * b2 + that._y1 * that._l23_2a - y2 * that._l12_2a) / m2;
    }
    that._context.bezierCurveTo(x12, y12, x22, y22, that._x2, that._y2);
  }
  function CatmullRom(context2, alpha) {
    this._context = context2;
    this._alpha = alpha;
  }
  CatmullRom.prototype = {
    areaStart: function() {
      this._line = 0;
    },
    areaEnd: function() {
      this._line = NaN;
    },
    lineStart: function() {
      this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
      this._l01_a = this._l12_a = this._l23_a = this._l01_2a = this._l12_2a = this._l23_2a = this._point = 0;
    },
    lineEnd: function() {
      switch (this._point) {
        case 2:
          this._context.lineTo(this._x2, this._y2);
          break;
        case 3:
          this.point(this._x2, this._y2);
          break;
      }
      if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
      this._line = 1 - this._line;
    },
    point: function(x2, y2) {
      x2 = +x2, y2 = +y2;
      if (this._point) {
        var x23 = this._x2 - x2, y23 = this._y2 - y2;
        this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
      }
      switch (this._point) {
        case 0:
          this._point = 1;
          this._line ? this._context.lineTo(x2, y2) : this._context.moveTo(x2, y2);
          break;
        case 1:
          this._point = 2;
          break;
        case 2:
          this._point = 3;
        default:
          point$5(this, x2, y2);
          break;
      }
      this._l01_a = this._l12_a, this._l12_a = this._l23_a;
      this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
      this._x0 = this._x1, this._x1 = this._x2, this._x2 = x2;
      this._y0 = this._y1, this._y1 = this._y2, this._y2 = y2;
    }
  };
  const curveCatmullRom = function custom2(alpha) {
    function catmullRom(context2) {
      return alpha ? new CatmullRom(context2, alpha) : new Cardinal(context2, 0);
    }
    catmullRom.alpha = function(alpha2) {
      return custom2(+alpha2);
    };
    return catmullRom;
  }(0.5);
  function CatmullRomClosed(context2, alpha) {
    this._context = context2;
    this._alpha = alpha;
  }
  CatmullRomClosed.prototype = {
    areaStart: noop$3,
    areaEnd: noop$3,
    lineStart: function() {
      this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 = this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN;
      this._l01_a = this._l12_a = this._l23_a = this._l01_2a = this._l12_2a = this._l23_2a = this._point = 0;
    },
    lineEnd: function() {
      switch (this._point) {
        case 1: {
          this._context.moveTo(this._x3, this._y3);
          this._context.closePath();
          break;
        }
        case 2: {
          this._context.lineTo(this._x3, this._y3);
          this._context.closePath();
          break;
        }
        case 3: {
          this.point(this._x3, this._y3);
          this.point(this._x4, this._y4);
          this.point(this._x5, this._y5);
          break;
        }
      }
    },
    point: function(x2, y2) {
      x2 = +x2, y2 = +y2;
      if (this._point) {
        var x23 = this._x2 - x2, y23 = this._y2 - y2;
        this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
      }
      switch (this._point) {
        case 0:
          this._point = 1;
          this._x3 = x2, this._y3 = y2;
          break;
        case 1:
          this._point = 2;
          this._context.moveTo(this._x4 = x2, this._y4 = y2);
          break;
        case 2:
          this._point = 3;
          this._x5 = x2, this._y5 = y2;
          break;
        default:
          point$5(this, x2, y2);
          break;
      }
      this._l01_a = this._l12_a, this._l12_a = this._l23_a;
      this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
      this._x0 = this._x1, this._x1 = this._x2, this._x2 = x2;
      this._y0 = this._y1, this._y1 = this._y2, this._y2 = y2;
    }
  };
  const curveCatmullRomClosed = function custom2(alpha) {
    function catmullRom(context2) {
      return alpha ? new CatmullRomClosed(context2, alpha) : new CardinalClosed(context2, 0);
    }
    catmullRom.alpha = function(alpha2) {
      return custom2(+alpha2);
    };
    return catmullRom;
  }(0.5);
  function CatmullRomOpen(context2, alpha) {
    this._context = context2;
    this._alpha = alpha;
  }
  CatmullRomOpen.prototype = {
    areaStart: function() {
      this._line = 0;
    },
    areaEnd: function() {
      this._line = NaN;
    },
    lineStart: function() {
      this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
      this._l01_a = this._l12_a = this._l23_a = this._l01_2a = this._l12_2a = this._l23_2a = this._point = 0;
    },
    lineEnd: function() {
      if (this._line || this._line !== 0 && this._point === 3) this._context.closePath();
      this._line = 1 - this._line;
    },
    point: function(x2, y2) {
      x2 = +x2, y2 = +y2;
      if (this._point) {
        var x23 = this._x2 - x2, y23 = this._y2 - y2;
        this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
      }
      switch (this._point) {
        case 0:
          this._point = 1;
          break;
        case 1:
          this._point = 2;
          break;
        case 2:
          this._point = 3;
          this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2);
          break;
        case 3:
          this._point = 4;
        default:
          point$5(this, x2, y2);
          break;
      }
      this._l01_a = this._l12_a, this._l12_a = this._l23_a;
      this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
      this._x0 = this._x1, this._x1 = this._x2, this._x2 = x2;
      this._y0 = this._y1, this._y1 = this._y2, this._y2 = y2;
    }
  };
  const curveCatmullRomOpen = function custom2(alpha) {
    function catmullRom(context2) {
      return alpha ? new CatmullRomOpen(context2, alpha) : new CardinalOpen(context2, 0);
    }
    catmullRom.alpha = function(alpha2) {
      return custom2(+alpha2);
    };
    return catmullRom;
  }(0.5);
  function LinearClosed(context2) {
    this._context = context2;
  }
  LinearClosed.prototype = {
    areaStart: noop$3,
    areaEnd: noop$3,
    lineStart: function() {
      this._point = 0;
    },
    lineEnd: function() {
      if (this._point) this._context.closePath();
    },
    point: function(x2, y2) {
      x2 = +x2, y2 = +y2;
      if (this._point) this._context.lineTo(x2, y2);
      else this._point = 1, this._context.moveTo(x2, y2);
    }
  };
  function curveLinearClosed(context2) {
    return new LinearClosed(context2);
  }
  function sign$1(x2) {
    return x2 < 0 ? -1 : 1;
  }
  function slope3(that, x2, y2) {
    var h0 = that._x1 - that._x0, h1 = x2 - that._x1, s0 = (that._y1 - that._y0) / (h0 || h1 < 0 && -0), s1 = (y2 - that._y1) / (h1 || h0 < 0 && -0), p = (s0 * h1 + s1 * h0) / (h0 + h1);
    return (sign$1(s0) + sign$1(s1)) * Math.min(Math.abs(s0), Math.abs(s1), 0.5 * Math.abs(p)) || 0;
  }
  function slope2(that, t) {
    var h2 = that._x1 - that._x0;
    return h2 ? (3 * (that._y1 - that._y0) / h2 - t) / 2 : t;
  }
  function point$4(that, t02, t12) {
    var x02 = that._x0, y02 = that._y0, x12 = that._x1, y12 = that._y1, dx = (x12 - x02) / 3;
    that._context.bezierCurveTo(x02 + dx, y02 + dx * t02, x12 - dx, y12 - dx * t12, x12, y12);
  }
  function MonotoneX(context2) {
    this._context = context2;
  }
  MonotoneX.prototype = {
    areaStart: function() {
      this._line = 0;
    },
    areaEnd: function() {
      this._line = NaN;
    },
    lineStart: function() {
      this._x0 = this._x1 = this._y0 = this._y1 = this._t0 = NaN;
      this._point = 0;
    },
    lineEnd: function() {
      switch (this._point) {
        case 2:
          this._context.lineTo(this._x1, this._y1);
          break;
        case 3:
          point$4(this, this._t0, slope2(this, this._t0));
          break;
      }
      if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
      this._line = 1 - this._line;
    },
    point: function(x2, y2) {
      var t12 = NaN;
      x2 = +x2, y2 = +y2;
      if (x2 === this._x1 && y2 === this._y1) return;
      switch (this._point) {
        case 0:
          this._point = 1;
          this._line ? this._context.lineTo(x2, y2) : this._context.moveTo(x2, y2);
          break;
        case 1:
          this._point = 2;
          break;
        case 2:
          this._point = 3;
          point$4(this, slope2(this, t12 = slope3(this, x2, y2)), t12);
          break;
        default:
          point$4(this, this._t0, t12 = slope3(this, x2, y2));
          break;
      }
      this._x0 = this._x1, this._x1 = x2;
      this._y0 = this._y1, this._y1 = y2;
      this._t0 = t12;
    }
  };
  function MonotoneY(context2) {
    this._context = new ReflectContext(context2);
  }
  (MonotoneY.prototype = Object.create(MonotoneX.prototype)).point = function(x2, y2) {
    MonotoneX.prototype.point.call(this, y2, x2);
  };
  function ReflectContext(context2) {
    this._context = context2;
  }
  ReflectContext.prototype = {
    moveTo: function(x2, y2) {
      this._context.moveTo(y2, x2);
    },
    closePath: function() {
      this._context.closePath();
    },
    lineTo: function(x2, y2) {
      this._context.lineTo(y2, x2);
    },
    bezierCurveTo: function(x12, y12, x2, y2, x3, y3) {
      this._context.bezierCurveTo(y12, x12, y2, x2, y3, x3);
    }
  };
  function monotoneX(context2) {
    return new MonotoneX(context2);
  }
  function monotoneY(context2) {
    return new MonotoneY(context2);
  }
  function Natural(context2) {
    this._context = context2;
  }
  Natural.prototype = {
    areaStart: function() {
      this._line = 0;
    },
    areaEnd: function() {
      this._line = NaN;
    },
    lineStart: function() {
      this._x = [];
      this._y = [];
    },
    lineEnd: function() {
      var x2 = this._x, y2 = this._y, n = x2.length;
      if (n) {
        this._line ? this._context.lineTo(x2[0], y2[0]) : this._context.moveTo(x2[0], y2[0]);
        if (n === 2) {
          this._context.lineTo(x2[1], y2[1]);
        } else {
          var px2 = controlPoints(x2), py2 = controlPoints(y2);
          for (var i0 = 0, i1 = 1; i1 < n; ++i0, ++i1) {
            this._context.bezierCurveTo(px2[0][i0], py2[0][i0], px2[1][i0], py2[1][i0], x2[i1], y2[i1]);
          }
        }
      }
      if (this._line || this._line !== 0 && n === 1) this._context.closePath();
      this._line = 1 - this._line;
      this._x = this._y = null;
    },
    point: function(x2, y2) {
      this._x.push(+x2);
      this._y.push(+y2);
    }
  };
  function controlPoints(x2) {
    var i, n = x2.length - 1, m2, a2 = new Array(n), b2 = new Array(n), r = new Array(n);
    a2[0] = 0, b2[0] = 2, r[0] = x2[0] + 2 * x2[1];
    for (i = 1; i < n - 1; ++i) a2[i] = 1, b2[i] = 4, r[i] = 4 * x2[i] + 2 * x2[i + 1];
    a2[n - 1] = 2, b2[n - 1] = 7, r[n - 1] = 8 * x2[n - 1] + x2[n];
    for (i = 1; i < n; ++i) m2 = a2[i] / b2[i - 1], b2[i] -= m2, r[i] -= m2 * r[i - 1];
    a2[n - 1] = r[n - 1] / b2[n - 1];
    for (i = n - 2; i >= 0; --i) a2[i] = (r[i] - a2[i + 1]) / b2[i];
    b2[n - 1] = (x2[n] + a2[n - 1]) / 2;
    for (i = 0; i < n - 1; ++i) b2[i] = 2 * x2[i + 1] - a2[i + 1];
    return [a2, b2];
  }
  function curveNatural(context2) {
    return new Natural(context2);
  }
  function Step(context2, t) {
    this._context = context2;
    this._t = t;
  }
  Step.prototype = {
    areaStart: function() {
      this._line = 0;
    },
    areaEnd: function() {
      this._line = NaN;
    },
    lineStart: function() {
      this._x = this._y = NaN;
      this._point = 0;
    },
    lineEnd: function() {
      if (0 < this._t && this._t < 1 && this._point === 2) this._context.lineTo(this._x, this._y);
      if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
      if (this._line >= 0) this._t = 1 - this._t, this._line = 1 - this._line;
    },
    point: function(x2, y2) {
      x2 = +x2, y2 = +y2;
      switch (this._point) {
        case 0:
          this._point = 1;
          this._line ? this._context.lineTo(x2, y2) : this._context.moveTo(x2, y2);
          break;
        case 1:
          this._point = 2;
        default: {
          if (this._t <= 0) {
            this._context.lineTo(this._x, y2);
            this._context.lineTo(x2, y2);
          } else {
            var x12 = this._x * (1 - this._t) + x2 * this._t;
            this._context.lineTo(x12, this._y);
            this._context.lineTo(x12, y2);
          }
          break;
        }
      }
      this._x = x2, this._y = y2;
    }
  };
  function curveStep(context2) {
    return new Step(context2, 0.5);
  }
  function stepBefore(context2) {
    return new Step(context2, 0);
  }
  function stepAfter(context2) {
    return new Step(context2, 1);
  }
  function domCanvas(w2, h2) {
    if (typeof document !== "undefined" && document.createElement) {
      const c2 = document.createElement("canvas");
      if (c2 && c2.getContext) {
        c2.width = w2;
        c2.height = h2;
        return c2;
      }
    }
    return null;
  }
  const domImage = () => typeof Image !== "undefined" ? Image : null;
  function initRange(domain2, range2) {
    switch (arguments.length) {
      case 0:
        break;
      case 1:
        this.range(domain2);
        break;
      default:
        this.range(range2).domain(domain2);
        break;
    }
    return this;
  }
  function initInterpolator(domain2, interpolator) {
    switch (arguments.length) {
      case 0:
        break;
      case 1: {
        if (typeof domain2 === "function") this.interpolator(domain2);
        else this.range(domain2);
        break;
      }
      default: {
        this.domain(domain2);
        if (typeof interpolator === "function") this.interpolator(interpolator);
        else this.range(interpolator);
        break;
      }
    }
    return this;
  }
  const implicit = Symbol("implicit");
  function ordinal() {
    var index2 = new InternMap(), domain2 = [], range2 = [], unknown = implicit;
    function scale2(d) {
      let i = index2.get(d);
      if (i === void 0) {
        if (unknown !== implicit) return unknown;
        index2.set(d, i = domain2.push(d) - 1);
      }
      return range2[i % range2.length];
    }
    scale2.domain = function(_) {
      if (!arguments.length) return domain2.slice();
      domain2 = [], index2 = new InternMap();
      for (const value2 of _) {
        if (index2.has(value2)) continue;
        index2.set(value2, domain2.push(value2) - 1);
      }
      return scale2;
    };
    scale2.range = function(_) {
      return arguments.length ? (range2 = Array.from(_), scale2) : range2.slice();
    };
    scale2.unknown = function(_) {
      return arguments.length ? (unknown = _, scale2) : unknown;
    };
    scale2.copy = function() {
      return ordinal(domain2, range2).unknown(unknown);
    };
    initRange.apply(scale2, arguments);
    return scale2;
  }
  function define2(constructor, factory, prototype2) {
    constructor.prototype = factory.prototype = prototype2;
    prototype2.constructor = constructor;
  }
  function extend(parent, definition2) {
    var prototype2 = Object.create(parent.prototype);
    for (var key2 in definition2) prototype2[key2] = definition2[key2];
    return prototype2;
  }
  function Color() {
  }
  var darker = 0.7;
  var brighter = 1 / darker;
  var reI = "\\s*([+-]?\\d+)\\s*", reN = "\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)\\s*", reP = "\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)%\\s*", reHex = /^#([0-9a-f]{3,8})$/, reRgbInteger = new RegExp(`^rgb\\(${reI},${reI},${reI}\\)$`), reRgbPercent = new RegExp(`^rgb\\(${reP},${reP},${reP}\\)$`), reRgbaInteger = new RegExp(`^rgba\\(${reI},${reI},${reI},${reN}\\)$`), reRgbaPercent = new RegExp(`^rgba\\(${reP},${reP},${reP},${reN}\\)$`), reHslPercent = new RegExp(`^hsl\\(${reN},${reP},${reP}\\)$`), reHslaPercent = new RegExp(`^hsla\\(${reN},${reP},${reP},${reN}\\)$`);
  var named = {
    aliceblue: 15792383,
    antiquewhite: 16444375,
    aqua: 65535,
    aquamarine: 8388564,
    azure: 15794175,
    beige: 16119260,
    bisque: 16770244,
    black: 0,
    blanchedalmond: 16772045,
    blue: 255,
    blueviolet: 9055202,
    brown: 10824234,
    burlywood: 14596231,
    cadetblue: 6266528,
    chartreuse: 8388352,
    chocolate: 13789470,
    coral: 16744272,
    cornflowerblue: 6591981,
    cornsilk: 16775388,
    crimson: 14423100,
    cyan: 65535,
    darkblue: 139,
    darkcyan: 35723,
    darkgoldenrod: 12092939,
    darkgray: 11119017,
    darkgreen: 25600,
    darkgrey: 11119017,
    darkkhaki: 12433259,
    darkmagenta: 9109643,
    darkolivegreen: 5597999,
    darkorange: 16747520,
    darkorchid: 10040012,
    darkred: 9109504,
    darksalmon: 15308410,
    darkseagreen: 9419919,
    darkslateblue: 4734347,
    darkslategray: 3100495,
    darkslategrey: 3100495,
    darkturquoise: 52945,
    darkviolet: 9699539,
    deeppink: 16716947,
    deepskyblue: 49151,
    dimgray: 6908265,
    dimgrey: 6908265,
    dodgerblue: 2003199,
    firebrick: 11674146,
    floralwhite: 16775920,
    forestgreen: 2263842,
    fuchsia: 16711935,
    gainsboro: 14474460,
    ghostwhite: 16316671,
    gold: 16766720,
    goldenrod: 14329120,
    gray: 8421504,
    green: 32768,
    greenyellow: 11403055,
    grey: 8421504,
    honeydew: 15794160,
    hotpink: 16738740,
    indianred: 13458524,
    indigo: 4915330,
    ivory: 16777200,
    khaki: 15787660,
    lavender: 15132410,
    lavenderblush: 16773365,
    lawngreen: 8190976,
    lemonchiffon: 16775885,
    lightblue: 11393254,
    lightcoral: 15761536,
    lightcyan: 14745599,
    lightgoldenrodyellow: 16448210,
    lightgray: 13882323,
    lightgreen: 9498256,
    lightgrey: 13882323,
    lightpink: 16758465,
    lightsalmon: 16752762,
    lightseagreen: 2142890,
    lightskyblue: 8900346,
    lightslategray: 7833753,
    lightslategrey: 7833753,
    lightsteelblue: 11584734,
    lightyellow: 16777184,
    lime: 65280,
    limegreen: 3329330,
    linen: 16445670,
    magenta: 16711935,
    maroon: 8388608,
    mediumaquamarine: 6737322,
    mediumblue: 205,
    mediumorchid: 12211667,
    mediumpurple: 9662683,
    mediumseagreen: 3978097,
    mediumslateblue: 8087790,
    mediumspringgreen: 64154,
    mediumturquoise: 4772300,
    mediumvioletred: 13047173,
    midnightblue: 1644912,
    mintcream: 16121850,
    mistyrose: 16770273,
    moccasin: 16770229,
    navajowhite: 16768685,
    navy: 128,
    oldlace: 16643558,
    olive: 8421376,
    olivedrab: 7048739,
    orange: 16753920,
    orangered: 16729344,
    orchid: 14315734,
    palegoldenrod: 15657130,
    palegreen: 10025880,
    paleturquoise: 11529966,
    palevioletred: 14381203,
    papayawhip: 16773077,
    peachpuff: 16767673,
    peru: 13468991,
    pink: 16761035,
    plum: 14524637,
    powderblue: 11591910,
    purple: 8388736,
    rebeccapurple: 6697881,
    red: 16711680,
    rosybrown: 12357519,
    royalblue: 4286945,
    saddlebrown: 9127187,
    salmon: 16416882,
    sandybrown: 16032864,
    seagreen: 3050327,
    seashell: 16774638,
    sienna: 10506797,
    silver: 12632256,
    skyblue: 8900331,
    slateblue: 6970061,
    slategray: 7372944,
    slategrey: 7372944,
    snow: 16775930,
    springgreen: 65407,
    steelblue: 4620980,
    tan: 13808780,
    teal: 32896,
    thistle: 14204888,
    tomato: 16737095,
    turquoise: 4251856,
    violet: 15631086,
    wheat: 16113331,
    white: 16777215,
    whitesmoke: 16119285,
    yellow: 16776960,
    yellowgreen: 10145074
  };
  define2(Color, color$3, {
    copy(channels) {
      return Object.assign(new this.constructor(), this, channels);
    },
    displayable() {
      return this.rgb().displayable();
    },
    hex: color_formatHex,
    // Deprecated! Use color.formatHex.
    formatHex: color_formatHex,
    formatHex8: color_formatHex8,
    formatHsl: color_formatHsl,
    formatRgb: color_formatRgb,
    toString: color_formatRgb
  });
  function color_formatHex() {
    return this.rgb().formatHex();
  }
  function color_formatHex8() {
    return this.rgb().formatHex8();
  }
  function color_formatHsl() {
    return hslConvert(this).formatHsl();
  }
  function color_formatRgb() {
    return this.rgb().formatRgb();
  }
  function color$3(format2) {
    var m2, l;
    format2 = (format2 + "").trim().toLowerCase();
    return (m2 = reHex.exec(format2)) ? (l = m2[1].length, m2 = parseInt(m2[1], 16), l === 6 ? rgbn(m2) : l === 3 ? new Rgb(m2 >> 8 & 15 | m2 >> 4 & 240, m2 >> 4 & 15 | m2 & 240, (m2 & 15) << 4 | m2 & 15, 1) : l === 8 ? rgba(m2 >> 24 & 255, m2 >> 16 & 255, m2 >> 8 & 255, (m2 & 255) / 255) : l === 4 ? rgba(m2 >> 12 & 15 | m2 >> 8 & 240, m2 >> 8 & 15 | m2 >> 4 & 240, m2 >> 4 & 15 | m2 & 240, ((m2 & 15) << 4 | m2 & 15) / 255) : null) : (m2 = reRgbInteger.exec(format2)) ? new Rgb(m2[1], m2[2], m2[3], 1) : (m2 = reRgbPercent.exec(format2)) ? new Rgb(m2[1] * 255 / 100, m2[2] * 255 / 100, m2[3] * 255 / 100, 1) : (m2 = reRgbaInteger.exec(format2)) ? rgba(m2[1], m2[2], m2[3], m2[4]) : (m2 = reRgbaPercent.exec(format2)) ? rgba(m2[1] * 255 / 100, m2[2] * 255 / 100, m2[3] * 255 / 100, m2[4]) : (m2 = reHslPercent.exec(format2)) ? hsla(m2[1], m2[2] / 100, m2[3] / 100, 1) : (m2 = reHslaPercent.exec(format2)) ? hsla(m2[1], m2[2] / 100, m2[3] / 100, m2[4]) : named.hasOwnProperty(format2) ? rgbn(named[format2]) : format2 === "transparent" ? new Rgb(NaN, NaN, NaN, 0) : null;
  }
  function rgbn(n) {
    return new Rgb(n >> 16 & 255, n >> 8 & 255, n & 255, 1);
  }
  function rgba(r, g, b2, a2) {
    if (a2 <= 0) r = g = b2 = NaN;
    return new Rgb(r, g, b2, a2);
  }
  function rgbConvert(o) {
    if (!(o instanceof Color)) o = color$3(o);
    if (!o) return new Rgb();
    o = o.rgb();
    return new Rgb(o.r, o.g, o.b, o.opacity);
  }
  function rgb$1(r, g, b2, opacity2) {
    return arguments.length === 1 ? rgbConvert(r) : new Rgb(r, g, b2, opacity2 == null ? 1 : opacity2);
  }
  function Rgb(r, g, b2, opacity2) {
    this.r = +r;
    this.g = +g;
    this.b = +b2;
    this.opacity = +opacity2;
  }
  define2(Rgb, rgb$1, extend(Color, {
    brighter(k) {
      k = k == null ? brighter : Math.pow(brighter, k);
      return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
    },
    darker(k) {
      k = k == null ? darker : Math.pow(darker, k);
      return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
    },
    rgb() {
      return this;
    },
    clamp() {
      return new Rgb(clampi(this.r), clampi(this.g), clampi(this.b), clampa(this.opacity));
    },
    displayable() {
      return -0.5 <= this.r && this.r < 255.5 && (-0.5 <= this.g && this.g < 255.5) && (-0.5 <= this.b && this.b < 255.5) && (0 <= this.opacity && this.opacity <= 1);
    },
    hex: rgb_formatHex,
    // Deprecated! Use color.formatHex.
    formatHex: rgb_formatHex,
    formatHex8: rgb_formatHex8,
    formatRgb: rgb_formatRgb,
    toString: rgb_formatRgb
  }));
  function rgb_formatHex() {
    return `#${hex(this.r)}${hex(this.g)}${hex(this.b)}`;
  }
  function rgb_formatHex8() {
    return `#${hex(this.r)}${hex(this.g)}${hex(this.b)}${hex((isNaN(this.opacity) ? 1 : this.opacity) * 255)}`;
  }
  function rgb_formatRgb() {
    const a2 = clampa(this.opacity);
    return `${a2 === 1 ? "rgb(" : "rgba("}${clampi(this.r)}, ${clampi(this.g)}, ${clampi(this.b)}${a2 === 1 ? ")" : `, ${a2})`}`;
  }
  function clampa(opacity2) {
    return isNaN(opacity2) ? 1 : Math.max(0, Math.min(1, opacity2));
  }
  function clampi(value2) {
    return Math.max(0, Math.min(255, Math.round(value2) || 0));
  }
  function hex(value2) {
    value2 = clampi(value2);
    return (value2 < 16 ? "0" : "") + value2.toString(16);
  }
  function hsla(h2, s, l, a2) {
    if (a2 <= 0) h2 = s = l = NaN;
    else if (l <= 0 || l >= 1) h2 = s = NaN;
    else if (s <= 0) h2 = NaN;
    return new Hsl(h2, s, l, a2);
  }
  function hslConvert(o) {
    if (o instanceof Hsl) return new Hsl(o.h, o.s, o.l, o.opacity);
    if (!(o instanceof Color)) o = color$3(o);
    if (!o) return new Hsl();
    if (o instanceof Hsl) return o;
    o = o.rgb();
    var r = o.r / 255, g = o.g / 255, b2 = o.b / 255, min2 = Math.min(r, g, b2), max2 = Math.max(r, g, b2), h2 = NaN, s = max2 - min2, l = (max2 + min2) / 2;
    if (s) {
      if (r === max2) h2 = (g - b2) / s + (g < b2) * 6;
      else if (g === max2) h2 = (b2 - r) / s + 2;
      else h2 = (r - g) / s + 4;
      s /= l < 0.5 ? max2 + min2 : 2 - max2 - min2;
      h2 *= 60;
    } else {
      s = l > 0 && l < 1 ? 0 : h2;
    }
    return new Hsl(h2, s, l, o.opacity);
  }
  function hsl$2(h2, s, l, opacity2) {
    return arguments.length === 1 ? hslConvert(h2) : new Hsl(h2, s, l, opacity2 == null ? 1 : opacity2);
  }
  function Hsl(h2, s, l, opacity2) {
    this.h = +h2;
    this.s = +s;
    this.l = +l;
    this.opacity = +opacity2;
  }
  define2(Hsl, hsl$2, extend(Color, {
    brighter(k) {
      k = k == null ? brighter : Math.pow(brighter, k);
      return new Hsl(this.h, this.s, this.l * k, this.opacity);
    },
    darker(k) {
      k = k == null ? darker : Math.pow(darker, k);
      return new Hsl(this.h, this.s, this.l * k, this.opacity);
    },
    rgb() {
      var h2 = this.h % 360 + (this.h < 0) * 360, s = isNaN(h2) || isNaN(this.s) ? 0 : this.s, l = this.l, m2 = l + (l < 0.5 ? l : 1 - l) * s, m1 = 2 * l - m2;
      return new Rgb(
        hsl2rgb(h2 >= 240 ? h2 - 240 : h2 + 120, m1, m2),
        hsl2rgb(h2, m1, m2),
        hsl2rgb(h2 < 120 ? h2 + 240 : h2 - 120, m1, m2),
        this.opacity
      );
    },
    clamp() {
      return new Hsl(clamph(this.h), clampt(this.s), clampt(this.l), clampa(this.opacity));
    },
    displayable() {
      return (0 <= this.s && this.s <= 1 || isNaN(this.s)) && (0 <= this.l && this.l <= 1) && (0 <= this.opacity && this.opacity <= 1);
    },
    formatHsl() {
      const a2 = clampa(this.opacity);
      return `${a2 === 1 ? "hsl(" : "hsla("}${clamph(this.h)}, ${clampt(this.s) * 100}%, ${clampt(this.l) * 100}%${a2 === 1 ? ")" : `, ${a2})`}`;
    }
  }));
  function clamph(value2) {
    value2 = (value2 || 0) % 360;
    return value2 < 0 ? value2 + 360 : value2;
  }
  function clampt(value2) {
    return Math.max(0, Math.min(1, value2 || 0));
  }
  function hsl2rgb(h2, m1, m2) {
    return (h2 < 60 ? m1 + (m2 - m1) * h2 / 60 : h2 < 180 ? m2 : h2 < 240 ? m1 + (m2 - m1) * (240 - h2) / 60 : m1) * 255;
  }
  const radians$1 = Math.PI / 180;
  const degrees$2 = 180 / Math.PI;
  const K = 18, Xn = 0.96422, Yn = 1, Zn = 0.82521, t0 = 4 / 29, t1 = 6 / 29, t2 = 3 * t1 * t1, t3 = t1 * t1 * t1;
  function labConvert(o) {
    if (o instanceof Lab) return new Lab(o.l, o.a, o.b, o.opacity);
    if (o instanceof Hcl) return hcl2lab(o);
    if (!(o instanceof Rgb)) o = rgbConvert(o);
    var r = rgb2lrgb(o.r), g = rgb2lrgb(o.g), b2 = rgb2lrgb(o.b), y2 = xyz2lab((0.2225045 * r + 0.7168786 * g + 0.0606169 * b2) / Yn), x2, z;
    if (r === g && g === b2) x2 = z = y2;
    else {
      x2 = xyz2lab((0.4360747 * r + 0.3850649 * g + 0.1430804 * b2) / Xn);
      z = xyz2lab((0.0139322 * r + 0.0971045 * g + 0.7141733 * b2) / Zn);
    }
    return new Lab(116 * y2 - 16, 500 * (x2 - y2), 200 * (y2 - z), o.opacity);
  }
  function lab$1(l, a2, b2, opacity2) {
    return arguments.length === 1 ? labConvert(l) : new Lab(l, a2, b2, opacity2 == null ? 1 : opacity2);
  }
  function Lab(l, a2, b2, opacity2) {
    this.l = +l;
    this.a = +a2;
    this.b = +b2;
    this.opacity = +opacity2;
  }
  define2(Lab, lab$1, extend(Color, {
    brighter(k) {
      return new Lab(this.l + K * (k == null ? 1 : k), this.a, this.b, this.opacity);
    },
    darker(k) {
      return new Lab(this.l - K * (k == null ? 1 : k), this.a, this.b, this.opacity);
    },
    rgb() {
      var y2 = (this.l + 16) / 116, x2 = isNaN(this.a) ? y2 : y2 + this.a / 500, z = isNaN(this.b) ? y2 : y2 - this.b / 200;
      x2 = Xn * lab2xyz(x2);
      y2 = Yn * lab2xyz(y2);
      z = Zn * lab2xyz(z);
      return new Rgb(
        lrgb2rgb(3.1338561 * x2 - 1.6168667 * y2 - 0.4906146 * z),
        lrgb2rgb(-0.9787684 * x2 + 1.9161415 * y2 + 0.033454 * z),
        lrgb2rgb(0.0719453 * x2 - 0.2289914 * y2 + 1.4052427 * z),
        this.opacity
      );
    }
  }));
  function xyz2lab(t) {
    return t > t3 ? Math.pow(t, 1 / 3) : t / t2 + t0;
  }
  function lab2xyz(t) {
    return t > t1 ? t * t * t : t2 * (t - t0);
  }
  function lrgb2rgb(x2) {
    return 255 * (x2 <= 31308e-7 ? 12.92 * x2 : 1.055 * Math.pow(x2, 1 / 2.4) - 0.055);
  }
  function rgb2lrgb(x2) {
    return (x2 /= 255) <= 0.04045 ? x2 / 12.92 : Math.pow((x2 + 0.055) / 1.055, 2.4);
  }
  function hclConvert(o) {
    if (o instanceof Hcl) return new Hcl(o.h, o.c, o.l, o.opacity);
    if (!(o instanceof Lab)) o = labConvert(o);
    if (o.a === 0 && o.b === 0) return new Hcl(NaN, 0 < o.l && o.l < 100 ? 0 : NaN, o.l, o.opacity);
    var h2 = Math.atan2(o.b, o.a) * degrees$2;
    return new Hcl(h2 < 0 ? h2 + 360 : h2, Math.sqrt(o.a * o.a + o.b * o.b), o.l, o.opacity);
  }
  function hcl$2(h2, c2, l, opacity2) {
    return arguments.length === 1 ? hclConvert(h2) : new Hcl(h2, c2, l, opacity2 == null ? 1 : opacity2);
  }
  function Hcl(h2, c2, l, opacity2) {
    this.h = +h2;
    this.c = +c2;
    this.l = +l;
    this.opacity = +opacity2;
  }
  function hcl2lab(o) {
    if (isNaN(o.h)) return new Lab(o.l, 0, 0, o.opacity);
    var h2 = o.h * radians$1;
    return new Lab(o.l, Math.cos(h2) * o.c, Math.sin(h2) * o.c, o.opacity);
  }
  define2(Hcl, hcl$2, extend(Color, {
    brighter(k) {
      return new Hcl(this.h, this.c, this.l + K * (k == null ? 1 : k), this.opacity);
    },
    darker(k) {
      return new Hcl(this.h, this.c, this.l - K * (k == null ? 1 : k), this.opacity);
    },
    rgb() {
      return hcl2lab(this).rgb();
    }
  }));
  var A = -0.14861, B$1 = 1.78277, C$1 = -0.29227, D$1 = -0.90649, E = 1.97294, ED = E * D$1, EB = E * B$1, BC_DA = B$1 * C$1 - D$1 * A;
  function cubehelixConvert(o) {
    if (o instanceof Cubehelix) return new Cubehelix(o.h, o.s, o.l, o.opacity);
    if (!(o instanceof Rgb)) o = rgbConvert(o);
    var r = o.r / 255, g = o.g / 255, b2 = o.b / 255, l = (BC_DA * b2 + ED * r - EB * g) / (BC_DA + ED - EB), bl2 = b2 - l, k = (E * (g - l) - C$1 * bl2) / D$1, s = Math.sqrt(k * k + bl2 * bl2) / (E * l * (1 - l)), h2 = s ? Math.atan2(k, bl2) * degrees$2 - 120 : NaN;
    return new Cubehelix(h2 < 0 ? h2 + 360 : h2, s, l, o.opacity);
  }
  function cubehelix$2(h2, s, l, opacity2) {
    return arguments.length === 1 ? cubehelixConvert(h2) : new Cubehelix(h2, s, l, opacity2 == null ? 1 : opacity2);
  }
  function Cubehelix(h2, s, l, opacity2) {
    this.h = +h2;
    this.s = +s;
    this.l = +l;
    this.opacity = +opacity2;
  }
  define2(Cubehelix, cubehelix$2, extend(Color, {
    brighter(k) {
      k = k == null ? brighter : Math.pow(brighter, k);
      return new Cubehelix(this.h, this.s, this.l * k, this.opacity);
    },
    darker(k) {
      k = k == null ? darker : Math.pow(darker, k);
      return new Cubehelix(this.h, this.s, this.l * k, this.opacity);
    },
    rgb() {
      var h2 = isNaN(this.h) ? 0 : (this.h + 120) * radians$1, l = +this.l, a2 = isNaN(this.s) ? 0 : this.s * l * (1 - l), cosh2 = Math.cos(h2), sinh2 = Math.sin(h2);
      return new Rgb(
        255 * (l + a2 * (A * cosh2 + B$1 * sinh2)),
        255 * (l + a2 * (C$1 * cosh2 + D$1 * sinh2)),
        255 * (l + a2 * (E * cosh2)),
        this.opacity
      );
    }
  }));
  function basis(t12, v0, v1, v2, v3) {
    var t22 = t12 * t12, t32 = t22 * t12;
    return ((1 - 3 * t12 + 3 * t22 - t32) * v0 + (4 - 6 * t22 + 3 * t32) * v1 + (1 + 3 * t12 + 3 * t22 - 3 * t32) * v2 + t32 * v3) / 6;
  }
  function basis$1(values2) {
    var n = values2.length - 1;
    return function(t) {
      var i = t <= 0 ? t = 0 : t >= 1 ? (t = 1, n - 1) : Math.floor(t * n), v1 = values2[i], v2 = values2[i + 1], v0 = i > 0 ? values2[i - 1] : 2 * v1 - v2, v3 = i < n - 1 ? values2[i + 2] : 2 * v2 - v1;
      return basis((t - i / n) * n, v0, v1, v2, v3);
    };
  }
  function basisClosed(values2) {
    var n = values2.length;
    return function(t) {
      var i = Math.floor(((t %= 1) < 0 ? ++t : t) * n), v0 = values2[(i + n - 1) % n], v1 = values2[i % n], v2 = values2[(i + 1) % n], v3 = values2[(i + 2) % n];
      return basis((t - i / n) * n, v0, v1, v2, v3);
    };
  }
  const constant$2 = (x2) => () => x2;
  function linear$1(a2, d) {
    return function(t) {
      return a2 + t * d;
    };
  }
  function exponential(a2, b2, y2) {
    return a2 = Math.pow(a2, y2), b2 = Math.pow(b2, y2) - a2, y2 = 1 / y2, function(t) {
      return Math.pow(a2 + t * b2, y2);
    };
  }
  function hue$1(a2, b2) {
    var d = b2 - a2;
    return d ? linear$1(a2, d > 180 || d < -180 ? d - 360 * Math.round(d / 360) : d) : constant$2(isNaN(a2) ? b2 : a2);
  }
  function gamma(y2) {
    return (y2 = +y2) === 1 ? nogamma : function(a2, b2) {
      return b2 - a2 ? exponential(a2, b2, y2) : constant$2(isNaN(a2) ? b2 : a2);
    };
  }
  function nogamma(a2, b2) {
    var d = b2 - a2;
    return d ? linear$1(a2, d) : constant$2(isNaN(a2) ? b2 : a2);
  }
  const rgb = function rgbGamma(y2) {
    var color2 = gamma(y2);
    function rgb2(start, end) {
      var r = color2((start = rgb$1(start)).r, (end = rgb$1(end)).r), g = color2(start.g, end.g), b2 = color2(start.b, end.b), opacity2 = nogamma(start.opacity, end.opacity);
      return function(t) {
        start.r = r(t);
        start.g = g(t);
        start.b = b2(t);
        start.opacity = opacity2(t);
        return start + "";
      };
    }
    rgb2.gamma = rgbGamma;
    return rgb2;
  }(1);
  function rgbSpline(spline) {
    return function(colors2) {
      var n = colors2.length, r = new Array(n), g = new Array(n), b2 = new Array(n), i, color2;
      for (i = 0; i < n; ++i) {
        color2 = rgb$1(colors2[i]);
        r[i] = color2.r || 0;
        g[i] = color2.g || 0;
        b2[i] = color2.b || 0;
      }
      r = spline(r);
      g = spline(g);
      b2 = spline(b2);
      color2.opacity = 1;
      return function(t) {
        color2.r = r(t);
        color2.g = g(t);
        color2.b = b2(t);
        return color2 + "";
      };
    };
  }
  var rgbBasis = rgbSpline(basis$1);
  var rgbBasisClosed = rgbSpline(basisClosed);
  function numberArray(a2, b2) {
    if (!b2) b2 = [];
    var n = a2 ? Math.min(b2.length, a2.length) : 0, c2 = b2.slice(), i;
    return function(t) {
      for (i = 0; i < n; ++i) c2[i] = a2[i] * (1 - t) + b2[i] * t;
      return c2;
    };
  }
  function isNumberArray(x2) {
    return ArrayBuffer.isView(x2) && !(x2 instanceof DataView);
  }
  function array$3(a2, b2) {
    return (isNumberArray(b2) ? numberArray : genericArray)(a2, b2);
  }
  function genericArray(a2, b2) {
    var nb = b2 ? b2.length : 0, na = a2 ? Math.min(nb, a2.length) : 0, x2 = new Array(na), c2 = new Array(nb), i;
    for (i = 0; i < na; ++i) x2[i] = interpolate$1$1(a2[i], b2[i]);
    for (; i < nb; ++i) c2[i] = b2[i];
    return function(t) {
      for (i = 0; i < na; ++i) c2[i] = x2[i](t);
      return c2;
    };
  }
  function date$1(a2, b2) {
    var d = /* @__PURE__ */ new Date();
    return a2 = +a2, b2 = +b2, function(t) {
      return d.setTime(a2 * (1 - t) + b2 * t), d;
    };
  }
  function interpolateNumber(a2, b2) {
    return a2 = +a2, b2 = +b2, function(t) {
      return a2 * (1 - t) + b2 * t;
    };
  }
  function object(a2, b2) {
    var i = {}, c2 = {}, k;
    if (a2 === null || typeof a2 !== "object") a2 = {};
    if (b2 === null || typeof b2 !== "object") b2 = {};
    for (k in b2) {
      if (k in a2) {
        i[k] = interpolate$1$1(a2[k], b2[k]);
      } else {
        c2[k] = b2[k];
      }
    }
    return function(t) {
      for (k in i) c2[k] = i[k](t);
      return c2;
    };
  }
  var reA = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g, reB = new RegExp(reA.source, "g");
  function zero$2(b2) {
    return function() {
      return b2;
    };
  }
  function one$1(b2) {
    return function(t) {
      return b2(t) + "";
    };
  }
  function string(a2, b2) {
    var bi = reA.lastIndex = reB.lastIndex = 0, am, bm, bs, i = -1, s = [], q = [];
    a2 = a2 + "", b2 = b2 + "";
    while ((am = reA.exec(a2)) && (bm = reB.exec(b2))) {
      if ((bs = bm.index) > bi) {
        bs = b2.slice(bi, bs);
        if (s[i]) s[i] += bs;
        else s[++i] = bs;
      }
      if ((am = am[0]) === (bm = bm[0])) {
        if (s[i]) s[i] += bm;
        else s[++i] = bm;
      } else {
        s[++i] = null;
        q.push({ i, x: interpolateNumber(am, bm) });
      }
      bi = reB.lastIndex;
    }
    if (bi < b2.length) {
      bs = b2.slice(bi);
      if (s[i]) s[i] += bs;
      else s[++i] = bs;
    }
    return s.length < 2 ? q[0] ? one$1(q[0].x) : zero$2(b2) : (b2 = q.length, function(t) {
      for (var i2 = 0, o; i2 < b2; ++i2) s[(o = q[i2]).i] = o.x(t);
      return s.join("");
    });
  }
  function interpolate$1$1(a2, b2) {
    var t = typeof b2, c2;
    return b2 == null || t === "boolean" ? constant$2(b2) : (t === "number" ? interpolateNumber : t === "string" ? (c2 = color$3(b2)) ? (b2 = c2, rgb) : string : b2 instanceof color$3 ? rgb : b2 instanceof Date ? date$1 : isNumberArray(b2) ? numberArray : Array.isArray(b2) ? genericArray : typeof b2.valueOf !== "function" && typeof b2.toString !== "function" || isNaN(b2) ? object : interpolateNumber)(a2, b2);
  }
  function discrete$1(range2) {
    var n = range2.length;
    return function(t) {
      return range2[Math.max(0, Math.min(n - 1, Math.floor(t * n)))];
    };
  }
  function hue(a2, b2) {
    var i = hue$1(+a2, +b2);
    return function(t) {
      var x2 = i(t);
      return x2 - 360 * Math.floor(x2 / 360);
    };
  }
  function interpolateRound(a2, b2) {
    return a2 = +a2, b2 = +b2, function(t) {
      return Math.round(a2 * (1 - t) + b2 * t);
    };
  }
  var degrees$1 = 180 / Math.PI;
  var identity$3 = {
    translateX: 0,
    translateY: 0,
    rotate: 0,
    skewX: 0,
    scaleX: 1,
    scaleY: 1
  };
  function decompose(a2, b2, c2, d, e3, f) {
    var scaleX, scaleY2, skewX;
    if (scaleX = Math.sqrt(a2 * a2 + b2 * b2)) a2 /= scaleX, b2 /= scaleX;
    if (skewX = a2 * c2 + b2 * d) c2 -= a2 * skewX, d -= b2 * skewX;
    if (scaleY2 = Math.sqrt(c2 * c2 + d * d)) c2 /= scaleY2, d /= scaleY2, skewX /= scaleY2;
    if (a2 * d < b2 * c2) a2 = -a2, b2 = -b2, skewX = -skewX, scaleX = -scaleX;
    return {
      translateX: e3,
      translateY: f,
      rotate: Math.atan2(b2, a2) * degrees$1,
      skewX: Math.atan(skewX) * degrees$1,
      scaleX,
      scaleY: scaleY2
    };
  }
  var svgNode;
  function parseCss(value2) {
    const m2 = new (typeof DOMMatrix === "function" ? DOMMatrix : WebKitCSSMatrix)(value2 + "");
    return m2.isIdentity ? identity$3 : decompose(m2.a, m2.b, m2.c, m2.d, m2.e, m2.f);
  }
  function parseSvg(value2) {
    if (value2 == null) return identity$3;
    if (!svgNode) svgNode = document.createElementNS("http://www.w3.org/2000/svg", "g");
    svgNode.setAttribute("transform", value2);
    if (!(value2 = svgNode.transform.baseVal.consolidate())) return identity$3;
    value2 = value2.matrix;
    return decompose(value2.a, value2.b, value2.c, value2.d, value2.e, value2.f);
  }
  function interpolateTransform(parse2, pxComma, pxParen, degParen) {
    function pop(s) {
      return s.length ? s.pop() + " " : "";
    }
    function translate2(xa, ya, xb, yb, s, q) {
      if (xa !== xb || ya !== yb) {
        var i = s.push("translate(", null, pxComma, null, pxParen);
        q.push({ i: i - 4, x: interpolateNumber(xa, xb) }, { i: i - 2, x: interpolateNumber(ya, yb) });
      } else if (xb || yb) {
        s.push("translate(" + xb + pxComma + yb + pxParen);
      }
    }
    function rotate2(a2, b2, s, q) {
      if (a2 !== b2) {
        if (a2 - b2 > 180) b2 += 360;
        else if (b2 - a2 > 180) a2 += 360;
        q.push({ i: s.push(pop(s) + "rotate(", null, degParen) - 2, x: interpolateNumber(a2, b2) });
      } else if (b2) {
        s.push(pop(s) + "rotate(" + b2 + degParen);
      }
    }
    function skewX(a2, b2, s, q) {
      if (a2 !== b2) {
        q.push({ i: s.push(pop(s) + "skewX(", null, degParen) - 2, x: interpolateNumber(a2, b2) });
      } else if (b2) {
        s.push(pop(s) + "skewX(" + b2 + degParen);
      }
    }
    function scale2(xa, ya, xb, yb, s, q) {
      if (xa !== xb || ya !== yb) {
        var i = s.push(pop(s) + "scale(", null, ",", null, ")");
        q.push({ i: i - 4, x: interpolateNumber(xa, xb) }, { i: i - 2, x: interpolateNumber(ya, yb) });
      } else if (xb !== 1 || yb !== 1) {
        s.push(pop(s) + "scale(" + xb + "," + yb + ")");
      }
    }
    return function(a2, b2) {
      var s = [], q = [];
      a2 = parse2(a2), b2 = parse2(b2);
      translate2(a2.translateX, a2.translateY, b2.translateX, b2.translateY, s, q);
      rotate2(a2.rotate, b2.rotate, s, q);
      skewX(a2.skewX, b2.skewX, s, q);
      scale2(a2.scaleX, a2.scaleY, b2.scaleX, b2.scaleY, s, q);
      a2 = b2 = null;
      return function(t) {
        var i = -1, n = q.length, o;
        while (++i < n) s[(o = q[i]).i] = o.x(t);
        return s.join("");
      };
    };
  }
  var interpolateTransformCss = interpolateTransform(parseCss, "px, ", "px)", "deg)");
  var interpolateTransformSvg = interpolateTransform(parseSvg, ", ", ")", ")");
  var epsilon2$1 = 1e-12;
  function cosh(x2) {
    return ((x2 = Math.exp(x2)) + 1 / x2) / 2;
  }
  function sinh(x2) {
    return ((x2 = Math.exp(x2)) - 1 / x2) / 2;
  }
  function tanh(x2) {
    return ((x2 = Math.exp(2 * x2)) - 1) / (x2 + 1);
  }
  const zoom$1 = function zoomRho(rho, rho2, rho4) {
    function zoom2(p02, p1) {
      var ux0 = p02[0], uy0 = p02[1], w0 = p02[2], ux1 = p1[0], uy1 = p1[1], w1 = p1[2], dx = ux1 - ux0, dy = uy1 - uy0, d2 = dx * dx + dy * dy, i, S;
      if (d2 < epsilon2$1) {
        S = Math.log(w1 / w0) / rho;
        i = function(t) {
          return [
            ux0 + t * dx,
            uy0 + t * dy,
            w0 * Math.exp(rho * t * S)
          ];
        };
      } else {
        var d1 = Math.sqrt(d2), b0 = (w1 * w1 - w0 * w0 + rho4 * d2) / (2 * w0 * rho2 * d1), b1 = (w1 * w1 - w0 * w0 - rho4 * d2) / (2 * w1 * rho2 * d1), r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0), r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1);
        S = (r1 - r0) / rho;
        i = function(t) {
          var s = t * S, coshr0 = cosh(r0), u2 = w0 / (rho2 * d1) * (coshr0 * tanh(rho * s + r0) - sinh(r0));
          return [
            ux0 + u2 * dx,
            uy0 + u2 * dy,
            w0 * coshr0 / cosh(rho * s + r0)
          ];
        };
      }
      i.duration = S * 1e3 * rho / Math.SQRT2;
      return i;
    }
    zoom2.rho = function(_) {
      var _1 = Math.max(1e-3, +_), _2 = _1 * _1, _4 = _2 * _2;
      return zoomRho(_1, _2, _4);
    };
    return zoom2;
  }(Math.SQRT2, 2, 4);
  function hsl(hue2) {
    return function(start, end) {
      var h2 = hue2((start = hsl$2(start)).h, (end = hsl$2(end)).h), s = nogamma(start.s, end.s), l = nogamma(start.l, end.l), opacity2 = nogamma(start.opacity, end.opacity);
      return function(t) {
        start.h = h2(t);
        start.s = s(t);
        start.l = l(t);
        start.opacity = opacity2(t);
        return start + "";
      };
    };
  }
  const hsl$1 = hsl(hue$1);
  var hslLong = hsl(nogamma);
  function lab(start, end) {
    var l = nogamma((start = lab$1(start)).l, (end = lab$1(end)).l), a2 = nogamma(start.a, end.a), b2 = nogamma(start.b, end.b), opacity2 = nogamma(start.opacity, end.opacity);
    return function(t) {
      start.l = l(t);
      start.a = a2(t);
      start.b = b2(t);
      start.opacity = opacity2(t);
      return start + "";
    };
  }
  function hcl(hue2) {
    return function(start, end) {
      var h2 = hue2((start = hcl$2(start)).h, (end = hcl$2(end)).h), c2 = nogamma(start.c, end.c), l = nogamma(start.l, end.l), opacity2 = nogamma(start.opacity, end.opacity);
      return function(t) {
        start.h = h2(t);
        start.c = c2(t);
        start.l = l(t);
        start.opacity = opacity2(t);
        return start + "";
      };
    };
  }
  const hcl$1 = hcl(hue$1);
  var hclLong = hcl(nogamma);
  function cubehelix(hue2) {
    return function cubehelixGamma(y2) {
      y2 = +y2;
      function cubehelix2(start, end) {
        var h2 = hue2((start = cubehelix$2(start)).h, (end = cubehelix$2(end)).h), s = nogamma(start.s, end.s), l = nogamma(start.l, end.l), opacity2 = nogamma(start.opacity, end.opacity);
        return function(t) {
          start.h = h2(t);
          start.s = s(t);
          start.l = l(Math.pow(t, y2));
          start.opacity = opacity2(t);
          return start + "";
        };
      }
      cubehelix2.gamma = cubehelixGamma;
      return cubehelix2;
    }(1);
  }
  const cubehelix$1 = cubehelix(hue$1);
  var cubehelixLong = cubehelix(nogamma);
  function piecewise(interpolate2, values2) {
    if (values2 === void 0) values2 = interpolate2, interpolate2 = interpolate$1$1;
    var i = 0, n = values2.length - 1, v = values2[0], I = new Array(n < 0 ? 0 : n);
    while (i < n) I[i] = interpolate2(v, v = values2[++i]);
    return function(t) {
      var i2 = Math.max(0, Math.min(n - 1, Math.floor(t *= n)));
      return I[i2](t - i2);
    };
  }
  function quantize$2(interpolator, n) {
    var samples = new Array(n);
    for (var i = 0; i < n; ++i) samples[i] = interpolator(i / (n - 1));
    return samples;
  }
  const $$1 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
    __proto__: null,
    interpolate: interpolate$1$1,
    interpolateArray: array$3,
    interpolateBasis: basis$1,
    interpolateBasisClosed: basisClosed,
    interpolateCubehelix: cubehelix$1,
    interpolateCubehelixLong: cubehelixLong,
    interpolateDate: date$1,
    interpolateDiscrete: discrete$1,
    interpolateHcl: hcl$1,
    interpolateHclLong: hclLong,
    interpolateHsl: hsl$1,
    interpolateHslLong: hslLong,
    interpolateHue: hue,
    interpolateLab: lab,
    interpolateNumber,
    interpolateNumberArray: numberArray,
    interpolateObject: object,
    interpolateRgb: rgb,
    interpolateRgbBasis: rgbBasis,
    interpolateRgbBasisClosed: rgbBasisClosed,
    interpolateRound,
    interpolateString: string,
    interpolateTransformCss,
    interpolateTransformSvg,
    interpolateZoom: zoom$1,
    piecewise,
    quantize: quantize$2
  }, Symbol.toStringTag, { value: "Module" }));
  function constants$1(x2) {
    return function() {
      return x2;
    };
  }
  function number$5(x2) {
    return +x2;
  }
  var unit = [0, 1];
  function identity$2(x2) {
    return x2;
  }
  function normalize$2(a2, b2) {
    return (b2 -= a2 = +a2) ? function(x2) {
      return (x2 - a2) / b2;
    } : constants$1(isNaN(b2) ? NaN : 0.5);
  }
  function clamper(a2, b2) {
    var t;
    if (a2 > b2) t = a2, a2 = b2, b2 = t;
    return function(x2) {
      return Math.max(a2, Math.min(b2, x2));
    };
  }
  function bimap(domain2, range2, interpolate2) {
    var d0 = domain2[0], d1 = domain2[1], r0 = range2[0], r1 = range2[1];
    if (d1 < d0) d0 = normalize$2(d1, d0), r0 = interpolate2(r1, r0);
    else d0 = normalize$2(d0, d1), r0 = interpolate2(r0, r1);
    return function(x2) {
      return r0(d0(x2));
    };
  }
  function polymap(domain2, range2, interpolate2) {
    var j = Math.min(domain2.length, range2.length) - 1, d = new Array(j), r = new Array(j), i = -1;
    if (domain2[j] < domain2[0]) {
      domain2 = domain2.slice().reverse();
      range2 = range2.slice().reverse();
    }
    while (++i < j) {
      d[i] = normalize$2(domain2[i], domain2[i + 1]);
      r[i] = interpolate2(range2[i], range2[i + 1]);
    }
    return function(x2) {
      var i2 = bisectRight$1(domain2, x2, 1, j) - 1;
      return r[i2](d[i2](x2));
    };
  }
  function copy$2(source2, target2) {
    return target2.domain(source2.domain()).range(source2.range()).interpolate(source2.interpolate()).clamp(source2.clamp()).unknown(source2.unknown());
  }
  function transformer$3() {
    var domain2 = unit, range2 = unit, interpolate2 = interpolate$1$1, transform2, untransform, unknown, clamp2 = identity$2, piecewise2, output2, input;
    function rescale() {
      var n = Math.min(domain2.length, range2.length);
      if (clamp2 !== identity$2) clamp2 = clamper(domain2[0], domain2[n - 1]);
      piecewise2 = n > 2 ? polymap : bimap;
      output2 = input = null;
      return scale2;
    }
    function scale2(x2) {
      return x2 == null || isNaN(x2 = +x2) ? unknown : (output2 || (output2 = piecewise2(domain2.map(transform2), range2, interpolate2)))(transform2(clamp2(x2)));
    }
    scale2.invert = function(y2) {
      return clamp2(untransform((input || (input = piecewise2(range2, domain2.map(transform2), interpolateNumber)))(y2)));
    };
    scale2.domain = function(_) {
      return arguments.length ? (domain2 = Array.from(_, number$5), rescale()) : domain2.slice();
    };
    scale2.range = function(_) {
      return arguments.length ? (range2 = Array.from(_), rescale()) : range2.slice();
    };
    scale2.rangeRound = function(_) {
      return range2 = Array.from(_), interpolate2 = interpolateRound, rescale();
    };
    scale2.clamp = function(_) {
      return arguments.length ? (clamp2 = _ ? true : identity$2, rescale()) : clamp2 !== identity$2;
    };
    scale2.interpolate = function(_) {
      return arguments.length ? (interpolate2 = _, rescale()) : interpolate2;
    };
    scale2.unknown = function(_) {
      return arguments.length ? (unknown = _, scale2) : unknown;
    };
    return function(t, u2) {
      transform2 = t, untransform = u2;
      return rescale();
    };
  }
  function continuous$1() {
    return transformer$3()(identity$2, identity$2);
  }
  function tickFormat$1(start, stop2, count2, specifier) {
    var step = tickStep(start, stop2, count2), precision;
    specifier = formatSpecifier(specifier == null ? ",f" : specifier);
    switch (specifier.type) {
      case "s": {
        var value2 = Math.max(Math.abs(start), Math.abs(stop2));
        if (specifier.precision == null && !isNaN(precision = precisionPrefix(step, value2))) specifier.precision = precision;
        return formatPrefix(specifier, value2);
      }
      case "":
      case "e":
      case "g":
      case "p":
      case "r": {
        if (specifier.precision == null && !isNaN(precision = precisionRound(step, Math.max(Math.abs(start), Math.abs(stop2))))) specifier.precision = precision - (specifier.type === "e");
        break;
      }
      case "f":
      case "%": {
        if (specifier.precision == null && !isNaN(precision = precisionFixed(step))) specifier.precision = precision - (specifier.type === "%") * 2;
        break;
      }
    }
    return format$3(specifier);
  }
  function linearish(scale2) {
    var domain2 = scale2.domain;
    scale2.ticks = function(count2) {
      var d = domain2();
      return ticks(d[0], d[d.length - 1], count2 == null ? 10 : count2);
    };
    scale2.tickFormat = function(count2, specifier) {
      var d = domain2();
      return tickFormat$1(d[0], d[d.length - 1], count2 == null ? 10 : count2, specifier);
    };
    scale2.nice = function(count2) {
      if (count2 == null) count2 = 10;
      var d = domain2();
      var i0 = 0;
      var i1 = d.length - 1;
      var start = d[i0];
      var stop2 = d[i1];
      var prestep;
      var step;
      var maxIter = 10;
      if (stop2 < start) {
        step = start, start = stop2, stop2 = step;
        step = i0, i0 = i1, i1 = step;
      }
      while (maxIter-- > 0) {
        step = tickIncrement(start, stop2, count2);
        if (step === prestep) {
          d[i0] = start;
          d[i1] = stop2;
          return domain2(d);
        } else if (step > 0) {
          start = Math.floor(start / step) * step;
          stop2 = Math.ceil(stop2 / step) * step;
        } else if (step < 0) {
          start = Math.ceil(start * step) / step;
          stop2 = Math.floor(stop2 * step) / step;
        } else {
          break;
        }
        prestep = step;
      }
      return scale2;
    };
    return scale2;
  }
  function linear() {
    var scale2 = continuous$1();
    scale2.copy = function() {
      return copy$2(scale2, linear());
    };
    initRange.apply(scale2, arguments);
    return linearish(scale2);
  }
  function identity$1(domain2) {
    var unknown;
    function scale2(x2) {
      return x2 == null || isNaN(x2 = +x2) ? unknown : x2;
    }
    scale2.invert = scale2;
    scale2.domain = scale2.range = function(_) {
      return arguments.length ? (domain2 = Array.from(_, number$5), scale2) : domain2.slice();
    };
    scale2.unknown = function(_) {
      return arguments.length ? (unknown = _, scale2) : unknown;
    };
    scale2.copy = function() {
      return identity$1(domain2).unknown(unknown);
    };
    domain2 = arguments.length ? Array.from(domain2, number$5) : [0, 1];
    return linearish(scale2);
  }
  function nice$1(domain2, interval2) {
    domain2 = domain2.slice();
    var i0 = 0, i1 = domain2.length - 1, x02 = domain2[i0], x12 = domain2[i1], t;
    if (x12 < x02) {
      t = i0, i0 = i1, i1 = t;
      t = x02, x02 = x12, x12 = t;
    }
    domain2[i0] = interval2.floor(x02);
    domain2[i1] = interval2.ceil(x12);
    return domain2;
  }
  function transformLog(x2) {
    return Math.log(x2);
  }
  function transformExp(x2) {
    return Math.exp(x2);
  }
  function transformLogn(x2) {
    return -Math.log(-x2);
  }
  function transformExpn(x2) {
    return -Math.exp(-x2);
  }
  function pow10(x2) {
    return isFinite(x2) ? +("1e" + x2) : x2 < 0 ? 0 : x2;
  }
  function powp(base) {
    return base === 10 ? pow10 : base === Math.E ? Math.exp : (x2) => Math.pow(base, x2);
  }
  function logp(base) {
    return base === Math.E ? Math.log : base === 10 && Math.log10 || base === 2 && Math.log2 || (base = Math.log(base), (x2) => Math.log(x2) / base);
  }
  function reflect(f) {
    return (x2, k) => -f(-x2, k);
  }
  function loggish(transform2) {
    const scale2 = transform2(transformLog, transformExp);
    const domain2 = scale2.domain;
    let base = 10;
    let logs;
    let pows;
    function rescale() {
      logs = logp(base), pows = powp(base);
      if (domain2()[0] < 0) {
        logs = reflect(logs), pows = reflect(pows);
        transform2(transformLogn, transformExpn);
      } else {
        transform2(transformLog, transformExp);
      }
      return scale2;
    }
    scale2.base = function(_) {
      return arguments.length ? (base = +_, rescale()) : base;
    };
    scale2.domain = function(_) {
      return arguments.length ? (domain2(_), rescale()) : domain2();
    };
    scale2.ticks = (count2) => {
      const d = domain2();
      let u2 = d[0];
      let v = d[d.length - 1];
      const r = v < u2;
      if (r) [u2, v] = [v, u2];
      let i = logs(u2);
      let j = logs(v);
      let k;
      let t;
      const n = count2 == null ? 10 : +count2;
      let z = [];
      if (!(base % 1) && j - i < n) {
        i = Math.floor(i), j = Math.ceil(j);
        if (u2 > 0) for (; i <= j; ++i) {
          for (k = 1; k < base; ++k) {
            t = i < 0 ? k / pows(-i) : k * pows(i);
            if (t < u2) continue;
            if (t > v) break;
            z.push(t);
          }
        }
        else for (; i <= j; ++i) {
          for (k = base - 1; k >= 1; --k) {
            t = i > 0 ? k / pows(-i) : k * pows(i);
            if (t < u2) continue;
            if (t > v) break;
            z.push(t);
          }
        }
        if (z.length * 2 < n) z = ticks(u2, v, n);
      } else {
        z = ticks(i, j, Math.min(j - i, n)).map(pows);
      }
      return r ? z.reverse() : z;
    };
    scale2.tickFormat = (count2, specifier) => {
      if (count2 == null) count2 = 10;
      if (specifier == null) specifier = base === 10 ? "s" : ",";
      if (typeof specifier !== "function") {
        if (!(base % 1) && (specifier = formatSpecifier(specifier)).precision == null) specifier.trim = true;
        specifier = format$3(specifier);
      }
      if (count2 === Infinity) return specifier;
      const k = Math.max(1, base * count2 / scale2.ticks().length);
      return (d) => {
        let i = d / pows(Math.round(logs(d)));
        if (i * base < base - 0.5) i *= base;
        return i <= k ? specifier(d) : "";
      };
    };
    scale2.nice = () => {
      return domain2(nice$1(domain2(), {
        floor: (x2) => pows(Math.floor(logs(x2))),
        ceil: (x2) => pows(Math.ceil(logs(x2)))
      }));
    };
    return scale2;
  }
  function log$2() {
    const scale2 = loggish(transformer$3()).domain([1, 10]);
    scale2.copy = () => copy$2(scale2, log$2()).base(scale2.base());
    initRange.apply(scale2, arguments);
    return scale2;
  }
  function transformSymlog(c2) {
    return function(x2) {
      return Math.sign(x2) * Math.log1p(Math.abs(x2 / c2));
    };
  }
  function transformSymexp(c2) {
    return function(x2) {
      return Math.sign(x2) * Math.expm1(Math.abs(x2)) * c2;
    };
  }
  function symlogish(transform2) {
    var c2 = 1, scale2 = transform2(transformSymlog(c2), transformSymexp(c2));
    scale2.constant = function(_) {
      return arguments.length ? transform2(transformSymlog(c2 = +_), transformSymexp(c2)) : c2;
    };
    return linearish(scale2);
  }
  function symlog() {
    var scale2 = symlogish(transformer$3());
    scale2.copy = function() {
      return copy$2(scale2, symlog()).constant(scale2.constant());
    };
    return initRange.apply(scale2, arguments);
  }
  function transformPow(exponent2) {
    return function(x2) {
      return x2 < 0 ? -Math.pow(-x2, exponent2) : Math.pow(x2, exponent2);
    };
  }
  function transformSqrt(x2) {
    return x2 < 0 ? -Math.sqrt(-x2) : Math.sqrt(x2);
  }
  function transformSquare(x2) {
    return x2 < 0 ? -x2 * x2 : x2 * x2;
  }
  function powish(transform2) {
    var scale2 = transform2(identity$2, identity$2), exponent2 = 1;
    function rescale() {
      return exponent2 === 1 ? transform2(identity$2, identity$2) : exponent2 === 0.5 ? transform2(transformSqrt, transformSquare) : transform2(transformPow(exponent2), transformPow(1 / exponent2));
    }
    scale2.exponent = function(_) {
      return arguments.length ? (exponent2 = +_, rescale()) : exponent2;
    };
    return linearish(scale2);
  }
  function pow$2() {
    var scale2 = powish(transformer$3());
    scale2.copy = function() {
      return copy$2(scale2, pow$2()).exponent(scale2.exponent());
    };
    initRange.apply(scale2, arguments);
    return scale2;
  }
  function sqrt$2() {
    return pow$2.apply(null, arguments).exponent(0.5);
  }
  function quantile() {
    var domain2 = [], range2 = [], thresholds = [], unknown;
    function rescale() {
      var i = 0, n = Math.max(1, range2.length);
      thresholds = new Array(n - 1);
      while (++i < n) thresholds[i - 1] = quantileSorted(domain2, i / n);
      return scale2;
    }
    function scale2(x2) {
      return x2 == null || isNaN(x2 = +x2) ? unknown : range2[bisectRight$1(thresholds, x2)];
    }
    scale2.invertExtent = function(y2) {
      var i = range2.indexOf(y2);
      return i < 0 ? [NaN, NaN] : [
        i > 0 ? thresholds[i - 1] : domain2[0],
        i < thresholds.length ? thresholds[i] : domain2[domain2.length - 1]
      ];
    };
    scale2.domain = function(_) {
      if (!arguments.length) return domain2.slice();
      domain2 = [];
      for (let d of _) if (d != null && !isNaN(d = +d)) domain2.push(d);
      domain2.sort(ascending$1);
      return rescale();
    };
    scale2.range = function(_) {
      return arguments.length ? (range2 = Array.from(_), rescale()) : range2.slice();
    };
    scale2.unknown = function(_) {
      return arguments.length ? (unknown = _, scale2) : unknown;
    };
    scale2.quantiles = function() {
      return thresholds.slice();
    };
    scale2.copy = function() {
      return quantile().domain(domain2).range(range2).unknown(unknown);
    };
    return initRange.apply(scale2, arguments);
  }
  function quantize$1() {
    var x02 = 0, x12 = 1, n = 1, domain2 = [0.5], range2 = [0, 1], unknown;
    function scale2(x2) {
      return x2 != null && x2 <= x2 ? range2[bisectRight$1(domain2, x2, 0, n)] : unknown;
    }
    function rescale() {
      var i = -1;
      domain2 = new Array(n);
      while (++i < n) domain2[i] = ((i + 1) * x12 - (i - n) * x02) / (n + 1);
      return scale2;
    }
    scale2.domain = function(_) {
      return arguments.length ? ([x02, x12] = _, x02 = +x02, x12 = +x12, rescale()) : [x02, x12];
    };
    scale2.range = function(_) {
      return arguments.length ? (n = (range2 = Array.from(_)).length - 1, rescale()) : range2.slice();
    };
    scale2.invertExtent = function(y2) {
      var i = range2.indexOf(y2);
      return i < 0 ? [NaN, NaN] : i < 1 ? [x02, domain2[0]] : i >= n ? [domain2[n - 1], x12] : [domain2[i - 1], domain2[i]];
    };
    scale2.unknown = function(_) {
      return arguments.length ? (unknown = _, scale2) : scale2;
    };
    scale2.thresholds = function() {
      return domain2.slice();
    };
    scale2.copy = function() {
      return quantize$1().domain([x02, x12]).range(range2).unknown(unknown);
    };
    return initRange.apply(linearish(scale2), arguments);
  }
  function threshold() {
    var domain2 = [0.5], range2 = [0, 1], unknown, n = 1;
    function scale2(x2) {
      return x2 != null && x2 <= x2 ? range2[bisectRight$1(domain2, x2, 0, n)] : unknown;
    }
    scale2.domain = function(_) {
      return arguments.length ? (domain2 = Array.from(_), n = Math.min(domain2.length, range2.length - 1), scale2) : domain2.slice();
    };
    scale2.range = function(_) {
      return arguments.length ? (range2 = Array.from(_), n = Math.min(domain2.length, range2.length - 1), scale2) : range2.slice();
    };
    scale2.invertExtent = function(y2) {
      var i = range2.indexOf(y2);
      return [domain2[i - 1], domain2[i]];
    };
    scale2.unknown = function(_) {
      return arguments.length ? (unknown = _, scale2) : unknown;
    };
    scale2.copy = function() {
      return threshold().domain(domain2).range(range2).unknown(unknown);
    };
    return initRange.apply(scale2, arguments);
  }
  function date(t) {
    return new Date(t);
  }
  function number$4(t) {
    return t instanceof Date ? +t : +/* @__PURE__ */ new Date(+t);
  }
  function calendar(ticks2, tickInterval, year, month, week2, day, hour, minute, second2, format2) {
    var scale2 = continuous$1(), invert2 = scale2.invert, domain2 = scale2.domain;
    var formatMillisecond = format2(".%L"), formatSecond = format2(":%S"), formatMinute = format2("%I:%M"), formatHour = format2("%I %p"), formatDay = format2("%a %d"), formatWeek = format2("%b %d"), formatMonth = format2("%B"), formatYear2 = format2("%Y");
    function tickFormat2(date2) {
      return (second2(date2) < date2 ? formatMillisecond : minute(date2) < date2 ? formatSecond : hour(date2) < date2 ? formatMinute : day(date2) < date2 ? formatHour : month(date2) < date2 ? week2(date2) < date2 ? formatDay : formatWeek : year(date2) < date2 ? formatMonth : formatYear2)(date2);
    }
    scale2.invert = function(y2) {
      return new Date(invert2(y2));
    };
    scale2.domain = function(_) {
      return arguments.length ? domain2(Array.from(_, number$4)) : domain2().map(date);
    };
    scale2.ticks = function(interval2) {
      var d = domain2();
      return ticks2(d[0], d[d.length - 1], interval2 == null ? 10 : interval2);
    };
    scale2.tickFormat = function(count2, specifier) {
      return specifier == null ? tickFormat2 : format2(specifier);
    };
    scale2.nice = function(interval2) {
      var d = domain2();
      if (!interval2 || typeof interval2.range !== "function") interval2 = tickInterval(d[0], d[d.length - 1], interval2 == null ? 10 : interval2);
      return interval2 ? domain2(nice$1(d, interval2)) : scale2;
    };
    scale2.copy = function() {
      return copy$2(scale2, calendar(ticks2, tickInterval, year, month, week2, day, hour, minute, second2, format2));
    };
    return scale2;
  }
  function time$1() {
    return initRange.apply(calendar(timeTicks, timeTickInterval, timeYear, timeMonth, timeSunday, timeDay, timeHour, timeMinute, second, timeFormat$2).domain([new Date(2e3, 0, 1), new Date(2e3, 0, 2)]), arguments);
  }
  function utcTime() {
    return initRange.apply(calendar(utcTicks, utcTickInterval, utcYear, utcMonth, utcSunday, utcDay, utcHour, utcMinute, second, utcFormat$1).domain([Date.UTC(2e3, 0, 1), Date.UTC(2e3, 0, 2)]), arguments);
  }
  function transformer$2() {
    var x02 = 0, x12 = 1, t02, t12, k10, transform2, interpolator = identity$2, clamp2 = false, unknown;
    function scale2(x2) {
      return x2 == null || isNaN(x2 = +x2) ? unknown : interpolator(k10 === 0 ? 0.5 : (x2 = (transform2(x2) - t02) * k10, clamp2 ? Math.max(0, Math.min(1, x2)) : x2));
    }
    scale2.domain = function(_) {
      return arguments.length ? ([x02, x12] = _, t02 = transform2(x02 = +x02), t12 = transform2(x12 = +x12), k10 = t02 === t12 ? 0 : 1 / (t12 - t02), scale2) : [x02, x12];
    };
    scale2.clamp = function(_) {
      return arguments.length ? (clamp2 = !!_, scale2) : clamp2;
    };
    scale2.interpolator = function(_) {
      return arguments.length ? (interpolator = _, scale2) : interpolator;
    };
    function range2(interpolate2) {
      return function(_) {
        var r0, r1;
        return arguments.length ? ([r0, r1] = _, interpolator = interpolate2(r0, r1), scale2) : [interpolator(0), interpolator(1)];
      };
    }
    scale2.range = range2(interpolate$1$1);
    scale2.rangeRound = range2(interpolateRound);
    scale2.unknown = function(_) {
      return arguments.length ? (unknown = _, scale2) : unknown;
    };
    return function(t) {
      transform2 = t, t02 = t(x02), t12 = t(x12), k10 = t02 === t12 ? 0 : 1 / (t12 - t02);
      return scale2;
    };
  }
  function copy$1(source2, target2) {
    return target2.domain(source2.domain()).interpolator(source2.interpolator()).clamp(source2.clamp()).unknown(source2.unknown());
  }
  function sequential() {
    var scale2 = linearish(transformer$2()(identity$2));
    scale2.copy = function() {
      return copy$1(scale2, sequential());
    };
    return initInterpolator.apply(scale2, arguments);
  }
  function sequentialLog() {
    var scale2 = loggish(transformer$2()).domain([1, 10]);
    scale2.copy = function() {
      return copy$1(scale2, sequentialLog()).base(scale2.base());
    };
    return initInterpolator.apply(scale2, arguments);
  }
  function sequentialSymlog() {
    var scale2 = symlogish(transformer$2());
    scale2.copy = function() {
      return copy$1(scale2, sequentialSymlog()).constant(scale2.constant());
    };
    return initInterpolator.apply(scale2, arguments);
  }
  function sequentialPow() {
    var scale2 = powish(transformer$2());
    scale2.copy = function() {
      return copy$1(scale2, sequentialPow()).exponent(scale2.exponent());
    };
    return initInterpolator.apply(scale2, arguments);
  }
  function sequentialSqrt() {
    return sequentialPow.apply(null, arguments).exponent(0.5);
  }
  function transformer$1() {
    var x02 = 0, x12 = 0.5, x2 = 1, s = 1, t02, t12, t22, k10, k21, interpolator = identity$2, transform2, clamp2 = false, unknown;
    function scale2(x3) {
      return isNaN(x3 = +x3) ? unknown : (x3 = 0.5 + ((x3 = +transform2(x3)) - t12) * (s * x3 < s * t12 ? k10 : k21), interpolator(clamp2 ? Math.max(0, Math.min(1, x3)) : x3));
    }
    scale2.domain = function(_) {
      return arguments.length ? ([x02, x12, x2] = _, t02 = transform2(x02 = +x02), t12 = transform2(x12 = +x12), t22 = transform2(x2 = +x2), k10 = t02 === t12 ? 0 : 0.5 / (t12 - t02), k21 = t12 === t22 ? 0 : 0.5 / (t22 - t12), s = t12 < t02 ? -1 : 1, scale2) : [x02, x12, x2];
    };
    scale2.clamp = function(_) {
      return arguments.length ? (clamp2 = !!_, scale2) : clamp2;
    };
    scale2.interpolator = function(_) {
      return arguments.length ? (interpolator = _, scale2) : interpolator;
    };
    function range2(interpolate2) {
      return function(_) {
        var r0, r1, r2;
        return arguments.length ? ([r0, r1, r2] = _, interpolator = piecewise(interpolate2, [r0, r1, r2]), scale2) : [interpolator(0), interpolator(0.5), interpolator(1)];
      };
    }
    scale2.range = range2(interpolate$1$1);
    scale2.rangeRound = range2(interpolateRound);
    scale2.unknown = function(_) {
      return arguments.length ? (unknown = _, scale2) : unknown;
    };
    return function(t) {
      transform2 = t, t02 = t(x02), t12 = t(x12), t22 = t(x2), k10 = t02 === t12 ? 0 : 0.5 / (t12 - t02), k21 = t12 === t22 ? 0 : 0.5 / (t22 - t12), s = t12 < t02 ? -1 : 1;
      return scale2;
    };
  }
  function diverging() {
    var scale2 = linearish(transformer$1()(identity$2));
    scale2.copy = function() {
      return copy$1(scale2, diverging());
    };
    return initInterpolator.apply(scale2, arguments);
  }
  function divergingLog() {
    var scale2 = loggish(transformer$1()).domain([0.1, 1, 10]);
    scale2.copy = function() {
      return copy$1(scale2, divergingLog()).base(scale2.base());
    };
    return initInterpolator.apply(scale2, arguments);
  }
  function divergingSymlog() {
    var scale2 = symlogish(transformer$1());
    scale2.copy = function() {
      return copy$1(scale2, divergingSymlog()).constant(scale2.constant());
    };
    return initInterpolator.apply(scale2, arguments);
  }
  function divergingPow() {
    var scale2 = powish(transformer$1());
    scale2.copy = function() {
      return copy$1(scale2, divergingPow()).exponent(scale2.exponent());
    };
    return initInterpolator.apply(scale2, arguments);
  }
  function divergingSqrt() {
    return divergingPow.apply(null, arguments).exponent(0.5);
  }
  function colors$1(specifier) {
    var n = specifier.length / 6 | 0, colors2 = new Array(n), i = 0;
    while (i < n) colors2[i] = "#" + specifier.slice(i * 6, ++i * 6);
    return colors2;
  }
  const schemeCategory10 = colors$1("1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf");
  const schemeAccent = colors$1("7fc97fbeaed4fdc086ffff99386cb0f0027fbf5b17666666");
  const schemeDark2 = colors$1("1b9e77d95f027570b3e7298a66a61ee6ab02a6761d666666");
  const schemeObservable10 = colors$1("4269d0efb118ff725c6cc5b03ca951ff8ab7a463f297bbf59c6b4e9498a0");
  const schemePaired = colors$1("a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928");
  const schemePastel1 = colors$1("fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2");
  const schemePastel2 = colors$1("b3e2cdfdcdaccbd5e8f4cae4e6f5c9fff2aef1e2cccccccc");
  const schemeSet1 = colors$1("e41a1c377eb84daf4a984ea3ff7f00ffff33a65628f781bf999999");
  const schemeSet2 = colors$1("66c2a5fc8d628da0cbe78ac3a6d854ffd92fe5c494b3b3b3");
  const schemeSet3 = colors$1("8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f");
  function bandSpace(count2, paddingInner2, paddingOuter2) {
    const space2 = count2 - paddingInner2 + paddingOuter2 * 2;
    return count2 ? space2 > 0 ? space2 : 1 : 0;
  }
  const Identity = "identity";
  const Linear = "linear";
  const Log = "log";
  const Pow = "pow";
  const Sqrt = "sqrt";
  const Symlog = "symlog";
  const Time = "time";
  const UTC = "utc";
  const Sequential = "sequential";
  const Diverging = "diverging";
  const Quantile = "quantile";
  const Quantize = "quantize";
  const Threshold = "threshold";
  const Ordinal = "ordinal";
  const Point = "point";
  const Band = "band";
  const BinOrdinal = "bin-ordinal";
  const Continuous = "continuous";
  const Discrete$1 = "discrete";
  const Discretizing = "discretizing";
  const Interpolating = "interpolating";
  const Temporal = "temporal";
  function invertRange(scale2) {
    return function(_) {
      let lo = _[0], hi = _[1], t;
      if (hi < lo) {
        t = lo;
        lo = hi;
        hi = t;
      }
      return [scale2.invert(lo), scale2.invert(hi)];
    };
  }
  function invertRangeExtent(scale2) {
    return function(_) {
      const range2 = scale2.range();
      let lo = _[0], hi = _[1], min2 = -1, max2, t, i, n;
      if (hi < lo) {
        t = lo;
        lo = hi;
        hi = t;
      }
      for (i = 0, n = range2.length; i < n; ++i) {
        if (range2[i] >= lo && range2[i] <= hi) {
          if (min2 < 0) min2 = i;
          max2 = i;
        }
      }
      if (min2 < 0) return void 0;
      lo = scale2.invertExtent(range2[min2]);
      hi = scale2.invertExtent(range2[max2]);
      return [lo[0] === void 0 ? lo[1] : lo[0], hi[1] === void 0 ? hi[0] : hi[1]];
    };
  }
  function band() {
    const scale2 = ordinal().unknown(void 0), domain2 = scale2.domain, ordinalRange = scale2.range;
    let range$12 = [0, 1], step, bandwidth2, round = false, paddingInner2 = 0, paddingOuter2 = 0, align2 = 0.5;
    delete scale2.unknown;
    function rescale() {
      const n = domain2().length, reverse2 = range$12[1] < range$12[0], stop2 = range$12[1 - reverse2], space2 = bandSpace(n, paddingInner2, paddingOuter2);
      let start = range$12[reverse2 - 0];
      step = (stop2 - start) / (space2 || 1);
      if (round) {
        step = Math.floor(step);
      }
      start += (stop2 - start - step * (n - paddingInner2)) * align2;
      bandwidth2 = step * (1 - paddingInner2);
      if (round) {
        start = Math.round(start);
        bandwidth2 = Math.round(bandwidth2);
      }
      const values2 = range$5(n).map((i) => start + step * i);
      return ordinalRange(reverse2 ? values2.reverse() : values2);
    }
    scale2.domain = function(_) {
      if (arguments.length) {
        domain2(_);
        return rescale();
      } else {
        return domain2();
      }
    };
    scale2.range = function(_) {
      if (arguments.length) {
        range$12 = [+_[0], +_[1]];
        return rescale();
      } else {
        return range$12.slice();
      }
    };
    scale2.rangeRound = function(_) {
      range$12 = [+_[0], +_[1]];
      round = true;
      return rescale();
    };
    scale2.bandwidth = function() {
      return bandwidth2;
    };
    scale2.step = function() {
      return step;
    };
    scale2.round = function(_) {
      if (arguments.length) {
        round = !!_;
        return rescale();
      } else {
        return round;
      }
    };
    scale2.padding = function(_) {
      if (arguments.length) {
        paddingOuter2 = Math.max(0, Math.min(1, _));
        paddingInner2 = paddingOuter2;
        return rescale();
      } else {
        return paddingInner2;
      }
    };
    scale2.paddingInner = function(_) {
      if (arguments.length) {
        paddingInner2 = Math.max(0, Math.min(1, _));
        return rescale();
      } else {
        return paddingInner2;
      }
    };
    scale2.paddingOuter = function(_) {
      if (arguments.length) {
        paddingOuter2 = Math.max(0, Math.min(1, _));
        return rescale();
      } else {
        return paddingOuter2;
      }
    };
    scale2.align = function(_) {
      if (arguments.length) {
        align2 = Math.max(0, Math.min(1, _));
        return rescale();
      } else {
        return align2;
      }
    };
    scale2.invertRange = function(_) {
      if (_[0] == null || _[1] == null) return;
      const reverse2 = range$12[1] < range$12[0], values2 = reverse2 ? ordinalRange().reverse() : ordinalRange(), n = values2.length - 1;
      let lo = +_[0], hi = +_[1], a2, b2, t;
      if (lo !== lo || hi !== hi) return;
      if (hi < lo) {
        t = lo;
        lo = hi;
        hi = t;
      }
      if (hi < values2[0] || lo > range$12[1 - reverse2]) return;
      a2 = Math.max(0, bisectRight$1(values2, lo) - 1);
      b2 = lo === hi ? a2 : bisectRight$1(values2, hi) - 1;
      if (lo - values2[a2] > bandwidth2 + 1e-10) ++a2;
      if (reverse2) {
        t = a2;
        a2 = n - b2;
        b2 = n - t;
      }
      return a2 > b2 ? void 0 : domain2().slice(a2, b2 + 1);
    };
    scale2.invert = function(_) {
      const value2 = scale2.invertRange([_, _]);
      return value2 ? value2[0] : value2;
    };
    scale2.copy = function() {
      return band().domain(domain2()).range(range$12).round(round).paddingInner(paddingInner2).paddingOuter(paddingOuter2).align(align2);
    };
    return rescale();
  }
  function pointish(scale2) {
    const copy2 = scale2.copy;
    scale2.padding = scale2.paddingOuter;
    delete scale2.paddingInner;
    scale2.copy = function() {
      return pointish(copy2());
    };
    return scale2;
  }
  function point$3() {
    return pointish(band().paddingInner(1));
  }
  var map = Array.prototype.map;
  function numbers(_) {
    return map.call(_, toNumber);
  }
  const slice$2 = Array.prototype.slice;
  function scaleBinOrdinal() {
    let domain2 = [], range2 = [];
    function scale2(x2) {
      return x2 == null || x2 !== x2 ? void 0 : range2[(bisectRight$1(domain2, x2) - 1) % range2.length];
    }
    scale2.domain = function(_) {
      if (arguments.length) {
        domain2 = numbers(_);
        return scale2;
      } else {
        return domain2.slice();
      }
    };
    scale2.range = function(_) {
      if (arguments.length) {
        range2 = slice$2.call(_);
        return scale2;
      } else {
        return range2.slice();
      }
    };
    scale2.tickFormat = function(count2, specifier) {
      return tickFormat$1(domain2[0], peek$2(domain2), count2 == null ? 10 : count2, specifier);
    };
    scale2.copy = function() {
      return scaleBinOrdinal().domain(scale2.domain()).range(scale2.range());
    };
    return scale2;
  }
  const scales = /* @__PURE__ */ new Map();
  const VEGA_SCALE = Symbol("vega_scale");
  function registerScale(scale2) {
    scale2[VEGA_SCALE] = true;
    return scale2;
  }
  function isRegisteredScale(scale2) {
    return scale2 && scale2[VEGA_SCALE] === true;
  }
  function create$2(type2, constructor, metadata2) {
    const ctr = function scale2() {
      const s = constructor();
      if (!s.invertRange) {
        s.invertRange = s.invert ? invertRange(s) : s.invertExtent ? invertRangeExtent(s) : void 0;
      }
      s.type = type2;
      return registerScale(s);
    };
    ctr.metadata = toSet(array$5(metadata2));
    return ctr;
  }
  function scale$4(type2, scale2, metadata2) {
    if (arguments.length > 1) {
      scales.set(type2, create$2(type2, scale2, metadata2));
      return this;
    } else {
      return isValidScaleType(type2) ? scales.get(type2) : void 0;
    }
  }
  scale$4(Identity, identity$1);
  scale$4(Linear, linear, Continuous);
  scale$4(Log, log$2, [Continuous, Log]);
  scale$4(Pow, pow$2, Continuous);
  scale$4(Sqrt, sqrt$2, Continuous);
  scale$4(Symlog, symlog, Continuous);
  scale$4(Time, time$1, [Continuous, Temporal]);
  scale$4(UTC, utcTime, [Continuous, Temporal]);
  scale$4(Sequential, sequential, [Continuous, Interpolating]);
  scale$4(`${Sequential}-${Linear}`, sequential, [Continuous, Interpolating]);
  scale$4(`${Sequential}-${Log}`, sequentialLog, [Continuous, Interpolating, Log]);
  scale$4(`${Sequential}-${Pow}`, sequentialPow, [Continuous, Interpolating]);
  scale$4(`${Sequential}-${Sqrt}`, sequentialSqrt, [Continuous, Interpolating]);
  scale$4(`${Sequential}-${Symlog}`, sequentialSymlog, [Continuous, Interpolating]);
  scale$4(`${Diverging}-${Linear}`, diverging, [Continuous, Interpolating]);
  scale$4(`${Diverging}-${Log}`, divergingLog, [Continuous, Interpolating, Log]);
  scale$4(`${Diverging}-${Pow}`, divergingPow, [Continuous, Interpolating]);
  scale$4(`${Diverging}-${Sqrt}`, divergingSqrt, [Continuous, Interpolating]);
  scale$4(`${Diverging}-${Symlog}`, divergingSymlog, [Continuous, Interpolating]);
  scale$4(Quantile, quantile, [Discretizing, Quantile]);
  scale$4(Quantize, quantize$1, Discretizing);
  scale$4(Threshold, threshold, Discretizing);
  scale$4(BinOrdinal, scaleBinOrdinal, [Discrete$1, Discretizing]);
  scale$4(Ordinal, ordinal, Discrete$1);
  scale$4(Band, band, Discrete$1);
  scale$4(Point, point$3, Discrete$1);
  function isValidScaleType(type2) {
    return scales.has(type2);
  }
  function hasType(key2, type2) {
    const s = scales.get(key2);
    return s && s.metadata[type2];
  }
  function isContinuous$1(key2) {
    return hasType(key2, Continuous);
  }
  function isDiscrete$2(key2) {
    return hasType(key2, Discrete$1);
  }
  function isDiscretizing$1(key2) {
    return hasType(key2, Discretizing);
  }
  function isLogarithmic(key2) {
    return hasType(key2, Log);
  }
  function isTemporal(key2) {
    return hasType(key2, Temporal);
  }
  function isInterpolating(key2) {
    return hasType(key2, Interpolating);
  }
  function isQuantile$1(key2) {
    return hasType(key2, Quantile);
  }
  const scaleProps = ["clamp", "base", "constant", "exponent"];
  function interpolateRange$1(interpolator, range2) {
    const start = range2[0], span2 = peek$2(range2) - start;
    return function(i) {
      return interpolator(start + i * span2);
    };
  }
  function interpolateColors(colors2, type2, gamma2) {
    return piecewise(interpolate$1(type2 || "rgb", gamma2), colors2);
  }
  function quantizeInterpolator(interpolator, count2) {
    const samples = new Array(count2), n = count2 + 1;
    for (let i = 0; i < count2; ) samples[i] = interpolator(++i / n);
    return samples;
  }
  function scaleFraction(scale$12, min2, max2) {
    const delta = max2 - min2;
    let i, t, s;
    if (!delta || !Number.isFinite(delta)) {
      return constant$5(0.5);
    } else {
      i = (t = scale$12.type).indexOf("-");
      t = i < 0 ? t : t.slice(i + 1);
      s = scale$4(t)().domain([min2, max2]).range([0, 1]);
      scaleProps.forEach((m2) => scale$12[m2] ? s[m2](scale$12[m2]()) : 0);
      return s;
    }
  }
  function interpolate$1(type2, gamma2) {
    const interp = $$1[method(type2)];
    return gamma2 != null && interp && interp.gamma ? interp.gamma(gamma2) : interp;
  }
  function method(type2) {
    return "interpolate" + type2.toLowerCase().split("-").map((s) => s[0].toUpperCase() + s.slice(1)).join("");
  }
  const continuous = {
    blues: "cfe1f2bed8eca8cee58fc1de74b2d75ba3cf4592c63181bd206fb2125ca40a4a90",
    greens: "d3eecdc0e6baabdda594d3917bc77d60ba6c46ab5e329a512089430e7735036429",
    greys: "e2e2e2d4d4d4c4c4c4b1b1b19d9d9d8888887575756262624d4d4d3535351e1e1e",
    oranges: "fdd8b3fdc998fdb87bfda55efc9244f87f2cf06b18e4580bd14904b93d029f3303",
    purples: "e2e1efd4d4e8c4c5e0b4b3d6a3a0cc928ec3827cb97566ae684ea25c3696501f8c",
    reds: "fdc9b4fcb49afc9e80fc8767fa7051f6573fec3f2fdc2a25c81b1db21218970b13",
    blueGreen: "d5efedc1e8e0a7ddd18bd2be70c6a958ba9144ad77319c5d2089460e7736036429",
    bluePurple: "ccddecbad0e4a8c2dd9ab0d4919cc98d85be8b6db28a55a6873c99822287730f71",
    greenBlue: "d3eecec5e8c3b1e1bb9bd8bb82cec269c2ca51b2cd3c9fc7288abd1675b10b60a1",
    orangeRed: "fddcaffdcf9bfdc18afdad77fb9562f67d53ee6545e24932d32d1ebf130da70403",
    purpleBlue: "dbdaebc8cee4b1c3de97b7d87bacd15b9fc93a90c01e7fb70b70ab056199045281",
    purpleBlueGreen: "dbd8eac8cee4b0c3de93b7d872acd1549fc83892bb1c88a3097f8702736b016353",
    purpleRed: "dcc9e2d3b3d7ce9eccd186c0da6bb2e14da0e23189d91e6fc61159ab07498f023a",
    redPurple: "fccfccfcbec0faa9b8f98faff571a5ec539ddb3695c41b8aa908808d0179700174",
    yellowGreen: "e4f4acd1eca0b9e2949ed68880c97c62bb6e47aa5e3297502083440e723b036034",
    yellowOrangeBrown: "feeaa1fedd84fecc63feb746fca031f68921eb7215db5e0bc54c05ab3d038f3204",
    yellowOrangeRed: "fee087fed16ffebd59fea849fd903efc7335f9522bee3423de1b20ca0b22af0225",
    blueOrange: "134b852f78b35da2cb9dcae1d2e5eff2f0ebfce0bafbbf74e8932fc5690d994a07",
    brownBlueGreen: "704108a0651ac79548e3c78af3e6c6eef1eac9e9e48ed1c74da79e187a72025147",
    purpleGreen: "5b1667834792a67fb6c9aed3e6d6e8eff0efd9efd5aedda971bb75368e490e5e29",
    purpleOrange: "4114696647968f83b7b9b4d6dadbebf3eeeafce0bafbbf74e8932fc5690d994a07",
    redBlue: "8c0d25bf363adf745ef4ae91fbdbc9f2efeed2e5ef9dcae15da2cb2f78b3134b85",
    redGrey: "8c0d25bf363adf745ef4ae91fcdccbfaf4f1e2e2e2c0c0c0969696646464343434",
    yellowGreenBlue: "eff9bddbf1b4bde5b594d5b969c5be45b4c22c9ec02182b82163aa23479c1c3185",
    redYellowBlue: "a50026d4322cf16e43fcac64fedd90faf8c1dcf1ecabd6e875abd04a74b4313695",
    redYellowGreen: "a50026d4322cf16e43fcac63fedd8df9f7aed7ee8ea4d86e64bc6122964f006837",
    pinkYellowGreen: "8e0152c0267edd72adf0b3d6faddedf5f3efe1f2cab6de8780bb474f9125276419",
    spectral: "9e0142d13c4bf0704afcac63fedd8dfbf8b0e0f3a1a9dda269bda94288b55e4fa2",
    viridis: "440154470e61481a6c482575472f7d443a834144873d4e8a39568c35608d31688e2d708e2a788e27818e23888e21918d1f988b1fa08822a8842ab07f35b77943bf7154c56866cc5d7ad1518fd744a5db36bcdf27d2e21be9e51afde725",
    magma: "0000040404130b0924150e3720114b2c11603b0f704a107957157e651a80721f817f24828c29819a2e80a8327db6377ac43c75d1426fde4968e95462f1605df76f5cfa7f5efc8f65fe9f6dfeaf78febf84fece91fddea0fcedaffcfdbf",
    inferno: "0000040403130c0826170c3b240c4f330a5f420a68500d6c5d126e6b176e781c6d86216b932667a12b62ae305cbb3755c73e4cd24644dd513ae65c30ed6925f3771af8850ffb9506fca50afcb519fac62df6d645f2e661f3f484fcffa4",
    plasma: "0d088723069033059742039d5002a25d01a66a00a87801a88405a7900da49c179ea72198b12a90ba3488c33d80cb4779d35171da5a69e16462e76e5bed7953f2834cf68f44fa9a3dfca636fdb32ffec029fcce25f9dc24f5ea27f0f921",
    cividis: "00205100235800265d002961012b65042e670831690d346b11366c16396d1c3c6e213f6e26426e2c456e31476e374a6e3c4d6e42506e47536d4c566d51586e555b6e5a5e6e5e616e62646f66676f6a6a706e6d717270717573727976737c79747f7c75827f758682768985778c8877908b78938e789691789a94789e9778a19b78a59e77a9a177aea575b2a874b6ab73bbaf71c0b26fc5b66dc9b96acebd68d3c065d8c462ddc85fe2cb5ce7cf58ebd355f0d652f3da4ff7de4cfae249fce647",
    rainbow: "6e40aa883eb1a43db3bf3cafd83fa4ee4395fe4b83ff576eff6659ff7847ff8c38f3a130e2b72fcfcc36bee044aff05b8ff4576ff65b52f6673af27828ea8d1ddfa319d0b81cbecb23abd82f96e03d82e14c6edb5a5dd0664dbf6e40aa",
    sinebow: "ff4040fc582af47218e78d0bd5a703bfbf00a7d5038de70b72f41858fc2a40ff402afc5818f4720be78d03d5a700bfbf03a7d50b8de71872f42a58fc4040ff582afc7218f48d0be7a703d5bf00bfd503a7e70b8df41872fc2a58ff4040",
    turbo: "23171b32204a3e2a71453493493eae4b49c54a53d7485ee44569ee4074f53c7ff8378af93295f72e9ff42ba9ef28b3e926bce125c5d925cdcf27d5c629dcbc2de3b232e9a738ee9d3ff39347f68950f9805afc7765fd6e70fe667cfd5e88fc5795fb51a1f84badf545b9f140c5ec3cd0e637dae034e4d931ecd12ef4c92bfac029ffb626ffad24ffa223ff9821ff8d1fff821dff771cfd6c1af76118f05616e84b14df4111d5380fcb2f0dc0260ab61f07ac1805a313029b0f00950c00910b00",
    browns: "eedbbdecca96e9b97ae4a865dc9856d18954c7784cc0673fb85536ad44339f3632",
    tealBlues: "bce4d89dd3d181c3cb65b3c245a2b9368fae347da0306a932c5985",
    teals: "bbdfdfa2d4d58ac9c975bcbb61b0af4da5a43799982b8b8c1e7f7f127273006667",
    warmGreys: "dcd4d0cec5c1c0b8b4b3aaa7a59c9998908c8b827f7e7673726866665c5a59504e",
    goldGreen: "f4d166d5ca60b6c35c98bb597cb25760a6564b9c533f8f4f33834a257740146c36",
    goldOrange: "f4d166f8be5cf8aa4cf5983bf3852aef701be2621fd65322c54923b142239e3a26",
    goldRed: "f4d166f6be59f9aa51fc964ef6834bee734ae56249db5247cf4244c43141b71d3e",
    lightGreyRed: "efe9e6e1dad7d5cbc8c8bdb9bbaea9cd967ddc7b43e15f19df4011dc000b",
    lightGreyTeal: "e4eaead6dcddc8ced2b7c2c7a6b4bc64b0bf22a6c32295c11f85be1876bc",
    lightMulti: "e0f1f2c4e9d0b0de9fd0e181f6e072f6c053f3993ef77440ef4a3c",
    lightOrange: "f2e7daf7d5baf9c499fab184fa9c73f68967ef7860e8645bde515bd43d5b",
    lightTealBlue: "e3e9e0c0dccf9aceca7abfc859afc0389fb9328dad2f7ca0276b95255988",
    darkBlue: "3232322d46681a5c930074af008cbf05a7ce25c0dd38daed50f3faffffff",
    darkGold: "3c3c3c584b37725e348c7631ae8b2bcfa424ecc31ef9de30fff184ffffff",
    darkGreen: "3a3a3a215748006f4d048942489e4276b340a6c63dd2d836ffeb2cffffaa",
    darkMulti: "3737371f5287197d8c29a86995ce3fffe800ffffff",
    darkRed: "3434347036339e3c38cc4037e75d1eec8620eeab29f0ce32ffeb2c"
  };
  const discrete = {
    accent: schemeAccent,
    category10: schemeCategory10,
    category20: "1f77b4aec7e8ff7f0effbb782ca02c98df8ad62728ff98969467bdc5b0d58c564bc49c94e377c2f7b6d27f7f7fc7c7c7bcbd22dbdb8d17becf9edae5",
    category20b: "393b795254a36b6ecf9c9ede6379398ca252b5cf6bcedb9c8c6d31bd9e39e7ba52e7cb94843c39ad494ad6616be7969c7b4173a55194ce6dbdde9ed6",
    category20c: "3182bd6baed69ecae1c6dbefe6550dfd8d3cfdae6bfdd0a231a35474c476a1d99bc7e9c0756bb19e9ac8bcbddcdadaeb636363969696bdbdbdd9d9d9",
    dark2: schemeDark2,
    observable10: schemeObservable10,
    paired: schemePaired,
    pastel1: schemePastel1,
    pastel2: schemePastel2,
    set1: schemeSet1,
    set2: schemeSet2,
    set3: schemeSet3,
    tableau10: "4c78a8f58518e4575672b7b254a24beeca3bb279a2ff9da69d755dbab0ac",
    tableau20: "4c78a89ecae9f58518ffbf7954a24b88d27ab79a20f2cf5b43989483bcb6e45756ff9d9879706ebab0acd67195fcbfd2b279a2d6a5c99e765fd8b5a5"
  };
  function colors(palette) {
    if (isArray(palette)) return palette;
    const n = palette.length / 6 | 0, c2 = new Array(n);
    for (let i = 0; i < n; ) {
      c2[i] = "#" + palette.slice(i * 6, ++i * 6);
    }
    return c2;
  }
  function apply$1(_, f) {
    for (const k in _) scheme$1(k, f(_[k]));
  }
  const schemes = {};
  apply$1(discrete, colors);
  apply$1(continuous, (_) => interpolateColors(colors(_)));
  function scheme$1(name, scheme2) {
    name = name && name.toLowerCase();
    if (arguments.length > 1) {
      schemes[name] = scheme2;
      return this;
    } else {
      return schemes[name];
    }
  }
  const SymbolLegend = "symbol";
  const DiscreteLegend = "discrete";
  const GradientLegend = "gradient";
  const defaultFormatter = (value2) => isArray(value2) ? value2.map((v) => String(v)) : String(value2);
  const ascending = (a2, b2) => a2[1] - b2[1];
  const descending = (a2, b2) => b2[1] - a2[1];
  function tickCount(scale2, count2, minStep) {
    let step;
    if (isNumber$1(count2)) {
      if (scale2.bins) {
        count2 = Math.max(count2, scale2.bins.length);
      }
      if (minStep != null) {
        count2 = Math.min(count2, Math.floor(span(scale2.domain()) / minStep || 1) + 1);
      }
    }
    if (isObject(count2)) {
      step = count2.step;
      count2 = count2.interval;
    }
    if (isString(count2)) {
      count2 = scale2.type === Time ? timeInterval(count2) : scale2.type == UTC ? utcInterval(count2) : error$1("Only time and utc scales accept interval strings.");
      if (step) count2 = count2.every(step);
    }
    return count2;
  }
  function validTicks(scale2, ticks2, count2) {
    let range2 = scale2.range(), lo = range2[0], hi = peek$2(range2), cmp = ascending;
    if (lo > hi) {
      range2 = hi;
      hi = lo;
      lo = range2;
      cmp = descending;
    }
    lo = Math.floor(lo);
    hi = Math.ceil(hi);
    ticks2 = ticks2.map((v) => [v, scale2(v)]).filter((_) => lo <= _[1] && _[1] <= hi).sort(cmp).map((_) => _[0]);
    if (count2 > 0 && ticks2.length > 1) {
      const endpoints = [ticks2[0], peek$2(ticks2)];
      while (ticks2.length > count2 && ticks2.length >= 3) {
        ticks2 = ticks2.filter((_, i) => !(i % 2));
      }
      if (ticks2.length < 3) {
        ticks2 = endpoints;
      }
    }
    return ticks2;
  }
  function tickValues(scale2, count2) {
    return scale2.bins ? validTicks(scale2, scale2.bins, count2) : scale2.ticks ? scale2.ticks(count2) : scale2.domain();
  }
  function tickFormat(locale2, scale2, count2, specifier, formatType, noSkip) {
    const type2 = scale2.type;
    let format2 = defaultFormatter;
    if (type2 === Time || formatType === Time) {
      format2 = locale2.timeFormat(specifier);
    } else if (type2 === UTC || formatType === UTC) {
      format2 = locale2.utcFormat(specifier);
    } else if (isLogarithmic(type2)) {
      const varfmt = locale2.formatFloat(specifier);
      if (noSkip || scale2.bins) {
        format2 = varfmt;
      } else {
        const test2 = tickLog(scale2, count2, false);
        format2 = (_) => test2(_) ? varfmt(_) : "";
      }
    } else if (scale2.tickFormat) {
      const d = scale2.domain();
      format2 = locale2.formatSpan(d[0], d[d.length - 1], count2, specifier);
    } else if (specifier) {
      format2 = locale2.format(specifier);
    }
    return format2;
  }
  function tickLog(scale2, count2, values2) {
    const ticks2 = tickValues(scale2, count2), base = scale2.base(), logb = Math.log(base), k = Math.max(1, base * count2 / ticks2.length);
    const test2 = (d) => {
      let i = d / Math.pow(base, Math.round(Math.log(d) / logb));
      if (i * base < base - 0.5) i *= base;
      return i <= k;
    };
    return values2 ? ticks2.filter(test2) : test2;
  }
  const symbols$2 = {
    [Quantile]: "quantiles",
    [Quantize]: "thresholds",
    [Threshold]: "domain"
  };
  const formats = {
    [Quantile]: "quantiles",
    [Quantize]: "domain"
  };
  function labelValues(scale2, count2) {
    return scale2.bins ? binValues(scale2.bins) : scale2.type === Log ? tickLog(scale2, count2, true) : symbols$2[scale2.type] ? thresholdValues(scale2[symbols$2[scale2.type]]()) : tickValues(scale2, count2);
  }
  function thresholdFormat(locale2, scale2, specifier) {
    const _ = scale2[formats[scale2.type]](), n = _.length;
    let d = n > 1 ? _[1] - _[0] : _[0], i;
    for (i = 1; i < n; ++i) {
      d = Math.min(d, _[i] - _[i - 1]);
    }
    return locale2.formatSpan(0, d, 3 * 10, specifier);
  }
  function thresholdValues(thresholds) {
    const values2 = [-Infinity].concat(thresholds);
    values2.max = Infinity;
    return values2;
  }
  function binValues(bins2) {
    const values2 = bins2.slice(0, -1);
    values2.max = peek$2(bins2);
    return values2;
  }
  const isDiscreteRange = (scale2) => symbols$2[scale2.type] || scale2.bins;
  function labelFormat(locale2, scale2, count2, type2, specifier, formatType, noSkip) {
    const format2 = formats[scale2.type] && formatType !== Time && formatType !== UTC ? thresholdFormat(locale2, scale2, specifier) : tickFormat(locale2, scale2, count2, specifier, formatType, noSkip);
    return type2 === SymbolLegend && isDiscreteRange(scale2) ? formatRange(format2) : type2 === DiscreteLegend ? formatDiscrete(format2) : formatPoint(format2);
  }
  const formatRange = (format2) => (value2, index2, array2) => {
    const limit = get$3(array2[index2 + 1], get$3(array2.max, Infinity)), lo = formatValue$2(value2, format2), hi = formatValue$2(limit, format2);
    return lo && hi ? lo + " – " + hi : hi ? "< " + hi : "≥ " + lo;
  };
  const get$3 = (value2, dflt) => value2 != null ? value2 : dflt;
  const formatDiscrete = (format2) => (value2, index2) => index2 ? format2(value2) : null;
  const formatPoint = (format2) => (value2) => format2(value2);
  const formatValue$2 = (value2, format2) => Number.isFinite(value2) ? format2(value2) : null;
  function labelFraction(scale2) {
    const domain2 = scale2.domain(), count2 = domain2.length - 1;
    let lo = +domain2[0], hi = +peek$2(domain2), span2 = hi - lo;
    if (scale2.type === Threshold) {
      const adjust = count2 ? span2 / count2 : 0.1;
      lo -= adjust;
      hi += adjust;
      span2 = hi - lo;
    }
    return (value2) => (value2 - lo) / span2;
  }
  function format$1(locale2, scale2, specifier, formatType) {
    const type2 = formatType || scale2.type;
    if (isString(specifier) && isTemporal(type2)) {
      specifier = specifier.replace(/%a/g, "%A").replace(/%b/g, "%B");
    }
    return !specifier && type2 === Time ? locale2.timeFormat("%A, %d %B %Y, %X") : !specifier && type2 === UTC ? locale2.utcFormat("%A, %d %B %Y, %X UTC") : labelFormat(locale2, scale2, 5, null, specifier, formatType, true);
  }
  function domainCaption(locale2, scale2, opt) {
    opt = opt || {};
    const max2 = Math.max(3, opt.maxlen || 7), fmt = format$1(locale2, scale2, opt.format, opt.formatType);
    if (isDiscretizing$1(scale2.type)) {
      const v = labelValues(scale2).slice(1).map(fmt), n = v.length;
      return `${n} boundar${n === 1 ? "y" : "ies"}: ${v.join(", ")}`;
    } else if (isDiscrete$2(scale2.type)) {
      const d = scale2.domain(), n = d.length, v = n > max2 ? d.slice(0, max2 - 2).map(fmt).join(", ") + ", ending with " + d.slice(-1).map(fmt) : d.map(fmt).join(", ");
      return `${n} value${n === 1 ? "" : "s"}: ${v}`;
    } else {
      const d = scale2.domain();
      return `values from ${fmt(d[0])} to ${fmt(peek$2(d))}`;
    }
  }
  let gradient_id = 0;
  function resetSVGGradientId() {
    gradient_id = 0;
  }
  const patternPrefix = "p_";
  function isGradient(value2) {
    return value2 && value2.gradient;
  }
  function gradientRef(g, defs, base) {
    const type2 = g.gradient;
    let id2 = g.id, prefix = type2 === "radial" ? patternPrefix : "";
    if (!id2) {
      id2 = g.id = "gradient_" + gradient_id++;
      if (type2 === "radial") {
        g.x1 = get$2(g.x1, 0.5);
        g.y1 = get$2(g.y1, 0.5);
        g.r1 = get$2(g.r1, 0);
        g.x2 = get$2(g.x2, 0.5);
        g.y2 = get$2(g.y2, 0.5);
        g.r2 = get$2(g.r2, 0.5);
        prefix = patternPrefix;
      } else {
        g.x1 = get$2(g.x1, 0);
        g.y1 = get$2(g.y1, 0);
        g.x2 = get$2(g.x2, 1);
        g.y2 = get$2(g.y2, 0);
      }
    }
    defs[id2] = g;
    return "url(" + (base || "") + "#" + prefix + id2 + ")";
  }
  function get$2(val, def2) {
    return val != null ? val : def2;
  }
  function Gradient$1(p02, p1) {
    var stops = [], gradient2;
    return gradient2 = {
      gradient: "linear",
      x1: p02 ? p02[0] : 0,
      y1: p02 ? p02[1] : 0,
      x2: p1 ? p1[0] : 1,
      y2: p1 ? p1[1] : 0,
      stops,
      stop: function(offset2, color2) {
        stops.push({
          offset: offset2,
          color: color2
        });
        return gradient2;
      }
    };
  }
  const lookup$4 = {
    "basis": {
      curve: curveBasis
    },
    "basis-closed": {
      curve: curveBasisClosed
    },
    "basis-open": {
      curve: curveBasisOpen
    },
    "bundle": {
      curve: curveBundle,
      tension: "beta",
      value: 0.85
    },
    "cardinal": {
      curve: curveCardinal,
      tension: "tension",
      value: 0
    },
    "cardinal-open": {
      curve: curveCardinalOpen,
      tension: "tension",
      value: 0
    },
    "cardinal-closed": {
      curve: curveCardinalClosed,
      tension: "tension",
      value: 0
    },
    "catmull-rom": {
      curve: curveCatmullRom,
      tension: "alpha",
      value: 0.5
    },
    "catmull-rom-closed": {
      curve: curveCatmullRomClosed,
      tension: "alpha",
      value: 0.5
    },
    "catmull-rom-open": {
      curve: curveCatmullRomOpen,
      tension: "alpha",
      value: 0.5
    },
    "linear": {
      curve: curveLinear
    },
    "linear-closed": {
      curve: curveLinearClosed
    },
    "monotone": {
      horizontal: monotoneY,
      vertical: monotoneX
    },
    "natural": {
      curve: curveNatural
    },
    "step": {
      curve: curveStep
    },
    "step-after": {
      curve: stepAfter
    },
    "step-before": {
      curve: stepBefore
    }
  };
  function curves(type2, orientation, tension) {
    var entry2 = has$1(lookup$4, type2) && lookup$4[type2], curve2 = null;
    if (entry2) {
      curve2 = entry2.curve || entry2[orientation || "vertical"];
      if (entry2.tension && tension != null) {
        curve2 = curve2[entry2.tension](tension);
      }
    }
    return curve2;
  }
  const paramCounts = {
    m: 2,
    l: 2,
    h: 1,
    v: 1,
    z: 0,
    c: 6,
    s: 4,
    q: 4,
    t: 2,
    a: 7
  };
  const commandPattern = /[mlhvzcsqta]([^mlhvzcsqta]+|$)/gi;
  const numberPattern = /^[+-]?(([0-9]*\.[0-9]+)|([0-9]+\.)|([0-9]+))([eE][+-]?[0-9]+)?/;
  const spacePattern = /^((\s+,?\s*)|(,\s*))/;
  const flagPattern = /^[01]/;
  function parse$3(path2) {
    const commands = [];
    const matches = path2.match(commandPattern) || [];
    matches.forEach((str) => {
      let cmd = str[0];
      const type2 = cmd.toLowerCase();
      const paramCount = paramCounts[type2];
      const params2 = parseParams(type2, paramCount, str.slice(1).trim());
      const count2 = params2.length;
      if (count2 < paramCount || count2 && count2 % paramCount !== 0) {
        throw Error("Invalid SVG path, incorrect parameter count");
      }
      commands.push([cmd, ...params2.slice(0, paramCount)]);
      if (count2 === paramCount) {
        return;
      }
      if (type2 === "m") {
        cmd = cmd === "M" ? "L" : "l";
      }
      for (let i = paramCount; i < count2; i += paramCount) {
        commands.push([cmd, ...params2.slice(i, i + paramCount)]);
      }
    });
    return commands;
  }
  function parseParams(type2, paramCount, segment) {
    const params2 = [];
    for (let index2 = 0; paramCount && index2 < segment.length; ) {
      for (let i = 0; i < paramCount; ++i) {
        const pattern = type2 === "a" && (i === 3 || i === 4) ? flagPattern : numberPattern;
        const match2 = segment.slice(index2).match(pattern);
        if (match2 === null) {
          throw Error("Invalid SVG path, incorrect parameter type");
        }
        index2 += match2[0].length;
        params2.push(+match2[0]);
        const ws = segment.slice(index2).match(spacePattern);
        if (ws !== null) {
          index2 += ws[0].length;
        }
      }
    }
    return params2;
  }
  const DegToRad = Math.PI / 180;
  const Epsilon = 1e-14;
  const HalfPi = Math.PI / 2;
  const Tau = Math.PI * 2;
  const HalfSqrt3 = Math.sqrt(3) / 2;
  var segmentCache = {};
  var bezierCache = {};
  var join$1 = [].join;
  function segments(x2, y2, rx, ry, large, sweep, rotateX, ox, oy) {
    const key2 = join$1.call(arguments);
    if (segmentCache[key2]) {
      return segmentCache[key2];
    }
    const th = rotateX * DegToRad;
    const sin_th = Math.sin(th);
    const cos_th = Math.cos(th);
    rx = Math.abs(rx);
    ry = Math.abs(ry);
    const px2 = cos_th * (ox - x2) * 0.5 + sin_th * (oy - y2) * 0.5;
    const py2 = cos_th * (oy - y2) * 0.5 - sin_th * (ox - x2) * 0.5;
    let pl = px2 * px2 / (rx * rx) + py2 * py2 / (ry * ry);
    if (pl > 1) {
      pl = Math.sqrt(pl);
      rx *= pl;
      ry *= pl;
    }
    const a00 = cos_th / rx;
    const a01 = sin_th / rx;
    const a10 = -sin_th / ry;
    const a11 = cos_th / ry;
    const x02 = a00 * ox + a01 * oy;
    const y02 = a10 * ox + a11 * oy;
    const x12 = a00 * x2 + a01 * y2;
    const y12 = a10 * x2 + a11 * y2;
    const d = (x12 - x02) * (x12 - x02) + (y12 - y02) * (y12 - y02);
    let sfactor_sq = 1 / d - 0.25;
    if (sfactor_sq < 0) sfactor_sq = 0;
    let sfactor = Math.sqrt(sfactor_sq);
    if (sweep == large) sfactor = -sfactor;
    const xc = 0.5 * (x02 + x12) - sfactor * (y12 - y02);
    const yc = 0.5 * (y02 + y12) + sfactor * (x12 - x02);
    const th0 = Math.atan2(y02 - yc, x02 - xc);
    const th1 = Math.atan2(y12 - yc, x12 - xc);
    let th_arc = th1 - th0;
    if (th_arc < 0 && sweep === 1) {
      th_arc += Tau;
    } else if (th_arc > 0 && sweep === 0) {
      th_arc -= Tau;
    }
    const segs = Math.ceil(Math.abs(th_arc / (HalfPi + 1e-3)));
    const result = [];
    for (let i = 0; i < segs; ++i) {
      const th2 = th0 + i * th_arc / segs;
      const th3 = th0 + (i + 1) * th_arc / segs;
      result[i] = [xc, yc, th2, th3, rx, ry, sin_th, cos_th];
    }
    return segmentCache[key2] = result;
  }
  function bezier(params2) {
    const key2 = join$1.call(params2);
    if (bezierCache[key2]) {
      return bezierCache[key2];
    }
    var cx = params2[0], cy = params2[1], th0 = params2[2], th1 = params2[3], rx = params2[4], ry = params2[5], sin_th = params2[6], cos_th = params2[7];
    const a00 = cos_th * rx;
    const a01 = -sin_th * ry;
    const a10 = sin_th * rx;
    const a11 = cos_th * ry;
    const cos_th0 = Math.cos(th0);
    const sin_th0 = Math.sin(th0);
    const cos_th1 = Math.cos(th1);
    const sin_th1 = Math.sin(th1);
    const th_half = 0.5 * (th1 - th0);
    const sin_th_h2 = Math.sin(th_half * 0.5);
    const t = 8 / 3 * sin_th_h2 * sin_th_h2 / Math.sin(th_half);
    const x12 = cx + cos_th0 - t * sin_th0;
    const y12 = cy + sin_th0 + t * cos_th0;
    const x3 = cx + cos_th1;
    const y3 = cy + sin_th1;
    const x2 = x3 + t * sin_th1;
    const y2 = y3 - t * cos_th1;
    return bezierCache[key2] = [a00 * x12 + a01 * y12, a10 * x12 + a11 * y12, a00 * x2 + a01 * y2, a10 * x2 + a11 * y2, a00 * x3 + a01 * y3, a10 * x3 + a11 * y3];
  }
  const temp = ["l", 0, 0, 0, 0, 0, 0, 0];
  function scale$1$1(current2, sX, sY) {
    const c2 = temp[0] = current2[0];
    if (c2 === "a" || c2 === "A") {
      temp[1] = sX * current2[1];
      temp[2] = sY * current2[2];
      temp[3] = current2[3];
      temp[4] = current2[4];
      temp[5] = current2[5];
      temp[6] = sX * current2[6];
      temp[7] = sY * current2[7];
    } else if (c2 === "h" || c2 === "H") {
      temp[1] = sX * current2[1];
    } else if (c2 === "v" || c2 === "V") {
      temp[1] = sY * current2[1];
    } else {
      for (var i = 1, n = current2.length; i < n; ++i) {
        temp[i] = (i % 2 == 1 ? sX : sY) * current2[i];
      }
    }
    return temp;
  }
  function pathRender(context2, path2, l, t, sX, sY) {
    var current2, previous = null, x2 = 0, y2 = 0, controlX = 0, controlY = 0, tempX, tempY, tempControlX, tempControlY, anchorX = 0, anchorY = 0;
    if (l == null) l = 0;
    if (t == null) t = 0;
    if (sX == null) sX = 1;
    if (sY == null) sY = sX;
    if (context2.beginPath) context2.beginPath();
    for (var i = 0, len = path2.length; i < len; ++i) {
      current2 = path2[i];
      if (sX !== 1 || sY !== 1) {
        current2 = scale$1$1(current2, sX, sY);
      }
      switch (current2[0]) {
        case "l":
          x2 += current2[1];
          y2 += current2[2];
          context2.lineTo(x2 + l, y2 + t);
          break;
        case "L":
          x2 = current2[1];
          y2 = current2[2];
          context2.lineTo(x2 + l, y2 + t);
          break;
        case "h":
          x2 += current2[1];
          context2.lineTo(x2 + l, y2 + t);
          break;
        case "H":
          x2 = current2[1];
          context2.lineTo(x2 + l, y2 + t);
          break;
        case "v":
          y2 += current2[1];
          context2.lineTo(x2 + l, y2 + t);
          break;
        case "V":
          y2 = current2[1];
          context2.lineTo(x2 + l, y2 + t);
          break;
        case "m":
          x2 += current2[1];
          y2 += current2[2];
          anchorX = x2;
          anchorY = y2;
          context2.moveTo(x2 + l, y2 + t);
          break;
        case "M":
          x2 = current2[1];
          y2 = current2[2];
          anchorX = x2;
          anchorY = y2;
          context2.moveTo(x2 + l, y2 + t);
          break;
        case "c":
          tempX = x2 + current2[5];
          tempY = y2 + current2[6];
          controlX = x2 + current2[3];
          controlY = y2 + current2[4];
          context2.bezierCurveTo(
            x2 + current2[1] + l,
            // x1
            y2 + current2[2] + t,
            // y1
            controlX + l,
            // x2
            controlY + t,
            // y2
            tempX + l,
            tempY + t
          );
          x2 = tempX;
          y2 = tempY;
          break;
        case "C":
          x2 = current2[5];
          y2 = current2[6];
          controlX = current2[3];
          controlY = current2[4];
          context2.bezierCurveTo(current2[1] + l, current2[2] + t, controlX + l, controlY + t, x2 + l, y2 + t);
          break;
        case "s":
          tempX = x2 + current2[3];
          tempY = y2 + current2[4];
          controlX = 2 * x2 - controlX;
          controlY = 2 * y2 - controlY;
          context2.bezierCurveTo(controlX + l, controlY + t, x2 + current2[1] + l, y2 + current2[2] + t, tempX + l, tempY + t);
          controlX = x2 + current2[1];
          controlY = y2 + current2[2];
          x2 = tempX;
          y2 = tempY;
          break;
        case "S":
          tempX = current2[3];
          tempY = current2[4];
          controlX = 2 * x2 - controlX;
          controlY = 2 * y2 - controlY;
          context2.bezierCurveTo(controlX + l, controlY + t, current2[1] + l, current2[2] + t, tempX + l, tempY + t);
          x2 = tempX;
          y2 = tempY;
          controlX = current2[1];
          controlY = current2[2];
          break;
        case "q":
          tempX = x2 + current2[3];
          tempY = y2 + current2[4];
          controlX = x2 + current2[1];
          controlY = y2 + current2[2];
          context2.quadraticCurveTo(controlX + l, controlY + t, tempX + l, tempY + t);
          x2 = tempX;
          y2 = tempY;
          break;
        case "Q":
          tempX = current2[3];
          tempY = current2[4];
          context2.quadraticCurveTo(current2[1] + l, current2[2] + t, tempX + l, tempY + t);
          x2 = tempX;
          y2 = tempY;
          controlX = current2[1];
          controlY = current2[2];
          break;
        case "t":
          tempX = x2 + current2[1];
          tempY = y2 + current2[2];
          if (previous[0].match(/[QqTt]/) === null) {
            controlX = x2;
            controlY = y2;
          } else if (previous[0] === "t") {
            controlX = 2 * x2 - tempControlX;
            controlY = 2 * y2 - tempControlY;
          } else if (previous[0] === "q") {
            controlX = 2 * x2 - controlX;
            controlY = 2 * y2 - controlY;
          }
          tempControlX = controlX;
          tempControlY = controlY;
          context2.quadraticCurveTo(controlX + l, controlY + t, tempX + l, tempY + t);
          x2 = tempX;
          y2 = tempY;
          controlX = x2 + current2[1];
          controlY = y2 + current2[2];
          break;
        case "T":
          tempX = current2[1];
          tempY = current2[2];
          controlX = 2 * x2 - controlX;
          controlY = 2 * y2 - controlY;
          context2.quadraticCurveTo(controlX + l, controlY + t, tempX + l, tempY + t);
          x2 = tempX;
          y2 = tempY;
          break;
        case "a":
          drawArc(context2, x2 + l, y2 + t, [current2[1], current2[2], current2[3], current2[4], current2[5], current2[6] + x2 + l, current2[7] + y2 + t]);
          x2 += current2[6];
          y2 += current2[7];
          break;
        case "A":
          drawArc(context2, x2 + l, y2 + t, [current2[1], current2[2], current2[3], current2[4], current2[5], current2[6] + l, current2[7] + t]);
          x2 = current2[6];
          y2 = current2[7];
          break;
        case "z":
        case "Z":
          x2 = anchorX;
          y2 = anchorY;
          context2.closePath();
          break;
      }
      previous = current2;
    }
  }
  function drawArc(context2, x2, y2, coords) {
    const seg = segments(
      coords[5],
      // end x
      coords[6],
      // end y
      coords[0],
      // radius x
      coords[1],
      // radius y
      coords[3],
      // large flag
      coords[4],
      // sweep flag
      coords[2],
      // rotation
      x2,
      y2
    );
    for (let i = 0; i < seg.length; ++i) {
      const bez = bezier(seg[i]);
      context2.bezierCurveTo(bez[0], bez[1], bez[2], bez[3], bez[4], bez[5]);
    }
  }
  const Tan30 = 0.5773502691896257;
  const builtins = {
    "circle": {
      draw: function(context2, size) {
        const r = Math.sqrt(size) / 2;
        context2.moveTo(r, 0);
        context2.arc(0, 0, r, 0, Tau);
      }
    },
    "cross": {
      draw: function(context2, size) {
        var r = Math.sqrt(size) / 2, s = r / 2.5;
        context2.moveTo(-r, -s);
        context2.lineTo(-r, s);
        context2.lineTo(-s, s);
        context2.lineTo(-s, r);
        context2.lineTo(s, r);
        context2.lineTo(s, s);
        context2.lineTo(r, s);
        context2.lineTo(r, -s);
        context2.lineTo(s, -s);
        context2.lineTo(s, -r);
        context2.lineTo(-s, -r);
        context2.lineTo(-s, -s);
        context2.closePath();
      }
    },
    "diamond": {
      draw: function(context2, size) {
        const r = Math.sqrt(size) / 2;
        context2.moveTo(-r, 0);
        context2.lineTo(0, -r);
        context2.lineTo(r, 0);
        context2.lineTo(0, r);
        context2.closePath();
      }
    },
    "square": {
      draw: function(context2, size) {
        var w2 = Math.sqrt(size), x2 = -w2 / 2;
        context2.rect(x2, x2, w2, w2);
      }
    },
    "arrow": {
      draw: function(context2, size) {
        var r = Math.sqrt(size) / 2, s = r / 7, t = r / 2.5, v = r / 8;
        context2.moveTo(-s, r);
        context2.lineTo(s, r);
        context2.lineTo(s, -v);
        context2.lineTo(t, -v);
        context2.lineTo(0, -r);
        context2.lineTo(-t, -v);
        context2.lineTo(-s, -v);
        context2.closePath();
      }
    },
    "wedge": {
      draw: function(context2, size) {
        var r = Math.sqrt(size) / 2, h2 = HalfSqrt3 * r, o = h2 - r * Tan30, b2 = r / 4;
        context2.moveTo(0, -h2 - o);
        context2.lineTo(-b2, h2 - o);
        context2.lineTo(b2, h2 - o);
        context2.closePath();
      }
    },
    "triangle": {
      draw: function(context2, size) {
        var r = Math.sqrt(size) / 2, h2 = HalfSqrt3 * r, o = h2 - r * Tan30;
        context2.moveTo(0, -h2 - o);
        context2.lineTo(-r, h2 - o);
        context2.lineTo(r, h2 - o);
        context2.closePath();
      }
    },
    "triangle-up": {
      draw: function(context2, size) {
        var r = Math.sqrt(size) / 2, h2 = HalfSqrt3 * r;
        context2.moveTo(0, -h2);
        context2.lineTo(-r, h2);
        context2.lineTo(r, h2);
        context2.closePath();
      }
    },
    "triangle-down": {
      draw: function(context2, size) {
        var r = Math.sqrt(size) / 2, h2 = HalfSqrt3 * r;
        context2.moveTo(0, h2);
        context2.lineTo(-r, -h2);
        context2.lineTo(r, -h2);
        context2.closePath();
      }
    },
    "triangle-right": {
      draw: function(context2, size) {
        var r = Math.sqrt(size) / 2, h2 = HalfSqrt3 * r;
        context2.moveTo(h2, 0);
        context2.lineTo(-h2, -r);
        context2.lineTo(-h2, r);
        context2.closePath();
      }
    },
    "triangle-left": {
      draw: function(context2, size) {
        var r = Math.sqrt(size) / 2, h2 = HalfSqrt3 * r;
        context2.moveTo(-h2, 0);
        context2.lineTo(h2, -r);
        context2.lineTo(h2, r);
        context2.closePath();
      }
    },
    "stroke": {
      draw: function(context2, size) {
        const r = Math.sqrt(size) / 2;
        context2.moveTo(-r, 0);
        context2.lineTo(r, 0);
      }
    }
  };
  function symbols$1(_) {
    return has$1(builtins, _) ? builtins[_] : customSymbol(_);
  }
  var custom = {};
  function customSymbol(path2) {
    if (!has$1(custom, path2)) {
      const parsed = parse$3(path2);
      custom[path2] = {
        draw: function(context2, size) {
          pathRender(context2, parsed, 0, 0, Math.sqrt(size) / 2);
        }
      };
    }
    return custom[path2];
  }
  const C = 0.448084975506;
  function rectangleX(d) {
    return d.x;
  }
  function rectangleY(d) {
    return d.y;
  }
  function rectangleWidth(d) {
    return d.width;
  }
  function rectangleHeight(d) {
    return d.height;
  }
  function number$3(_) {
    return typeof _ === "function" ? _ : () => +_;
  }
  function clamp(value2, min2, max2) {
    return Math.max(min2, Math.min(value2, max2));
  }
  function vg_rect() {
    var x2 = rectangleX, y2 = rectangleY, width2 = rectangleWidth, height2 = rectangleHeight, crTL = number$3(0), crTR = crTL, crBL = crTL, crBR = crTL, context2 = null;
    function rectangle2(_, x02, y02) {
      var buffer, x12 = x02 != null ? x02 : +x2.call(this, _), y12 = y02 != null ? y02 : +y2.call(this, _), w2 = +width2.call(this, _), h2 = +height2.call(this, _), s = Math.min(w2, h2) / 2, tl2 = clamp(+crTL.call(this, _), 0, s), tr2 = clamp(+crTR.call(this, _), 0, s), bl2 = clamp(+crBL.call(this, _), 0, s), br2 = clamp(+crBR.call(this, _), 0, s);
      if (!context2) context2 = buffer = path$3();
      if (tl2 <= 0 && tr2 <= 0 && bl2 <= 0 && br2 <= 0) {
        context2.rect(x12, y12, w2, h2);
      } else {
        var x22 = x12 + w2, y22 = y12 + h2;
        context2.moveTo(x12 + tl2, y12);
        context2.lineTo(x22 - tr2, y12);
        context2.bezierCurveTo(x22 - C * tr2, y12, x22, y12 + C * tr2, x22, y12 + tr2);
        context2.lineTo(x22, y22 - br2);
        context2.bezierCurveTo(x22, y22 - C * br2, x22 - C * br2, y22, x22 - br2, y22);
        context2.lineTo(x12 + bl2, y22);
        context2.bezierCurveTo(x12 + C * bl2, y22, x12, y22 - C * bl2, x12, y22 - bl2);
        context2.lineTo(x12, y12 + tl2);
        context2.bezierCurveTo(x12, y12 + C * tl2, x12 + C * tl2, y12, x12 + tl2, y12);
        context2.closePath();
      }
      if (buffer) {
        context2 = null;
        return buffer + "" || null;
      }
    }
    rectangle2.x = function(_) {
      if (arguments.length) {
        x2 = number$3(_);
        return rectangle2;
      } else {
        return x2;
      }
    };
    rectangle2.y = function(_) {
      if (arguments.length) {
        y2 = number$3(_);
        return rectangle2;
      } else {
        return y2;
      }
    };
    rectangle2.width = function(_) {
      if (arguments.length) {
        width2 = number$3(_);
        return rectangle2;
      } else {
        return width2;
      }
    };
    rectangle2.height = function(_) {
      if (arguments.length) {
        height2 = number$3(_);
        return rectangle2;
      } else {
        return height2;
      }
    };
    rectangle2.cornerRadius = function(tl2, tr2, br2, bl2) {
      if (arguments.length) {
        crTL = number$3(tl2);
        crTR = tr2 != null ? number$3(tr2) : crTL;
        crBR = br2 != null ? number$3(br2) : crTL;
        crBL = bl2 != null ? number$3(bl2) : crTR;
        return rectangle2;
      } else {
        return crTL;
      }
    };
    rectangle2.context = function(_) {
      if (arguments.length) {
        context2 = _ == null ? null : _;
        return rectangle2;
      } else {
        return context2;
      }
    };
    return rectangle2;
  }
  function vg_trail() {
    var x2, y2, size, defined2, context2 = null, ready, x12, y12, r1;
    function point2(x22, y22, w2) {
      const r2 = w2 / 2;
      if (ready) {
        var ux = y12 - y22, uy = x22 - x12;
        if (ux || uy) {
          var ud = Math.hypot(ux, uy), rx = (ux /= ud) * r1, ry = (uy /= ud) * r1, t = Math.atan2(uy, ux);
          context2.moveTo(x12 - rx, y12 - ry);
          context2.lineTo(x22 - ux * r2, y22 - uy * r2);
          context2.arc(x22, y22, r2, t - Math.PI, t);
          context2.lineTo(x12 + rx, y12 + ry);
          context2.arc(x12, y12, r1, t, t + Math.PI);
        } else {
          context2.arc(x22, y22, r2, 0, Tau);
        }
        context2.closePath();
      } else {
        ready = 1;
      }
      x12 = x22;
      y12 = y22;
      r1 = r2;
    }
    function trail2(data2) {
      var i, n = data2.length, d, defined0 = false, buffer;
      if (context2 == null) context2 = buffer = path$3();
      for (i = 0; i <= n; ++i) {
        if (!(i < n && defined2(d = data2[i], i, data2)) === defined0) {
          if (defined0 = !defined0) ready = 0;
        }
        if (defined0) point2(+x2(d, i, data2), +y2(d, i, data2), +size(d, i, data2));
      }
      if (buffer) {
        context2 = null;
        return buffer + "" || null;
      }
    }
    trail2.x = function(_) {
      if (arguments.length) {
        x2 = _;
        return trail2;
      } else {
        return x2;
      }
    };
    trail2.y = function(_) {
      if (arguments.length) {
        y2 = _;
        return trail2;
      } else {
        return y2;
      }
    };
    trail2.size = function(_) {
      if (arguments.length) {
        size = _;
        return trail2;
      } else {
        return size;
      }
    };
    trail2.defined = function(_) {
      if (arguments.length) {
        defined2 = _;
        return trail2;
      } else {
        return defined2;
      }
    };
    trail2.context = function(_) {
      if (arguments.length) {
        if (_ == null) {
          context2 = null;
        } else {
          context2 = _;
        }
        return trail2;
      } else {
        return context2;
      }
    };
    return trail2;
  }
  function value$1(a2, b2) {
    return a2 != null ? a2 : b2;
  }
  const x$2 = (item) => item.x || 0, y$2 = (item) => item.y || 0, w$1 = (item) => item.width || 0, h = (item) => item.height || 0, xw = (item) => (item.x || 0) + (item.width || 0), yh = (item) => (item.y || 0) + (item.height || 0), sa = (item) => item.startAngle || 0, ea = (item) => item.endAngle || 0, pa = (item) => item.padAngle || 0, ir = (item) => item.innerRadius || 0, or = (item) => item.outerRadius || 0, cr = (item) => item.cornerRadius || 0, tl = (item) => value$1(item.cornerRadiusTopLeft, item.cornerRadius) || 0, tr = (item) => value$1(item.cornerRadiusTopRight, item.cornerRadius) || 0, br = (item) => value$1(item.cornerRadiusBottomRight, item.cornerRadius) || 0, bl = (item) => value$1(item.cornerRadiusBottomLeft, item.cornerRadius) || 0, sz = (item) => value$1(item.size, 64), ts = (item) => item.size || 1, def = (item) => !(item.defined === false), type$1 = (item) => symbols$1(item.shape || "circle");
  const arcShape = arc$2$1().startAngle(sa).endAngle(ea).padAngle(pa).innerRadius(ir).outerRadius(or).cornerRadius(cr), areavShape = area$2$1().x(x$2).y1(y$2).y0(yh).defined(def), areahShape = area$2$1().y(y$2).x1(x$2).x0(xw).defined(def), lineShape = line$2$1().x(x$2).y(y$2).defined(def), rectShape = vg_rect().x(x$2).y(y$2).width(w$1).height(h).cornerRadius(tl, tr, br, bl), symbolShape = Symbol$1().type(type$1).size(sz), trailShape = vg_trail().x(x$2).y(y$2).defined(def).size(ts);
  function hasCornerRadius(item) {
    return item.cornerRadius || item.cornerRadiusTopLeft || item.cornerRadiusTopRight || item.cornerRadiusBottomRight || item.cornerRadiusBottomLeft;
  }
  function arc$1$1(context2, item) {
    return arcShape.context(context2)(item);
  }
  function area$1$1(context2, items) {
    const item = items[0], interp = item.interpolate || "linear";
    return (item.orient === "horizontal" ? areahShape : areavShape).curve(curves(interp, item.orient, item.tension)).context(context2)(items);
  }
  function line$1$1(context2, items) {
    const item = items[0], interp = item.interpolate || "linear";
    return lineShape.curve(curves(interp, item.orient, item.tension)).context(context2)(items);
  }
  function rectangle(context2, item, x2, y2) {
    return rectShape.context(context2)(item, x2, y2);
  }
  function shape$1(context2, item) {
    return (item.mark.shape || item.shape).context(context2)(item);
  }
  function symbol$1(context2, item) {
    return symbolShape.context(context2)(item);
  }
  function trail$1(context2, items) {
    return trailShape.context(context2)(items);
  }
  var clip_id = 1;
  function resetSVGClipId() {
    clip_id = 1;
  }
  function clip$1$1(renderer, item, size) {
    var clip2 = item.clip, defs = renderer._defs, id2 = item.clip_id || (item.clip_id = "clip" + clip_id++), c2 = defs.clipping[id2] || (defs.clipping[id2] = {
      id: id2
    });
    if (isFunction(clip2)) {
      c2.path = clip2(null);
    } else if (hasCornerRadius(size)) {
      c2.path = rectangle(null, size, 0, 0);
    } else {
      c2.width = size.width || 0;
      c2.height = size.height || 0;
    }
    return "url(#" + id2 + ")";
  }
  function Bounds(b2) {
    this.clear();
    if (b2) this.union(b2);
  }
  Bounds.prototype = {
    clone() {
      return new Bounds(this);
    },
    clear() {
      this.x1 = +Number.MAX_VALUE;
      this.y1 = +Number.MAX_VALUE;
      this.x2 = -Number.MAX_VALUE;
      this.y2 = -Number.MAX_VALUE;
      return this;
    },
    empty() {
      return this.x1 === +Number.MAX_VALUE && this.y1 === +Number.MAX_VALUE && this.x2 === -Number.MAX_VALUE && this.y2 === -Number.MAX_VALUE;
    },
    equals(b2) {
      return this.x1 === b2.x1 && this.y1 === b2.y1 && this.x2 === b2.x2 && this.y2 === b2.y2;
    },
    set(x12, y12, x2, y2) {
      if (x2 < x12) {
        this.x2 = x12;
        this.x1 = x2;
      } else {
        this.x1 = x12;
        this.x2 = x2;
      }
      if (y2 < y12) {
        this.y2 = y12;
        this.y1 = y2;
      } else {
        this.y1 = y12;
        this.y2 = y2;
      }
      return this;
    },
    add(x2, y2) {
      if (x2 < this.x1) this.x1 = x2;
      if (y2 < this.y1) this.y1 = y2;
      if (x2 > this.x2) this.x2 = x2;
      if (y2 > this.y2) this.y2 = y2;
      return this;
    },
    expand(d) {
      this.x1 -= d;
      this.y1 -= d;
      this.x2 += d;
      this.y2 += d;
      return this;
    },
    round() {
      this.x1 = Math.floor(this.x1);
      this.y1 = Math.floor(this.y1);
      this.x2 = Math.ceil(this.x2);
      this.y2 = Math.ceil(this.y2);
      return this;
    },
    scale(s) {
      this.x1 *= s;
      this.y1 *= s;
      this.x2 *= s;
      this.y2 *= s;
      return this;
    },
    translate(dx, dy) {
      this.x1 += dx;
      this.x2 += dx;
      this.y1 += dy;
      this.y2 += dy;
      return this;
    },
    rotate(angle2, x2, y2) {
      const p = this.rotatedPoints(angle2, x2, y2);
      return this.clear().add(p[0], p[1]).add(p[2], p[3]).add(p[4], p[5]).add(p[6], p[7]);
    },
    rotatedPoints(angle2, x2, y2) {
      var {
        x1: x12,
        y1: y12,
        x2: x22,
        y2: y22
      } = this, cos2 = Math.cos(angle2), sin2 = Math.sin(angle2), cx = x2 - x2 * cos2 + y2 * sin2, cy = y2 - x2 * sin2 - y2 * cos2;
      return [cos2 * x12 - sin2 * y12 + cx, sin2 * x12 + cos2 * y12 + cy, cos2 * x12 - sin2 * y22 + cx, sin2 * x12 + cos2 * y22 + cy, cos2 * x22 - sin2 * y12 + cx, sin2 * x22 + cos2 * y12 + cy, cos2 * x22 - sin2 * y22 + cx, sin2 * x22 + cos2 * y22 + cy];
    },
    union(b2) {
      if (b2.x1 < this.x1) this.x1 = b2.x1;
      if (b2.y1 < this.y1) this.y1 = b2.y1;
      if (b2.x2 > this.x2) this.x2 = b2.x2;
      if (b2.y2 > this.y2) this.y2 = b2.y2;
      return this;
    },
    intersect(b2) {
      if (b2.x1 > this.x1) this.x1 = b2.x1;
      if (b2.y1 > this.y1) this.y1 = b2.y1;
      if (b2.x2 < this.x2) this.x2 = b2.x2;
      if (b2.y2 < this.y2) this.y2 = b2.y2;
      return this;
    },
    encloses(b2) {
      return b2 && this.x1 <= b2.x1 && this.x2 >= b2.x2 && this.y1 <= b2.y1 && this.y2 >= b2.y2;
    },
    alignsWith(b2) {
      return b2 && (this.x1 == b2.x1 || this.x2 == b2.x2 || this.y1 == b2.y1 || this.y2 == b2.y2);
    },
    intersects(b2) {
      return b2 && !(this.x2 < b2.x1 || this.x1 > b2.x2 || this.y2 < b2.y1 || this.y1 > b2.y2);
    },
    contains(x2, y2) {
      return !(x2 < this.x1 || x2 > this.x2 || y2 < this.y1 || y2 > this.y2);
    },
    width() {
      return this.x2 - this.x1;
    },
    height() {
      return this.y2 - this.y1;
    }
  };
  function Item(mark) {
    this.mark = mark;
    this.bounds = this.bounds || new Bounds();
  }
  function GroupItem(mark) {
    Item.call(this, mark);
    this.items = this.items || [];
  }
  inherits(GroupItem, Item);
  class ResourceLoader {
    constructor(customLoader) {
      this._pending = 0;
      this._loader = customLoader || loader();
    }
    pending() {
      return this._pending;
    }
    sanitizeURL(uri) {
      const loader2 = this;
      increment(loader2);
      return loader2._loader.sanitize(uri, {
        context: "href"
      }).then((opt) => {
        decrement(loader2);
        return opt;
      }).catch(() => {
        decrement(loader2);
        return null;
      });
    }
    loadImage(uri) {
      const loader2 = this, Image2 = domImage();
      increment(loader2);
      return loader2._loader.sanitize(uri, {
        context: "image"
      }).then((opt) => {
        const url = opt.href;
        if (!url || !Image2) throw {
          url
        };
        const img = new Image2();
        const cors = has$1(opt, "crossOrigin") ? opt.crossOrigin : "anonymous";
        if (cors != null) img.crossOrigin = cors;
        img.onload = () => decrement(loader2);
        img.onerror = () => decrement(loader2);
        img.src = url;
        return img;
      }).catch((e3) => {
        decrement(loader2);
        return {
          complete: false,
          width: 0,
          height: 0,
          src: e3 && e3.url || ""
        };
      });
    }
    ready() {
      const loader2 = this;
      return new Promise((accept) => {
        function poll(value2) {
          if (!loader2.pending()) accept(value2);
          else setTimeout(() => {
            poll(true);
          }, 10);
        }
        poll(false);
      });
    }
  }
  function increment(loader2) {
    loader2._pending += 1;
  }
  function decrement(loader2) {
    loader2._pending -= 1;
  }
  function boundStroke(bounds2, item, miter) {
    if (item.stroke && item.opacity !== 0 && item.strokeOpacity !== 0) {
      const sw = item.strokeWidth != null ? +item.strokeWidth : 1;
      bounds2.expand(sw + (miter ? miterAdjustment(item, sw) : 0));
    }
    return bounds2;
  }
  function miterAdjustment(item, strokeWidth2) {
    return item.strokeJoin && item.strokeJoin !== "miter" ? 0 : strokeWidth2;
  }
  const circleThreshold = Tau - 1e-8;
  let bounds, lx, ly, rot, ma, mb, mc, md;
  const add$2 = (x2, y2) => bounds.add(x2, y2);
  const addL = (x2, y2) => add$2(lx = x2, ly = y2);
  const addX = (x2) => add$2(x2, bounds.y1);
  const addY = (y2) => add$2(bounds.x1, y2);
  const px = (x2, y2) => ma * x2 + mc * y2;
  const py = (x2, y2) => mb * x2 + md * y2;
  const addp = (x2, y2) => add$2(px(x2, y2), py(x2, y2));
  const addpL = (x2, y2) => addL(px(x2, y2), py(x2, y2));
  function boundContext(_, deg) {
    bounds = _;
    if (deg) {
      rot = deg * DegToRad;
      ma = md = Math.cos(rot);
      mb = Math.sin(rot);
      mc = -mb;
    } else {
      ma = md = 1;
      rot = mb = mc = 0;
    }
    return context$1;
  }
  const context$1 = {
    beginPath() {
    },
    closePath() {
    },
    moveTo: addpL,
    lineTo: addpL,
    rect(x2, y2, w2, h2) {
      if (rot) {
        addp(x2 + w2, y2);
        addp(x2 + w2, y2 + h2);
        addp(x2, y2 + h2);
        addpL(x2, y2);
      } else {
        add$2(x2 + w2, y2 + h2);
        addL(x2, y2);
      }
    },
    quadraticCurveTo(x12, y12, x2, y2) {
      const px1 = px(x12, y12), py1 = py(x12, y12), px2 = px(x2, y2), py2 = py(x2, y2);
      quadExtrema(lx, px1, px2, addX);
      quadExtrema(ly, py1, py2, addY);
      addL(px2, py2);
    },
    bezierCurveTo(x12, y12, x2, y2, x3, y3) {
      const px1 = px(x12, y12), py1 = py(x12, y12), px2 = px(x2, y2), py2 = py(x2, y2), px3 = px(x3, y3), py3 = py(x3, y3);
      cubicExtrema(lx, px1, px2, px3, addX);
      cubicExtrema(ly, py1, py2, py3, addY);
      addL(px3, py3);
    },
    arc(cx, cy, r, sa2, ea2, ccw) {
      sa2 += rot;
      ea2 += rot;
      lx = r * Math.cos(ea2) + cx;
      ly = r * Math.sin(ea2) + cy;
      if (Math.abs(ea2 - sa2) > circleThreshold) {
        add$2(cx - r, cy - r);
        add$2(cx + r, cy + r);
      } else {
        const update2 = (a2) => add$2(r * Math.cos(a2) + cx, r * Math.sin(a2) + cy);
        let s, i;
        update2(sa2);
        update2(ea2);
        if (ea2 !== sa2) {
          sa2 = sa2 % Tau;
          if (sa2 < 0) sa2 += Tau;
          ea2 = ea2 % Tau;
          if (ea2 < 0) ea2 += Tau;
          if (ea2 < sa2) {
            ccw = !ccw;
            s = sa2;
            sa2 = ea2;
            ea2 = s;
          }
          if (ccw) {
            ea2 -= Tau;
            s = sa2 - sa2 % HalfPi;
            for (i = 0; i < 4 && s > ea2; ++i, s -= HalfPi) update2(s);
          } else {
            s = sa2 - sa2 % HalfPi + HalfPi;
            for (i = 0; i < 4 && s < ea2; ++i, s = s + HalfPi) update2(s);
          }
        }
      }
    }
  };
  function quadExtrema(x02, x12, x2, cb) {
    const t = (x02 - x12) / (x02 + x2 - 2 * x12);
    if (0 < t && t < 1) cb(x02 + (x12 - x02) * t);
  }
  function cubicExtrema(x02, x12, x2, x3, cb) {
    const a2 = x3 - x02 + 3 * x12 - 3 * x2, b2 = x02 + x2 - 2 * x12, c2 = x02 - x12;
    let t02 = 0, t12 = 0, r;
    if (Math.abs(a2) > Epsilon) {
      r = b2 * b2 + c2 * a2;
      if (r >= 0) {
        r = Math.sqrt(r);
        t02 = (-b2 + r) / a2;
        t12 = (-b2 - r) / a2;
      }
    } else {
      t02 = 0.5 * c2 / b2;
    }
    if (0 < t02 && t02 < 1) cb(cubic(t02, x02, x12, x2, x3));
    if (0 < t12 && t12 < 1) cb(cubic(t12, x02, x12, x2, x3));
  }
  function cubic(t, x02, x12, x2, x3) {
    const s = 1 - t, s2 = s * s, t22 = t * t;
    return s2 * s * x02 + 3 * s2 * t * x12 + 3 * s * t22 * x2 + t22 * t * x3;
  }
  var context$2 = (context$2 = domCanvas(1, 1)) ? context$2.getContext("2d") : null;
  const b = new Bounds();
  function intersectPath(draw2) {
    return function(item, brush) {
      if (!context$2) return true;
      draw2(context$2, item);
      b.clear().union(item.bounds).intersect(brush).round();
      const {
        x1: x12,
        y1: y12,
        x2,
        y2
      } = b;
      for (let y3 = y12; y3 <= y2; ++y3) {
        for (let x3 = x12; x3 <= x2; ++x3) {
          if (context$2.isPointInPath(x3, y3)) {
            return true;
          }
        }
      }
      return false;
    };
  }
  function intersectPoint(item, box) {
    return box.contains(item.x || 0, item.y || 0);
  }
  function intersectRect(item, box) {
    const x2 = item.x || 0, y2 = item.y || 0, w2 = item.width || 0, h2 = item.height || 0;
    return box.intersects(b.set(x2, y2, x2 + w2, y2 + h2));
  }
  function intersectRule(item, box) {
    const x2 = item.x || 0, y2 = item.y || 0, x22 = item.x2 != null ? item.x2 : x2, y22 = item.y2 != null ? item.y2 : y2;
    return intersectBoxLine(box, x2, y2, x22, y22);
  }
  function intersectBoxLine(box, x2, y2, u2, v) {
    const {
      x1: x12,
      y1: y12,
      x2: x22,
      y2: y22
    } = box, dx = u2 - x2, dy = v - y2;
    let t02 = 0, t12 = 1, p, q, r, e3;
    for (e3 = 0; e3 < 4; ++e3) {
      if (e3 === 0) {
        p = -dx;
        q = -(x12 - x2);
      }
      if (e3 === 1) {
        p = dx;
        q = x22 - x2;
      }
      if (e3 === 2) {
        p = -dy;
        q = -(y12 - y2);
      }
      if (e3 === 3) {
        p = dy;
        q = y22 - y2;
      }
      if (Math.abs(p) < 1e-10 && q < 0) return false;
      r = q / p;
      if (p < 0) {
        if (r > t12) return false;
        else if (r > t02) t02 = r;
      } else if (p > 0) {
        if (r < t02) return false;
        else if (r < t12) t12 = r;
      }
    }
    return true;
  }
  function blend(context2, item) {
    context2.globalCompositeOperation = item.blend || "source-over";
  }
  function value$2(value2, dflt) {
    return value2 == null ? dflt : value2;
  }
  function addStops(gradient2, stops) {
    const n = stops.length;
    for (let i = 0; i < n; ++i) {
      gradient2.addColorStop(stops[i].offset, stops[i].color);
    }
    return gradient2;
  }
  function gradient$2(context2, spec, bounds2) {
    const w2 = bounds2.width(), h2 = bounds2.height();
    let gradient2;
    if (spec.gradient === "radial") {
      gradient2 = context2.createRadialGradient(bounds2.x1 + value$2(spec.x1, 0.5) * w2, bounds2.y1 + value$2(spec.y1, 0.5) * h2, Math.max(w2, h2) * value$2(spec.r1, 0), bounds2.x1 + value$2(spec.x2, 0.5) * w2, bounds2.y1 + value$2(spec.y2, 0.5) * h2, Math.max(w2, h2) * value$2(spec.r2, 0.5));
    } else {
      const x12 = value$2(spec.x1, 0), y12 = value$2(spec.y1, 0), x2 = value$2(spec.x2, 1), y2 = value$2(spec.y2, 0);
      if (x12 === x2 || y12 === y2 || w2 === h2) {
        gradient2 = context2.createLinearGradient(bounds2.x1 + x12 * w2, bounds2.y1 + y12 * h2, bounds2.x1 + x2 * w2, bounds2.y1 + y2 * h2);
      } else {
        const image2 = domCanvas(Math.ceil(w2), Math.ceil(h2)), ictx = image2.getContext("2d");
        ictx.scale(w2, h2);
        ictx.fillStyle = addStops(ictx.createLinearGradient(x12, y12, x2, y2), spec.stops);
        ictx.fillRect(0, 0, w2, h2);
        return context2.createPattern(image2, "no-repeat");
      }
    }
    return addStops(gradient2, spec.stops);
  }
  function color$2(context2, item, value2) {
    return isGradient(value2) ? gradient$2(context2, value2, item.bounds) : value2;
  }
  function fill(context2, item, opacity2) {
    opacity2 *= item.fillOpacity == null ? 1 : item.fillOpacity;
    if (opacity2 > 0) {
      context2.globalAlpha = opacity2;
      context2.fillStyle = color$2(context2, item, item.fill);
      return true;
    } else {
      return false;
    }
  }
  var Empty = [];
  function stroke(context2, item, opacity2) {
    var lw = (lw = item.strokeWidth) != null ? lw : 1;
    if (lw <= 0) return false;
    opacity2 *= item.strokeOpacity == null ? 1 : item.strokeOpacity;
    if (opacity2 > 0) {
      context2.globalAlpha = opacity2;
      context2.strokeStyle = color$2(context2, item, item.stroke);
      context2.lineWidth = lw;
      context2.lineCap = item.strokeCap || "butt";
      context2.lineJoin = item.strokeJoin || "miter";
      context2.miterLimit = item.strokeMiterLimit || 10;
      if (context2.setLineDash) {
        context2.setLineDash(item.strokeDash || Empty);
        context2.lineDashOffset = item.strokeDashOffset || 0;
      }
      return true;
    } else {
      return false;
    }
  }
  function compare$1(a2, b2) {
    return a2.zindex - b2.zindex || a2.index - b2.index;
  }
  function zorder(scene) {
    if (!scene.zdirty) return scene.zitems;
    var items = scene.items, output2 = [], item, i, n;
    for (i = 0, n = items.length; i < n; ++i) {
      item = items[i];
      item.index = i;
      if (item.zindex) output2.push(item);
    }
    scene.zdirty = false;
    return scene.zitems = output2.sort(compare$1);
  }
  function visit(scene, visitor) {
    var items = scene.items, i, n;
    if (!items || !items.length) return;
    const zitems = zorder(scene);
    if (zitems && zitems.length) {
      for (i = 0, n = items.length; i < n; ++i) {
        if (!items[i].zindex) visitor(items[i]);
      }
      items = zitems;
    }
    for (i = 0, n = items.length; i < n; ++i) {
      visitor(items[i]);
    }
  }
  function pickVisit(scene, visitor) {
    var items = scene.items, hit2, i;
    if (!items || !items.length) return null;
    const zitems = zorder(scene);
    if (zitems && zitems.length) items = zitems;
    for (i = items.length; --i >= 0; ) {
      if (hit2 = visitor(items[i])) return hit2;
    }
    if (items === zitems) {
      for (items = scene.items, i = items.length; --i >= 0; ) {
        if (!items[i].zindex) {
          if (hit2 = visitor(items[i])) return hit2;
        }
      }
    }
    return null;
  }
  function drawAll(path2) {
    return function(context2, scene, bounds2) {
      visit(scene, (item) => {
        if (!bounds2 || bounds2.intersects(item.bounds)) {
          drawPath(path2, context2, item, item);
        }
      });
    };
  }
  function drawOne(path2) {
    return function(context2, scene, bounds2) {
      if (scene.items.length && (!bounds2 || bounds2.intersects(scene.bounds))) {
        drawPath(path2, context2, scene.items[0], scene.items);
      }
    };
  }
  function drawPath(path2, context2, item, items) {
    var opacity2 = item.opacity == null ? 1 : item.opacity;
    if (opacity2 === 0) return;
    if (path2(context2, items)) return;
    blend(context2, item);
    if (item.fill && fill(context2, item, opacity2)) {
      context2.fill();
    }
    if (item.stroke && stroke(context2, item, opacity2)) {
      context2.stroke();
    }
  }
  function pick$1(test2) {
    test2 = test2 || truthy;
    return function(context2, scene, x2, y2, gx, gy) {
      x2 *= context2.pixelRatio;
      y2 *= context2.pixelRatio;
      return pickVisit(scene, (item) => {
        const b2 = item.bounds;
        if (b2 && !b2.contains(gx, gy) || !b2) return;
        if (test2(context2, item, x2, y2, gx, gy)) return item;
      });
    };
  }
  function hitPath(path2, filled) {
    return function(context2, o, x2, y2) {
      var item = Array.isArray(o) ? o[0] : o, fill2 = filled == null ? item.fill : filled, stroke2 = item.stroke && context2.isPointInStroke, lw, lc;
      if (stroke2) {
        lw = item.strokeWidth;
        lc = item.strokeCap;
        context2.lineWidth = lw != null ? lw : 1;
        context2.lineCap = lc != null ? lc : "butt";
      }
      return path2(context2, o) ? false : fill2 && context2.isPointInPath(x2, y2) || stroke2 && context2.isPointInStroke(x2, y2);
    };
  }
  function pickPath(path2) {
    return pick$1(hitPath(path2));
  }
  function translate$2(x2, y2) {
    return "translate(" + x2 + "," + y2 + ")";
  }
  function rotate(a2) {
    return "rotate(" + a2 + ")";
  }
  function scale$3(scaleX, scaleY2) {
    return "scale(" + scaleX + "," + scaleY2 + ")";
  }
  function translateItem(item) {
    return translate$2(item.x || 0, item.y || 0);
  }
  function rotateItem(item) {
    return translate$2(item.x || 0, item.y || 0) + (item.angle ? " " + rotate(item.angle) : "");
  }
  function transformItem(item) {
    return translate$2(item.x || 0, item.y || 0) + (item.angle ? " " + rotate(item.angle) : "") + (item.scaleX || item.scaleY ? " " + scale$3(item.scaleX || 1, item.scaleY || 1) : "");
  }
  function markItemPath(type2, shape2, isect) {
    function attr2(emit2, item) {
      emit2("transform", rotateItem(item));
      emit2("d", shape2(null, item));
    }
    function bound2(bounds2, item) {
      shape2(boundContext(bounds2, item.angle), item);
      return boundStroke(bounds2, item).translate(item.x || 0, item.y || 0);
    }
    function draw2(context2, item) {
      var x2 = item.x || 0, y2 = item.y || 0, a2 = item.angle || 0;
      context2.translate(x2, y2);
      if (a2) context2.rotate(a2 *= DegToRad);
      context2.beginPath();
      shape2(context2, item);
      if (a2) context2.rotate(-a2);
      context2.translate(-x2, -y2);
    }
    return {
      type: type2,
      tag: "path",
      nested: false,
      attr: attr2,
      bound: bound2,
      draw: drawAll(draw2),
      pick: pickPath(draw2),
      isect: isect || intersectPath(draw2)
    };
  }
  var arc$2 = markItemPath("arc", arc$1$1);
  function pickArea(a2, p) {
    var v = a2[0].orient === "horizontal" ? p[1] : p[0], z = a2[0].orient === "horizontal" ? "y" : "x", i = a2.length, min2 = Infinity, hit2, d;
    while (--i >= 0) {
      if (a2[i].defined === false) continue;
      d = Math.abs(a2[i][z] - v);
      if (d < min2) {
        min2 = d;
        hit2 = a2[i];
      }
    }
    return hit2;
  }
  function pickLine(a2, p) {
    var t = Math.pow(a2[0].strokeWidth || 1, 2), i = a2.length, dx, dy, dd;
    while (--i >= 0) {
      if (a2[i].defined === false) continue;
      dx = a2[i].x - p[0];
      dy = a2[i].y - p[1];
      dd = dx * dx + dy * dy;
      if (dd < t) return a2[i];
    }
    return null;
  }
  function pickTrail(a2, p) {
    var i = a2.length, dx, dy, dd;
    while (--i >= 0) {
      if (a2[i].defined === false) continue;
      dx = a2[i].x - p[0];
      dy = a2[i].y - p[1];
      dd = dx * dx + dy * dy;
      dx = a2[i].size || 1;
      if (dd < dx * dx) return a2[i];
    }
    return null;
  }
  function markMultiItemPath(type2, shape2, tip) {
    function attr2(emit2, item) {
      var items = item.mark.items;
      if (items.length) emit2("d", shape2(null, items));
    }
    function bound2(bounds2, mark) {
      var items = mark.items;
      if (items.length === 0) {
        return bounds2;
      } else {
        shape2(boundContext(bounds2), items);
        return boundStroke(bounds2, items[0]);
      }
    }
    function draw2(context2, items) {
      context2.beginPath();
      shape2(context2, items);
    }
    const hit2 = hitPath(draw2);
    function pick2(context2, scene, x2, y2, gx, gy) {
      var items = scene.items, b2 = scene.bounds;
      if (!items || !items.length || b2 && !b2.contains(gx, gy)) {
        return null;
      }
      x2 *= context2.pixelRatio;
      y2 *= context2.pixelRatio;
      return hit2(context2, items, x2, y2) ? items[0] : null;
    }
    return {
      type: type2,
      tag: "path",
      nested: true,
      attr: attr2,
      bound: bound2,
      draw: drawOne(draw2),
      pick: pick2,
      isect: intersectPoint,
      tip
    };
  }
  var area$2 = markMultiItemPath("area", area$1$1, pickArea);
  function clip$2(context2, scene) {
    var clip2 = scene.clip;
    context2.save();
    if (isFunction(clip2)) {
      context2.beginPath();
      clip2(context2);
      context2.clip();
    } else {
      clipGroup(context2, scene.group);
    }
  }
  function clipGroup(context2, group2) {
    context2.beginPath();
    hasCornerRadius(group2) ? rectangle(context2, group2, 0, 0) : context2.rect(0, 0, group2.width || 0, group2.height || 0);
    context2.clip();
  }
  function offset$1(item) {
    const sw = value$2(item.strokeWidth, 1);
    return item.strokeOffset != null ? item.strokeOffset : item.stroke && sw > 0.5 && sw < 1.5 ? 0.5 - Math.abs(sw - 1) : 0;
  }
  function attr$5(emit2, item) {
    emit2("transform", translateItem(item));
  }
  function emitRectangle(emit2, item) {
    const off = offset$1(item);
    emit2("d", rectangle(null, item, off, off));
  }
  function background$1(emit2, item) {
    emit2("class", "background");
    emit2("aria-hidden", true);
    emitRectangle(emit2, item);
  }
  function foreground(emit2, item) {
    emit2("class", "foreground");
    emit2("aria-hidden", true);
    if (item.strokeForeground) {
      emitRectangle(emit2, item);
    } else {
      emit2("d", "");
    }
  }
  function content(emit2, item, renderer) {
    const url = item.clip ? clip$1$1(renderer, item, item) : null;
    emit2("clip-path", url);
  }
  function bound$5(bounds2, group2) {
    if (!group2.clip && group2.items) {
      const items = group2.items, m2 = items.length;
      for (let j = 0; j < m2; ++j) {
        bounds2.union(items[j].bounds);
      }
    }
    if ((group2.clip || group2.width || group2.height) && !group2.noBound) {
      bounds2.add(0, 0).add(group2.width || 0, group2.height || 0);
    }
    boundStroke(bounds2, group2);
    return bounds2.translate(group2.x || 0, group2.y || 0);
  }
  function rectanglePath(context2, group2, x2, y2) {
    const off = offset$1(group2);
    context2.beginPath();
    rectangle(context2, group2, (x2 || 0) + off, (y2 || 0) + off);
  }
  const hitBackground = hitPath(rectanglePath);
  const hitForeground = hitPath(rectanglePath, false);
  const hitCorner = hitPath(rectanglePath, true);
  function draw$4(context2, scene, bounds2, markTypes) {
    visit(scene, (group2) => {
      const gx = group2.x || 0, gy = group2.y || 0, fore = group2.strokeForeground, opacity2 = group2.opacity == null ? 1 : group2.opacity;
      if ((group2.stroke || group2.fill) && opacity2) {
        rectanglePath(context2, group2, gx, gy);
        blend(context2, group2);
        if (group2.fill && fill(context2, group2, opacity2)) {
          context2.fill();
        }
        if (group2.stroke && !fore && stroke(context2, group2, opacity2)) {
          context2.stroke();
        }
      }
      context2.save();
      context2.translate(gx, gy);
      if (group2.clip) clipGroup(context2, group2);
      if (bounds2) bounds2.translate(-gx, -gy);
      visit(group2, (item) => {
        if (item.marktype === "group" || markTypes == null || markTypes.includes(item.marktype)) {
          this.draw(context2, item, bounds2, markTypes);
        }
      });
      if (bounds2) bounds2.translate(gx, gy);
      context2.restore();
      if (fore && group2.stroke && opacity2) {
        rectanglePath(context2, group2, gx, gy);
        blend(context2, group2);
        if (stroke(context2, group2, opacity2)) {
          context2.stroke();
        }
      }
    });
  }
  function pick$2(context2, scene, x2, y2, gx, gy) {
    if (scene.bounds && !scene.bounds.contains(gx, gy) || !scene.items) {
      return null;
    }
    const cx = x2 * context2.pixelRatio, cy = y2 * context2.pixelRatio;
    return pickVisit(scene, (group2) => {
      let hit2, dx, dy;
      const b2 = group2.bounds;
      if (b2 && !b2.contains(gx, gy)) return;
      dx = group2.x || 0;
      dy = group2.y || 0;
      const dw = dx + (group2.width || 0), dh = dy + (group2.height || 0), c2 = group2.clip;
      if (c2 && (gx < dx || gx > dw || gy < dy || gy > dh)) return;
      context2.save();
      context2.translate(dx, dy);
      dx = gx - dx;
      dy = gy - dy;
      if (c2 && hasCornerRadius(group2) && !hitCorner(context2, group2, cx, cy)) {
        context2.restore();
        return null;
      }
      const fore = group2.strokeForeground, ix = scene.interactive !== false;
      if (ix && fore && group2.stroke && hitForeground(context2, group2, cx, cy)) {
        context2.restore();
        return group2;
      }
      hit2 = pickVisit(group2, (mark) => pickMark(mark, dx, dy) ? this.pick(mark, x2, y2, dx, dy) : null);
      if (!hit2 && ix && (group2.fill || !fore && group2.stroke) && hitBackground(context2, group2, cx, cy)) {
        hit2 = group2;
      }
      context2.restore();
      return hit2 || null;
    });
  }
  function pickMark(mark, x2, y2) {
    return (mark.interactive !== false || mark.marktype === "group") && mark.bounds && mark.bounds.contains(x2, y2);
  }
  var group = {
    type: "group",
    tag: "g",
    nested: false,
    attr: attr$5,
    bound: bound$5,
    draw: draw$4,
    pick: pick$2,
    isect: intersectRect,
    content,
    background: background$1,
    foreground
  };
  var metadata = {
    "xmlns": "http://www.w3.org/2000/svg",
    "xmlns:xlink": "http://www.w3.org/1999/xlink",
    "version": "1.1"
  };
  function getImage(item, renderer) {
    var image2 = item.image;
    if (!image2 || item.url && item.url !== image2.url) {
      image2 = {
        complete: false,
        width: 0,
        height: 0
      };
      renderer.loadImage(item.url).then((image3) => {
        item.image = image3;
        item.image.url = item.url;
      });
    }
    return image2;
  }
  function imageWidth(item, image2) {
    return item.width != null ? item.width : !image2 || !image2.width ? 0 : item.aspect !== false && item.height ? item.height * image2.width / image2.height : image2.width;
  }
  function imageHeight(item, image2) {
    return item.height != null ? item.height : !image2 || !image2.height ? 0 : item.aspect !== false && item.width ? item.width * image2.height / image2.width : image2.height;
  }
  function imageXOffset(align2, w2) {
    return align2 === "center" ? w2 / 2 : align2 === "right" ? w2 : 0;
  }
  function imageYOffset(baseline2, h2) {
    return baseline2 === "middle" ? h2 / 2 : baseline2 === "bottom" ? h2 : 0;
  }
  function attr$4(emit2, item, renderer) {
    const img = getImage(item, renderer), w2 = imageWidth(item, img), h2 = imageHeight(item, img), x2 = (item.x || 0) - imageXOffset(item.align, w2), y2 = (item.y || 0) - imageYOffset(item.baseline, h2), i = !img.src && img.toDataURL ? img.toDataURL() : img.src || "";
    emit2("href", i, metadata["xmlns:xlink"], "xlink:href");
    emit2("transform", translate$2(x2, y2));
    emit2("width", w2);
    emit2("height", h2);
    emit2("preserveAspectRatio", item.aspect === false ? "none" : "xMidYMid");
  }
  function bound$4(bounds2, item) {
    const img = item.image, w2 = imageWidth(item, img), h2 = imageHeight(item, img), x2 = (item.x || 0) - imageXOffset(item.align, w2), y2 = (item.y || 0) - imageYOffset(item.baseline, h2);
    return bounds2.set(x2, y2, x2 + w2, y2 + h2);
  }
  function draw$3(context2, scene, bounds2) {
    visit(scene, (item) => {
      if (bounds2 && !bounds2.intersects(item.bounds)) return;
      const img = getImage(item, this);
      let w2 = imageWidth(item, img);
      let h2 = imageHeight(item, img);
      if (w2 === 0 || h2 === 0) return;
      let x2 = (item.x || 0) - imageXOffset(item.align, w2), y2 = (item.y || 0) - imageYOffset(item.baseline, h2), opacity2, ar0, ar1, t;
      if (item.aspect !== false) {
        ar0 = img.width / img.height;
        ar1 = item.width / item.height;
        if (ar0 === ar0 && ar1 === ar1 && ar0 !== ar1) {
          if (ar1 < ar0) {
            t = w2 / ar0;
            y2 += (h2 - t) / 2;
            h2 = t;
          } else {
            t = h2 * ar0;
            x2 += (w2 - t) / 2;
            w2 = t;
          }
        }
      }
      if (img.complete || img.toDataURL) {
        blend(context2, item);
        context2.globalAlpha = (opacity2 = item.opacity) != null ? opacity2 : 1;
        context2.imageSmoothingEnabled = item.smooth !== false;
        context2.drawImage(img, x2, y2, w2, h2);
      }
    });
  }
  var image$1 = {
    type: "image",
    tag: "image",
    nested: false,
    attr: attr$4,
    bound: bound$4,
    draw: draw$3,
    pick: pick$1(),
    isect: truthy,
    // bounds check is sufficient
    get: getImage,
    xOffset: imageXOffset,
    yOffset: imageYOffset
  };
  var line$2 = markMultiItemPath("line", line$1$1, pickLine);
  function attr$3(emit2, item) {
    var sx = item.scaleX || 1, sy = item.scaleY || 1;
    if (sx !== 1 || sy !== 1) {
      emit2("vector-effect", "non-scaling-stroke");
    }
    emit2("transform", transformItem(item));
    emit2("d", item.path);
  }
  function path$1(context2, item) {
    var path2 = item.path;
    if (path2 == null) return true;
    var x2 = item.x || 0, y2 = item.y || 0, sx = item.scaleX || 1, sy = item.scaleY || 1, a2 = (item.angle || 0) * DegToRad, cache2 = item.pathCache;
    if (!cache2 || cache2.path !== path2) {
      (item.pathCache = cache2 = parse$3(path2)).path = path2;
    }
    if (a2 && context2.rotate && context2.translate) {
      context2.translate(x2, y2);
      context2.rotate(a2);
      pathRender(context2, cache2, 0, 0, sx, sy);
      context2.rotate(-a2);
      context2.translate(-x2, -y2);
    } else {
      pathRender(context2, cache2, x2, y2, sx, sy);
    }
  }
  function bound$3(bounds2, item) {
    return path$1(boundContext(bounds2, item.angle), item) ? bounds2.set(0, 0, 0, 0) : boundStroke(bounds2, item, true);
  }
  var path$2 = {
    type: "path",
    tag: "path",
    nested: false,
    attr: attr$3,
    bound: bound$3,
    draw: drawAll(path$1),
    pick: pickPath(path$1),
    isect: intersectPath(path$1)
  };
  function attr$2(emit2, item) {
    emit2("d", rectangle(null, item));
  }
  function bound$2(bounds2, item) {
    var x2, y2;
    return boundStroke(bounds2.set(x2 = item.x || 0, y2 = item.y || 0, x2 + item.width || 0, y2 + item.height || 0), item);
  }
  function draw$2(context2, item) {
    context2.beginPath();
    rectangle(context2, item);
  }
  var rect$1 = {
    type: "rect",
    tag: "path",
    nested: false,
    attr: attr$2,
    bound: bound$2,
    draw: drawAll(draw$2),
    pick: pickPath(draw$2),
    isect: intersectRect
  };
  function attr$1(emit2, item) {
    emit2("transform", translateItem(item));
    emit2("x2", item.x2 != null ? item.x2 - (item.x || 0) : 0);
    emit2("y2", item.y2 != null ? item.y2 - (item.y || 0) : 0);
  }
  function bound$1(bounds2, item) {
    var x12, y12;
    return boundStroke(bounds2.set(x12 = item.x || 0, y12 = item.y || 0, item.x2 != null ? item.x2 : x12, item.y2 != null ? item.y2 : y12), item);
  }
  function path(context2, item, opacity2) {
    var x12, y12, x2, y2;
    if (item.stroke && stroke(context2, item, opacity2)) {
      x12 = item.x || 0;
      y12 = item.y || 0;
      x2 = item.x2 != null ? item.x2 : x12;
      y2 = item.y2 != null ? item.y2 : y12;
      context2.beginPath();
      context2.moveTo(x12, y12);
      context2.lineTo(x2, y2);
      return true;
    }
    return false;
  }
  function draw$1(context2, scene, bounds2) {
    visit(scene, (item) => {
      if (bounds2 && !bounds2.intersects(item.bounds)) return;
      var opacity2 = item.opacity == null ? 1 : item.opacity;
      if (opacity2 && path(context2, item, opacity2)) {
        blend(context2, item);
        context2.stroke();
      }
    });
  }
  function hit$1(context2, item, x2, y2) {
    if (!context2.isPointInStroke) return false;
    return path(context2, item, 1) && context2.isPointInStroke(x2, y2);
  }
  var rule$2 = {
    type: "rule",
    tag: "line",
    nested: false,
    attr: attr$1,
    bound: bound$1,
    draw: draw$1,
    pick: pick$1(hit$1),
    isect: intersectRule
  };
  var shape = markItemPath("shape", shape$1);
  var symbol = markItemPath("symbol", symbol$1, intersectPoint);
  const widthCache = lruCache();
  var textMetrics = {
    height: fontSize,
    measureWidth,
    estimateWidth,
    width: estimateWidth,
    canvas: useCanvas
  };
  useCanvas(true);
  function useCanvas(use) {
    textMetrics.width = use && context$2 ? measureWidth : estimateWidth;
  }
  function estimateWidth(item, text2) {
    return _estimateWidth(textValue(item, text2), fontSize(item));
  }
  function _estimateWidth(text2, currentFontHeight) {
    return ~~(0.8 * text2.length * currentFontHeight);
  }
  function measureWidth(item, text2) {
    return fontSize(item) <= 0 || !(text2 = textValue(item, text2)) ? 0 : _measureWidth(text2, font$1(item));
  }
  function _measureWidth(text2, currentFont) {
    const key2 = `(${currentFont}) ${text2}`;
    let width2 = widthCache.get(key2);
    if (width2 === void 0) {
      context$2.font = currentFont;
      width2 = context$2.measureText(text2).width;
      widthCache.set(key2, width2);
    }
    return width2;
  }
  function fontSize(item) {
    return item.fontSize != null ? +item.fontSize || 0 : 11;
  }
  function lineHeight(item) {
    return item.lineHeight != null ? item.lineHeight : fontSize(item) + 2;
  }
  function lineArray(_) {
    return isArray(_) ? _.length > 1 ? _ : _[0] : _;
  }
  function textLines(item) {
    return lineArray(item.lineBreak && item.text && !isArray(item.text) ? item.text.split(item.lineBreak) : item.text);
  }
  function multiLineOffset(item) {
    const tl2 = textLines(item);
    return (isArray(tl2) ? tl2.length - 1 : 0) * lineHeight(item);
  }
  function textValue(item, line2) {
    const text2 = line2 == null ? "" : (line2 + "").trim();
    return item.limit > 0 && text2.length ? truncate(item, text2) : text2;
  }
  function widthGetter(item) {
    if (textMetrics.width === measureWidth) {
      const currentFont = font$1(item);
      return (text2) => _measureWidth(text2, currentFont);
    } else if (textMetrics.width === estimateWidth) {
      const currentFontHeight = fontSize(item);
      return (text2) => _estimateWidth(text2, currentFontHeight);
    } else {
      return (text2) => textMetrics.width(item, text2);
    }
  }
  function truncate(item, text2) {
    var limit = +item.limit, width2 = widthGetter(item);
    if (width2(text2) < limit) return text2;
    var ellipsis = item.ellipsis || "…", rtl = item.dir === "rtl", lo = 0, hi = text2.length, mid;
    limit -= width2(ellipsis);
    if (rtl) {
      while (lo < hi) {
        mid = lo + hi >>> 1;
        if (width2(text2.slice(mid)) > limit) lo = mid + 1;
        else hi = mid;
      }
      return ellipsis + text2.slice(lo);
    } else {
      while (lo < hi) {
        mid = 1 + (lo + hi >>> 1);
        if (width2(text2.slice(0, mid)) < limit) lo = mid;
        else hi = mid - 1;
      }
      return text2.slice(0, lo) + ellipsis;
    }
  }
  function fontFamily(item, quote) {
    var font2 = item.font;
    return (quote && font2 ? String(font2).replace(/"/g, "'") : font2) || "sans-serif";
  }
  function font$1(item, quote) {
    return (item.fontStyle ? item.fontStyle + " " : "") + (item.fontVariant ? item.fontVariant + " " : "") + (item.fontWeight ? item.fontWeight + " " : "") + fontSize(item) + "px " + fontFamily(item, quote);
  }
  function offset$2(item) {
    var baseline2 = item.baseline, h2 = fontSize(item);
    return Math.round(baseline2 === "top" ? 0.79 * h2 : baseline2 === "middle" ? 0.3 * h2 : baseline2 === "bottom" ? -0.21 * h2 : baseline2 === "line-top" ? 0.29 * h2 + 0.5 * lineHeight(item) : baseline2 === "line-bottom" ? 0.29 * h2 - 0.5 * lineHeight(item) : 0);
  }
  const textAlign = {
    "left": "start",
    "center": "middle",
    "right": "end"
  };
  const tempBounds$1 = new Bounds();
  function anchorPoint(item) {
    var x2 = item.x || 0, y2 = item.y || 0, r = item.radius || 0, t;
    if (r) {
      t = (item.theta || 0) - HalfPi;
      x2 += r * Math.cos(t);
      y2 += r * Math.sin(t);
    }
    tempBounds$1.x1 = x2;
    tempBounds$1.y1 = y2;
    return tempBounds$1;
  }
  function attr(emit2, item) {
    var dx = item.dx || 0, dy = (item.dy || 0) + offset$2(item), p = anchorPoint(item), x2 = p.x1, y2 = p.y1, a2 = item.angle || 0, t;
    emit2("text-anchor", textAlign[item.align] || "start");
    if (a2) {
      t = translate$2(x2, y2) + " " + rotate(a2);
      if (dx || dy) t += " " + translate$2(dx, dy);
    } else {
      t = translate$2(x2 + dx, y2 + dy);
    }
    emit2("transform", t);
  }
  function bound(bounds2, item, mode2) {
    var h2 = textMetrics.height(item), a2 = item.align, p = anchorPoint(item), x2 = p.x1, y2 = p.y1, dx = item.dx || 0, dy = (item.dy || 0) + offset$2(item) - Math.round(0.8 * h2), tl2 = textLines(item), w2;
    if (isArray(tl2)) {
      h2 += lineHeight(item) * (tl2.length - 1);
      w2 = tl2.reduce((w3, t) => Math.max(w3, textMetrics.width(item, t)), 0);
    } else {
      w2 = textMetrics.width(item, tl2);
    }
    if (a2 === "center") {
      dx -= w2 / 2;
    } else if (a2 === "right") {
      dx -= w2;
    } else ;
    bounds2.set(dx += x2, dy += y2, dx + w2, dy + h2);
    if (item.angle && !mode2) {
      bounds2.rotate(item.angle * DegToRad, x2, y2);
    } else if (mode2 === 2) {
      return bounds2.rotatedPoints(item.angle * DegToRad, x2, y2);
    }
    return bounds2;
  }
  function draw$5(context2, scene, bounds2) {
    visit(scene, (item) => {
      var opacity2 = item.opacity == null ? 1 : item.opacity, p, x2, y2, i, lh, tl2, str;
      if (bounds2 && !bounds2.intersects(item.bounds) || // bounds check
      opacity2 === 0 || item.fontSize <= 0 || item.text == null || item.text.length === 0) return;
      context2.font = font$1(item);
      context2.textAlign = item.align || "left";
      p = anchorPoint(item);
      x2 = p.x1, y2 = p.y1;
      if (item.angle) {
        context2.save();
        context2.translate(x2, y2);
        context2.rotate(item.angle * DegToRad);
        x2 = y2 = 0;
      }
      x2 += item.dx || 0;
      y2 += (item.dy || 0) + offset$2(item);
      tl2 = textLines(item);
      blend(context2, item);
      if (isArray(tl2)) {
        lh = lineHeight(item);
        for (i = 0; i < tl2.length; ++i) {
          str = textValue(item, tl2[i]);
          if (item.fill && fill(context2, item, opacity2)) {
            context2.fillText(str, x2, y2);
          }
          if (item.stroke && stroke(context2, item, opacity2)) {
            context2.strokeText(str, x2, y2);
          }
          y2 += lh;
        }
      } else {
        str = textValue(item, tl2);
        if (item.fill && fill(context2, item, opacity2)) {
          context2.fillText(str, x2, y2);
        }
        if (item.stroke && stroke(context2, item, opacity2)) {
          context2.strokeText(str, x2, y2);
        }
      }
      if (item.angle) context2.restore();
    });
  }
  function hit(context2, item, x2, y2, gx, gy) {
    if (item.fontSize <= 0) return false;
    if (!item.angle) return true;
    var p = anchorPoint(item), ax = p.x1, ay = p.y1, b2 = bound(tempBounds$1, item, 1), a2 = -item.angle * DegToRad, cos2 = Math.cos(a2), sin2 = Math.sin(a2), px2 = cos2 * gx - sin2 * gy + (ax - cos2 * ax + sin2 * ay), py2 = sin2 * gx + cos2 * gy + (ay - sin2 * ax - cos2 * ay);
    return b2.contains(px2, py2);
  }
  function intersectText(item, box) {
    const p = bound(tempBounds$1, item, 2);
    return intersectBoxLine(box, p[0], p[1], p[2], p[3]) || intersectBoxLine(box, p[0], p[1], p[4], p[5]) || intersectBoxLine(box, p[4], p[5], p[6], p[7]) || intersectBoxLine(box, p[2], p[3], p[6], p[7]);
  }
  var text$2 = {
    type: "text",
    tag: "text",
    nested: false,
    attr,
    bound,
    draw: draw$5,
    pick: pick$1(hit),
    isect: intersectText
  };
  var trail$2 = markMultiItemPath("trail", trail$1, pickTrail);
  var Marks = {
    arc: arc$2,
    area: area$2,
    group,
    image: image$1,
    line: line$2,
    path: path$2,
    rect: rect$1,
    rule: rule$2,
    shape,
    symbol,
    text: text$2,
    trail: trail$2
  };
  function boundItem$1(item, func, opt) {
    var type2 = Marks[item.mark.marktype], bound2 = func || type2.bound;
    if (type2.nested) item = item.mark;
    return bound2(item.bounds || (item.bounds = new Bounds()), item, opt);
  }
  var DUMMY = {
    mark: null
  };
  function boundMark(mark, bounds2, opt) {
    var type2 = Marks[mark.marktype], bound2 = type2.bound, items = mark.items, hasItems = items && items.length, i, n, item, b2;
    if (type2.nested) {
      if (hasItems) {
        item = items[0];
      } else {
        DUMMY.mark = mark;
        item = DUMMY;
      }
      b2 = boundItem$1(item, bound2, opt);
      bounds2 = bounds2 && bounds2.union(b2) || b2;
      return bounds2;
    }
    bounds2 = bounds2 || mark.bounds && mark.bounds.clear() || new Bounds();
    if (hasItems) {
      for (i = 0, n = items.length; i < n; ++i) {
        bounds2.union(boundItem$1(items[i], bound2, opt));
      }
    }
    return mark.bounds = bounds2;
  }
  const keys$2 = [
    "marktype",
    "name",
    "role",
    "interactive",
    "clip",
    "items",
    "zindex",
    "x",
    "y",
    "width",
    "height",
    "align",
    "baseline",
    // layout
    "fill",
    "fillOpacity",
    "opacity",
    "blend",
    // fill
    "stroke",
    "strokeOpacity",
    "strokeWidth",
    "strokeCap",
    // stroke
    "strokeDash",
    "strokeDashOffset",
    // stroke dash
    "strokeForeground",
    "strokeOffset",
    // group
    "startAngle",
    "endAngle",
    "innerRadius",
    "outerRadius",
    // arc
    "cornerRadius",
    "padAngle",
    // arc, rect
    "cornerRadiusTopLeft",
    "cornerRadiusTopRight",
    // rect, group
    "cornerRadiusBottomLeft",
    "cornerRadiusBottomRight",
    "interpolate",
    "tension",
    "orient",
    "defined",
    // area, line
    "url",
    "aspect",
    "smooth",
    // image
    "path",
    "scaleX",
    "scaleY",
    // path
    "x2",
    "y2",
    // rule
    "size",
    "shape",
    // symbol
    "text",
    "angle",
    "theta",
    "radius",
    "dir",
    "dx",
    "dy",
    // text
    "ellipsis",
    "limit",
    "lineBreak",
    "lineHeight",
    "font",
    "fontSize",
    "fontWeight",
    "fontStyle",
    "fontVariant",
    // font
    "description",
    "aria",
    "ariaRole",
    "ariaRoleDescription"
    // aria
  ];
  function sceneToJSON(scene, indent) {
    return JSON.stringify(scene, keys$2, indent);
  }
  function sceneFromJSON(json2) {
    const scene = typeof json2 === "string" ? JSON.parse(json2) : json2;
    return initialize$1(scene);
  }
  function initialize$1(scene) {
    var type2 = scene.marktype, items = scene.items, parent, i, n;
    if (items) {
      for (i = 0, n = items.length; i < n; ++i) {
        parent = type2 ? "mark" : "group";
        items[i][parent] = scene;
        if (items[i].zindex) items[i][parent].zdirty = true;
        if ("group" === (type2 || parent)) initialize$1(items[i]);
      }
    }
    if (type2) boundMark(scene);
    return scene;
  }
  class Scenegraph {
    constructor(scene) {
      if (arguments.length) {
        this.root = sceneFromJSON(scene);
      } else {
        this.root = createMark({
          marktype: "group",
          name: "root",
          role: "frame"
        });
        this.root.items = [new GroupItem(this.root)];
      }
    }
    toJSON(indent) {
      return sceneToJSON(this.root, indent || 0);
    }
    mark(markdef, group2, index2) {
      group2 = group2 || this.root.items[0];
      const mark = createMark(markdef, group2);
      group2.items[index2] = mark;
      if (mark.zindex) mark.group.zdirty = true;
      return mark;
    }
  }
  function createMark(def2, group2) {
    const mark = {
      bounds: new Bounds(),
      clip: !!def2.clip,
      group: group2,
      interactive: def2.interactive === false ? false : true,
      items: [],
      marktype: def2.marktype,
      name: def2.name || void 0,
      role: def2.role || void 0,
      zindex: def2.zindex || 0
    };
    if (def2.aria != null) {
      mark.aria = def2.aria;
    }
    if (def2.description) {
      mark.description = def2.description;
    }
    return mark;
  }
  function domCreate(doc, tag, ns) {
    if (!doc && typeof document !== "undefined" && document.createElement) {
      doc = document;
    }
    return doc ? ns ? doc.createElementNS(ns, tag) : doc.createElement(tag) : null;
  }
  function domFind(el, tag) {
    tag = tag.toLowerCase();
    var nodes = el.childNodes, i = 0, n = nodes.length;
    for (; i < n; ++i) if (nodes[i].tagName.toLowerCase() === tag) {
      return nodes[i];
    }
  }
  function domChild(el, index2, tag, ns) {
    var a2 = el.childNodes[index2], b2;
    if (!a2 || a2.tagName.toLowerCase() !== tag.toLowerCase()) {
      b2 = a2 || null;
      a2 = domCreate(el.ownerDocument, tag, ns);
      el.insertBefore(a2, b2);
    }
    return a2;
  }
  function domClear(el, index2) {
    var nodes = el.childNodes, curr = nodes.length;
    while (curr > index2) el.removeChild(nodes[--curr]);
    return el;
  }
  function cssClass(mark) {
    return "mark-" + mark.marktype + (mark.role ? " role-" + mark.role : "") + (mark.name ? " " + mark.name : "");
  }
  function point$2(event2, el) {
    const rect2 = el.getBoundingClientRect();
    return [event2.clientX - rect2.left - (el.clientLeft || 0), event2.clientY - rect2.top - (el.clientTop || 0)];
  }
  function resolveItem(item, event2, el, origin) {
    var mark = item && item.mark, mdef, p;
    if (mark && (mdef = Marks[mark.marktype]).tip) {
      p = point$2(event2, el);
      p[0] -= origin[0];
      p[1] -= origin[1];
      while (item = item.mark.group) {
        p[0] -= item.x || 0;
        p[1] -= item.y || 0;
      }
      item = mdef.tip(mark.items, p);
    }
    return item;
  }
  let Handler$1 = class Handler {
    /**
     * Create a new Handler instance.
     * @param {object} [customLoader] - Optional loader instance for
     *   href URL sanitization. If not specified, a standard loader
     *   instance will be generated.
     * @param {function} [customTooltip] - Optional tooltip handler
     *   function for custom tooltip display.
     * @constructor
     */
    constructor(customLoader, customTooltip) {
      this._active = null;
      this._handlers = {};
      this._loader = customLoader || loader();
      this._tooltip = customTooltip || defaultTooltip$1;
    }
    /**
     * Initialize a new Handler instance.
     * @param {DOMElement} el - The containing DOM element for the display.
     * @param {Array<number>} origin - The origin of the display, in pixels.
     *   The coordinate system will be translated to this point.
     * @param {object} [obj] - Optional context object that should serve as
     *   the "this" context for event callbacks.
     * @return {Handler} - This handler instance.
     */
    initialize(el, origin, obj) {
      this._el = el;
      this._obj = obj || null;
      return this.origin(origin);
    }
    /**
     * Returns the parent container element for a visualization.
     * @return {DOMElement} - The containing DOM element.
     */
    element() {
      return this._el;
    }
    /**
     * Returns the scene element (e.g., canvas or SVG) of the visualization
     * Subclasses must override if the first child is not the scene element.
     * @return {DOMElement} - The scene (e.g., canvas or SVG) element.
     */
    canvas() {
      return this._el && this._el.firstChild;
    }
    /**
     * Get / set the origin coordinates of the visualization.
     */
    origin(origin) {
      if (arguments.length) {
        this._origin = origin || [0, 0];
        return this;
      } else {
        return this._origin.slice();
      }
    }
    /**
     * Get / set the scenegraph root.
     */
    scene(scene) {
      if (!arguments.length) return this._scene;
      this._scene = scene;
      return this;
    }
    /**
     * Add an event handler. Subclasses should override this method.
     */
    on() {
    }
    /**
     * Remove an event handler. Subclasses should override this method.
     */
    off() {
    }
    /**
     * Utility method for finding the array index of an event handler.
     * @param {Array} h - An array of registered event handlers.
     * @param {string} type - The event type.
     * @param {function} handler - The event handler instance to find.
     * @return {number} - The handler's array index or -1 if not registered.
     */
    _handlerIndex(h2, type2, handler) {
      for (let i = h2 ? h2.length : 0; --i >= 0; ) {
        if (h2[i].type === type2 && (!handler || h2[i].handler === handler)) {
          return i;
        }
      }
      return -1;
    }
    /**
     * Returns an array with registered event handlers.
     * @param {string} [type] - The event type to query. Any annotations
     *   are ignored; for example, for the argument "click.foo", ".foo" will
     *   be ignored and the method returns all "click" handlers. If type is
     *   null or unspecified, this method returns handlers for all types.
     * @return {Array} - A new array containing all registered event handlers.
     */
    handlers(type2) {
      const h2 = this._handlers, a2 = [];
      if (type2) {
        a2.push(...h2[this.eventName(type2)]);
      } else {
        for (const k in h2) {
          a2.push(...h2[k]);
        }
      }
      return a2;
    }
    /**
     * Parses an event name string to return the specific event type.
     * For example, given "click.foo" returns "click"
     * @param {string} name - The input event type string.
     * @return {string} - A string with the event type only.
     */
    eventName(name) {
      const i = name.indexOf(".");
      return i < 0 ? name : name.slice(0, i);
    }
    /**
     * Handle hyperlink navigation in response to an item.href value.
     * @param {Event} event - The event triggering hyperlink navigation.
     * @param {Item} item - The scenegraph item.
     * @param {string} href - The URL to navigate to.
     */
    handleHref(event2, item, href2) {
      this._loader.sanitize(href2, {
        context: "href"
      }).then((opt) => {
        const e3 = new MouseEvent(event2.type, event2), a2 = domCreate(null, "a");
        for (const name in opt) a2.setAttribute(name, opt[name]);
        a2.dispatchEvent(e3);
      }).catch(() => {
      });
    }
    /**
     * Handle tooltip display in response to an item.tooltip value.
     * @param {Event} event - The event triggering tooltip display.
     * @param {Item} item - The scenegraph item.
     * @param {boolean} show - A boolean flag indicating whether
     *   to show or hide a tooltip for the given item.
     */
    handleTooltip(event2, item, show) {
      if (item && item.tooltip != null) {
        item = resolveItem(item, event2, this.canvas(), this._origin);
        const value2 = show && item && item.tooltip || null;
        this._tooltip.call(this._obj, this, event2, item, value2);
      }
    }
    /**
     * Returns the size of a scenegraph item and its position relative
     * to the viewport.
     * @param {Item} item - The scenegraph item.
     * @return {object} - A bounding box object (compatible with the
     *   DOMRect type) consisting of x, y, width, heigh, top, left,
     *   right, and bottom properties.
     */
    getItemBoundingClientRect(item) {
      const el = this.canvas();
      if (!el) return;
      const rect2 = el.getBoundingClientRect(), origin = this._origin, bounds2 = item.bounds, width2 = bounds2.width(), height2 = bounds2.height();
      let x2 = bounds2.x1 + origin[0] + rect2.left, y2 = bounds2.y1 + origin[1] + rect2.top;
      while (item.mark && (item = item.mark.group)) {
        x2 += item.x || 0;
        y2 += item.y || 0;
      }
      return {
        x: x2,
        y: y2,
        width: width2,
        height: height2,
        left: x2,
        top: y2,
        right: x2 + width2,
        bottom: y2 + height2
      };
    }
  };
  function defaultTooltip$1(handler, event2, item, value2) {
    handler.element().setAttribute("title", value2 || "");
  }
  class Renderer {
    /**
     * Create a new Renderer instance.
     * @param {object} [loader] - Optional loader instance for
     *   image and href URL sanitization. If not specified, a
     *   standard loader instance will be generated.
     * @constructor
     */
    constructor(loader2) {
      this._el = null;
      this._bgcolor = null;
      this._loader = new ResourceLoader(loader2);
    }
    /**
     * Initialize a new Renderer instance.
     * @param {DOMElement} el - The containing DOM element for the display.
     * @param {number} width - The coordinate width of the display, in pixels.
     * @param {number} height - The coordinate height of the display, in pixels.
     * @param {Array<number>} origin - The origin of the display, in pixels.
     *   The coordinate system will be translated to this point.
     * @param {number} [scaleFactor=1] - Optional scaleFactor by which to multiply
     *   the width and height to determine the final pixel size.
     * @return {Renderer} - This renderer instance.
     */
    initialize(el, width2, height2, origin, scaleFactor) {
      this._el = el;
      return this.resize(width2, height2, origin, scaleFactor);
    }
    /**
     * Returns the parent container element for a visualization.
     * @return {DOMElement} - The containing DOM element.
     */
    element() {
      return this._el;
    }
    /**
     * Returns the scene element (e.g., canvas or SVG) of the visualization
     * Subclasses must override if the first child is not the scene element.
     * @return {DOMElement} - The scene (e.g., canvas or SVG) element.
     */
    canvas() {
      return this._el && this._el.firstChild;
    }
    /**
     * Get / set the background color.
     */
    background(bgcolor) {
      if (arguments.length === 0) return this._bgcolor;
      this._bgcolor = bgcolor;
      return this;
    }
    /**
     * Resize the display.
     * @param {number} width - The new coordinate width of the display, in pixels.
     * @param {number} height - The new coordinate height of the display, in pixels.
     * @param {Array<number>} origin - The new origin of the display, in pixels.
     *   The coordinate system will be translated to this point.
     * @param {number} [scaleFactor=1] - Optional scaleFactor by which to multiply
     *   the width and height to determine the final pixel size.
     * @return {Renderer} - This renderer instance;
     */
    resize(width2, height2, origin, scaleFactor) {
      this._width = width2;
      this._height = height2;
      this._origin = origin || [0, 0];
      this._scale = scaleFactor || 1;
      return this;
    }
    /**
     * Report a dirty item whose bounds should be redrawn.
     * This base class method does nothing. Subclasses that perform
     * incremental should implement this method.
     * @param {Item} item - The dirty item whose bounds should be redrawn.
     */
    dirty() {
    }
    /**
     * Render an input scenegraph, potentially with a set of dirty items.
     * This method will perform an immediate rendering with available resources.
     * The renderer may also need to perform image loading to perform a complete
     * render. This process can lead to asynchronous re-rendering of the scene
     * after this method returns. To receive notification when rendering is
     * complete, use the renderAsync method instead.
     * @param {object} scene - The root mark of a scenegraph to render.
     * @param {Array} markTypes - Array of the mark types to render.
     *                            If undefined, render all mark types
     * @return {Renderer} - This renderer instance.
     */
    render(scene, markTypes) {
      const r = this;
      r._call = function() {
        r._render(scene, markTypes);
      };
      r._call();
      r._call = null;
      return r;
    }
    /**
     * Internal rendering method. Renderer subclasses should override this
     * method to actually perform rendering.
     * @param {object} scene - The root mark of a scenegraph to render.
     * @param {Array} markTypes - Array of the mark types to render.
     *                            If undefined, render all mark types
     */
    _render() {
    }
    /**
     * Asynchronous rendering method. Similar to render, but returns a Promise
     * that resolves when all rendering is completed. Sometimes a renderer must
     * perform image loading to get a complete rendering. The returned
     * Promise will not resolve until this process completes.
     * @param {object} scene - The root mark of a scenegraph to render.
     * @param {Array} markTypes - Array of the mark types to render.
     *                            If undefined, render all mark types
     * @return {Promise} - A Promise that resolves when rendering is complete.
     */
    renderAsync(scene, markTypes) {
      const r = this.render(scene, markTypes);
      return this._ready ? this._ready.then(() => r) : Promise.resolve(r);
    }
    /**
     * Internal method for asynchronous resource loading.
     * Proxies method calls to the ImageLoader, and tracks loading
     * progress to invoke a re-render once complete.
     * @param {string} method - The method name to invoke on the ImageLoader.
     * @param {string} uri - The URI for the requested resource.
     * @return {Promise} - A Promise that resolves to the requested resource.
     */
    _load(method2, uri) {
      var r = this, p = r._loader[method2](uri);
      if (!r._ready) {
        const call = r._call;
        r._ready = r._loader.ready().then((redraw) => {
          if (redraw) call();
          r._ready = null;
        });
      }
      return p;
    }
    /**
     * Sanitize a URL to include as a hyperlink in the rendered scene.
     * This method proxies a call to ImageLoader.sanitizeURL, but also tracks
     * image loading progress and invokes a re-render once complete.
     * @param {string} uri - The URI string to sanitize.
     * @return {Promise} - A Promise that resolves to the sanitized URL.
     */
    sanitizeURL(uri) {
      return this._load("sanitizeURL", uri);
    }
    /**
     * Requests an image to include in the rendered scene.
     * This method proxies a call to ImageLoader.loadImage, but also tracks
     * image loading progress and invokes a re-render once complete.
     * @param {string} uri - The URI string of the image.
     * @return {Promise} - A Promise that resolves to the loaded Image.
     */
    loadImage(uri) {
      return this._load("loadImage", uri);
    }
  }
  const KeyDownEvent = "keydown";
  const KeyPressEvent = "keypress";
  const KeyUpEvent = "keyup";
  const DragEnterEvent = "dragenter";
  const DragLeaveEvent = "dragleave";
  const DragOverEvent = "dragover";
  const PointerDownEvent = "pointerdown";
  const PointerUpEvent = "pointerup";
  const PointerMoveEvent = "pointermove";
  const PointerOutEvent = "pointerout";
  const PointerOverEvent = "pointerover";
  const MouseDownEvent = "mousedown";
  const MouseUpEvent = "mouseup";
  const MouseMoveEvent = "mousemove";
  const MouseOutEvent = "mouseout";
  const MouseOverEvent = "mouseover";
  const ClickEvent = "click";
  const DoubleClickEvent = "dblclick";
  const WheelEvent = "wheel";
  const MouseWheelEvent = "mousewheel";
  const TouchStartEvent = "touchstart";
  const TouchMoveEvent = "touchmove";
  const TouchEndEvent = "touchend";
  const Events = [KeyDownEvent, KeyPressEvent, KeyUpEvent, DragEnterEvent, DragLeaveEvent, DragOverEvent, PointerDownEvent, PointerUpEvent, PointerMoveEvent, PointerOutEvent, PointerOverEvent, MouseDownEvent, MouseUpEvent, MouseMoveEvent, MouseOutEvent, MouseOverEvent, ClickEvent, DoubleClickEvent, WheelEvent, MouseWheelEvent, TouchStartEvent, TouchMoveEvent, TouchEndEvent];
  const TooltipShowEvent = PointerMoveEvent;
  const TooltipHideEvent = MouseOutEvent;
  const HrefEvent = ClickEvent;
  class CanvasHandler extends Handler$1 {
    constructor(loader2, tooltip2) {
      super(loader2, tooltip2);
      this._down = null;
      this._touch = null;
      this._first = true;
      this._events = {};
      this.events = Events;
      this.pointermove = move([PointerMoveEvent, MouseMoveEvent], [PointerOverEvent, MouseOverEvent], [PointerOutEvent, MouseOutEvent]);
      this.dragover = move([DragOverEvent], [DragEnterEvent], [DragLeaveEvent]), this.pointerout = inactive([PointerOutEvent, MouseOutEvent]);
      this.dragleave = inactive([DragLeaveEvent]);
    }
    initialize(el, origin, obj) {
      this._canvas = el && domFind(el, "canvas");
      [ClickEvent, MouseDownEvent, PointerDownEvent, PointerMoveEvent, PointerOutEvent, DragLeaveEvent].forEach((type2) => eventListenerCheck(this, type2));
      return super.initialize(el, origin, obj);
    }
    // return the backing canvas instance
    canvas() {
      return this._canvas;
    }
    // retrieve the current canvas context
    context() {
      return this._canvas.getContext("2d");
    }
    // to keep old versions of firefox happy
    DOMMouseScroll(evt) {
      this.fire(MouseWheelEvent, evt);
    }
    pointerdown(evt) {
      this._down = this._active;
      this.fire(PointerDownEvent, evt);
    }
    mousedown(evt) {
      this._down = this._active;
      this.fire(MouseDownEvent, evt);
    }
    click(evt) {
      if (this._down === this._active) {
        this.fire(ClickEvent, evt);
        this._down = null;
      }
    }
    touchstart(evt) {
      this._touch = this.pickEvent(evt.changedTouches[0]);
      if (this._first) {
        this._active = this._touch;
        this._first = false;
      }
      this.fire(TouchStartEvent, evt, true);
    }
    touchmove(evt) {
      this.fire(TouchMoveEvent, evt, true);
    }
    touchend(evt) {
      this.fire(TouchEndEvent, evt, true);
      this._touch = null;
    }
    // fire an event
    fire(type2, evt, touch2) {
      const a2 = touch2 ? this._touch : this._active, h2 = this._handlers[type2];
      evt.vegaType = type2;
      if (type2 === HrefEvent && a2 && a2.href) {
        this.handleHref(evt, a2, a2.href);
      } else if (type2 === TooltipShowEvent || type2 === TooltipHideEvent) {
        this.handleTooltip(evt, a2, type2 !== TooltipHideEvent);
      }
      if (h2) {
        for (let i = 0, len = h2.length; i < len; ++i) {
          h2[i].handler.call(this._obj, evt, a2);
        }
      }
    }
    // add an event handler
    on(type2, handler) {
      const name = this.eventName(type2), h2 = this._handlers, i = this._handlerIndex(h2[name], type2, handler);
      if (i < 0) {
        eventListenerCheck(this, type2);
        (h2[name] || (h2[name] = [])).push({
          type: type2,
          handler
        });
      }
      return this;
    }
    // remove an event handler
    off(type2, handler) {
      const name = this.eventName(type2), h2 = this._handlers[name], i = this._handlerIndex(h2, type2, handler);
      if (i >= 0) {
        h2.splice(i, 1);
      }
      return this;
    }
    pickEvent(evt) {
      const p = point$2(evt, this._canvas), o = this._origin;
      return this.pick(this._scene, p[0], p[1], p[0] - o[0], p[1] - o[1]);
    }
    // find the scenegraph item at the current pointer position
    // x, y -- the absolute x, y pointer coordinates on the canvas element
    // gx, gy -- the relative coordinates within the current group
    pick(scene, x2, y2, gx, gy) {
      const g = this.context(), mark = Marks[scene.marktype];
      return mark.pick.call(this, g, scene, x2, y2, gx, gy);
    }
  }
  const eventBundle = (type2) => type2 === TouchStartEvent || type2 === TouchMoveEvent || type2 === TouchEndEvent ? [TouchStartEvent, TouchMoveEvent, TouchEndEvent] : [type2];
  function eventListenerCheck(handler, type2) {
    eventBundle(type2).forEach((_) => addEventListener(handler, _));
  }
  function addEventListener(handler, type2) {
    const canvas = handler.canvas();
    if (canvas && !handler._events[type2]) {
      handler._events[type2] = 1;
      canvas.addEventListener(type2, handler[type2] ? (evt) => handler[type2](evt) : (evt) => handler.fire(type2, evt));
    }
  }
  function fireAll(handler, types, event2) {
    types.forEach((type2) => handler.fire(type2, event2));
  }
  function move(moveEvents, overEvents, outEvents) {
    return function(evt) {
      const a2 = this._active, p = this.pickEvent(evt);
      if (p === a2) {
        fireAll(this, moveEvents, evt);
      } else {
        if (!a2 || !a2.exit) {
          fireAll(this, outEvents, evt);
        }
        this._active = p;
        fireAll(this, overEvents, evt);
        fireAll(this, moveEvents, evt);
      }
    };
  }
  function inactive(types) {
    return function(evt) {
      fireAll(this, types, evt);
      this._active = null;
    };
  }
  function devicePixelRatio() {
    return typeof window !== "undefined" ? window.devicePixelRatio || 1 : 1;
  }
  function resize(canvas, width2, height2, origin, scaleFactor, opt) {
    const inDOM = typeof HTMLElement !== "undefined" && canvas instanceof HTMLElement && canvas.parentNode != null, context2 = canvas.getContext("2d"), ratio = inDOM ? devicePixelRatio() : scaleFactor;
    canvas.width = width2 * ratio;
    canvas.height = height2 * ratio;
    for (const key2 in opt) {
      context2[key2] = opt[key2];
    }
    if (inDOM && ratio !== 1) {
      canvas.style.width = width2 + "px";
      canvas.style.height = height2 + "px";
    }
    context2.pixelRatio = ratio;
    context2.setTransform(ratio, 0, 0, ratio, ratio * origin[0], ratio * origin[1]);
    return canvas;
  }
  class CanvasRenderer extends Renderer {
    constructor(loader2) {
      super(loader2);
      this._options = {};
      this._redraw = false;
      this._dirty = new Bounds();
      this._tempb = new Bounds();
    }
    initialize(el, width2, height2, origin, scaleFactor, options) {
      this._options = options || {};
      this._canvas = this._options.externalContext ? null : domCanvas(1, 1, this._options.type);
      if (el && this._canvas) {
        domClear(el, 0).appendChild(this._canvas);
        this._canvas.setAttribute("class", "marks");
      }
      return super.initialize(el, width2, height2, origin, scaleFactor);
    }
    resize(width2, height2, origin, scaleFactor) {
      super.resize(width2, height2, origin, scaleFactor);
      if (this._canvas) {
        resize(this._canvas, this._width, this._height, this._origin, this._scale, this._options.context);
      } else {
        const ctx = this._options.externalContext;
        if (!ctx) error$1("CanvasRenderer is missing a valid canvas or context");
        ctx.scale(this._scale, this._scale);
        ctx.translate(this._origin[0], this._origin[1]);
      }
      this._redraw = true;
      return this;
    }
    canvas() {
      return this._canvas;
    }
    context() {
      return this._options.externalContext || (this._canvas ? this._canvas.getContext("2d") : null);
    }
    dirty(item) {
      const b2 = this._tempb.clear().union(item.bounds);
      let g = item.mark.group;
      while (g) {
        b2.translate(g.x || 0, g.y || 0);
        g = g.mark.group;
      }
      this._dirty.union(b2);
    }
    _render(scene, markTypes) {
      const g = this.context(), o = this._origin, w2 = this._width, h2 = this._height, db = this._dirty, vb = viewBounds(o, w2, h2);
      g.save();
      const b2 = this._redraw || db.empty() ? (this._redraw = false, vb.expand(1)) : clipToBounds(g, vb.intersect(db), o);
      this.clear(-o[0], -o[1], w2, h2);
      this.draw(g, scene, b2, markTypes);
      g.restore();
      db.clear();
      return this;
    }
    draw(ctx, scene, bounds2, markTypes) {
      if (scene.marktype !== "group" && markTypes != null && !markTypes.includes(scene.marktype)) {
        return;
      }
      const mark = Marks[scene.marktype];
      if (scene.clip) clip$2(ctx, scene);
      mark.draw.call(this, ctx, scene, bounds2, markTypes);
      if (scene.clip) ctx.restore();
    }
    clear(x2, y2, w2, h2) {
      const opt = this._options, g = this.context();
      if (opt.type !== "pdf" && !opt.externalContext) {
        g.clearRect(x2, y2, w2, h2);
      }
      if (this._bgcolor != null) {
        g.fillStyle = this._bgcolor;
        g.fillRect(x2, y2, w2, h2);
      }
    }
  }
  const viewBounds = (origin, width2, height2) => new Bounds().set(0, 0, width2, height2).translate(-origin[0], -origin[1]);
  function clipToBounds(g, b2, origin) {
    b2.expand(1).round();
    if (g.pixelRatio % 1) {
      b2.scale(g.pixelRatio).round().scale(1 / g.pixelRatio);
    }
    b2.translate(-(origin[0] % 1), -(origin[1] % 1));
    g.beginPath();
    g.rect(b2.x1, b2.y1, b2.width(), b2.height());
    g.clip();
    return b2;
  }
  class SVGHandler extends Handler$1 {
    constructor(loader2, tooltip2) {
      super(loader2, tooltip2);
      const h2 = this;
      h2._hrefHandler = listener(h2, (evt, item) => {
        if (item && item.href) h2.handleHref(evt, item, item.href);
      });
      h2._tooltipHandler = listener(h2, (evt, item) => {
        h2.handleTooltip(evt, item, evt.type !== TooltipHideEvent);
      });
    }
    initialize(el, origin, obj) {
      let svg = this._svg;
      if (svg) {
        svg.removeEventListener(HrefEvent, this._hrefHandler);
        svg.removeEventListener(TooltipShowEvent, this._tooltipHandler);
        svg.removeEventListener(TooltipHideEvent, this._tooltipHandler);
      }
      this._svg = svg = el && domFind(el, "svg");
      if (svg) {
        svg.addEventListener(HrefEvent, this._hrefHandler);
        svg.addEventListener(TooltipShowEvent, this._tooltipHandler);
        svg.addEventListener(TooltipHideEvent, this._tooltipHandler);
      }
      return super.initialize(el, origin, obj);
    }
    canvas() {
      return this._svg;
    }
    // add an event handler
    on(type2, handler) {
      const name = this.eventName(type2), h2 = this._handlers, i = this._handlerIndex(h2[name], type2, handler);
      if (i < 0) {
        const x2 = {
          type: type2,
          handler,
          listener: listener(this, handler)
        };
        (h2[name] || (h2[name] = [])).push(x2);
        if (this._svg) {
          this._svg.addEventListener(name, x2.listener);
        }
      }
      return this;
    }
    // remove an event handler
    off(type2, handler) {
      const name = this.eventName(type2), h2 = this._handlers[name], i = this._handlerIndex(h2, type2, handler);
      if (i >= 0) {
        if (this._svg) {
          this._svg.removeEventListener(name, h2[i].listener);
        }
        h2.splice(i, 1);
      }
      return this;
    }
  }
  const listener = (context2, handler) => (evt) => {
    let item = evt.target.__data__;
    item = Array.isArray(item) ? item[0] : item;
    evt.vegaType = evt.type;
    handler.call(context2._obj, evt, item);
  };
  const ARIA_HIDDEN = "aria-hidden";
  const ARIA_LABEL = "aria-label";
  const ARIA_ROLE = "role";
  const ARIA_ROLEDESCRIPTION = "aria-roledescription";
  const GRAPHICS_OBJECT = "graphics-object";
  const GRAPHICS_SYMBOL = "graphics-symbol";
  const bundle = (role, roledesc, label2) => ({
    [ARIA_ROLE]: role,
    [ARIA_ROLEDESCRIPTION]: roledesc,
    [ARIA_LABEL]: label2 || void 0
  });
  const AriaIgnore = toSet(["axis-domain", "axis-grid", "axis-label", "axis-tick", "axis-title", "legend-band", "legend-entry", "legend-gradient", "legend-label", "legend-title", "legend-symbol", "title"]);
  const AriaGuides = {
    "axis": {
      desc: "axis",
      caption: axisCaption
    },
    "legend": {
      desc: "legend",
      caption: legendCaption
    },
    "title-text": {
      desc: "title",
      caption: (item) => `Title text '${titleCaption(item)}'`
    },
    "title-subtitle": {
      desc: "subtitle",
      caption: (item) => `Subtitle text '${titleCaption(item)}'`
    }
  };
  const AriaEncode = {
    ariaRole: ARIA_ROLE,
    ariaRoleDescription: ARIA_ROLEDESCRIPTION,
    description: ARIA_LABEL
  };
  function ariaItemAttributes(emit2, item) {
    const hide = item.aria === false;
    emit2(ARIA_HIDDEN, hide || void 0);
    if (hide || item.description == null) {
      for (const prop in AriaEncode) {
        emit2(AriaEncode[prop], void 0);
      }
    } else {
      const type2 = item.mark.marktype;
      emit2(ARIA_LABEL, item.description);
      emit2(ARIA_ROLE, item.ariaRole || (type2 === "group" ? GRAPHICS_OBJECT : GRAPHICS_SYMBOL));
      emit2(ARIA_ROLEDESCRIPTION, item.ariaRoleDescription || `${type2} mark`);
    }
  }
  function ariaMarkAttributes(mark) {
    return mark.aria === false ? {
      [ARIA_HIDDEN]: true
    } : AriaIgnore[mark.role] ? null : AriaGuides[mark.role] ? ariaGuide(mark, AriaGuides[mark.role]) : ariaMark(mark);
  }
  function ariaMark(mark) {
    const type2 = mark.marktype;
    const recurse2 = type2 === "group" || type2 === "text" || mark.items.some((_) => _.description != null && _.aria !== false);
    return bundle(recurse2 ? GRAPHICS_OBJECT : GRAPHICS_SYMBOL, `${type2} mark container`, mark.description);
  }
  function ariaGuide(mark, opt) {
    try {
      const item = mark.items[0], caption = opt.caption || (() => "");
      return bundle(opt.role || GRAPHICS_SYMBOL, opt.desc, item.description || caption(item));
    } catch (err) {
      return null;
    }
  }
  function titleCaption(item) {
    return array$5(item.text).join(" ");
  }
  function axisCaption(item) {
    const datum2 = item.datum, orient2 = item.orient, title2 = datum2.title ? extractTitle(item) : null, ctx = item.context, scale2 = ctx.scales[datum2.scale].value, locale2 = ctx.dataflow.locale(), type2 = scale2.type, xy = orient2 === "left" || orient2 === "right" ? "Y" : "X";
    return `${xy}-axis` + (title2 ? ` titled '${title2}'` : "") + ` for a ${isDiscrete$2(type2) ? "discrete" : type2} scale with ${domainCaption(locale2, scale2, item)}`;
  }
  function legendCaption(item) {
    const datum2 = item.datum, title2 = datum2.title ? extractTitle(item) : null, type2 = `${datum2.type || ""} legend`.trim(), scales2 = datum2.scales, props = Object.keys(scales2), ctx = item.context, scale2 = ctx.scales[scales2[props[0]]].value, locale2 = ctx.dataflow.locale();
    return capitalize(type2) + (title2 ? ` titled '${title2}'` : "") + ` for ${channelCaption(props)} with ${domainCaption(locale2, scale2, item)}`;
  }
  function extractTitle(item) {
    try {
      return array$5(peek$2(item.items).items[0].text).join(" ");
    } catch (err) {
      return null;
    }
  }
  function channelCaption(props) {
    props = props.map((p) => p + (p === "fill" || p === "stroke" ? " color" : ""));
    return props.length < 2 ? props[0] : props.slice(0, -1).join(", ") + " and " + peek$2(props);
  }
  function capitalize(s) {
    return s.length ? s[0].toUpperCase() + s.slice(1) : s;
  }
  const innerText = (val) => (val + "").replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;");
  const attrText = (val) => innerText(val).replace(/"/g, "&quot;").replace(/\t/g, "&#x9;").replace(/\n/g, "&#xA;").replace(/\r/g, "&#xD;");
  function markup() {
    let buf = "", outer = "", inner = "";
    const stack2 = [], clear2 = () => outer = inner = "", push = (tag) => {
      if (outer) {
        buf += `${outer}>${inner}`;
        clear2();
      }
      stack2.push(tag);
    }, attr2 = (name, value2) => {
      if (value2 != null) outer += ` ${name}="${attrText(value2)}"`;
      return m2;
    }, m2 = {
      open(tag) {
        push(tag);
        outer = "<" + tag;
        for (var _len = arguments.length, attrs = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          attrs[_key - 1] = arguments[_key];
        }
        for (const set2 of attrs) {
          for (const key2 in set2) attr2(key2, set2[key2]);
        }
        return m2;
      },
      close() {
        const tag = stack2.pop();
        if (outer) {
          buf += outer + (inner ? `>${inner}</${tag}>` : "/>");
        } else {
          buf += `</${tag}>`;
        }
        clear2();
        return m2;
      },
      attr: attr2,
      text: (t) => (inner += innerText(t), m2),
      toString: () => buf
    };
    return m2;
  }
  const serializeXML = (node) => _serialize(markup(), node) + "";
  function _serialize(m2, node) {
    m2.open(node.tagName);
    if (node.hasAttributes()) {
      const attrs = node.attributes, n = attrs.length;
      for (let i = 0; i < n; ++i) {
        m2.attr(attrs[i].name, attrs[i].value);
      }
    }
    if (node.hasChildNodes()) {
      const children2 = node.childNodes;
      for (const child of children2) {
        child.nodeType === 3 ? m2.text(child.nodeValue) : _serialize(m2, child);
      }
    }
    return m2.close();
  }
  const stylesAttr = {
    fill: "fill",
    fillOpacity: "fill-opacity",
    stroke: "stroke",
    strokeOpacity: "stroke-opacity",
    strokeWidth: "stroke-width",
    strokeCap: "stroke-linecap",
    strokeJoin: "stroke-linejoin",
    strokeDash: "stroke-dasharray",
    strokeDashOffset: "stroke-dashoffset",
    strokeMiterLimit: "stroke-miterlimit",
    opacity: "opacity"
  };
  const stylesCss = {
    blend: "mix-blend-mode"
  };
  const rootAttributes = {
    "fill": "none",
    "stroke-miterlimit": 10
  };
  const RootIndex = 0, xmlns = "http://www.w3.org/2000/xmlns/", svgns = metadata.xmlns;
  class SVGRenderer extends Renderer {
    constructor(loader2) {
      super(loader2);
      this._dirtyID = 0;
      this._dirty = [];
      this._svg = null;
      this._root = null;
      this._defs = null;
    }
    /**
     * Initialize a new SVGRenderer instance.
     * @param {DOMElement} el - The containing DOM element for the display.
     * @param {number} width - The coordinate width of the display, in pixels.
     * @param {number} height - The coordinate height of the display, in pixels.
     * @param {Array<number>} origin - The origin of the display, in pixels.
     *   The coordinate system will be translated to this point.
     * @param {number} [scaleFactor=1] - Optional scaleFactor by which to multiply
     *   the width and height to determine the final pixel size.
     * @return {SVGRenderer} - This renderer instance.
     */
    initialize(el, width2, height2, origin, scaleFactor) {
      this._defs = {};
      this._clearDefs();
      if (el) {
        this._svg = domChild(el, 0, "svg", svgns);
        this._svg.setAttributeNS(xmlns, "xmlns", svgns);
        this._svg.setAttributeNS(xmlns, "xmlns:xlink", metadata["xmlns:xlink"]);
        this._svg.setAttribute("version", metadata["version"]);
        this._svg.setAttribute("class", "marks");
        domClear(el, 1);
        this._root = domChild(this._svg, RootIndex, "g", svgns);
        setAttributes(this._root, rootAttributes);
        domClear(this._svg, RootIndex + 1);
      }
      this.background(this._bgcolor);
      return super.initialize(el, width2, height2, origin, scaleFactor);
    }
    /**
     * Get / set the background color.
     */
    background(bgcolor) {
      if (arguments.length && this._svg) {
        this._svg.style.setProperty("background-color", bgcolor);
      }
      return super.background(...arguments);
    }
    /**
     * Resize the display.
     * @param {number} width - The new coordinate width of the display, in pixels.
     * @param {number} height - The new coordinate height of the display, in pixels.
     * @param {Array<number>} origin - The new origin of the display, in pixels.
     *   The coordinate system will be translated to this point.
     * @param {number} [scaleFactor=1] - Optional scaleFactor by which to multiply
     *   the width and height to determine the final pixel size.
     * @return {SVGRenderer} - This renderer instance;
     */
    resize(width2, height2, origin, scaleFactor) {
      super.resize(width2, height2, origin, scaleFactor);
      if (this._svg) {
        setAttributes(this._svg, {
          width: this._width * this._scale,
          height: this._height * this._scale,
          viewBox: `0 0 ${this._width} ${this._height}`
        });
        this._root.setAttribute("transform", `translate(${this._origin})`);
      }
      this._dirty = [];
      return this;
    }
    /**
     * Returns the SVG element of the visualization.
     * @return {DOMElement} - The SVG element.
     */
    canvas() {
      return this._svg;
    }
    /**
     * Returns an SVG text string for the rendered content,
     * or null if this renderer is currently headless.
     */
    svg() {
      const svg = this._svg, bg = this._bgcolor;
      if (!svg) return null;
      let node;
      if (bg) {
        svg.removeAttribute("style");
        node = domChild(svg, RootIndex, "rect", svgns);
        setAttributes(node, {
          width: this._width,
          height: this._height,
          fill: bg
        });
      }
      const text2 = serializeXML(svg);
      if (bg) {
        svg.removeChild(node);
        this._svg.style.setProperty("background-color", bg);
      }
      return text2;
    }
    /**
     * Internal rendering method.
     * @param {object} scene - The root mark of a scenegraph to render.
     * @param {Array} markTypes - Array of the mark types to render.
     *                            If undefined, render all mark types
     */
    _render(scene, markTypes) {
      if (this._dirtyCheck()) {
        if (this._dirtyAll) this._clearDefs();
        this.mark(this._root, scene, void 0, markTypes);
        domClear(this._root, 1);
      }
      this.defs();
      this._dirty = [];
      ++this._dirtyID;
      return this;
    }
    // -- Manage rendering of items marked as dirty --
    /**
     * Flag a mark item as dirty.
     * @param {Item} item - The mark item.
     */
    dirty(item) {
      if (item.dirty !== this._dirtyID) {
        item.dirty = this._dirtyID;
        this._dirty.push(item);
      }
    }
    /**
     * Check if a mark item is considered dirty.
     * @param {Item} item - The mark item.
     */
    isDirty(item) {
      return this._dirtyAll || !item._svg || !item._svg.ownerSVGElement || item.dirty === this._dirtyID;
    }
    /**
     * Internal method to check dirty status and, if possible,
     * make targetted updates without a full rendering pass.
     */
    _dirtyCheck() {
      this._dirtyAll = true;
      const items = this._dirty;
      if (!items.length || !this._dirtyID) return true;
      const id2 = ++this._dirtyID;
      let item, mark, type2, mdef, i, n, o;
      for (i = 0, n = items.length; i < n; ++i) {
        item = items[i];
        mark = item.mark;
        if (mark.marktype !== type2) {
          type2 = mark.marktype;
          mdef = Marks[type2];
        }
        if (mark.zdirty && mark.dirty !== id2) {
          this._dirtyAll = false;
          dirtyParents(item, id2);
          mark.items.forEach((i2) => {
            i2.dirty = id2;
          });
        }
        if (mark.zdirty) continue;
        if (item.exit) {
          if (mdef.nested && mark.items.length) {
            o = mark.items[0];
            if (o._svg) this._update(mdef, o._svg, o);
          } else if (item._svg) {
            o = item._svg.parentNode;
            if (o) o.removeChild(item._svg);
          }
          item._svg = null;
          continue;
        }
        item = mdef.nested ? mark.items[0] : item;
        if (item._update === id2) continue;
        if (!item._svg || !item._svg.ownerSVGElement) {
          this._dirtyAll = false;
          dirtyParents(item, id2);
        } else {
          this._update(mdef, item._svg, item);
        }
        item._update = id2;
      }
      return !this._dirtyAll;
    }
    // -- Construct & maintain scenegraph to SVG mapping ---
    /**
     * Render a set of mark items.
     * @param {SVGElement} el - The parent element in the SVG tree.
     * @param {object} scene - The mark parent to render.
     * @param {SVGElement} prev - The previous sibling in the SVG tree.
     * @param {Array} markTypes - Array of the mark types to render.
     *                            If undefined, render all mark types
     */
    mark(el, scene, prev, markTypes) {
      if (!this.isDirty(scene)) {
        return scene._svg;
      }
      const svg = this._svg, markType2 = scene.marktype, mdef = Marks[markType2], events2 = scene.interactive === false ? "none" : null, isGroup = mdef.tag === "g";
      const parent = bind$1(scene, el, prev, "g", svg);
      if (markType2 !== "group" && markTypes != null && !markTypes.includes(markType2)) {
        domClear(parent, 0);
        return scene._svg;
      }
      parent.setAttribute("class", cssClass(scene));
      const aria2 = ariaMarkAttributes(scene);
      for (const key2 in aria2) setAttribute(parent, key2, aria2[key2]);
      if (!isGroup) {
        setAttribute(parent, "pointer-events", events2);
      }
      setAttribute(parent, "clip-path", scene.clip ? clip$1$1(this, scene, scene.group) : null);
      let sibling = null, i = 0;
      const process2 = (item) => {
        const dirty = this.isDirty(item), node = bind$1(item, parent, sibling, mdef.tag, svg);
        if (dirty) {
          this._update(mdef, node, item);
          if (isGroup) recurse(this, node, item, markTypes);
        }
        sibling = node;
        ++i;
      };
      if (mdef.nested) {
        if (scene.items.length) process2(scene.items[0]);
      } else {
        visit(scene, process2);
      }
      domClear(parent, i);
      return parent;
    }
    /**
     * Update the attributes of an SVG element for a mark item.
     * @param {object} mdef - The mark definition object
     * @param {SVGElement} el - The SVG element.
     * @param {Item} item - The mark item.
     */
    _update(mdef, el, item) {
      element$1 = el;
      values$2 = el.__values__;
      ariaItemAttributes(emit, item);
      mdef.attr(emit, item, this);
      const extra = mark_extras[mdef.type];
      if (extra) extra.call(this, mdef, el, item);
      if (element$1) this.style(element$1, item);
    }
    /**
     * Update the presentation attributes of an SVG element for a mark item.
     * @param {SVGElement} el - The SVG element.
     * @param {Item} item - The mark item.
     */
    style(el, item) {
      if (item == null) return;
      for (const prop in stylesAttr) {
        let value2 = prop === "font" ? fontFamily(item) : item[prop];
        if (value2 === values$2[prop]) continue;
        const name = stylesAttr[prop];
        if (value2 == null) {
          el.removeAttribute(name);
        } else {
          if (isGradient(value2)) {
            value2 = gradientRef(value2, this._defs.gradient, href());
          }
          el.setAttribute(name, value2 + "");
        }
        values$2[prop] = value2;
      }
      for (const prop in stylesCss) {
        setStyle(el, stylesCss[prop], item[prop]);
      }
    }
    /**
     * Render SVG defs, as needed.
     * Must be called *after* marks have been processed to ensure the
     * collected state is current and accurate.
     */
    defs() {
      const svg = this._svg, defs = this._defs;
      let el = defs.el, index2 = 0;
      for (const id2 in defs.gradient) {
        if (!el) defs.el = el = domChild(svg, RootIndex + 1, "defs", svgns);
        index2 = updateGradient(el, defs.gradient[id2], index2);
      }
      for (const id2 in defs.clipping) {
        if (!el) defs.el = el = domChild(svg, RootIndex + 1, "defs", svgns);
        index2 = updateClipping(el, defs.clipping[id2], index2);
      }
      if (el) {
        index2 === 0 ? (svg.removeChild(el), defs.el = null) : domClear(el, index2);
      }
    }
    /**
     * Clear defs caches.
     */
    _clearDefs() {
      const def2 = this._defs;
      def2.gradient = {};
      def2.clipping = {};
    }
  }
  function dirtyParents(item, id2) {
    for (; item && item.dirty !== id2; item = item.mark.group) {
      item.dirty = id2;
      if (item.mark && item.mark.dirty !== id2) {
        item.mark.dirty = id2;
      } else return;
    }
  }
  function updateGradient(el, grad, index2) {
    let i, n, stop2;
    if (grad.gradient === "radial") {
      let pt = domChild(el, index2++, "pattern", svgns);
      setAttributes(pt, {
        id: patternPrefix + grad.id,
        viewBox: "0,0,1,1",
        width: "100%",
        height: "100%",
        preserveAspectRatio: "xMidYMid slice"
      });
      pt = domChild(pt, 0, "rect", svgns);
      setAttributes(pt, {
        width: 1,
        height: 1,
        fill: `url(${href()}#${grad.id})`
      });
      el = domChild(el, index2++, "radialGradient", svgns);
      setAttributes(el, {
        id: grad.id,
        fx: grad.x1,
        fy: grad.y1,
        fr: grad.r1,
        cx: grad.x2,
        cy: grad.y2,
        r: grad.r2
      });
    } else {
      el = domChild(el, index2++, "linearGradient", svgns);
      setAttributes(el, {
        id: grad.id,
        x1: grad.x1,
        x2: grad.x2,
        y1: grad.y1,
        y2: grad.y2
      });
    }
    for (i = 0, n = grad.stops.length; i < n; ++i) {
      stop2 = domChild(el, i, "stop", svgns);
      stop2.setAttribute("offset", grad.stops[i].offset);
      stop2.setAttribute("stop-color", grad.stops[i].color);
    }
    domClear(el, i);
    return index2;
  }
  function updateClipping(el, clip2, index2) {
    let mask;
    el = domChild(el, index2, "clipPath", svgns);
    el.setAttribute("id", clip2.id);
    if (clip2.path) {
      mask = domChild(el, 0, "path", svgns);
      mask.setAttribute("d", clip2.path);
    } else {
      mask = domChild(el, 0, "rect", svgns);
      setAttributes(mask, {
        x: 0,
        y: 0,
        width: clip2.width,
        height: clip2.height
      });
    }
    domClear(el, 1);
    return index2 + 1;
  }
  function recurse(renderer, el, group2, markTypes) {
    el = el.lastChild.previousSibling;
    let prev, idx = 0;
    visit(group2, (item) => {
      prev = renderer.mark(el, item, prev, markTypes);
      ++idx;
    });
    domClear(el, 1 + idx);
  }
  function bind$1(item, el, sibling, tag, svg) {
    let node = item._svg, doc;
    if (!node) {
      doc = el.ownerDocument;
      node = domCreate(doc, tag, svgns);
      item._svg = node;
      if (item.mark) {
        node.__data__ = item;
        node.__values__ = {
          fill: "default"
        };
        if (tag === "g") {
          const bg = domCreate(doc, "path", svgns);
          node.appendChild(bg);
          bg.__data__ = item;
          const cg = domCreate(doc, "g", svgns);
          node.appendChild(cg);
          cg.__data__ = item;
          const fg = domCreate(doc, "path", svgns);
          node.appendChild(fg);
          fg.__data__ = item;
          fg.__values__ = {
            fill: "default"
          };
        }
      }
    }
    if (node.ownerSVGElement !== svg || siblingCheck(node, sibling)) {
      el.insertBefore(node, sibling ? sibling.nextSibling : el.firstChild);
    }
    return node;
  }
  function siblingCheck(node, sibling) {
    return node.parentNode && node.parentNode.childNodes.length > 1 && node.previousSibling != sibling;
  }
  let element$1 = null, values$2 = null;
  const mark_extras = {
    group(mdef, el, item) {
      const fg = element$1 = el.childNodes[2];
      values$2 = fg.__values__;
      mdef.foreground(emit, item, this);
      values$2 = el.__values__;
      element$1 = el.childNodes[1];
      mdef.content(emit, item, this);
      const bg = element$1 = el.childNodes[0];
      mdef.background(emit, item, this);
      const value2 = item.mark.interactive === false ? "none" : null;
      if (value2 !== values$2.events) {
        setAttribute(fg, "pointer-events", value2);
        setAttribute(bg, "pointer-events", value2);
        values$2.events = value2;
      }
      if (item.strokeForeground && item.stroke) {
        const fill2 = item.fill;
        setAttribute(fg, "display", null);
        this.style(bg, item);
        setAttribute(bg, "stroke", null);
        if (fill2) item.fill = null;
        values$2 = fg.__values__;
        this.style(fg, item);
        if (fill2) item.fill = fill2;
        element$1 = null;
      } else {
        setAttribute(fg, "display", "none");
      }
    },
    image(mdef, el, item) {
      if (item.smooth === false) {
        setStyle(el, "image-rendering", "optimizeSpeed");
        setStyle(el, "image-rendering", "pixelated");
      } else {
        setStyle(el, "image-rendering", null);
      }
    },
    text(mdef, el, item) {
      const tl2 = textLines(item);
      let key2, value2, doc, lh;
      if (isArray(tl2)) {
        value2 = tl2.map((_) => textValue(item, _));
        key2 = value2.join("\n");
        if (key2 !== values$2.text) {
          domClear(el, 0);
          doc = el.ownerDocument;
          lh = lineHeight(item);
          value2.forEach((t, i) => {
            const ts2 = domCreate(doc, "tspan", svgns);
            ts2.__data__ = item;
            ts2.textContent = t;
            if (i) {
              ts2.setAttribute("x", 0);
              ts2.setAttribute("dy", lh);
            }
            el.appendChild(ts2);
          });
          values$2.text = key2;
        }
      } else {
        value2 = textValue(item, tl2);
        if (value2 !== values$2.text) {
          el.textContent = value2;
          values$2.text = value2;
        }
      }
      setAttribute(el, "font-family", fontFamily(item));
      setAttribute(el, "font-size", fontSize(item) + "px");
      setAttribute(el, "font-style", item.fontStyle);
      setAttribute(el, "font-variant", item.fontVariant);
      setAttribute(el, "font-weight", item.fontWeight);
    }
  };
  function emit(name, value2, ns) {
    if (value2 === values$2[name]) return;
    if (ns) {
      setAttributeNS(element$1, name, value2, ns);
    } else {
      setAttribute(element$1, name, value2);
    }
    values$2[name] = value2;
  }
  function setStyle(el, name, value2) {
    if (value2 !== values$2[name]) {
      if (value2 == null) {
        el.style.removeProperty(name);
      } else {
        el.style.setProperty(name, value2 + "");
      }
      values$2[name] = value2;
    }
  }
  function setAttributes(el, attrs) {
    for (const key2 in attrs) {
      setAttribute(el, key2, attrs[key2]);
    }
  }
  function setAttribute(el, name, value2) {
    if (value2 != null) {
      el.setAttribute(name, value2);
    } else {
      el.removeAttribute(name);
    }
  }
  function setAttributeNS(el, name, value2, ns) {
    if (value2 != null) {
      el.setAttributeNS(ns, name, value2);
    } else {
      el.removeAttributeNS(ns, name);
    }
  }
  function href() {
    let loc;
    return typeof window === "undefined" ? "" : (loc = window.location).hash ? loc.href.slice(0, -loc.hash.length) : loc.href;
  }
  class SVGStringRenderer extends Renderer {
    constructor(loader2) {
      super(loader2);
      this._text = null;
      this._defs = {
        gradient: {},
        clipping: {}
      };
    }
    /**
     * Returns the rendered SVG text string,
     * or null if rendering has not yet occurred.
     */
    svg() {
      return this._text;
    }
    /**
     * Internal rendering method.
     * @param {object} scene - The root mark of a scenegraph to render.
     */
    _render(scene) {
      const m2 = markup();
      m2.open("svg", extend$1({}, metadata, {
        class: "marks",
        width: this._width * this._scale,
        height: this._height * this._scale,
        viewBox: `0 0 ${this._width} ${this._height}`
      }));
      const bg = this._bgcolor;
      if (bg && bg !== "transparent" && bg !== "none") {
        m2.open("rect", {
          width: this._width,
          height: this._height,
          fill: bg
        }).close();
      }
      m2.open("g", rootAttributes, {
        transform: "translate(" + this._origin + ")"
      });
      this.mark(m2, scene);
      m2.close();
      this.defs(m2);
      this._text = m2.close() + "";
      return this;
    }
    /**
     * Render a set of mark items.
     * @param {object} m - The markup context.
     * @param {object} scene - The mark parent to render.
     */
    mark(m2, scene) {
      const mdef = Marks[scene.marktype], tag = mdef.tag, attrList = [ariaItemAttributes, mdef.attr];
      m2.open("g", {
        "class": cssClass(scene),
        "clip-path": scene.clip ? clip$1$1(this, scene, scene.group) : null
      }, ariaMarkAttributes(scene), {
        "pointer-events": tag !== "g" && scene.interactive === false ? "none" : null
      });
      const process2 = (item) => {
        const href2 = this.href(item);
        if (href2) m2.open("a", href2);
        m2.open(tag, this.attr(scene, item, attrList, tag !== "g" ? tag : null));
        if (tag === "text") {
          const tl2 = textLines(item);
          if (isArray(tl2)) {
            const attrs = {
              x: 0,
              dy: lineHeight(item)
            };
            for (let i = 0; i < tl2.length; ++i) {
              m2.open("tspan", i ? attrs : null).text(textValue(item, tl2[i])).close();
            }
          } else {
            m2.text(textValue(item, tl2));
          }
        } else if (tag === "g") {
          const fore = item.strokeForeground, fill2 = item.fill, stroke2 = item.stroke;
          if (fore && stroke2) {
            item.stroke = null;
          }
          m2.open("path", this.attr(scene, item, mdef.background, "bgrect")).close();
          m2.open("g", this.attr(scene, item, mdef.content));
          visit(item, (scene2) => this.mark(m2, scene2));
          m2.close();
          if (fore && stroke2) {
            if (fill2) item.fill = null;
            item.stroke = stroke2;
            m2.open("path", this.attr(scene, item, mdef.foreground, "bgrect")).close();
            if (fill2) item.fill = fill2;
          } else {
            m2.open("path", this.attr(scene, item, mdef.foreground, "bgfore")).close();
          }
        }
        m2.close();
        if (href2) m2.close();
      };
      if (mdef.nested) {
        if (scene.items && scene.items.length) process2(scene.items[0]);
      } else {
        visit(scene, process2);
      }
      return m2.close();
    }
    /**
     * Get href attributes for a hyperlinked mark item.
     * @param {Item} item - The mark item.
     */
    href(item) {
      const href2 = item.href;
      let attr2;
      if (href2) {
        if (attr2 = this._hrefs && this._hrefs[href2]) {
          return attr2;
        } else {
          this.sanitizeURL(href2).then((attr3) => {
            attr3["xlink:href"] = attr3.href;
            attr3.href = null;
            (this._hrefs || (this._hrefs = {}))[href2] = attr3;
          });
        }
      }
      return null;
    }
    /**
     * Get an object of SVG attributes for a mark item.
     * @param {object} scene - The mark parent.
     * @param {Item} item - The mark item.
     * @param {array|function} attrs - One or more attribute emitters.
     * @param {string} tag - The tag being rendered.
     */
    attr(scene, item, attrs, tag) {
      const object2 = {}, emit2 = (name, value2, ns, prefixed) => {
        object2[prefixed || name] = value2;
      };
      if (Array.isArray(attrs)) {
        attrs.forEach((fn) => fn(emit2, item, this));
      } else {
        attrs(emit2, item, this);
      }
      if (tag) {
        style(object2, item, scene, tag, this._defs);
      }
      return object2;
    }
    /**
     * Render SVG defs, as needed.
     * Must be called *after* marks have been processed to ensure the
     * collected state is current and accurate.
     * @param {object} m - The markup context.
     */
    defs(m2) {
      const gradient2 = this._defs.gradient, clipping = this._defs.clipping, count2 = Object.keys(gradient2).length + Object.keys(clipping).length;
      if (count2 === 0) return;
      m2.open("defs");
      for (const id2 in gradient2) {
        const def2 = gradient2[id2], stops = def2.stops;
        if (def2.gradient === "radial") {
          m2.open("pattern", {
            id: patternPrefix + id2,
            viewBox: "0,0,1,1",
            width: "100%",
            height: "100%",
            preserveAspectRatio: "xMidYMid slice"
          });
          m2.open("rect", {
            width: "1",
            height: "1",
            fill: "url(#" + id2 + ")"
          }).close();
          m2.close();
          m2.open("radialGradient", {
            id: id2,
            fx: def2.x1,
            fy: def2.y1,
            fr: def2.r1,
            cx: def2.x2,
            cy: def2.y2,
            r: def2.r2
          });
        } else {
          m2.open("linearGradient", {
            id: id2,
            x1: def2.x1,
            x2: def2.x2,
            y1: def2.y1,
            y2: def2.y2
          });
        }
        for (let i = 0; i < stops.length; ++i) {
          m2.open("stop", {
            offset: stops[i].offset,
            "stop-color": stops[i].color
          }).close();
        }
        m2.close();
      }
      for (const id2 in clipping) {
        const def2 = clipping[id2];
        m2.open("clipPath", {
          id: id2
        });
        if (def2.path) {
          m2.open("path", {
            d: def2.path
          }).close();
        } else {
          m2.open("rect", {
            x: 0,
            y: 0,
            width: def2.width,
            height: def2.height
          }).close();
        }
        m2.close();
      }
      m2.close();
    }
  }
  function style(s, item, scene, tag, defs) {
    let styleList;
    if (item == null) return s;
    if (tag === "bgrect" && scene.interactive === false) {
      s["pointer-events"] = "none";
    }
    if (tag === "bgfore") {
      if (scene.interactive === false) {
        s["pointer-events"] = "none";
      }
      s.display = "none";
      if (item.fill !== null) return s;
    }
    if (tag === "image" && item.smooth === false) {
      styleList = ["image-rendering: optimizeSpeed;", "image-rendering: pixelated;"];
    }
    if (tag === "text") {
      s["font-family"] = fontFamily(item);
      s["font-size"] = fontSize(item) + "px";
      s["font-style"] = item.fontStyle;
      s["font-variant"] = item.fontVariant;
      s["font-weight"] = item.fontWeight;
    }
    for (const prop in stylesAttr) {
      let value2 = item[prop];
      const name = stylesAttr[prop];
      if (value2 === "transparent" && (name === "fill" || name === "stroke")) ;
      else if (value2 != null) {
        if (isGradient(value2)) {
          value2 = gradientRef(value2, defs.gradient, "");
        }
        s[name] = value2;
      }
    }
    for (const prop in stylesCss) {
      const value2 = item[prop];
      if (value2 != null) {
        styleList = styleList || [];
        styleList.push(`${stylesCss[prop]}: ${value2};`);
      }
    }
    if (styleList) {
      s.style = styleList.join(" ");
    }
    return s;
  }
  const OPTS = {
    svgMarkTypes: ["text"],
    svgOnTop: true,
    debug: false
  };
  function setHybridRendererOptions(options) {
    OPTS["svgMarkTypes"] = options.svgMarkTypes ?? ["text"];
    OPTS["svgOnTop"] = options.svgOnTop ?? true;
    OPTS["debug"] = options.debug ?? false;
  }
  class HybridRenderer extends Renderer {
    constructor(loader2) {
      super(loader2);
      this._svgRenderer = new SVGRenderer(loader2);
      this._canvasRenderer = new CanvasRenderer(loader2);
    }
    /**
     * Initialize a new HybridRenderer instance.
     * @param {DOMElement} el - The containing DOM element for the display.
     * @param {number} width - The coordinate width of the display, in pixels.
     * @param {number} height - The coordinate height of the display, in pixels.
     * @param {Array<number>} origin - The origin of the display, in pixels.
     *   The coordinate system will be translated to this point.
     * @param {number} [scaleFactor=1] - Optional scaleFactor by which to multiply
     *   the width and height to determine the final pixel size.
     * @return {HybridRenderer} - This renderer instance.
     */
    initialize(el, width2, height2, origin, scaleFactor) {
      this._root_el = domChild(el, 0, "div");
      const bottomEl = domChild(this._root_el, 0, "div");
      const topEl = domChild(this._root_el, 1, "div");
      this._root_el.style.position = "relative";
      if (!OPTS.debug) {
        bottomEl.style.height = "100%";
        topEl.style.position = "absolute";
        topEl.style.top = "0";
        topEl.style.left = "0";
        topEl.style.height = "100%";
        topEl.style.width = "100%";
      }
      this._svgEl = OPTS.svgOnTop ? topEl : bottomEl;
      this._canvasEl = OPTS.svgOnTop ? bottomEl : topEl;
      this._svgEl.style.pointerEvents = "none";
      this._canvasRenderer.initialize(this._canvasEl, width2, height2, origin, scaleFactor);
      this._svgRenderer.initialize(this._svgEl, width2, height2, origin, scaleFactor);
      return super.initialize(el, width2, height2, origin, scaleFactor);
    }
    /**
     * Flag a mark item as dirty.
     * @param {Item} item - The mark item.
     */
    dirty(item) {
      if (OPTS.svgMarkTypes.includes(item.mark.marktype)) {
        this._svgRenderer.dirty(item);
      } else {
        this._canvasRenderer.dirty(item);
      }
      return this;
    }
    /**
     * Internal rendering method.
     * @param {object} scene - The root mark of a scenegraph to render.
     * @param {Array} markTypes - Array of the mark types to render.
     *                            If undefined, render all mark types
     */
    _render(scene, markTypes) {
      const allMarkTypes = markTypes ?? ["arc", "area", "image", "line", "path", "rect", "rule", "shape", "symbol", "text", "trail"];
      const canvasMarkTypes = allMarkTypes.filter((m2) => !OPTS.svgMarkTypes.includes(m2));
      this._svgRenderer.render(scene, OPTS.svgMarkTypes);
      this._canvasRenderer.render(scene, canvasMarkTypes);
    }
    /**
     * Resize the display.
     * @param {number} width - The new coordinate width of the display, in pixels.
     * @param {number} height - The new coordinate height of the display, in pixels.
     * @param {Array<number>} origin - The new origin of the display, in pixels.
     *   The coordinate system will be translated to this point.
     * @param {number} [scaleFactor=1] - Optional scaleFactor by which to multiply
     *   the width and height to determine the final pixel size.
     * @return {SVGRenderer} - This renderer instance;
     */
    resize(width2, height2, origin, scaleFactor) {
      super.resize(width2, height2, origin, scaleFactor);
      this._svgRenderer.resize(width2, height2, origin, scaleFactor);
      this._canvasRenderer.resize(width2, height2, origin, scaleFactor);
      return this;
    }
    background(bgcolor) {
      if (OPTS.svgOnTop) {
        this._canvasRenderer.background(bgcolor);
      } else {
        this._svgRenderer.background(bgcolor);
      }
      return this;
    }
  }
  class HybridHandler extends CanvasHandler {
    constructor(loader2, tooltip2) {
      super(loader2, tooltip2);
    }
    initialize(el, origin, obj) {
      const canvas = domChild(domChild(el, 0, "div"), OPTS.svgOnTop ? 0 : 1, "div");
      return super.initialize(canvas, origin, obj);
    }
  }
  const Canvas = "canvas";
  const Hybrid = "hybrid";
  const PNG = "png";
  const SVG = "svg";
  const None$1 = "none";
  const RenderType = {
    Canvas,
    PNG,
    SVG,
    Hybrid,
    None: None$1
  };
  const modules = {};
  modules[Canvas] = modules[PNG] = {
    renderer: CanvasRenderer,
    headless: CanvasRenderer,
    handler: CanvasHandler
  };
  modules[SVG] = {
    renderer: SVGRenderer,
    headless: SVGStringRenderer,
    handler: SVGHandler
  };
  modules[Hybrid] = {
    renderer: HybridRenderer,
    headless: HybridRenderer,
    handler: HybridHandler
  };
  modules[None$1] = {};
  function renderModule(name, _) {
    name = String(name || "").toLowerCase();
    if (arguments.length > 1) {
      modules[name] = _;
      return this;
    } else {
      return modules[name];
    }
  }
  function intersect$2(scene, bounds2, filter2) {
    const hits = [], box = new Bounds().union(bounds2), type2 = scene.marktype;
    return type2 ? intersectMark(scene, box, filter2, hits) : type2 === "group" ? intersectGroup(scene, box, filter2, hits) : error$1("Intersect scene must be mark node or group item.");
  }
  function intersectMark(mark, box, filter2, hits) {
    if (visitMark(mark, box, filter2)) {
      const items = mark.items, type2 = mark.marktype, n = items.length;
      let i = 0;
      if (type2 === "group") {
        for (; i < n; ++i) {
          intersectGroup(items[i], box, filter2, hits);
        }
      } else {
        for (const test2 = Marks[type2].isect; i < n; ++i) {
          const item = items[i];
          if (intersectItem(item, box, test2)) hits.push(item);
        }
      }
    }
    return hits;
  }
  function visitMark(mark, box, filter2) {
    return mark.bounds && box.intersects(mark.bounds) && (mark.marktype === "group" || mark.interactive !== false && (!filter2 || filter2(mark)));
  }
  function intersectGroup(group2, box, filter2, hits) {
    if (filter2 && filter2(group2.mark) && intersectItem(group2, box, Marks.group.isect)) {
      hits.push(group2);
    }
    const marks = group2.items, n = marks && marks.length;
    if (n) {
      const x2 = group2.x || 0, y2 = group2.y || 0;
      box.translate(-x2, -y2);
      for (let i = 0; i < n; ++i) {
        intersectMark(marks[i], box, filter2, hits);
      }
      box.translate(x2, y2);
    }
    return hits;
  }
  function intersectItem(item, box, test2) {
    const bounds2 = item.bounds;
    return box.encloses(bounds2) || box.intersects(bounds2) && test2(item, box);
  }
  const clipBounds = new Bounds();
  function boundClip(mark) {
    const clip2 = mark.clip;
    if (isFunction(clip2)) {
      clip2(boundContext(clipBounds.clear()));
    } else if (clip2) {
      clipBounds.set(0, 0, mark.group.width, mark.group.height);
    } else return;
    mark.bounds.intersect(clipBounds);
  }
  const TOLERANCE = 1e-9;
  function sceneEqual(a2, b2, key2) {
    return a2 === b2 ? true : key2 === "path" ? pathEqual(a2, b2) : a2 instanceof Date && b2 instanceof Date ? +a2 === +b2 : isNumber$1(a2) && isNumber$1(b2) ? Math.abs(a2 - b2) <= TOLERANCE : !a2 || !b2 || !isObject(a2) && !isObject(b2) ? a2 == b2 : objectEqual(a2, b2);
  }
  function pathEqual(a2, b2) {
    return sceneEqual(parse$3(a2), parse$3(b2));
  }
  function objectEqual(a2, b2) {
    var ka = Object.keys(a2), kb = Object.keys(b2), key2, i;
    if (ka.length !== kb.length) return false;
    ka.sort();
    kb.sort();
    for (i = ka.length - 1; i >= 0; i--) {
      if (ka[i] != kb[i]) return false;
    }
    for (i = ka.length - 1; i >= 0; i--) {
      key2 = ka[i];
      if (!sceneEqual(a2[key2], b2[key2], key2)) return false;
    }
    return typeof a2 === typeof b2;
  }
  function resetSVGDefIds() {
    resetSVGClipId();
    resetSVGGradientId();
  }
  const Top$1 = "top";
  const Left$1 = "left";
  const Right$1 = "right";
  const Bottom$1 = "bottom";
  const TopLeft = "top-left";
  const TopRight = "top-right";
  const BottomLeft = "bottom-left";
  const BottomRight = "bottom-right";
  const Start$1 = "start";
  const Middle$1 = "middle";
  const End$1 = "end";
  const X$1 = "x";
  const Y$1 = "y";
  const Group = "group";
  const AxisRole$1 = "axis";
  const TitleRole$1 = "title";
  const FrameRole$1 = "frame";
  const ScopeRole$1 = "scope";
  const LegendRole$1 = "legend";
  const RowHeader = "row-header";
  const RowFooter = "row-footer";
  const RowTitle = "row-title";
  const ColHeader = "column-header";
  const ColFooter = "column-footer";
  const ColTitle = "column-title";
  const Padding$1 = "padding";
  const Symbols$1 = "symbol";
  const Fit = "fit";
  const FitX = "fit-x";
  const FitY = "fit-y";
  const Pad = "pad";
  const None = "none";
  const All = "all";
  const Each = "each";
  const Flush = "flush";
  const Column = "column";
  const Row = "row";
  function Bound$1(params2) {
    Transform.call(this, null, params2);
  }
  inherits(Bound$1, Transform, {
    transform(_, pulse2) {
      const view = pulse2.dataflow, mark = _.mark, type2 = mark.marktype, entry2 = Marks[type2], bound2 = entry2.bound;
      let markBounds = mark.bounds, rebound;
      if (entry2.nested) {
        if (mark.items.length) view.dirty(mark.items[0]);
        markBounds = boundItem(mark, bound2);
        mark.items.forEach((item) => {
          item.bounds.clear().union(markBounds);
        });
      } else if (type2 === Group || _.modified()) {
        pulse2.visit(pulse2.MOD, (item) => view.dirty(item));
        markBounds.clear();
        mark.items.forEach((item) => markBounds.union(boundItem(item, bound2)));
        switch (mark.role) {
          case AxisRole$1:
          case LegendRole$1:
          case TitleRole$1:
            pulse2.reflow();
        }
      } else {
        rebound = pulse2.changed(pulse2.REM);
        pulse2.visit(pulse2.ADD, (item) => {
          markBounds.union(boundItem(item, bound2));
        });
        pulse2.visit(pulse2.MOD, (item) => {
          rebound = rebound || markBounds.alignsWith(item.bounds);
          view.dirty(item);
          markBounds.union(boundItem(item, bound2));
        });
        if (rebound) {
          markBounds.clear();
          mark.items.forEach((item) => markBounds.union(item.bounds));
        }
      }
      boundClip(mark);
      return pulse2.modifies("bounds");
    }
  });
  function boundItem(item, bound2, opt) {
    return bound2(item.bounds.clear(), item, opt);
  }
  const COUNTER_NAME = ":vega_identifier:";
  function Identifier$2(params2) {
    Transform.call(this, 0, params2);
  }
  Identifier$2.Definition = {
    "type": "Identifier",
    "metadata": {
      "modifies": true
    },
    "params": [{
      "name": "as",
      "type": "string",
      "required": true
    }]
  };
  inherits(Identifier$2, Transform, {
    transform(_, pulse2) {
      const counter2 = getCounter(pulse2.dataflow), as = _.as;
      let id2 = counter2.value;
      pulse2.visit(pulse2.ADD, (t) => t[as] = t[as] || ++id2);
      counter2.set(this.value = id2);
      return pulse2;
    }
  });
  function getCounter(view) {
    return view._signals[COUNTER_NAME] || (view._signals[COUNTER_NAME] = view.add(0));
  }
  function Mark$2(params2) {
    Transform.call(this, null, params2);
  }
  inherits(Mark$2, Transform, {
    transform(_, pulse2) {
      let mark = this.value;
      if (!mark) {
        mark = pulse2.dataflow.scenegraph().mark(_.markdef, lookup$1$1(_), _.index);
        mark.group.context = _.context;
        if (!_.context.group) _.context.group = mark.group;
        mark.source = this.source;
        mark.clip = _.clip;
        mark.interactive = _.interactive;
        this.value = mark;
      }
      const Init = mark.marktype === Group ? GroupItem : Item;
      pulse2.visit(pulse2.ADD, (item) => Init.call(item, mark));
      if (_.modified("clip") || _.modified("interactive")) {
        mark.clip = _.clip;
        mark.interactive = !!_.interactive;
        mark.zdirty = true;
        pulse2.reflow();
      }
      mark.items = pulse2.source;
      return pulse2;
    }
  });
  function lookup$1$1(_) {
    const g = _.groups, p = _.parent;
    return g && g.size === 1 ? g.get(Object.keys(g.object)[0]) : g && p ? g.lookup(p) : null;
  }
  function Overlap$1(params2) {
    Transform.call(this, null, params2);
  }
  const methods = {
    parity: (items) => items.filter((item, i) => i % 2 ? item.opacity = 0 : 1),
    greedy: (items, sep) => {
      let a2;
      return items.filter((b2, i) => !i || !intersect$1(a2.bounds, b2.bounds, sep) ? (a2 = b2, 1) : b2.opacity = 0);
    }
  };
  const intersect$1 = (a2, b2, sep) => sep > Math.max(b2.x1 - a2.x2, a2.x1 - b2.x2, b2.y1 - a2.y2, a2.y1 - b2.y2);
  const hasOverlap = (items, pad2) => {
    for (var i = 1, n = items.length, a2 = items[0].bounds, b2; i < n; a2 = b2, ++i) {
      if (intersect$1(a2, b2 = items[i].bounds, pad2)) return true;
    }
  };
  const hasBounds = (item) => {
    const b2 = item.bounds;
    return b2.width() > 1 && b2.height() > 1;
  };
  const boundTest = (scale2, orient2, tolerance) => {
    var range2 = scale2.range(), b2 = new Bounds();
    if (orient2 === Top$1 || orient2 === Bottom$1) {
      b2.set(range2[0], -Infinity, range2[1], Infinity);
    } else {
      b2.set(-Infinity, range2[0], Infinity, range2[1]);
    }
    b2.expand(tolerance || 1);
    return (item) => b2.encloses(item.bounds);
  };
  const reset$1 = (source2) => {
    source2.forEach((item) => item.opacity = 1);
    return source2;
  };
  const reflow = (pulse2, _) => pulse2.reflow(_.modified()).modifies("opacity");
  inherits(Overlap$1, Transform, {
    transform(_, pulse2) {
      const reduce2 = methods[_.method] || methods.parity, sep = _.separation || 0;
      let source2 = pulse2.materialize(pulse2.SOURCE).source, items, test2;
      if (!source2 || !source2.length) return;
      if (!_.method) {
        if (_.modified("method")) {
          reset$1(source2);
          pulse2 = reflow(pulse2, _);
        }
        return pulse2;
      }
      source2 = source2.filter(hasBounds);
      if (!source2.length) return;
      if (_.sort) {
        source2 = source2.slice().sort(_.sort);
      }
      items = reset$1(source2);
      pulse2 = reflow(pulse2, _);
      if (items.length >= 3 && hasOverlap(items, sep)) {
        do {
          items = reduce2(items, sep);
        } while (items.length >= 3 && hasOverlap(items, sep));
        if (items.length < 3 && !peek$2(source2).opacity) {
          if (items.length > 1) peek$2(items).opacity = 0;
          peek$2(source2).opacity = 1;
        }
      }
      if (_.boundScale && _.boundTolerance >= 0) {
        test2 = boundTest(_.boundScale, _.boundOrient, +_.boundTolerance);
        source2.forEach((item) => {
          if (!test2(item)) item.opacity = 0;
        });
      }
      const bounds2 = items[0].mark.bounds.clear();
      source2.forEach((item) => {
        if (item.opacity) bounds2.union(item.bounds);
      });
      return pulse2;
    }
  });
  function Render$1(params2) {
    Transform.call(this, null, params2);
  }
  inherits(Render$1, Transform, {
    transform(_, pulse2) {
      const view = pulse2.dataflow;
      pulse2.visit(pulse2.ALL, (item) => view.dirty(item));
      if (pulse2.fields && pulse2.fields["zindex"]) {
        const item = pulse2.source && pulse2.source[0];
        if (item) item.mark.zdirty = true;
      }
    }
  });
  const tempBounds = new Bounds();
  function set$3(item, property2, value2) {
    return item[property2] === value2 ? 0 : (item[property2] = value2, 1);
  }
  function isYAxis(mark) {
    var orient2 = mark.items[0].orient;
    return orient2 === Left$1 || orient2 === Right$1;
  }
  function axisIndices(datum2) {
    let index2 = +datum2.grid;
    return [
      datum2.ticks ? index2++ : -1,
      // ticks index
      datum2.labels ? index2++ : -1,
      // labels index
      index2 + +datum2.domain
      // title index
    ];
  }
  function axisLayout(view, axis, width2, height2) {
    var item = axis.items[0], datum2 = item.datum, delta = item.translate != null ? item.translate : 0.5, orient2 = item.orient, indices = axisIndices(datum2), range2 = item.range, offset2 = item.offset, position2 = item.position, minExtent = item.minExtent, maxExtent = item.maxExtent, title2 = datum2.title && item.items[indices[2]].items[0], titlePadding = item.titlePadding, bounds2 = item.bounds, dl = title2 && multiLineOffset(title2), x2 = 0, y2 = 0, i, s;
    tempBounds.clear().union(bounds2);
    bounds2.clear();
    if ((i = indices[0]) > -1) bounds2.union(item.items[i].bounds);
    if ((i = indices[1]) > -1) bounds2.union(item.items[i].bounds);
    switch (orient2) {
      case Top$1:
        x2 = position2 || 0;
        y2 = -offset2;
        s = Math.max(minExtent, Math.min(maxExtent, -bounds2.y1));
        bounds2.add(0, -s).add(range2, 0);
        if (title2) axisTitleLayout(view, title2, s, titlePadding, dl, 0, -1, bounds2);
        break;
      case Left$1:
        x2 = -offset2;
        y2 = position2 || 0;
        s = Math.max(minExtent, Math.min(maxExtent, -bounds2.x1));
        bounds2.add(-s, 0).add(0, range2);
        if (title2) axisTitleLayout(view, title2, s, titlePadding, dl, 1, -1, bounds2);
        break;
      case Right$1:
        x2 = width2 + offset2;
        y2 = position2 || 0;
        s = Math.max(minExtent, Math.min(maxExtent, bounds2.x2));
        bounds2.add(0, 0).add(s, range2);
        if (title2) axisTitleLayout(view, title2, s, titlePadding, dl, 1, 1, bounds2);
        break;
      case Bottom$1:
        x2 = position2 || 0;
        y2 = height2 + offset2;
        s = Math.max(minExtent, Math.min(maxExtent, bounds2.y2));
        bounds2.add(0, 0).add(range2, s);
        if (title2) axisTitleLayout(view, title2, s, titlePadding, 0, 0, 1, bounds2);
        break;
      default:
        x2 = item.x;
        y2 = item.y;
    }
    boundStroke(bounds2.translate(x2, y2), item);
    if (set$3(item, "x", x2 + delta) | set$3(item, "y", y2 + delta)) {
      item.bounds = tempBounds;
      view.dirty(item);
      item.bounds = bounds2;
      view.dirty(item);
    }
    return item.mark.bounds.clear().union(bounds2);
  }
  function axisTitleLayout(view, title2, offset2, pad2, dl, isYAxis2, sign2, bounds2) {
    const b2 = title2.bounds;
    if (title2.auto) {
      const v = sign2 * (offset2 + dl + pad2);
      let dx = 0, dy = 0;
      view.dirty(title2);
      isYAxis2 ? dx = (title2.x || 0) - (title2.x = v) : dy = (title2.y || 0) - (title2.y = v);
      title2.mark.bounds.clear().union(b2.translate(-dx, -dy));
      view.dirty(title2);
    }
    bounds2.union(b2);
  }
  const min = (a2, b2) => Math.floor(Math.min(a2, b2));
  const max = (a2, b2) => Math.ceil(Math.max(a2, b2));
  function gridLayoutGroups(group2) {
    var groups = group2.items, n = groups.length, i = 0, mark, items;
    const views = {
      marks: [],
      rowheaders: [],
      rowfooters: [],
      colheaders: [],
      colfooters: [],
      rowtitle: null,
      coltitle: null
    };
    for (; i < n; ++i) {
      mark = groups[i];
      items = mark.items;
      if (mark.marktype === Group) {
        switch (mark.role) {
          case AxisRole$1:
          case LegendRole$1:
          case TitleRole$1:
            break;
          case RowHeader:
            views.rowheaders.push(...items);
            break;
          case RowFooter:
            views.rowfooters.push(...items);
            break;
          case ColHeader:
            views.colheaders.push(...items);
            break;
          case ColFooter:
            views.colfooters.push(...items);
            break;
          case RowTitle:
            views.rowtitle = items[0];
            break;
          case ColTitle:
            views.coltitle = items[0];
            break;
          default:
            views.marks.push(...items);
        }
      }
    }
    return views;
  }
  function bboxFlush(item) {
    return new Bounds().set(0, 0, item.width || 0, item.height || 0);
  }
  function bboxFull(item) {
    const b2 = item.bounds.clone();
    return b2.empty() ? b2.set(0, 0, 0, 0) : b2.translate(-(item.x || 0), -(item.y || 0));
  }
  function get$1(opt, key2, d) {
    const v = isObject(opt) ? opt[key2] : opt;
    return v != null ? v : d !== void 0 ? d : 0;
  }
  function offsetValue$1(v) {
    return v < 0 ? Math.ceil(-v) : 0;
  }
  function gridLayout(view, groups, opt) {
    var dirty = !opt.nodirty, bbox = opt.bounds === Flush ? bboxFlush : bboxFull, bounds2 = tempBounds.set(0, 0, 0, 0), alignCol = get$1(opt.align, Column), alignRow = get$1(opt.align, Row), padCol = get$1(opt.padding, Column), padRow = get$1(opt.padding, Row), ncols = opt.columns || groups.length, nrows = ncols <= 0 ? 1 : Math.ceil(groups.length / ncols), n = groups.length, xOffset = Array(n), xExtent = Array(ncols), xMax = 0, yOffset = Array(n), yExtent = Array(nrows), yMax = 0, dx = Array(n), dy = Array(n), boxes = Array(n), m2, i, c2, r, b2, g, px2, py2, x2, y2, offset2;
    for (i = 0; i < ncols; ++i) xExtent[i] = 0;
    for (i = 0; i < nrows; ++i) yExtent[i] = 0;
    for (i = 0; i < n; ++i) {
      g = groups[i];
      b2 = boxes[i] = bbox(g);
      g.x = g.x || 0;
      dx[i] = 0;
      g.y = g.y || 0;
      dy[i] = 0;
      c2 = i % ncols;
      r = ~~(i / ncols);
      xMax = Math.max(xMax, px2 = Math.ceil(b2.x2));
      yMax = Math.max(yMax, py2 = Math.ceil(b2.y2));
      xExtent[c2] = Math.max(xExtent[c2], px2);
      yExtent[r] = Math.max(yExtent[r], py2);
      xOffset[i] = padCol + offsetValue$1(b2.x1);
      yOffset[i] = padRow + offsetValue$1(b2.y1);
      if (dirty) view.dirty(groups[i]);
    }
    for (i = 0; i < n; ++i) {
      if (i % ncols === 0) xOffset[i] = 0;
      if (i < ncols) yOffset[i] = 0;
    }
    if (alignCol === Each) {
      for (c2 = 1; c2 < ncols; ++c2) {
        for (offset2 = 0, i = c2; i < n; i += ncols) {
          if (offset2 < xOffset[i]) offset2 = xOffset[i];
        }
        for (i = c2; i < n; i += ncols) {
          xOffset[i] = offset2 + xExtent[c2 - 1];
        }
      }
    } else if (alignCol === All) {
      for (offset2 = 0, i = 0; i < n; ++i) {
        if (i % ncols && offset2 < xOffset[i]) offset2 = xOffset[i];
      }
      for (i = 0; i < n; ++i) {
        if (i % ncols) xOffset[i] = offset2 + xMax;
      }
    } else {
      for (alignCol = false, c2 = 1; c2 < ncols; ++c2) {
        for (i = c2; i < n; i += ncols) {
          xOffset[i] += xExtent[c2 - 1];
        }
      }
    }
    if (alignRow === Each) {
      for (r = 1; r < nrows; ++r) {
        for (offset2 = 0, i = r * ncols, m2 = i + ncols; i < m2; ++i) {
          if (offset2 < yOffset[i]) offset2 = yOffset[i];
        }
        for (i = r * ncols; i < m2; ++i) {
          yOffset[i] = offset2 + yExtent[r - 1];
        }
      }
    } else if (alignRow === All) {
      for (offset2 = 0, i = ncols; i < n; ++i) {
        if (offset2 < yOffset[i]) offset2 = yOffset[i];
      }
      for (i = ncols; i < n; ++i) {
        yOffset[i] = offset2 + yMax;
      }
    } else {
      for (alignRow = false, r = 1; r < nrows; ++r) {
        for (i = r * ncols, m2 = i + ncols; i < m2; ++i) {
          yOffset[i] += yExtent[r - 1];
        }
      }
    }
    for (x2 = 0, i = 0; i < n; ++i) {
      x2 = xOffset[i] + (i % ncols ? x2 : 0);
      dx[i] += x2 - groups[i].x;
    }
    for (c2 = 0; c2 < ncols; ++c2) {
      for (y2 = 0, i = c2; i < n; i += ncols) {
        y2 += yOffset[i];
        dy[i] += y2 - groups[i].y;
      }
    }
    if (alignCol && get$1(opt.center, Column) && nrows > 1) {
      for (i = 0; i < n; ++i) {
        b2 = alignCol === All ? xMax : xExtent[i % ncols];
        x2 = b2 - boxes[i].x2 - groups[i].x - dx[i];
        if (x2 > 0) dx[i] += x2 / 2;
      }
    }
    if (alignRow && get$1(opt.center, Row) && ncols !== 1) {
      for (i = 0; i < n; ++i) {
        b2 = alignRow === All ? yMax : yExtent[~~(i / ncols)];
        y2 = b2 - boxes[i].y2 - groups[i].y - dy[i];
        if (y2 > 0) dy[i] += y2 / 2;
      }
    }
    for (i = 0; i < n; ++i) {
      bounds2.union(boxes[i].translate(dx[i], dy[i]));
    }
    x2 = get$1(opt.anchor, X$1);
    y2 = get$1(opt.anchor, Y$1);
    switch (get$1(opt.anchor, Column)) {
      case End$1:
        x2 -= bounds2.width();
        break;
      case Middle$1:
        x2 -= bounds2.width() / 2;
    }
    switch (get$1(opt.anchor, Row)) {
      case End$1:
        y2 -= bounds2.height();
        break;
      case Middle$1:
        y2 -= bounds2.height() / 2;
    }
    x2 = Math.round(x2);
    y2 = Math.round(y2);
    bounds2.clear();
    for (i = 0; i < n; ++i) {
      groups[i].mark.bounds.clear();
    }
    for (i = 0; i < n; ++i) {
      g = groups[i];
      g.x += dx[i] += x2;
      g.y += dy[i] += y2;
      bounds2.union(g.mark.bounds.union(g.bounds.translate(dx[i], dy[i])));
      if (dirty) view.dirty(g);
    }
    return bounds2;
  }
  function trellisLayout(view, group2, opt) {
    var views = gridLayoutGroups(group2), groups = views.marks, bbox = opt.bounds === Flush ? boundFlush : boundFull, off = opt.offset, ncols = opt.columns || groups.length, nrows = ncols <= 0 ? 1 : Math.ceil(groups.length / ncols), cells = nrows * ncols, x2, y2, x22, y22, anchor, band2, offset2;
    const bounds2 = gridLayout(view, groups, opt);
    if (bounds2.empty()) bounds2.set(0, 0, 0, 0);
    if (views.rowheaders) {
      band2 = get$1(opt.headerBand, Row, null);
      x2 = layoutHeaders(view, views.rowheaders, groups, ncols, nrows, -get$1(off, "rowHeader"), min, 0, bbox, "x1", 0, ncols, 1, band2);
    }
    if (views.colheaders) {
      band2 = get$1(opt.headerBand, Column, null);
      y2 = layoutHeaders(view, views.colheaders, groups, ncols, ncols, -get$1(off, "columnHeader"), min, 1, bbox, "y1", 0, 1, ncols, band2);
    }
    if (views.rowfooters) {
      band2 = get$1(opt.footerBand, Row, null);
      x22 = layoutHeaders(view, views.rowfooters, groups, ncols, nrows, get$1(off, "rowFooter"), max, 0, bbox, "x2", ncols - 1, ncols, 1, band2);
    }
    if (views.colfooters) {
      band2 = get$1(opt.footerBand, Column, null);
      y22 = layoutHeaders(view, views.colfooters, groups, ncols, ncols, get$1(off, "columnFooter"), max, 1, bbox, "y2", cells - ncols, 1, ncols, band2);
    }
    if (views.rowtitle) {
      anchor = get$1(opt.titleAnchor, Row);
      offset2 = get$1(off, "rowTitle");
      offset2 = anchor === End$1 ? x22 + offset2 : x2 - offset2;
      band2 = get$1(opt.titleBand, Row, 0.5);
      layoutTitle(view, views.rowtitle, offset2, 0, bounds2, band2);
    }
    if (views.coltitle) {
      anchor = get$1(opt.titleAnchor, Column);
      offset2 = get$1(off, "columnTitle");
      offset2 = anchor === End$1 ? y22 + offset2 : y2 - offset2;
      band2 = get$1(opt.titleBand, Column, 0.5);
      layoutTitle(view, views.coltitle, offset2, 1, bounds2, band2);
    }
  }
  function boundFlush(item, field2) {
    return field2 === "x1" ? item.x || 0 : field2 === "y1" ? item.y || 0 : field2 === "x2" ? (item.x || 0) + (item.width || 0) : field2 === "y2" ? (item.y || 0) + (item.height || 0) : void 0;
  }
  function boundFull(item, field2) {
    return item.bounds[field2];
  }
  function layoutHeaders(view, headers, groups, ncols, limit, offset2, agg, isX2, bound2, bf, start, stride, back, band2) {
    var n = groups.length, init2 = 0, edge = 0, i, j, k, m2, b2, h2, g, x2, y2;
    if (!n) return init2;
    for (i = start; i < n; i += stride) {
      if (groups[i]) init2 = agg(init2, bound2(groups[i], bf));
    }
    if (!headers.length) return init2;
    if (headers.length > limit) {
      view.warn("Grid headers exceed limit: " + limit);
      headers = headers.slice(0, limit);
    }
    init2 += offset2;
    for (j = 0, m2 = headers.length; j < m2; ++j) {
      view.dirty(headers[j]);
      headers[j].mark.bounds.clear();
    }
    for (i = start, j = 0, m2 = headers.length; j < m2; ++j, i += stride) {
      h2 = headers[j];
      b2 = h2.mark.bounds;
      for (k = i; k >= 0 && (g = groups[k]) == null; k -= back) ;
      if (isX2) {
        x2 = band2 == null ? g.x : Math.round(g.bounds.x1 + band2 * g.bounds.width());
        y2 = init2;
      } else {
        x2 = init2;
        y2 = band2 == null ? g.y : Math.round(g.bounds.y1 + band2 * g.bounds.height());
      }
      b2.union(h2.bounds.translate(x2 - (h2.x || 0), y2 - (h2.y || 0)));
      h2.x = x2;
      h2.y = y2;
      view.dirty(h2);
      edge = agg(edge, b2[bf]);
    }
    return edge;
  }
  function layoutTitle(view, g, offset2, isX2, bounds2, band2) {
    if (!g) return;
    view.dirty(g);
    var x2 = offset2, y2 = offset2;
    isX2 ? x2 = Math.round(bounds2.x1 + band2 * bounds2.width()) : y2 = Math.round(bounds2.y1 + band2 * bounds2.height());
    g.bounds.translate(x2 - (g.x || 0), y2 - (g.y || 0));
    g.mark.bounds.clear().union(g.bounds);
    g.x = x2;
    g.y = y2;
    view.dirty(g);
  }
  function lookup$3(config, orient2) {
    const opt = config[orient2] || {};
    return (key2, d) => opt[key2] != null ? opt[key2] : config[key2] != null ? config[key2] : d;
  }
  function offsets(legends, value2) {
    let max2 = -Infinity;
    legends.forEach((item) => {
      if (item.offset != null) max2 = Math.max(max2, item.offset);
    });
    return max2 > -Infinity ? max2 : value2;
  }
  function legendParams(g, orient2, config, xb, yb, w2, h2) {
    const _ = lookup$3(config, orient2), offset2 = offsets(g, _("offset", 0)), anchor = _("anchor", Start$1), mult2 = anchor === End$1 ? 1 : anchor === Middle$1 ? 0.5 : 0;
    const p = {
      align: Each,
      bounds: _("bounds", Flush),
      columns: _("direction") === "vertical" ? 1 : g.length,
      padding: _("margin", 8),
      center: _("center"),
      nodirty: true
    };
    switch (orient2) {
      case Left$1:
        p.anchor = {
          x: Math.floor(xb.x1) - offset2,
          column: End$1,
          y: mult2 * (h2 || xb.height() + 2 * xb.y1),
          row: anchor
        };
        break;
      case Right$1:
        p.anchor = {
          x: Math.ceil(xb.x2) + offset2,
          y: mult2 * (h2 || xb.height() + 2 * xb.y1),
          row: anchor
        };
        break;
      case Top$1:
        p.anchor = {
          y: Math.floor(yb.y1) - offset2,
          row: End$1,
          x: mult2 * (w2 || yb.width() + 2 * yb.x1),
          column: anchor
        };
        break;
      case Bottom$1:
        p.anchor = {
          y: Math.ceil(yb.y2) + offset2,
          x: mult2 * (w2 || yb.width() + 2 * yb.x1),
          column: anchor
        };
        break;
      case TopLeft:
        p.anchor = {
          x: offset2,
          y: offset2
        };
        break;
      case TopRight:
        p.anchor = {
          x: w2 - offset2,
          y: offset2,
          column: End$1
        };
        break;
      case BottomLeft:
        p.anchor = {
          x: offset2,
          y: h2 - offset2,
          row: End$1
        };
        break;
      case BottomRight:
        p.anchor = {
          x: w2 - offset2,
          y: h2 - offset2,
          column: End$1,
          row: End$1
        };
        break;
    }
    return p;
  }
  function legendLayout(view, legend) {
    var item = legend.items[0], datum2 = item.datum, orient2 = item.orient, bounds2 = item.bounds, x2 = item.x, y2 = item.y, w2, h2;
    item._bounds ? item._bounds.clear().union(bounds2) : item._bounds = bounds2.clone();
    bounds2.clear();
    legendGroupLayout(view, item, item.items[0].items[0]);
    bounds2 = legendBounds(item, bounds2);
    w2 = 2 * item.padding;
    h2 = 2 * item.padding;
    if (!bounds2.empty()) {
      w2 = Math.ceil(bounds2.width() + w2);
      h2 = Math.ceil(bounds2.height() + h2);
    }
    if (datum2.type === Symbols$1) {
      legendEntryLayout(item.items[0].items[0].items[0].items);
    }
    if (orient2 !== None) {
      item.x = x2 = 0;
      item.y = y2 = 0;
    }
    item.width = w2;
    item.height = h2;
    boundStroke(bounds2.set(x2, y2, x2 + w2, y2 + h2), item);
    item.mark.bounds.clear().union(bounds2);
    return item;
  }
  function legendBounds(item, b2) {
    item.items.forEach((_) => b2.union(_.bounds));
    b2.x1 = item.padding;
    b2.y1 = item.padding;
    return b2;
  }
  function legendGroupLayout(view, item, entry2) {
    var pad2 = item.padding, ex = pad2 - entry2.x, ey = pad2 - entry2.y;
    if (!item.datum.title) {
      if (ex || ey) translate$1(view, entry2, ex, ey);
    } else {
      var title2 = item.items[1].items[0], anchor = title2.anchor, tpad = item.titlePadding || 0, tx2 = pad2 - title2.x, ty = pad2 - title2.y;
      switch (title2.orient) {
        case Left$1:
          ex += Math.ceil(title2.bounds.width()) + tpad;
          break;
        case Right$1:
        case Bottom$1:
          break;
        default:
          ey += title2.bounds.height() + tpad;
      }
      if (ex || ey) translate$1(view, entry2, ex, ey);
      switch (title2.orient) {
        case Left$1:
          ty += legendTitleOffset(item, entry2, title2, anchor, 1, 1);
          break;
        case Right$1:
          tx2 += legendTitleOffset(item, entry2, title2, End$1, 0, 0) + tpad;
          ty += legendTitleOffset(item, entry2, title2, anchor, 1, 1);
          break;
        case Bottom$1:
          tx2 += legendTitleOffset(item, entry2, title2, anchor, 0, 0);
          ty += legendTitleOffset(item, entry2, title2, End$1, -1, 0, 1) + tpad;
          break;
        default:
          tx2 += legendTitleOffset(item, entry2, title2, anchor, 0, 0);
      }
      if (tx2 || ty) translate$1(view, title2, tx2, ty);
      if ((tx2 = Math.round(title2.bounds.x1 - pad2)) < 0) {
        translate$1(view, entry2, -tx2, 0);
        translate$1(view, title2, -tx2, 0);
      }
    }
  }
  function legendTitleOffset(item, entry2, title2, anchor, y2, lr, noBar) {
    const grad = item.datum.type !== "symbol", vgrad = title2.datum.vgrad, e3 = grad && (lr || !vgrad) && !noBar ? entry2.items[0] : entry2, s = e3.bounds[y2 ? "y2" : "x2"] - item.padding, u2 = vgrad && lr ? s : 0, v = vgrad && lr ? 0 : s, o = y2 <= 0 ? 0 : multiLineOffset(title2);
    return Math.round(anchor === Start$1 ? u2 : anchor === End$1 ? v - o : 0.5 * (s - o));
  }
  function translate$1(view, item, dx, dy) {
    item.x += dx;
    item.y += dy;
    item.bounds.translate(dx, dy);
    item.mark.bounds.translate(dx, dy);
    view.dirty(item);
  }
  function legendEntryLayout(entries2) {
    const widths = entries2.reduce((w2, g) => {
      w2[g.column] = Math.max(g.bounds.x2 - g.x, w2[g.column] || 0);
      return w2;
    }, {});
    entries2.forEach((g) => {
      g.width = widths[g.column];
      g.height = g.bounds.y2 - g.y;
    });
  }
  function titleLayout(view, mark, width2, height2, viewBounds2) {
    var group2 = mark.items[0], frame2 = group2.frame, orient2 = group2.orient, anchor = group2.anchor, offset2 = group2.offset, padding2 = group2.padding, title2 = group2.items[0].items[0], subtitle = group2.items[1] && group2.items[1].items[0], end = orient2 === Left$1 || orient2 === Right$1 ? height2 : width2, start = 0, x2 = 0, y2 = 0, sx = 0, sy = 0, pos;
    if (frame2 !== Group) {
      orient2 === Left$1 ? (start = viewBounds2.y2, end = viewBounds2.y1) : orient2 === Right$1 ? (start = viewBounds2.y1, end = viewBounds2.y2) : (start = viewBounds2.x1, end = viewBounds2.x2);
    } else if (orient2 === Left$1) {
      start = height2, end = 0;
    }
    pos = anchor === Start$1 ? start : anchor === End$1 ? end : (start + end) / 2;
    if (subtitle && subtitle.text) {
      switch (orient2) {
        case Top$1:
        case Bottom$1:
          sy = title2.bounds.height() + padding2;
          break;
        case Left$1:
          sx = title2.bounds.width() + padding2;
          break;
        case Right$1:
          sx = -title2.bounds.width() - padding2;
          break;
      }
      tempBounds.clear().union(subtitle.bounds);
      tempBounds.translate(sx - (subtitle.x || 0), sy - (subtitle.y || 0));
      if (set$3(subtitle, "x", sx) | set$3(subtitle, "y", sy)) {
        view.dirty(subtitle);
        subtitle.bounds.clear().union(tempBounds);
        subtitle.mark.bounds.clear().union(tempBounds);
        view.dirty(subtitle);
      }
      tempBounds.clear().union(subtitle.bounds);
    } else {
      tempBounds.clear();
    }
    tempBounds.union(title2.bounds);
    switch (orient2) {
      case Top$1:
        x2 = pos;
        y2 = viewBounds2.y1 - tempBounds.height() - offset2;
        break;
      case Left$1:
        x2 = viewBounds2.x1 - tempBounds.width() - offset2;
        y2 = pos;
        break;
      case Right$1:
        x2 = viewBounds2.x2 + tempBounds.width() + offset2;
        y2 = pos;
        break;
      case Bottom$1:
        x2 = pos;
        y2 = viewBounds2.y2 + offset2;
        break;
      default:
        x2 = group2.x;
        y2 = group2.y;
    }
    if (set$3(group2, "x", x2) | set$3(group2, "y", y2)) {
      tempBounds.translate(x2, y2);
      view.dirty(group2);
      group2.bounds.clear().union(tempBounds);
      mark.bounds.clear().union(tempBounds);
      view.dirty(group2);
    }
    return group2.bounds;
  }
  function ViewLayout$1(params2) {
    Transform.call(this, null, params2);
  }
  inherits(ViewLayout$1, Transform, {
    transform(_, pulse2) {
      const view = pulse2.dataflow;
      _.mark.items.forEach((group2) => {
        if (_.layout) trellisLayout(view, group2, _.layout);
        layoutGroup(view, group2, _);
      });
      return shouldReflow(_.mark.group) ? pulse2.reflow() : pulse2;
    }
  });
  function shouldReflow(group2) {
    return group2 && group2.mark.role !== "legend-entry";
  }
  function layoutGroup(view, group2, _) {
    var items = group2.items, width2 = Math.max(0, group2.width || 0), height2 = Math.max(0, group2.height || 0), viewBounds2 = new Bounds().set(0, 0, width2, height2), xBounds = viewBounds2.clone(), yBounds = viewBounds2.clone(), legends = [], title2, mark, orient2, b2, i, n;
    for (i = 0, n = items.length; i < n; ++i) {
      mark = items[i];
      switch (mark.role) {
        case AxisRole$1:
          b2 = isYAxis(mark) ? xBounds : yBounds;
          b2.union(axisLayout(view, mark, width2, height2));
          break;
        case TitleRole$1:
          title2 = mark;
          break;
        case LegendRole$1:
          legends.push(legendLayout(view, mark));
          break;
        case FrameRole$1:
        case ScopeRole$1:
        case RowHeader:
        case RowFooter:
        case RowTitle:
        case ColHeader:
        case ColFooter:
        case ColTitle:
          xBounds.union(mark.bounds);
          yBounds.union(mark.bounds);
          break;
        default:
          viewBounds2.union(mark.bounds);
      }
    }
    if (legends.length) {
      const l = {};
      legends.forEach((item) => {
        orient2 = item.orient || Right$1;
        if (orient2 !== None) (l[orient2] || (l[orient2] = [])).push(item);
      });
      for (const orient3 in l) {
        const g = l[orient3];
        gridLayout(view, g, legendParams(g, orient3, _.legends, xBounds, yBounds, width2, height2));
      }
      legends.forEach((item) => {
        const b3 = item.bounds;
        if (!b3.equals(item._bounds)) {
          item.bounds = item._bounds;
          view.dirty(item);
          item.bounds = b3;
          view.dirty(item);
        }
        if (_.autosize && (_.autosize.type === Fit || _.autosize.type === FitX || _.autosize.type === FitY)) {
          switch (item.orient) {
            case Left$1:
            case Right$1:
              viewBounds2.add(b3.x1, 0).add(b3.x2, 0);
              break;
            case Top$1:
            case Bottom$1:
              viewBounds2.add(0, b3.y1).add(0, b3.y2);
          }
        } else {
          viewBounds2.union(b3);
        }
      });
    }
    viewBounds2.union(xBounds).union(yBounds);
    if (title2) {
      viewBounds2.union(titleLayout(view, title2, width2, height2, viewBounds2));
    }
    if (group2.clip) {
      viewBounds2.set(0, 0, group2.width || 0, group2.height || 0);
    }
    viewSizeLayout(view, group2, viewBounds2, _);
  }
  function viewSizeLayout(view, group2, viewBounds2, _) {
    const auto = _.autosize || {}, type2 = auto.type;
    if (view._autosize < 1 || !type2) return;
    let viewWidth2 = view._width, viewHeight2 = view._height, width2 = Math.max(0, group2.width || 0), left = Math.max(0, Math.ceil(-viewBounds2.x1)), height2 = Math.max(0, group2.height || 0), top = Math.max(0, Math.ceil(-viewBounds2.y1));
    const right = Math.max(0, Math.ceil(viewBounds2.x2 - width2)), bottom = Math.max(0, Math.ceil(viewBounds2.y2 - height2));
    if (auto.contains === Padding$1) {
      const padding2 = view.padding();
      viewWidth2 -= padding2.left + padding2.right;
      viewHeight2 -= padding2.top + padding2.bottom;
    }
    if (type2 === None) {
      left = 0;
      top = 0;
      width2 = viewWidth2;
      height2 = viewHeight2;
    } else if (type2 === Fit) {
      width2 = Math.max(0, viewWidth2 - left - right);
      height2 = Math.max(0, viewHeight2 - top - bottom);
    } else if (type2 === FitX) {
      width2 = Math.max(0, viewWidth2 - left - right);
      viewHeight2 = height2 + top + bottom;
    } else if (type2 === FitY) {
      viewWidth2 = width2 + left + right;
      height2 = Math.max(0, viewHeight2 - top - bottom);
    } else if (type2 === Pad) {
      viewWidth2 = width2 + left + right;
      viewHeight2 = height2 + top + bottom;
    }
    view._resizeView(viewWidth2, viewHeight2, width2, height2, [left, top], auto.resize);
  }
  const vtx = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
    __proto__: null,
    bound: Bound$1,
    identifier: Identifier$2,
    mark: Mark$2,
    overlap: Overlap$1,
    render: Render$1,
    viewlayout: ViewLayout$1
  }, Symbol.toStringTag, { value: "Module" }));
  function AxisTicks$1(params2) {
    Transform.call(this, null, params2);
  }
  inherits(AxisTicks$1, Transform, {
    transform(_, pulse2) {
      if (this.value && !_.modified()) {
        return pulse2.StopPropagation;
      }
      var locale2 = pulse2.dataflow.locale(), out = pulse2.fork(pulse2.NO_SOURCE | pulse2.NO_FIELDS), ticks2 = this.value, scale2 = _.scale, tally = _.count == null ? _.values ? _.values.length : 10 : _.count, count2 = tickCount(scale2, tally, _.minstep), format2 = _.format || tickFormat(locale2, scale2, count2, _.formatSpecifier, _.formatType, !!_.values), values2 = _.values ? validTicks(scale2, _.values, count2) : tickValues(scale2, count2);
      if (ticks2) out.rem = ticks2;
      ticks2 = values2.map((value2, i) => ingest$1({
        index: i / (values2.length - 1 || 1),
        value: value2,
        label: format2(value2)
      }));
      if (_.extra && ticks2.length) {
        ticks2.push(ingest$1({
          index: -1,
          extra: {
            value: ticks2[0].value
          },
          label: ""
        }));
      }
      out.source = ticks2;
      out.add = ticks2;
      this.value = ticks2;
      return out;
    }
  });
  function DataJoin$1(params2) {
    Transform.call(this, null, params2);
  }
  function defaultItemCreate() {
    return ingest$1({});
  }
  function newMap(key2) {
    const map2 = fastmap().test((t) => t.exit);
    map2.lookup = (t) => map2.get(key2(t));
    return map2;
  }
  inherits(DataJoin$1, Transform, {
    transform(_, pulse2) {
      var df = pulse2.dataflow, out = pulse2.fork(pulse2.NO_SOURCE | pulse2.NO_FIELDS), item = _.item || defaultItemCreate, key2 = _.key || tupleid, map2 = this.value;
      if (isArray(out.encode)) {
        out.encode = null;
      }
      if (map2 && (_.modified("key") || pulse2.modified(key2))) {
        error$1("DataJoin does not support modified key function or fields.");
      }
      if (!map2) {
        pulse2 = pulse2.addAll();
        this.value = map2 = newMap(key2);
      }
      pulse2.visit(pulse2.ADD, (t) => {
        const k = key2(t);
        let x2 = map2.get(k);
        if (x2) {
          if (x2.exit) {
            map2.empty--;
            out.add.push(x2);
          } else {
            out.mod.push(x2);
          }
        } else {
          x2 = item(t);
          map2.set(k, x2);
          out.add.push(x2);
        }
        x2.datum = t;
        x2.exit = false;
      });
      pulse2.visit(pulse2.MOD, (t) => {
        const k = key2(t), x2 = map2.get(k);
        if (x2) {
          x2.datum = t;
          out.mod.push(x2);
        }
      });
      pulse2.visit(pulse2.REM, (t) => {
        const k = key2(t), x2 = map2.get(k);
        if (t === x2.datum && !x2.exit) {
          out.rem.push(x2);
          x2.exit = true;
          ++map2.empty;
        }
      });
      if (pulse2.changed(pulse2.ADD_MOD)) out.modifies("datum");
      if (pulse2.clean() || _.clean && map2.empty > df.cleanThreshold) {
        df.runAfter(map2.clean);
      }
      return out;
    }
  });
  function Encode$1(params2) {
    Transform.call(this, null, params2);
  }
  inherits(Encode$1, Transform, {
    transform(_, pulse2) {
      var out = pulse2.fork(pulse2.ADD_REM), fmod = _.mod || false, encoders = _.encoders, encode2 = pulse2.encode;
      if (isArray(encode2)) {
        if (out.changed() || encode2.every((e3) => encoders[e3])) {
          encode2 = encode2[0];
          out.encode = null;
        } else {
          return pulse2.StopPropagation;
        }
      }
      var reenter = encode2 === "enter", update2 = encoders.update || falsy, enter = encoders.enter || falsy, exit = encoders.exit || falsy, set2 = (encode2 && !reenter ? encoders[encode2] : update2) || falsy;
      if (pulse2.changed(pulse2.ADD)) {
        pulse2.visit(pulse2.ADD, (t) => {
          enter(t, _);
          update2(t, _);
        });
        out.modifies(enter.output);
        out.modifies(update2.output);
        if (set2 !== falsy && set2 !== update2) {
          pulse2.visit(pulse2.ADD, (t) => {
            set2(t, _);
          });
          out.modifies(set2.output);
        }
      }
      if (pulse2.changed(pulse2.REM) && exit !== falsy) {
        pulse2.visit(pulse2.REM, (t) => {
          exit(t, _);
        });
        out.modifies(exit.output);
      }
      if (reenter || set2 !== falsy) {
        const flag2 = pulse2.MOD | (_.modified() ? pulse2.REFLOW : 0);
        if (reenter) {
          pulse2.visit(flag2, (t) => {
            const mod = enter(t, _) || fmod;
            if (set2(t, _) || mod) out.mod.push(t);
          });
          if (out.mod.length) out.modifies(enter.output);
        } else {
          pulse2.visit(flag2, (t) => {
            if (set2(t, _) || fmod) out.mod.push(t);
          });
        }
        if (out.mod.length) out.modifies(set2.output);
      }
      return out.changed() ? out : pulse2.StopPropagation;
    }
  });
  function LegendEntries$1(params2) {
    Transform.call(this, [], params2);
  }
  inherits(LegendEntries$1, Transform, {
    transform(_, pulse2) {
      if (this.value != null && !_.modified()) {
        return pulse2.StopPropagation;
      }
      var locale2 = pulse2.dataflow.locale(), out = pulse2.fork(pulse2.NO_SOURCE | pulse2.NO_FIELDS), items = this.value, type2 = _.type || SymbolLegend, scale2 = _.scale, limit = +_.limit, count2 = tickCount(scale2, _.count == null ? 5 : _.count, _.minstep), lskip = !!_.values || type2 === SymbolLegend, format2 = _.format || labelFormat(locale2, scale2, count2, type2, _.formatSpecifier, _.formatType, lskip), values2 = _.values || labelValues(scale2, count2), domain2, fraction, size, offset2, ellipsis;
      if (items) out.rem = items;
      if (type2 === SymbolLegend) {
        if (limit && values2.length > limit) {
          pulse2.dataflow.warn("Symbol legend count exceeds limit, filtering items.");
          items = values2.slice(0, limit - 1);
          ellipsis = true;
        } else {
          items = values2;
        }
        if (isFunction(size = _.size)) {
          if (!_.values && scale2(items[0]) === 0) {
            items = items.slice(1);
          }
          offset2 = items.reduce((max2, value2) => Math.max(max2, size(value2, _)), 0);
        } else {
          size = constant$5(offset2 = size || 8);
        }
        items = items.map((value2, index2) => ingest$1({
          index: index2,
          label: format2(value2, index2, items),
          value: value2,
          offset: offset2,
          size: size(value2, _)
        }));
        if (ellipsis) {
          ellipsis = values2[items.length];
          items.push(ingest$1({
            index: items.length,
            label: `…${values2.length - items.length} entries`,
            value: ellipsis,
            offset: offset2,
            size: size(ellipsis, _)
          }));
        }
      } else if (type2 === GradientLegend) {
        domain2 = scale2.domain(), fraction = scaleFraction(scale2, domain2[0], peek$2(domain2));
        if (values2.length < 3 && !_.values && domain2[0] !== peek$2(domain2)) {
          values2 = [domain2[0], peek$2(domain2)];
        }
        items = values2.map((value2, index2) => ingest$1({
          index: index2,
          label: format2(value2, index2, values2),
          value: value2,
          perc: fraction(value2)
        }));
      } else {
        size = values2.length - 1;
        fraction = labelFraction(scale2);
        items = values2.map((value2, index2) => ingest$1({
          index: index2,
          label: format2(value2, index2, values2),
          value: value2,
          perc: index2 ? fraction(value2) : 0,
          perc2: index2 === size ? 1 : fraction(values2[index2 + 1])
        }));
      }
      out.source = items;
      out.add = items;
      this.value = items;
      return out;
    }
  });
  const sourceX = (t) => t.source.x;
  const sourceY = (t) => t.source.y;
  const targetX = (t) => t.target.x;
  const targetY = (t) => t.target.y;
  function LinkPath(params2) {
    Transform.call(this, {}, params2);
  }
  LinkPath.Definition = {
    "type": "LinkPath",
    "metadata": {
      "modifies": true
    },
    "params": [{
      "name": "sourceX",
      "type": "field",
      "default": "source.x"
    }, {
      "name": "sourceY",
      "type": "field",
      "default": "source.y"
    }, {
      "name": "targetX",
      "type": "field",
      "default": "target.x"
    }, {
      "name": "targetY",
      "type": "field",
      "default": "target.y"
    }, {
      "name": "orient",
      "type": "enum",
      "default": "vertical",
      "values": ["horizontal", "vertical", "radial"]
    }, {
      "name": "shape",
      "type": "enum",
      "default": "line",
      "values": ["line", "arc", "curve", "diagonal", "orthogonal"]
    }, {
      "name": "require",
      "type": "signal"
    }, {
      "name": "as",
      "type": "string",
      "default": "path"
    }]
  };
  inherits(LinkPath, Transform, {
    transform(_, pulse2) {
      var sx = _.sourceX || sourceX, sy = _.sourceY || sourceY, tx2 = _.targetX || targetX, ty = _.targetY || targetY, as = _.as || "path", orient2 = _.orient || "vertical", shape2 = _.shape || "line", path2 = Paths.get(shape2 + "-" + orient2) || Paths.get(shape2);
      if (!path2) {
        error$1("LinkPath unsupported type: " + _.shape + (_.orient ? "-" + _.orient : ""));
      }
      pulse2.visit(pulse2.SOURCE, (t) => {
        t[as] = path2(sx(t), sy(t), tx2(t), ty(t));
      });
      return pulse2.reflow(_.modified()).modifies(as);
    }
  });
  const line$1 = (sx, sy, tx2, ty) => "M" + sx + "," + sy + "L" + tx2 + "," + ty;
  const lineR = (sa2, sr, ta, tr2) => line$1(sr * Math.cos(sa2), sr * Math.sin(sa2), tr2 * Math.cos(ta), tr2 * Math.sin(ta));
  const arc$1 = (sx, sy, tx2, ty) => {
    var dx = tx2 - sx, dy = ty - sy, rr = Math.hypot(dx, dy) / 2, ra = 180 * Math.atan2(dy, dx) / Math.PI;
    return "M" + sx + "," + sy + "A" + rr + "," + rr + " " + ra + " 0 1 " + tx2 + "," + ty;
  };
  const arcR = (sa2, sr, ta, tr2) => arc$1(sr * Math.cos(sa2), sr * Math.sin(sa2), tr2 * Math.cos(ta), tr2 * Math.sin(ta));
  const curve = (sx, sy, tx2, ty) => {
    const dx = tx2 - sx, dy = ty - sy, ix = 0.2 * (dx + dy), iy = 0.2 * (dy - dx);
    return "M" + sx + "," + sy + "C" + (sx + ix) + "," + (sy + iy) + " " + (tx2 + iy) + "," + (ty - ix) + " " + tx2 + "," + ty;
  };
  const curveR = (sa2, sr, ta, tr2) => curve(sr * Math.cos(sa2), sr * Math.sin(sa2), tr2 * Math.cos(ta), tr2 * Math.sin(ta));
  const orthoX = (sx, sy, tx2, ty) => "M" + sx + "," + sy + "V" + ty + "H" + tx2;
  const orthoY = (sx, sy, tx2, ty) => "M" + sx + "," + sy + "H" + tx2 + "V" + ty;
  const orthoR = (sa2, sr, ta, tr2) => {
    const sc = Math.cos(sa2), ss = Math.sin(sa2), tc = Math.cos(ta), ts2 = Math.sin(ta), sf = Math.abs(ta - sa2) > Math.PI ? ta <= sa2 : ta > sa2;
    return "M" + sr * sc + "," + sr * ss + "A" + sr + "," + sr + " 0 0," + (sf ? 1 : 0) + " " + sr * tc + "," + sr * ts2 + "L" + tr2 * tc + "," + tr2 * ts2;
  };
  const diagonalX = (sx, sy, tx2, ty) => {
    const m2 = (sx + tx2) / 2;
    return "M" + sx + "," + sy + "C" + m2 + "," + sy + " " + m2 + "," + ty + " " + tx2 + "," + ty;
  };
  const diagonalY = (sx, sy, tx2, ty) => {
    const m2 = (sy + ty) / 2;
    return "M" + sx + "," + sy + "C" + sx + "," + m2 + " " + tx2 + "," + m2 + " " + tx2 + "," + ty;
  };
  const diagonalR = (sa2, sr, ta, tr2) => {
    const sc = Math.cos(sa2), ss = Math.sin(sa2), tc = Math.cos(ta), ts2 = Math.sin(ta), mr = (sr + tr2) / 2;
    return "M" + sr * sc + "," + sr * ss + "C" + mr * sc + "," + mr * ss + " " + mr * tc + "," + mr * ts2 + " " + tr2 * tc + "," + tr2 * ts2;
  };
  const Paths = fastmap({
    "line": line$1,
    "line-radial": lineR,
    "arc": arc$1,
    "arc-radial": arcR,
    "curve": curve,
    "curve-radial": curveR,
    "orthogonal-horizontal": orthoX,
    "orthogonal-vertical": orthoY,
    "orthogonal-radial": orthoR,
    "diagonal-horizontal": diagonalX,
    "diagonal-vertical": diagonalY,
    "diagonal-radial": diagonalR
  });
  function Pie(params2) {
    Transform.call(this, null, params2);
  }
  Pie.Definition = {
    "type": "Pie",
    "metadata": {
      "modifies": true
    },
    "params": [{
      "name": "field",
      "type": "field"
    }, {
      "name": "startAngle",
      "type": "number",
      "default": 0
    }, {
      "name": "endAngle",
      "type": "number",
      "default": 6.283185307179586
    }, {
      "name": "sort",
      "type": "boolean",
      "default": false
    }, {
      "name": "as",
      "type": "string",
      "array": true,
      "length": 2,
      "default": ["startAngle", "endAngle"]
    }]
  };
  inherits(Pie, Transform, {
    transform(_, pulse2) {
      var as = _.as || ["startAngle", "endAngle"], startAngle = as[0], endAngle = as[1], field2 = _.field || one$2, start = _.startAngle || 0, stop2 = _.endAngle != null ? _.endAngle : 2 * Math.PI, data2 = pulse2.source, values2 = data2.map(field2), n = values2.length, a2 = start, k = (stop2 - start) / sum$1(values2), index2 = range$5(n), i, t, v;
      if (_.sort) {
        index2.sort((a3, b2) => values2[a3] - values2[b2]);
      }
      for (i = 0; i < n; ++i) {
        v = values2[index2[i]];
        t = data2[index2[i]];
        t[startAngle] = a2;
        t[endAngle] = a2 += v * k;
      }
      this.value = values2;
      return pulse2.reflow(_.modified()).modifies(as);
    }
  });
  const DEFAULT_COUNT = 5;
  function includeZero(scale2) {
    const type2 = scale2.type;
    return !scale2.bins && (type2 === Linear || type2 === Pow || type2 === Sqrt);
  }
  function includePad(type2) {
    return isContinuous$1(type2) && type2 !== Sequential;
  }
  const SKIP$1 = toSet(["set", "modified", "clear", "type", "scheme", "schemeExtent", "schemeCount", "domain", "domainMin", "domainMid", "domainMax", "domainRaw", "domainImplicit", "nice", "zero", "bins", "range", "rangeStep", "round", "reverse", "interpolate", "interpolateGamma"]);
  function Scale$1(params2) {
    Transform.call(this, null, params2);
    this.modified(true);
  }
  inherits(Scale$1, Transform, {
    transform(_, pulse2) {
      var df = pulse2.dataflow, scale$12 = this.value, key2 = scaleKey(_);
      if (!scale$12 || key2 !== scale$12.type) {
        this.value = scale$12 = scale$4(key2)();
      }
      for (key2 in _) if (!SKIP$1[key2]) {
        if (key2 === "padding" && includePad(scale$12.type)) continue;
        isFunction(scale$12[key2]) ? scale$12[key2](_[key2]) : df.warn("Unsupported scale property: " + key2);
      }
      configureRange(scale$12, _, configureBins(scale$12, _, configureDomain(scale$12, _, df)));
      return pulse2.fork(pulse2.NO_SOURCE | pulse2.NO_FIELDS);
    }
  });
  function scaleKey(_) {
    var t = _.type, d = "", n;
    if (t === Sequential) return Sequential + "-" + Linear;
    if (isContinuousColor(_)) {
      n = _.rawDomain ? _.rawDomain.length : _.domain ? _.domain.length + +(_.domainMid != null) : 0;
      d = n === 2 ? Sequential + "-" : n === 3 ? Diverging + "-" : "";
    }
    return (d + t || Linear).toLowerCase();
  }
  function isContinuousColor(_) {
    const t = _.type;
    return isContinuous$1(t) && t !== Time && t !== UTC && (_.scheme || _.range && _.range.length && _.range.every(isString));
  }
  function configureDomain(scale2, _, df) {
    const raw = rawDomain(scale2, _.domainRaw, df);
    if (raw > -1) return raw;
    var domain2 = _.domain, type2 = scale2.type, zero2 = _.zero || _.zero === void 0 && includeZero(scale2), n, mid;
    if (!domain2) return 0;
    if (zero2 || _.domainMin != null || _.domainMax != null || _.domainMid != null) {
      n = (domain2 = domain2.slice()).length - 1 || 1;
      if (zero2) {
        if (domain2[0] > 0) domain2[0] = 0;
        if (domain2[n] < 0) domain2[n] = 0;
      }
      if (_.domainMin != null) domain2[0] = _.domainMin;
      if (_.domainMax != null) domain2[n] = _.domainMax;
      if (_.domainMid != null) {
        mid = _.domainMid;
        const i = mid > domain2[n] ? n + 1 : mid < domain2[0] ? 0 : n;
        if (i !== n) df.warn("Scale domainMid exceeds domain min or max.", mid);
        domain2.splice(i, 0, mid);
      }
    }
    if (includePad(type2) && _.padding && domain2[0] !== peek$2(domain2)) {
      domain2 = padDomain(type2, domain2, _.range, _.padding, _.exponent, _.constant);
    }
    scale2.domain(domainCheck(type2, domain2, df));
    if (type2 === Ordinal) {
      scale2.unknown(_.domainImplicit ? implicit : void 0);
    }
    if (_.nice && scale2.nice) {
      scale2.nice(_.nice !== true && tickCount(scale2, _.nice) || null);
    }
    return domain2.length;
  }
  function rawDomain(scale2, raw, df) {
    if (raw) {
      scale2.domain(domainCheck(scale2.type, raw, df));
      return raw.length;
    } else {
      return -1;
    }
  }
  function padDomain(type2, domain2, range2, pad2, exponent2, constant2) {
    var span2 = Math.abs(peek$2(range2) - range2[0]), frac = span2 / (span2 - 2 * pad2), d = type2 === Log ? zoomLog(domain2, null, frac) : type2 === Sqrt ? zoomPow(domain2, null, frac, 0.5) : type2 === Pow ? zoomPow(domain2, null, frac, exponent2 || 1) : type2 === Symlog ? zoomSymlog(domain2, null, frac, constant2 || 1) : zoomLinear(domain2, null, frac);
    domain2 = domain2.slice();
    domain2[0] = d[0];
    domain2[domain2.length - 1] = d[1];
    return domain2;
  }
  function domainCheck(type2, domain2, df) {
    if (isLogarithmic(type2)) {
      var s = Math.abs(domain2.reduce((s2, v) => s2 + (v < 0 ? -1 : v > 0 ? 1 : 0), 0));
      if (s !== domain2.length) {
        df.warn("Log scale domain includes zero: " + $(domain2));
      }
    }
    return domain2;
  }
  function configureBins(scale2, _, count2) {
    let bins2 = _.bins;
    if (bins2 && !isArray(bins2)) {
      const domain2 = scale2.domain(), lo = domain2[0], hi = peek$2(domain2), step = bins2.step;
      let start = bins2.start == null ? lo : bins2.start, stop2 = bins2.stop == null ? hi : bins2.stop;
      if (!step) error$1("Scale bins parameter missing step property.");
      if (start < lo) start = step * Math.ceil(lo / step);
      if (stop2 > hi) stop2 = step * Math.floor(hi / step);
      bins2 = range$5(start, stop2 + step / 2, step);
    }
    if (bins2) {
      scale2.bins = bins2;
    } else if (scale2.bins) {
      delete scale2.bins;
    }
    if (scale2.type === BinOrdinal) {
      if (!bins2) {
        scale2.bins = scale2.domain();
      } else if (!_.domain && !_.domainRaw) {
        scale2.domain(bins2);
        count2 = bins2.length;
      }
    }
    return count2;
  }
  function configureRange(scale2, _, count2) {
    var type2 = scale2.type, round = _.round || false, range2 = _.range;
    if (_.rangeStep != null) {
      range2 = configureRangeStep(type2, _, count2);
    } else if (_.scheme) {
      range2 = configureScheme(type2, _, count2);
      if (isFunction(range2)) {
        if (scale2.interpolator) {
          return scale2.interpolator(range2);
        } else {
          error$1(`Scale type ${type2} does not support interpolating color schemes.`);
        }
      }
    }
    if (range2 && isInterpolating(type2)) {
      return scale2.interpolator(interpolateColors(flip(range2, _.reverse), _.interpolate, _.interpolateGamma));
    }
    if (range2 && _.interpolate && scale2.interpolate) {
      scale2.interpolate(interpolate$1(_.interpolate, _.interpolateGamma));
    } else if (isFunction(scale2.round)) {
      scale2.round(round);
    } else if (isFunction(scale2.rangeRound)) {
      scale2.interpolate(round ? interpolateRound : interpolate$1$1);
    }
    if (range2) scale2.range(flip(range2, _.reverse));
  }
  function configureRangeStep(type2, _, count2) {
    if (type2 !== Band && type2 !== Point) {
      error$1("Only band and point scales support rangeStep.");
    }
    var outer = (_.paddingOuter != null ? _.paddingOuter : _.padding) || 0, inner = type2 === Point ? 1 : (_.paddingInner != null ? _.paddingInner : _.padding) || 0;
    return [0, _.rangeStep * bandSpace(count2, inner, outer)];
  }
  function configureScheme(type2, _, count2) {
    var extent2 = _.schemeExtent, name, scheme$1$1;
    if (isArray(_.scheme)) {
      scheme$1$1 = interpolateColors(_.scheme, _.interpolate, _.interpolateGamma);
    } else {
      name = _.scheme.toLowerCase();
      scheme$1$1 = scheme$1(name);
      if (!scheme$1$1) error$1(`Unrecognized scheme name: ${_.scheme}`);
    }
    count2 = type2 === Threshold ? count2 + 1 : type2 === BinOrdinal ? count2 - 1 : type2 === Quantile || type2 === Quantize ? +_.schemeCount || DEFAULT_COUNT : count2;
    return isInterpolating(type2) ? adjustScheme(scheme$1$1, extent2, _.reverse) : isFunction(scheme$1$1) ? quantizeInterpolator(adjustScheme(scheme$1$1, extent2), count2) : type2 === Ordinal ? scheme$1$1 : scheme$1$1.slice(0, count2);
  }
  function adjustScheme(scheme2, extent2, reverse2) {
    return isFunction(scheme2) && (extent2 || reverse2) ? interpolateRange$1(scheme2, flip(extent2 || [0, 1], reverse2)) : scheme2;
  }
  function flip(array2, reverse2) {
    return reverse2 ? array2.slice().reverse() : array2;
  }
  function SortItems$1(params2) {
    Transform.call(this, null, params2);
  }
  inherits(SortItems$1, Transform, {
    transform(_, pulse2) {
      const mod = _.modified("sort") || pulse2.changed(pulse2.ADD) || pulse2.modified(_.sort.fields) || pulse2.modified("datum");
      if (mod) pulse2.source.sort(stableCompare(_.sort));
      this.modified(mod);
      return pulse2;
    }
  });
  const Zero = "zero", Center$1 = "center", Normalize = "normalize", DefOutput = ["y0", "y1"];
  function Stack(params2) {
    Transform.call(this, null, params2);
  }
  Stack.Definition = {
    "type": "Stack",
    "metadata": {
      "modifies": true
    },
    "params": [{
      "name": "field",
      "type": "field"
    }, {
      "name": "groupby",
      "type": "field",
      "array": true
    }, {
      "name": "sort",
      "type": "compare"
    }, {
      "name": "offset",
      "type": "enum",
      "default": Zero,
      "values": [Zero, Center$1, Normalize]
    }, {
      "name": "as",
      "type": "string",
      "array": true,
      "length": 2,
      "default": DefOutput
    }]
  };
  inherits(Stack, Transform, {
    transform(_, pulse2) {
      var as = _.as || DefOutput, y02 = as[0], y12 = as[1], sort2 = stableCompare(_.sort), field2 = _.field || one$2, stack2 = _.offset === Center$1 ? stackCenter : _.offset === Normalize ? stackNormalize : stackZero, groups, i, n, max2;
      groups = partition$3(pulse2.source, _.groupby, sort2, field2);
      for (i = 0, n = groups.length, max2 = groups.max; i < n; ++i) {
        stack2(groups[i], max2, field2, y02, y12);
      }
      return pulse2.reflow(_.modified()).modifies(as);
    }
  });
  function stackCenter(group2, max2, field2, y02, y12) {
    var last = (max2 - group2.sum) / 2, m2 = group2.length, j = 0, t;
    for (; j < m2; ++j) {
      t = group2[j];
      t[y02] = last;
      t[y12] = last += Math.abs(field2(t));
    }
  }
  function stackNormalize(group2, max2, field2, y02, y12) {
    var scale2 = 1 / group2.sum, last = 0, m2 = group2.length, j = 0, v = 0, t;
    for (; j < m2; ++j) {
      t = group2[j];
      t[y02] = last;
      t[y12] = last = scale2 * (v += Math.abs(field2(t)));
    }
  }
  function stackZero(group2, max2, field2, y02, y12) {
    var lastPos = 0, lastNeg = 0, m2 = group2.length, j = 0, v, t;
    for (; j < m2; ++j) {
      t = group2[j];
      v = +field2(t);
      if (v < 0) {
        t[y02] = lastNeg;
        t[y12] = lastNeg += v;
      } else {
        t[y02] = lastPos;
        t[y12] = lastPos += v;
      }
    }
  }
  function partition$3(data2, groupby, sort2, field2) {
    var groups = [], get2 = (f) => f(t), map2, i, n, m2, t, k, g, s, max2;
    if (groupby == null) {
      groups.push(data2.slice());
    } else {
      for (map2 = {}, i = 0, n = data2.length; i < n; ++i) {
        t = data2[i];
        k = groupby.map(get2);
        g = map2[k];
        if (!g) {
          map2[k] = g = [];
          groups.push(g);
        }
        g.push(t);
      }
    }
    for (k = 0, max2 = 0, m2 = groups.length; k < m2; ++k) {
      g = groups[k];
      for (i = 0, s = 0, n = g.length; i < n; ++i) {
        s += Math.abs(field2(g[i]));
      }
      g.sum = s;
      if (s > max2) max2 = s;
      if (sort2) g.sort(sort2);
    }
    groups.max = max2;
    return groups;
  }
  const encode$1 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
    __proto__: null,
    axisticks: AxisTicks$1,
    datajoin: DataJoin$1,
    encode: Encode$1,
    legendentries: LegendEntries$1,
    linkpath: LinkPath,
    pie: Pie,
    scale: Scale$1,
    sortitems: SortItems$1,
    stack: Stack
  }, Symbol.toStringTag, { value: "Module" }));
  var epsilon$3 = 1e-6;
  var epsilon2 = 1e-12;
  var pi$1 = Math.PI;
  var halfPi$1 = pi$1 / 2;
  var quarterPi = pi$1 / 4;
  var tau$1 = pi$1 * 2;
  var degrees = 180 / pi$1;
  var radians = pi$1 / 180;
  var abs$1 = Math.abs;
  var atan = Math.atan;
  var atan2 = Math.atan2;
  var cos$1 = Math.cos;
  var ceil = Math.ceil;
  var exp = Math.exp;
  var hypot = Math.hypot;
  var log$1 = Math.log;
  var pow$1 = Math.pow;
  var sin$1 = Math.sin;
  var sign = Math.sign || function(x2) {
    return x2 > 0 ? 1 : x2 < 0 ? -1 : 0;
  };
  var sqrt$1 = Math.sqrt;
  var tan = Math.tan;
  function acos(x2) {
    return x2 > 1 ? 0 : x2 < -1 ? pi$1 : Math.acos(x2);
  }
  function asin$1(x2) {
    return x2 > 1 ? halfPi$1 : x2 < -1 ? -halfPi$1 : Math.asin(x2);
  }
  function noop$2() {
  }
  function streamGeometry(geometry, stream2) {
    if (geometry && streamGeometryType.hasOwnProperty(geometry.type)) {
      streamGeometryType[geometry.type](geometry, stream2);
    }
  }
  var streamObjectType = {
    Feature: function(object2, stream2) {
      streamGeometry(object2.geometry, stream2);
    },
    FeatureCollection: function(object2, stream2) {
      var features = object2.features, i = -1, n = features.length;
      while (++i < n) streamGeometry(features[i].geometry, stream2);
    }
  };
  var streamGeometryType = {
    Sphere: function(object2, stream2) {
      stream2.sphere();
    },
    Point: function(object2, stream2) {
      object2 = object2.coordinates;
      stream2.point(object2[0], object2[1], object2[2]);
    },
    MultiPoint: function(object2, stream2) {
      var coordinates = object2.coordinates, i = -1, n = coordinates.length;
      while (++i < n) object2 = coordinates[i], stream2.point(object2[0], object2[1], object2[2]);
    },
    LineString: function(object2, stream2) {
      streamLine(object2.coordinates, stream2, 0);
    },
    MultiLineString: function(object2, stream2) {
      var coordinates = object2.coordinates, i = -1, n = coordinates.length;
      while (++i < n) streamLine(coordinates[i], stream2, 0);
    },
    Polygon: function(object2, stream2) {
      streamPolygon(object2.coordinates, stream2);
    },
    MultiPolygon: function(object2, stream2) {
      var coordinates = object2.coordinates, i = -1, n = coordinates.length;
      while (++i < n) streamPolygon(coordinates[i], stream2);
    },
    GeometryCollection: function(object2, stream2) {
      var geometries = object2.geometries, i = -1, n = geometries.length;
      while (++i < n) streamGeometry(geometries[i], stream2);
    }
  };
  function streamLine(coordinates, stream2, closed) {
    var i = -1, n = coordinates.length - closed, coordinate;
    stream2.lineStart();
    while (++i < n) coordinate = coordinates[i], stream2.point(coordinate[0], coordinate[1], coordinate[2]);
    stream2.lineEnd();
  }
  function streamPolygon(coordinates, stream2) {
    var i = -1, n = coordinates.length;
    stream2.polygonStart();
    while (++i < n) streamLine(coordinates[i], stream2, 1);
    stream2.polygonEnd();
  }
  function geoStream(object2, stream2) {
    if (object2 && streamObjectType.hasOwnProperty(object2.type)) {
      streamObjectType[object2.type](object2, stream2);
    } else {
      streamGeometry(object2, stream2);
    }
  }
  var areaRingSum$1 = new Adder();
  var areaSum$1 = new Adder(), lambda00$2, phi00$2, lambda0$1, cosPhi0, sinPhi0;
  var areaStream$1 = {
    point: noop$2,
    lineStart: noop$2,
    lineEnd: noop$2,
    polygonStart: function() {
      areaRingSum$1 = new Adder();
      areaStream$1.lineStart = areaRingStart$1;
      areaStream$1.lineEnd = areaRingEnd$1;
    },
    polygonEnd: function() {
      var areaRing = +areaRingSum$1;
      areaSum$1.add(areaRing < 0 ? tau$1 + areaRing : areaRing);
      this.lineStart = this.lineEnd = this.point = noop$2;
    },
    sphere: function() {
      areaSum$1.add(tau$1);
    }
  };
  function areaRingStart$1() {
    areaStream$1.point = areaPointFirst$1;
  }
  function areaRingEnd$1() {
    areaPoint$1(lambda00$2, phi00$2);
  }
  function areaPointFirst$1(lambda, phi2) {
    areaStream$1.point = areaPoint$1;
    lambda00$2 = lambda, phi00$2 = phi2;
    lambda *= radians, phi2 *= radians;
    lambda0$1 = lambda, cosPhi0 = cos$1(phi2 = phi2 / 2 + quarterPi), sinPhi0 = sin$1(phi2);
  }
  function areaPoint$1(lambda, phi2) {
    lambda *= radians, phi2 *= radians;
    phi2 = phi2 / 2 + quarterPi;
    var dLambda = lambda - lambda0$1, sdLambda = dLambda >= 0 ? 1 : -1, adLambda = sdLambda * dLambda, cosPhi = cos$1(phi2), sinPhi = sin$1(phi2), k = sinPhi0 * sinPhi, u2 = cosPhi0 * cosPhi + k * cos$1(adLambda), v = k * sdLambda * sin$1(adLambda);
    areaRingSum$1.add(atan2(v, u2));
    lambda0$1 = lambda, cosPhi0 = cosPhi, sinPhi0 = sinPhi;
  }
  function geoArea$1(object2) {
    areaSum$1 = new Adder();
    geoStream(object2, areaStream$1);
    return areaSum$1 * 2;
  }
  function spherical(cartesian2) {
    return [atan2(cartesian2[1], cartesian2[0]), asin$1(cartesian2[2])];
  }
  function cartesian(spherical2) {
    var lambda = spherical2[0], phi2 = spherical2[1], cosPhi = cos$1(phi2);
    return [cosPhi * cos$1(lambda), cosPhi * sin$1(lambda), sin$1(phi2)];
  }
  function cartesianDot(a2, b2) {
    return a2[0] * b2[0] + a2[1] * b2[1] + a2[2] * b2[2];
  }
  function cartesianCross(a2, b2) {
    return [a2[1] * b2[2] - a2[2] * b2[1], a2[2] * b2[0] - a2[0] * b2[2], a2[0] * b2[1] - a2[1] * b2[0]];
  }
  function cartesianAddInPlace(a2, b2) {
    a2[0] += b2[0], a2[1] += b2[1], a2[2] += b2[2];
  }
  function cartesianScale(vector, k) {
    return [vector[0] * k, vector[1] * k, vector[2] * k];
  }
  function cartesianNormalizeInPlace(d) {
    var l = sqrt$1(d[0] * d[0] + d[1] * d[1] + d[2] * d[2]);
    d[0] /= l, d[1] /= l, d[2] /= l;
  }
  var lambda0, phi0, lambda1, phi1, lambda2, lambda00$1, phi00$1, p0, deltaSum, ranges, range$4;
  var boundsStream$1 = {
    point: boundsPoint$1,
    lineStart: boundsLineStart,
    lineEnd: boundsLineEnd,
    polygonStart: function() {
      boundsStream$1.point = boundsRingPoint;
      boundsStream$1.lineStart = boundsRingStart;
      boundsStream$1.lineEnd = boundsRingEnd;
      deltaSum = new Adder();
      areaStream$1.polygonStart();
    },
    polygonEnd: function() {
      areaStream$1.polygonEnd();
      boundsStream$1.point = boundsPoint$1;
      boundsStream$1.lineStart = boundsLineStart;
      boundsStream$1.lineEnd = boundsLineEnd;
      if (areaRingSum$1 < 0) lambda0 = -(lambda1 = 180), phi0 = -(phi1 = 90);
      else if (deltaSum > epsilon$3) phi1 = 90;
      else if (deltaSum < -epsilon$3) phi0 = -90;
      range$4[0] = lambda0, range$4[1] = lambda1;
    },
    sphere: function() {
      lambda0 = -(lambda1 = 180), phi0 = -(phi1 = 90);
    }
  };
  function boundsPoint$1(lambda, phi2) {
    ranges.push(range$4 = [lambda0 = lambda, lambda1 = lambda]);
    if (phi2 < phi0) phi0 = phi2;
    if (phi2 > phi1) phi1 = phi2;
  }
  function linePoint(lambda, phi2) {
    var p = cartesian([lambda * radians, phi2 * radians]);
    if (p0) {
      var normal = cartesianCross(p0, p), equatorial = [normal[1], -normal[0], 0], inflection = cartesianCross(equatorial, normal);
      cartesianNormalizeInPlace(inflection);
      inflection = spherical(inflection);
      var delta = lambda - lambda2, sign2 = delta > 0 ? 1 : -1, lambdai = inflection[0] * degrees * sign2, phii, antimeridian = abs$1(delta) > 180;
      if (antimeridian ^ (sign2 * lambda2 < lambdai && lambdai < sign2 * lambda)) {
        phii = inflection[1] * degrees;
        if (phii > phi1) phi1 = phii;
      } else if (lambdai = (lambdai + 360) % 360 - 180, antimeridian ^ (sign2 * lambda2 < lambdai && lambdai < sign2 * lambda)) {
        phii = -inflection[1] * degrees;
        if (phii < phi0) phi0 = phii;
      } else {
        if (phi2 < phi0) phi0 = phi2;
        if (phi2 > phi1) phi1 = phi2;
      }
      if (antimeridian) {
        if (lambda < lambda2) {
          if (angle(lambda0, lambda) > angle(lambda0, lambda1)) lambda1 = lambda;
        } else {
          if (angle(lambda, lambda1) > angle(lambda0, lambda1)) lambda0 = lambda;
        }
      } else {
        if (lambda1 >= lambda0) {
          if (lambda < lambda0) lambda0 = lambda;
          if (lambda > lambda1) lambda1 = lambda;
        } else {
          if (lambda > lambda2) {
            if (angle(lambda0, lambda) > angle(lambda0, lambda1)) lambda1 = lambda;
          } else {
            if (angle(lambda, lambda1) > angle(lambda0, lambda1)) lambda0 = lambda;
          }
        }
      }
    } else {
      ranges.push(range$4 = [lambda0 = lambda, lambda1 = lambda]);
    }
    if (phi2 < phi0) phi0 = phi2;
    if (phi2 > phi1) phi1 = phi2;
    p0 = p, lambda2 = lambda;
  }
  function boundsLineStart() {
    boundsStream$1.point = linePoint;
  }
  function boundsLineEnd() {
    range$4[0] = lambda0, range$4[1] = lambda1;
    boundsStream$1.point = boundsPoint$1;
    p0 = null;
  }
  function boundsRingPoint(lambda, phi2) {
    if (p0) {
      var delta = lambda - lambda2;
      deltaSum.add(abs$1(delta) > 180 ? delta + (delta > 0 ? 360 : -360) : delta);
    } else {
      lambda00$1 = lambda, phi00$1 = phi2;
    }
    areaStream$1.point(lambda, phi2);
    linePoint(lambda, phi2);
  }
  function boundsRingStart() {
    areaStream$1.lineStart();
  }
  function boundsRingEnd() {
    boundsRingPoint(lambda00$1, phi00$1);
    areaStream$1.lineEnd();
    if (abs$1(deltaSum) > epsilon$3) lambda0 = -(lambda1 = 180);
    range$4[0] = lambda0, range$4[1] = lambda1;
    p0 = null;
  }
  function angle(lambda02, lambda12) {
    return (lambda12 -= lambda02) < 0 ? lambda12 + 360 : lambda12;
  }
  function rangeCompare(a2, b2) {
    return a2[0] - b2[0];
  }
  function rangeContains(range2, x2) {
    return range2[0] <= range2[1] ? range2[0] <= x2 && x2 <= range2[1] : x2 < range2[0] || range2[1] < x2;
  }
  function geoBounds$1(feature2) {
    var i, n, a2, b2, merged, deltaMax, delta;
    phi1 = lambda1 = -(lambda0 = phi0 = Infinity);
    ranges = [];
    geoStream(feature2, boundsStream$1);
    if (n = ranges.length) {
      ranges.sort(rangeCompare);
      for (i = 1, a2 = ranges[0], merged = [a2]; i < n; ++i) {
        b2 = ranges[i];
        if (rangeContains(a2, b2[0]) || rangeContains(a2, b2[1])) {
          if (angle(a2[0], b2[1]) > angle(a2[0], a2[1])) a2[1] = b2[1];
          if (angle(b2[0], a2[1]) > angle(a2[0], a2[1])) a2[0] = b2[0];
        } else {
          merged.push(a2 = b2);
        }
      }
      for (deltaMax = -Infinity, n = merged.length - 1, i = 0, a2 = merged[n]; i <= n; a2 = b2, ++i) {
        b2 = merged[i];
        if ((delta = angle(a2[1], b2[0])) > deltaMax) deltaMax = delta, lambda0 = b2[0], lambda1 = a2[1];
      }
    }
    ranges = range$4 = null;
    return lambda0 === Infinity || phi0 === Infinity ? [[NaN, NaN], [NaN, NaN]] : [[lambda0, phi0], [lambda1, phi1]];
  }
  var W0, W1, X0$1, Y0$1, Z0$1, X1$1, Y1$1, Z1$1, X2$2, Y2$2, Z2$1, lambda00, phi00, x0$4, y0$4, z0;
  var centroidStream$1 = {
    sphere: noop$2,
    point: centroidPoint$1,
    lineStart: centroidLineStart$1,
    lineEnd: centroidLineEnd$1,
    polygonStart: function() {
      centroidStream$1.lineStart = centroidRingStart$1;
      centroidStream$1.lineEnd = centroidRingEnd$1;
    },
    polygonEnd: function() {
      centroidStream$1.lineStart = centroidLineStart$1;
      centroidStream$1.lineEnd = centroidLineEnd$1;
    }
  };
  function centroidPoint$1(lambda, phi2) {
    lambda *= radians, phi2 *= radians;
    var cosPhi = cos$1(phi2);
    centroidPointCartesian(cosPhi * cos$1(lambda), cosPhi * sin$1(lambda), sin$1(phi2));
  }
  function centroidPointCartesian(x2, y2, z) {
    ++W0;
    X0$1 += (x2 - X0$1) / W0;
    Y0$1 += (y2 - Y0$1) / W0;
    Z0$1 += (z - Z0$1) / W0;
  }
  function centroidLineStart$1() {
    centroidStream$1.point = centroidLinePointFirst;
  }
  function centroidLinePointFirst(lambda, phi2) {
    lambda *= radians, phi2 *= radians;
    var cosPhi = cos$1(phi2);
    x0$4 = cosPhi * cos$1(lambda);
    y0$4 = cosPhi * sin$1(lambda);
    z0 = sin$1(phi2);
    centroidStream$1.point = centroidLinePoint;
    centroidPointCartesian(x0$4, y0$4, z0);
  }
  function centroidLinePoint(lambda, phi2) {
    lambda *= radians, phi2 *= radians;
    var cosPhi = cos$1(phi2), x2 = cosPhi * cos$1(lambda), y2 = cosPhi * sin$1(lambda), z = sin$1(phi2), w2 = atan2(sqrt$1((w2 = y0$4 * z - z0 * y2) * w2 + (w2 = z0 * x2 - x0$4 * z) * w2 + (w2 = x0$4 * y2 - y0$4 * x2) * w2), x0$4 * x2 + y0$4 * y2 + z0 * z);
    W1 += w2;
    X1$1 += w2 * (x0$4 + (x0$4 = x2));
    Y1$1 += w2 * (y0$4 + (y0$4 = y2));
    Z1$1 += w2 * (z0 + (z0 = z));
    centroidPointCartesian(x0$4, y0$4, z0);
  }
  function centroidLineEnd$1() {
    centroidStream$1.point = centroidPoint$1;
  }
  function centroidRingStart$1() {
    centroidStream$1.point = centroidRingPointFirst;
  }
  function centroidRingEnd$1() {
    centroidRingPoint(lambda00, phi00);
    centroidStream$1.point = centroidPoint$1;
  }
  function centroidRingPointFirst(lambda, phi2) {
    lambda00 = lambda, phi00 = phi2;
    lambda *= radians, phi2 *= radians;
    centroidStream$1.point = centroidRingPoint;
    var cosPhi = cos$1(phi2);
    x0$4 = cosPhi * cos$1(lambda);
    y0$4 = cosPhi * sin$1(lambda);
    z0 = sin$1(phi2);
    centroidPointCartesian(x0$4, y0$4, z0);
  }
  function centroidRingPoint(lambda, phi2) {
    lambda *= radians, phi2 *= radians;
    var cosPhi = cos$1(phi2), x2 = cosPhi * cos$1(lambda), y2 = cosPhi * sin$1(lambda), z = sin$1(phi2), cx = y0$4 * z - z0 * y2, cy = z0 * x2 - x0$4 * z, cz = x0$4 * y2 - y0$4 * x2, m2 = hypot(cx, cy, cz), w2 = asin$1(m2), v = m2 && -w2 / m2;
    X2$2.add(v * cx);
    Y2$2.add(v * cy);
    Z2$1.add(v * cz);
    W1 += w2;
    X1$1 += w2 * (x0$4 + (x0$4 = x2));
    Y1$1 += w2 * (y0$4 + (y0$4 = y2));
    Z1$1 += w2 * (z0 + (z0 = z));
    centroidPointCartesian(x0$4, y0$4, z0);
  }
  function geoCentroid$1(object2) {
    W0 = W1 = X0$1 = Y0$1 = Z0$1 = X1$1 = Y1$1 = Z1$1 = 0;
    X2$2 = new Adder();
    Y2$2 = new Adder();
    Z2$1 = new Adder();
    geoStream(object2, centroidStream$1);
    var x2 = +X2$2, y2 = +Y2$2, z = +Z2$1, m2 = hypot(x2, y2, z);
    if (m2 < epsilon2) {
      x2 = X1$1, y2 = Y1$1, z = Z1$1;
      if (W1 < epsilon$3) x2 = X0$1, y2 = Y0$1, z = Z0$1;
      m2 = hypot(x2, y2, z);
      if (m2 < epsilon2) return [NaN, NaN];
    }
    return [atan2(y2, x2) * degrees, asin$1(z / m2) * degrees];
  }
  function compose(a2, b2) {
    function compose2(x2, y2) {
      return x2 = a2(x2, y2), b2(x2[0], x2[1]);
    }
    if (a2.invert && b2.invert) compose2.invert = function(x2, y2) {
      return x2 = b2.invert(x2, y2), x2 && a2.invert(x2[0], x2[1]);
    };
    return compose2;
  }
  function rotationIdentity(lambda, phi2) {
    if (abs$1(lambda) > pi$1) lambda -= Math.round(lambda / tau$1) * tau$1;
    return [lambda, phi2];
  }
  rotationIdentity.invert = rotationIdentity;
  function rotateRadians(deltaLambda, deltaPhi, deltaGamma) {
    return (deltaLambda %= tau$1) ? deltaPhi || deltaGamma ? compose(rotationLambda(deltaLambda), rotationPhiGamma(deltaPhi, deltaGamma)) : rotationLambda(deltaLambda) : deltaPhi || deltaGamma ? rotationPhiGamma(deltaPhi, deltaGamma) : rotationIdentity;
  }
  function forwardRotationLambda(deltaLambda) {
    return function(lambda, phi2) {
      lambda += deltaLambda;
      if (abs$1(lambda) > pi$1) lambda -= Math.round(lambda / tau$1) * tau$1;
      return [lambda, phi2];
    };
  }
  function rotationLambda(deltaLambda) {
    var rotation2 = forwardRotationLambda(deltaLambda);
    rotation2.invert = forwardRotationLambda(-deltaLambda);
    return rotation2;
  }
  function rotationPhiGamma(deltaPhi, deltaGamma) {
    var cosDeltaPhi = cos$1(deltaPhi), sinDeltaPhi = sin$1(deltaPhi), cosDeltaGamma = cos$1(deltaGamma), sinDeltaGamma = sin$1(deltaGamma);
    function rotation2(lambda, phi2) {
      var cosPhi = cos$1(phi2), x2 = cos$1(lambda) * cosPhi, y2 = sin$1(lambda) * cosPhi, z = sin$1(phi2), k = z * cosDeltaPhi + x2 * sinDeltaPhi;
      return [
        atan2(y2 * cosDeltaGamma - k * sinDeltaGamma, x2 * cosDeltaPhi - z * sinDeltaPhi),
        asin$1(k * cosDeltaGamma + y2 * sinDeltaGamma)
      ];
    }
    rotation2.invert = function(lambda, phi2) {
      var cosPhi = cos$1(phi2), x2 = cos$1(lambda) * cosPhi, y2 = sin$1(lambda) * cosPhi, z = sin$1(phi2), k = z * cosDeltaGamma - y2 * sinDeltaGamma;
      return [
        atan2(y2 * cosDeltaGamma + z * sinDeltaGamma, x2 * cosDeltaPhi + k * sinDeltaPhi),
        asin$1(k * cosDeltaPhi - x2 * sinDeltaPhi)
      ];
    };
    return rotation2;
  }
  function rotation(rotate2) {
    rotate2 = rotateRadians(rotate2[0] * radians, rotate2[1] * radians, rotate2.length > 2 ? rotate2[2] * radians : 0);
    function forward(coordinates) {
      coordinates = rotate2(coordinates[0] * radians, coordinates[1] * radians);
      return coordinates[0] *= degrees, coordinates[1] *= degrees, coordinates;
    }
    forward.invert = function(coordinates) {
      coordinates = rotate2.invert(coordinates[0] * radians, coordinates[1] * radians);
      return coordinates[0] *= degrees, coordinates[1] *= degrees, coordinates;
    };
    return forward;
  }
  function circleStream(stream2, radius2, delta, direction, t02, t12) {
    if (!delta) return;
    var cosRadius = cos$1(radius2), sinRadius = sin$1(radius2), step = direction * delta;
    if (t02 == null) {
      t02 = radius2 + direction * tau$1;
      t12 = radius2 - step / 2;
    } else {
      t02 = circleRadius(cosRadius, t02);
      t12 = circleRadius(cosRadius, t12);
      if (direction > 0 ? t02 < t12 : t02 > t12) t02 += direction * tau$1;
    }
    for (var point2, t = t02; direction > 0 ? t > t12 : t < t12; t -= step) {
      point2 = spherical([cosRadius, -sinRadius * cos$1(t), -sinRadius * sin$1(t)]);
      stream2.point(point2[0], point2[1]);
    }
  }
  function circleRadius(cosRadius, point2) {
    point2 = cartesian(point2), point2[0] -= cosRadius;
    cartesianNormalizeInPlace(point2);
    var radius2 = acos(-point2[1]);
    return ((-point2[2] < 0 ? -radius2 : radius2) + tau$1 - epsilon$3) % tau$1;
  }
  function clipBuffer() {
    var lines = [], line2;
    return {
      point: function(x2, y2, m2) {
        line2.push([x2, y2, m2]);
      },
      lineStart: function() {
        lines.push(line2 = []);
      },
      lineEnd: noop$2,
      rejoin: function() {
        if (lines.length > 1) lines.push(lines.pop().concat(lines.shift()));
      },
      result: function() {
        var result = lines;
        lines = [];
        line2 = null;
        return result;
      }
    };
  }
  function pointEqual(a2, b2) {
    return abs$1(a2[0] - b2[0]) < epsilon$3 && abs$1(a2[1] - b2[1]) < epsilon$3;
  }
  function Intersection(point2, points2, other, entry2) {
    this.x = point2;
    this.z = points2;
    this.o = other;
    this.e = entry2;
    this.v = false;
    this.n = this.p = null;
  }
  function clipRejoin(segments2, compareIntersection2, startInside, interpolate2, stream2) {
    var subject = [], clip2 = [], i, n;
    segments2.forEach(function(segment) {
      if ((n2 = segment.length - 1) <= 0) return;
      var n2, p02 = segment[0], p1 = segment[n2], x2;
      if (pointEqual(p02, p1)) {
        if (!p02[2] && !p1[2]) {
          stream2.lineStart();
          for (i = 0; i < n2; ++i) stream2.point((p02 = segment[i])[0], p02[1]);
          stream2.lineEnd();
          return;
        }
        p1[0] += 2 * epsilon$3;
      }
      subject.push(x2 = new Intersection(p02, segment, null, true));
      clip2.push(x2.o = new Intersection(p02, null, x2, false));
      subject.push(x2 = new Intersection(p1, segment, null, false));
      clip2.push(x2.o = new Intersection(p1, null, x2, true));
    });
    if (!subject.length) return;
    clip2.sort(compareIntersection2);
    link(subject);
    link(clip2);
    for (i = 0, n = clip2.length; i < n; ++i) {
      clip2[i].e = startInside = !startInside;
    }
    var start = subject[0], points2, point2;
    while (1) {
      var current2 = start, isSubject = true;
      while (current2.v) if ((current2 = current2.n) === start) return;
      points2 = current2.z;
      stream2.lineStart();
      do {
        current2.v = current2.o.v = true;
        if (current2.e) {
          if (isSubject) {
            for (i = 0, n = points2.length; i < n; ++i) stream2.point((point2 = points2[i])[0], point2[1]);
          } else {
            interpolate2(current2.x, current2.n.x, 1, stream2);
          }
          current2 = current2.n;
        } else {
          if (isSubject) {
            points2 = current2.p.z;
            for (i = points2.length - 1; i >= 0; --i) stream2.point((point2 = points2[i])[0], point2[1]);
          } else {
            interpolate2(current2.x, current2.p.x, -1, stream2);
          }
          current2 = current2.p;
        }
        current2 = current2.o;
        points2 = current2.z;
        isSubject = !isSubject;
      } while (!current2.v);
      stream2.lineEnd();
    }
  }
  function link(array2) {
    if (!(n = array2.length)) return;
    var n, i = 0, a2 = array2[0], b2;
    while (++i < n) {
      a2.n = b2 = array2[i];
      b2.p = a2;
      a2 = b2;
    }
    a2.n = b2 = array2[0];
    b2.p = a2;
  }
  function longitude(point2) {
    return abs$1(point2[0]) <= pi$1 ? point2[0] : sign(point2[0]) * ((abs$1(point2[0]) + pi$1) % tau$1 - pi$1);
  }
  function polygonContains(polygon, point2) {
    var lambda = longitude(point2), phi2 = point2[1], sinPhi = sin$1(phi2), normal = [sin$1(lambda), -cos$1(lambda), 0], angle2 = 0, winding = 0;
    var sum2 = new Adder();
    if (sinPhi === 1) phi2 = halfPi$1 + epsilon$3;
    else if (sinPhi === -1) phi2 = -halfPi$1 - epsilon$3;
    for (var i = 0, n = polygon.length; i < n; ++i) {
      if (!(m2 = (ring = polygon[i]).length)) continue;
      var ring, m2, point0 = ring[m2 - 1], lambda02 = longitude(point0), phi02 = point0[1] / 2 + quarterPi, sinPhi02 = sin$1(phi02), cosPhi02 = cos$1(phi02);
      for (var j = 0; j < m2; ++j, lambda02 = lambda12, sinPhi02 = sinPhi1, cosPhi02 = cosPhi1, point0 = point1) {
        var point1 = ring[j], lambda12 = longitude(point1), phi12 = point1[1] / 2 + quarterPi, sinPhi1 = sin$1(phi12), cosPhi1 = cos$1(phi12), delta = lambda12 - lambda02, sign2 = delta >= 0 ? 1 : -1, absDelta = sign2 * delta, antimeridian = absDelta > pi$1, k = sinPhi02 * sinPhi1;
        sum2.add(atan2(k * sign2 * sin$1(absDelta), cosPhi02 * cosPhi1 + k * cos$1(absDelta)));
        angle2 += antimeridian ? delta + sign2 * tau$1 : delta;
        if (antimeridian ^ lambda02 >= lambda ^ lambda12 >= lambda) {
          var arc2 = cartesianCross(cartesian(point0), cartesian(point1));
          cartesianNormalizeInPlace(arc2);
          var intersection2 = cartesianCross(normal, arc2);
          cartesianNormalizeInPlace(intersection2);
          var phiArc = (antimeridian ^ delta >= 0 ? -1 : 1) * asin$1(intersection2[2]);
          if (phi2 > phiArc || phi2 === phiArc && (arc2[0] || arc2[1])) {
            winding += antimeridian ^ delta >= 0 ? 1 : -1;
          }
        }
      }
    }
    return (angle2 < -epsilon$3 || angle2 < epsilon$3 && sum2 < -epsilon2) ^ winding & 1;
  }
  function clip$1(pointVisible, clipLine2, interpolate2, start) {
    return function(sink) {
      var line2 = clipLine2(sink), ringBuffer = clipBuffer(), ringSink = clipLine2(ringBuffer), polygonStarted = false, polygon, segments2, ring;
      var clip2 = {
        point: point2,
        lineStart,
        lineEnd,
        polygonStart: function() {
          clip2.point = pointRing;
          clip2.lineStart = ringStart;
          clip2.lineEnd = ringEnd;
          segments2 = [];
          polygon = [];
        },
        polygonEnd: function() {
          clip2.point = point2;
          clip2.lineStart = lineStart;
          clip2.lineEnd = lineEnd;
          segments2 = merge$2(segments2);
          var startInside = polygonContains(polygon, start);
          if (segments2.length) {
            if (!polygonStarted) sink.polygonStart(), polygonStarted = true;
            clipRejoin(segments2, compareIntersection, startInside, interpolate2, sink);
          } else if (startInside) {
            if (!polygonStarted) sink.polygonStart(), polygonStarted = true;
            sink.lineStart();
            interpolate2(null, null, 1, sink);
            sink.lineEnd();
          }
          if (polygonStarted) sink.polygonEnd(), polygonStarted = false;
          segments2 = polygon = null;
        },
        sphere: function() {
          sink.polygonStart();
          sink.lineStart();
          interpolate2(null, null, 1, sink);
          sink.lineEnd();
          sink.polygonEnd();
        }
      };
      function point2(lambda, phi2) {
        if (pointVisible(lambda, phi2)) sink.point(lambda, phi2);
      }
      function pointLine(lambda, phi2) {
        line2.point(lambda, phi2);
      }
      function lineStart() {
        clip2.point = pointLine;
        line2.lineStart();
      }
      function lineEnd() {
        clip2.point = point2;
        line2.lineEnd();
      }
      function pointRing(lambda, phi2) {
        ring.push([lambda, phi2]);
        ringSink.point(lambda, phi2);
      }
      function ringStart() {
        ringSink.lineStart();
        ring = [];
      }
      function ringEnd() {
        pointRing(ring[0][0], ring[0][1]);
        ringSink.lineEnd();
        var clean = ringSink.clean(), ringSegments = ringBuffer.result(), i, n = ringSegments.length, m2, segment, point3;
        ring.pop();
        polygon.push(ring);
        ring = null;
        if (!n) return;
        if (clean & 1) {
          segment = ringSegments[0];
          if ((m2 = segment.length - 1) > 0) {
            if (!polygonStarted) sink.polygonStart(), polygonStarted = true;
            sink.lineStart();
            for (i = 0; i < m2; ++i) sink.point((point3 = segment[i])[0], point3[1]);
            sink.lineEnd();
          }
          return;
        }
        if (n > 1 && clean & 2) ringSegments.push(ringSegments.pop().concat(ringSegments.shift()));
        segments2.push(ringSegments.filter(validSegment));
      }
      return clip2;
    };
  }
  function validSegment(segment) {
    return segment.length > 1;
  }
  function compareIntersection(a2, b2) {
    return ((a2 = a2.x)[0] < 0 ? a2[1] - halfPi$1 - epsilon$3 : halfPi$1 - a2[1]) - ((b2 = b2.x)[0] < 0 ? b2[1] - halfPi$1 - epsilon$3 : halfPi$1 - b2[1]);
  }
  const clipAntimeridian = clip$1(
    function() {
      return true;
    },
    clipAntimeridianLine,
    clipAntimeridianInterpolate,
    [-pi$1, -halfPi$1]
  );
  function clipAntimeridianLine(stream2) {
    var lambda02 = NaN, phi02 = NaN, sign0 = NaN, clean;
    return {
      lineStart: function() {
        stream2.lineStart();
        clean = 1;
      },
      point: function(lambda12, phi12) {
        var sign1 = lambda12 > 0 ? pi$1 : -pi$1, delta = abs$1(lambda12 - lambda02);
        if (abs$1(delta - pi$1) < epsilon$3) {
          stream2.point(lambda02, phi02 = (phi02 + phi12) / 2 > 0 ? halfPi$1 : -halfPi$1);
          stream2.point(sign0, phi02);
          stream2.lineEnd();
          stream2.lineStart();
          stream2.point(sign1, phi02);
          stream2.point(lambda12, phi02);
          clean = 0;
        } else if (sign0 !== sign1 && delta >= pi$1) {
          if (abs$1(lambda02 - sign0) < epsilon$3) lambda02 -= sign0 * epsilon$3;
          if (abs$1(lambda12 - sign1) < epsilon$3) lambda12 -= sign1 * epsilon$3;
          phi02 = clipAntimeridianIntersect(lambda02, phi02, lambda12, phi12);
          stream2.point(sign0, phi02);
          stream2.lineEnd();
          stream2.lineStart();
          stream2.point(sign1, phi02);
          clean = 0;
        }
        stream2.point(lambda02 = lambda12, phi02 = phi12);
        sign0 = sign1;
      },
      lineEnd: function() {
        stream2.lineEnd();
        lambda02 = phi02 = NaN;
      },
      clean: function() {
        return 2 - clean;
      }
    };
  }
  function clipAntimeridianIntersect(lambda02, phi02, lambda12, phi12) {
    var cosPhi02, cosPhi1, sinLambda0Lambda1 = sin$1(lambda02 - lambda12);
    return abs$1(sinLambda0Lambda1) > epsilon$3 ? atan((sin$1(phi02) * (cosPhi1 = cos$1(phi12)) * sin$1(lambda12) - sin$1(phi12) * (cosPhi02 = cos$1(phi02)) * sin$1(lambda02)) / (cosPhi02 * cosPhi1 * sinLambda0Lambda1)) : (phi02 + phi12) / 2;
  }
  function clipAntimeridianInterpolate(from, to, direction, stream2) {
    var phi2;
    if (from == null) {
      phi2 = direction * halfPi$1;
      stream2.point(-pi$1, phi2);
      stream2.point(0, phi2);
      stream2.point(pi$1, phi2);
      stream2.point(pi$1, 0);
      stream2.point(pi$1, -phi2);
      stream2.point(0, -phi2);
      stream2.point(-pi$1, -phi2);
      stream2.point(-pi$1, 0);
      stream2.point(-pi$1, phi2);
    } else if (abs$1(from[0] - to[0]) > epsilon$3) {
      var lambda = from[0] < to[0] ? pi$1 : -pi$1;
      phi2 = direction * lambda / 2;
      stream2.point(-lambda, phi2);
      stream2.point(0, phi2);
      stream2.point(lambda, phi2);
    } else {
      stream2.point(to[0], to[1]);
    }
  }
  function clipCircle(radius2) {
    var cr2 = cos$1(radius2), delta = 2 * radians, smallRadius = cr2 > 0, notHemisphere = abs$1(cr2) > epsilon$3;
    function interpolate2(from, to, direction, stream2) {
      circleStream(stream2, radius2, delta, direction, from, to);
    }
    function visible(lambda, phi2) {
      return cos$1(lambda) * cos$1(phi2) > cr2;
    }
    function clipLine2(stream2) {
      var point0, c0, v0, v00, clean;
      return {
        lineStart: function() {
          v00 = v0 = false;
          clean = 1;
        },
        point: function(lambda, phi2) {
          var point1 = [lambda, phi2], point2, v = visible(lambda, phi2), c2 = smallRadius ? v ? 0 : code(lambda, phi2) : v ? code(lambda + (lambda < 0 ? pi$1 : -pi$1), phi2) : 0;
          if (!point0 && (v00 = v0 = v)) stream2.lineStart();
          if (v !== v0) {
            point2 = intersect2(point0, point1);
            if (!point2 || pointEqual(point0, point2) || pointEqual(point1, point2))
              point1[2] = 1;
          }
          if (v !== v0) {
            clean = 0;
            if (v) {
              stream2.lineStart();
              point2 = intersect2(point1, point0);
              stream2.point(point2[0], point2[1]);
            } else {
              point2 = intersect2(point0, point1);
              stream2.point(point2[0], point2[1], 2);
              stream2.lineEnd();
            }
            point0 = point2;
          } else if (notHemisphere && point0 && smallRadius ^ v) {
            var t;
            if (!(c2 & c0) && (t = intersect2(point1, point0, true))) {
              clean = 0;
              if (smallRadius) {
                stream2.lineStart();
                stream2.point(t[0][0], t[0][1]);
                stream2.point(t[1][0], t[1][1]);
                stream2.lineEnd();
              } else {
                stream2.point(t[1][0], t[1][1]);
                stream2.lineEnd();
                stream2.lineStart();
                stream2.point(t[0][0], t[0][1], 3);
              }
            }
          }
          if (v && (!point0 || !pointEqual(point0, point1))) {
            stream2.point(point1[0], point1[1]);
          }
          point0 = point1, v0 = v, c0 = c2;
        },
        lineEnd: function() {
          if (v0) stream2.lineEnd();
          point0 = null;
        },
        // Rejoin first and last segments if there were intersections and the first
        // and last points were visible.
        clean: function() {
          return clean | (v00 && v0) << 1;
        }
      };
    }
    function intersect2(a2, b2, two) {
      var pa2 = cartesian(a2), pb = cartesian(b2);
      var n1 = [1, 0, 0], n2 = cartesianCross(pa2, pb), n2n2 = cartesianDot(n2, n2), n1n2 = n2[0], determinant = n2n2 - n1n2 * n1n2;
      if (!determinant) return !two && a2;
      var c1 = cr2 * n2n2 / determinant, c2 = -cr2 * n1n2 / determinant, n1xn2 = cartesianCross(n1, n2), A5 = cartesianScale(n1, c1), B2 = cartesianScale(n2, c2);
      cartesianAddInPlace(A5, B2);
      var u2 = n1xn2, w2 = cartesianDot(A5, u2), uu = cartesianDot(u2, u2), t22 = w2 * w2 - uu * (cartesianDot(A5, A5) - 1);
      if (t22 < 0) return;
      var t = sqrt$1(t22), q = cartesianScale(u2, (-w2 - t) / uu);
      cartesianAddInPlace(q, A5);
      q = spherical(q);
      if (!two) return q;
      var lambda02 = a2[0], lambda12 = b2[0], phi02 = a2[1], phi12 = b2[1], z;
      if (lambda12 < lambda02) z = lambda02, lambda02 = lambda12, lambda12 = z;
      var delta2 = lambda12 - lambda02, polar = abs$1(delta2 - pi$1) < epsilon$3, meridian = polar || delta2 < epsilon$3;
      if (!polar && phi12 < phi02) z = phi02, phi02 = phi12, phi12 = z;
      if (meridian ? polar ? phi02 + phi12 > 0 ^ q[1] < (abs$1(q[0] - lambda02) < epsilon$3 ? phi02 : phi12) : phi02 <= q[1] && q[1] <= phi12 : delta2 > pi$1 ^ (lambda02 <= q[0] && q[0] <= lambda12)) {
        var q1 = cartesianScale(u2, (-w2 + t) / uu);
        cartesianAddInPlace(q1, A5);
        return [q, spherical(q1)];
      }
    }
    function code(lambda, phi2) {
      var r = smallRadius ? radius2 : pi$1 - radius2, code2 = 0;
      if (lambda < -r) code2 |= 1;
      else if (lambda > r) code2 |= 2;
      if (phi2 < -r) code2 |= 4;
      else if (phi2 > r) code2 |= 8;
      return code2;
    }
    return clip$1(visible, clipLine2, interpolate2, smallRadius ? [0, -radius2] : [-pi$1, radius2 - pi$1]);
  }
  function clipLine(a2, b2, x02, y02, x12, y12) {
    var ax = a2[0], ay = a2[1], bx = b2[0], by = b2[1], t02 = 0, t12 = 1, dx = bx - ax, dy = by - ay, r;
    r = x02 - ax;
    if (!dx && r > 0) return;
    r /= dx;
    if (dx < 0) {
      if (r < t02) return;
      if (r < t12) t12 = r;
    } else if (dx > 0) {
      if (r > t12) return;
      if (r > t02) t02 = r;
    }
    r = x12 - ax;
    if (!dx && r < 0) return;
    r /= dx;
    if (dx < 0) {
      if (r > t12) return;
      if (r > t02) t02 = r;
    } else if (dx > 0) {
      if (r < t02) return;
      if (r < t12) t12 = r;
    }
    r = y02 - ay;
    if (!dy && r > 0) return;
    r /= dy;
    if (dy < 0) {
      if (r < t02) return;
      if (r < t12) t12 = r;
    } else if (dy > 0) {
      if (r > t12) return;
      if (r > t02) t02 = r;
    }
    r = y12 - ay;
    if (!dy && r < 0) return;
    r /= dy;
    if (dy < 0) {
      if (r > t12) return;
      if (r > t02) t02 = r;
    } else if (dy > 0) {
      if (r < t02) return;
      if (r < t12) t12 = r;
    }
    if (t02 > 0) a2[0] = ax + t02 * dx, a2[1] = ay + t02 * dy;
    if (t12 < 1) b2[0] = ax + t12 * dx, b2[1] = ay + t12 * dy;
    return true;
  }
  var clipMax = 1e9, clipMin = -clipMax;
  function clipRectangle(x02, y02, x12, y12) {
    function visible(x2, y2) {
      return x02 <= x2 && x2 <= x12 && y02 <= y2 && y2 <= y12;
    }
    function interpolate2(from, to, direction, stream2) {
      var a2 = 0, a1 = 0;
      if (from == null || (a2 = corner(from, direction)) !== (a1 = corner(to, direction)) || comparePoint(from, to) < 0 ^ direction > 0) {
        do
          stream2.point(a2 === 0 || a2 === 3 ? x02 : x12, a2 > 1 ? y12 : y02);
        while ((a2 = (a2 + direction + 4) % 4) !== a1);
      } else {
        stream2.point(to[0], to[1]);
      }
    }
    function corner(p, direction) {
      return abs$1(p[0] - x02) < epsilon$3 ? direction > 0 ? 0 : 3 : abs$1(p[0] - x12) < epsilon$3 ? direction > 0 ? 2 : 1 : abs$1(p[1] - y02) < epsilon$3 ? direction > 0 ? 1 : 0 : direction > 0 ? 3 : 2;
    }
    function compareIntersection2(a2, b2) {
      return comparePoint(a2.x, b2.x);
    }
    function comparePoint(a2, b2) {
      var ca = corner(a2, 1), cb = corner(b2, 1);
      return ca !== cb ? ca - cb : ca === 0 ? b2[1] - a2[1] : ca === 1 ? a2[0] - b2[0] : ca === 2 ? a2[1] - b2[1] : b2[0] - a2[0];
    }
    return function(stream2) {
      var activeStream = stream2, bufferStream = clipBuffer(), segments2, polygon, ring, x__, y__, v__, x_, y_, v_, first, clean;
      var clipStream = {
        point: point2,
        lineStart,
        lineEnd,
        polygonStart,
        polygonEnd
      };
      function point2(x2, y2) {
        if (visible(x2, y2)) activeStream.point(x2, y2);
      }
      function polygonInside() {
        var winding = 0;
        for (var i = 0, n = polygon.length; i < n; ++i) {
          for (var ring2 = polygon[i], j = 1, m2 = ring2.length, point3 = ring2[0], a0, a1, b0 = point3[0], b1 = point3[1]; j < m2; ++j) {
            a0 = b0, a1 = b1, point3 = ring2[j], b0 = point3[0], b1 = point3[1];
            if (a1 <= y12) {
              if (b1 > y12 && (b0 - a0) * (y12 - a1) > (b1 - a1) * (x02 - a0)) ++winding;
            } else {
              if (b1 <= y12 && (b0 - a0) * (y12 - a1) < (b1 - a1) * (x02 - a0)) --winding;
            }
          }
        }
        return winding;
      }
      function polygonStart() {
        activeStream = bufferStream, segments2 = [], polygon = [], clean = true;
      }
      function polygonEnd() {
        var startInside = polygonInside(), cleanInside = clean && startInside, visible2 = (segments2 = merge$2(segments2)).length;
        if (cleanInside || visible2) {
          stream2.polygonStart();
          if (cleanInside) {
            stream2.lineStart();
            interpolate2(null, null, 1, stream2);
            stream2.lineEnd();
          }
          if (visible2) {
            clipRejoin(segments2, compareIntersection2, startInside, interpolate2, stream2);
          }
          stream2.polygonEnd();
        }
        activeStream = stream2, segments2 = polygon = ring = null;
      }
      function lineStart() {
        clipStream.point = linePoint2;
        if (polygon) polygon.push(ring = []);
        first = true;
        v_ = false;
        x_ = y_ = NaN;
      }
      function lineEnd() {
        if (segments2) {
          linePoint2(x__, y__);
          if (v__ && v_) bufferStream.rejoin();
          segments2.push(bufferStream.result());
        }
        clipStream.point = point2;
        if (v_) activeStream.lineEnd();
      }
      function linePoint2(x2, y2) {
        var v = visible(x2, y2);
        if (polygon) ring.push([x2, y2]);
        if (first) {
          x__ = x2, y__ = y2, v__ = v;
          first = false;
          if (v) {
            activeStream.lineStart();
            activeStream.point(x2, y2);
          }
        } else {
          if (v && v_) activeStream.point(x2, y2);
          else {
            var a2 = [x_ = Math.max(clipMin, Math.min(clipMax, x_)), y_ = Math.max(clipMin, Math.min(clipMax, y_))], b2 = [x2 = Math.max(clipMin, Math.min(clipMax, x2)), y2 = Math.max(clipMin, Math.min(clipMax, y2))];
            if (clipLine(a2, b2, x02, y02, x12, y12)) {
              if (!v_) {
                activeStream.lineStart();
                activeStream.point(a2[0], a2[1]);
              }
              activeStream.point(b2[0], b2[1]);
              if (!v) activeStream.lineEnd();
              clean = false;
            } else if (v) {
              activeStream.lineStart();
              activeStream.point(x2, y2);
              clean = false;
            }
          }
        }
        x_ = x2, y_ = y2, v_ = v;
      }
      return clipStream;
    };
  }
  function graticuleX(y02, y12, dy) {
    var y2 = range$5(y02, y12 - epsilon$3, dy).concat(y12);
    return function(x2) {
      return y2.map(function(y3) {
        return [x2, y3];
      });
    };
  }
  function graticuleY(x02, x12, dx) {
    var x2 = range$5(x02, x12 - epsilon$3, dx).concat(x12);
    return function(y2) {
      return x2.map(function(x3) {
        return [x3, y2];
      });
    };
  }
  function graticule() {
    var x12, x02, X12, X02, y12, y02, Y12, Y02, dx = 10, dy = dx, DX = 90, DY = 360, x2, y2, X3, Y3, precision = 2.5;
    function graticule2() {
      return { type: "MultiLineString", coordinates: lines() };
    }
    function lines() {
      return range$5(ceil(X02 / DX) * DX, X12, DX).map(X3).concat(range$5(ceil(Y02 / DY) * DY, Y12, DY).map(Y3)).concat(range$5(ceil(x02 / dx) * dx, x12, dx).filter(function(x3) {
        return abs$1(x3 % DX) > epsilon$3;
      }).map(x2)).concat(range$5(ceil(y02 / dy) * dy, y12, dy).filter(function(y3) {
        return abs$1(y3 % DY) > epsilon$3;
      }).map(y2));
    }
    graticule2.lines = function() {
      return lines().map(function(coordinates) {
        return { type: "LineString", coordinates };
      });
    };
    graticule2.outline = function() {
      return {
        type: "Polygon",
        coordinates: [
          X3(X02).concat(
            Y3(Y12).slice(1),
            X3(X12).reverse().slice(1),
            Y3(Y02).reverse().slice(1)
          )
        ]
      };
    };
    graticule2.extent = function(_) {
      if (!arguments.length) return graticule2.extentMinor();
      return graticule2.extentMajor(_).extentMinor(_);
    };
    graticule2.extentMajor = function(_) {
      if (!arguments.length) return [[X02, Y02], [X12, Y12]];
      X02 = +_[0][0], X12 = +_[1][0];
      Y02 = +_[0][1], Y12 = +_[1][1];
      if (X02 > X12) _ = X02, X02 = X12, X12 = _;
      if (Y02 > Y12) _ = Y02, Y02 = Y12, Y12 = _;
      return graticule2.precision(precision);
    };
    graticule2.extentMinor = function(_) {
      if (!arguments.length) return [[x02, y02], [x12, y12]];
      x02 = +_[0][0], x12 = +_[1][0];
      y02 = +_[0][1], y12 = +_[1][1];
      if (x02 > x12) _ = x02, x02 = x12, x12 = _;
      if (y02 > y12) _ = y02, y02 = y12, y12 = _;
      return graticule2.precision(precision);
    };
    graticule2.step = function(_) {
      if (!arguments.length) return graticule2.stepMinor();
      return graticule2.stepMajor(_).stepMinor(_);
    };
    graticule2.stepMajor = function(_) {
      if (!arguments.length) return [DX, DY];
      DX = +_[0], DY = +_[1];
      return graticule2;
    };
    graticule2.stepMinor = function(_) {
      if (!arguments.length) return [dx, dy];
      dx = +_[0], dy = +_[1];
      return graticule2;
    };
    graticule2.precision = function(_) {
      if (!arguments.length) return precision;
      precision = +_;
      x2 = graticuleX(y02, y12, 90);
      y2 = graticuleY(x02, x12, precision);
      X3 = graticuleX(Y02, Y12, 90);
      Y3 = graticuleY(X02, X12, precision);
      return graticule2;
    };
    return graticule2.extentMajor([[-180, -90 + epsilon$3], [180, 90 - epsilon$3]]).extentMinor([[-180, -80 - epsilon$3], [180, 80 + epsilon$3]]);
  }
  const identity = (x2) => x2;
  var areaSum = new Adder(), areaRingSum = new Adder(), x00$2, y00$2, x0$3, y0$3;
  var areaStream = {
    point: noop$2,
    lineStart: noop$2,
    lineEnd: noop$2,
    polygonStart: function() {
      areaStream.lineStart = areaRingStart;
      areaStream.lineEnd = areaRingEnd;
    },
    polygonEnd: function() {
      areaStream.lineStart = areaStream.lineEnd = areaStream.point = noop$2;
      areaSum.add(abs$1(areaRingSum));
      areaRingSum = new Adder();
    },
    result: function() {
      var area2 = areaSum / 2;
      areaSum = new Adder();
      return area2;
    }
  };
  function areaRingStart() {
    areaStream.point = areaPointFirst;
  }
  function areaPointFirst(x2, y2) {
    areaStream.point = areaPoint;
    x00$2 = x0$3 = x2, y00$2 = y0$3 = y2;
  }
  function areaPoint(x2, y2) {
    areaRingSum.add(y0$3 * x2 - x0$3 * y2);
    x0$3 = x2, y0$3 = y2;
  }
  function areaRingEnd() {
    areaPoint(x00$2, y00$2);
  }
  var x0$2 = Infinity, y0$2 = x0$2, x1 = -x0$2, y1 = x1;
  var boundsStream = {
    point: boundsPoint,
    lineStart: noop$2,
    lineEnd: noop$2,
    polygonStart: noop$2,
    polygonEnd: noop$2,
    result: function() {
      var bounds2 = [[x0$2, y0$2], [x1, y1]];
      x1 = y1 = -(y0$2 = x0$2 = Infinity);
      return bounds2;
    }
  };
  function boundsPoint(x2, y2) {
    if (x2 < x0$2) x0$2 = x2;
    if (x2 > x1) x1 = x2;
    if (y2 < y0$2) y0$2 = y2;
    if (y2 > y1) y1 = y2;
  }
  var X0 = 0, Y0 = 0, Z0 = 0, X1 = 0, Y1 = 0, Z1 = 0, X2$1 = 0, Y2$1 = 0, Z2 = 0, x00$1, y00$1, x0$1, y0$1;
  var centroidStream = {
    point: centroidPoint,
    lineStart: centroidLineStart,
    lineEnd: centroidLineEnd,
    polygonStart: function() {
      centroidStream.lineStart = centroidRingStart;
      centroidStream.lineEnd = centroidRingEnd;
    },
    polygonEnd: function() {
      centroidStream.point = centroidPoint;
      centroidStream.lineStart = centroidLineStart;
      centroidStream.lineEnd = centroidLineEnd;
    },
    result: function() {
      var centroid = Z2 ? [X2$1 / Z2, Y2$1 / Z2] : Z1 ? [X1 / Z1, Y1 / Z1] : Z0 ? [X0 / Z0, Y0 / Z0] : [NaN, NaN];
      X0 = Y0 = Z0 = X1 = Y1 = Z1 = X2$1 = Y2$1 = Z2 = 0;
      return centroid;
    }
  };
  function centroidPoint(x2, y2) {
    X0 += x2;
    Y0 += y2;
    ++Z0;
  }
  function centroidLineStart() {
    centroidStream.point = centroidPointFirstLine;
  }
  function centroidPointFirstLine(x2, y2) {
    centroidStream.point = centroidPointLine;
    centroidPoint(x0$1 = x2, y0$1 = y2);
  }
  function centroidPointLine(x2, y2) {
    var dx = x2 - x0$1, dy = y2 - y0$1, z = sqrt$1(dx * dx + dy * dy);
    X1 += z * (x0$1 + x2) / 2;
    Y1 += z * (y0$1 + y2) / 2;
    Z1 += z;
    centroidPoint(x0$1 = x2, y0$1 = y2);
  }
  function centroidLineEnd() {
    centroidStream.point = centroidPoint;
  }
  function centroidRingStart() {
    centroidStream.point = centroidPointFirstRing;
  }
  function centroidRingEnd() {
    centroidPointRing(x00$1, y00$1);
  }
  function centroidPointFirstRing(x2, y2) {
    centroidStream.point = centroidPointRing;
    centroidPoint(x00$1 = x0$1 = x2, y00$1 = y0$1 = y2);
  }
  function centroidPointRing(x2, y2) {
    var dx = x2 - x0$1, dy = y2 - y0$1, z = sqrt$1(dx * dx + dy * dy);
    X1 += z * (x0$1 + x2) / 2;
    Y1 += z * (y0$1 + y2) / 2;
    Z1 += z;
    z = y0$1 * x2 - x0$1 * y2;
    X2$1 += z * (x0$1 + x2);
    Y2$1 += z * (y0$1 + y2);
    Z2 += z * 3;
    centroidPoint(x0$1 = x2, y0$1 = y2);
  }
  function PathContext(context2) {
    this._context = context2;
  }
  PathContext.prototype = {
    _radius: 4.5,
    pointRadius: function(_) {
      return this._radius = _, this;
    },
    polygonStart: function() {
      this._line = 0;
    },
    polygonEnd: function() {
      this._line = NaN;
    },
    lineStart: function() {
      this._point = 0;
    },
    lineEnd: function() {
      if (this._line === 0) this._context.closePath();
      this._point = NaN;
    },
    point: function(x2, y2) {
      switch (this._point) {
        case 0: {
          this._context.moveTo(x2, y2);
          this._point = 1;
          break;
        }
        case 1: {
          this._context.lineTo(x2, y2);
          break;
        }
        default: {
          this._context.moveTo(x2 + this._radius, y2);
          this._context.arc(x2, y2, this._radius, 0, tau$1);
          break;
        }
      }
    },
    result: noop$2
  };
  var lengthSum = new Adder(), lengthRing, x00, y00, x0, y0;
  var lengthStream = {
    point: noop$2,
    lineStart: function() {
      lengthStream.point = lengthPointFirst;
    },
    lineEnd: function() {
      if (lengthRing) lengthPoint(x00, y00);
      lengthStream.point = noop$2;
    },
    polygonStart: function() {
      lengthRing = true;
    },
    polygonEnd: function() {
      lengthRing = null;
    },
    result: function() {
      var length2 = +lengthSum;
      lengthSum = new Adder();
      return length2;
    }
  };
  function lengthPointFirst(x2, y2) {
    lengthStream.point = lengthPoint;
    x00 = x0 = x2, y00 = y0 = y2;
  }
  function lengthPoint(x2, y2) {
    x0 -= x2, y0 -= y2;
    lengthSum.add(sqrt$1(x0 * x0 + y0 * y0));
    x0 = x2, y0 = y2;
  }
  let cacheDigits, cacheAppend, cacheRadius, cacheCircle;
  class PathString {
    constructor(digits) {
      this._append = digits == null ? append : appendRound(digits);
      this._radius = 4.5;
      this._ = "";
    }
    pointRadius(_) {
      this._radius = +_;
      return this;
    }
    polygonStart() {
      this._line = 0;
    }
    polygonEnd() {
      this._line = NaN;
    }
    lineStart() {
      this._point = 0;
    }
    lineEnd() {
      if (this._line === 0) this._ += "Z";
      this._point = NaN;
    }
    point(x2, y2) {
      switch (this._point) {
        case 0: {
          this._append`M${x2},${y2}`;
          this._point = 1;
          break;
        }
        case 1: {
          this._append`L${x2},${y2}`;
          break;
        }
        default: {
          this._append`M${x2},${y2}`;
          if (this._radius !== cacheRadius || this._append !== cacheAppend) {
            const r = this._radius;
            const s = this._;
            this._ = "";
            this._append`m0,${r}a${r},${r} 0 1,1 0,${-2 * r}a${r},${r} 0 1,1 0,${2 * r}z`;
            cacheRadius = r;
            cacheAppend = this._append;
            cacheCircle = this._;
            this._ = s;
          }
          this._ += cacheCircle;
          break;
        }
      }
    }
    result() {
      const result = this._;
      this._ = "";
      return result.length ? result : null;
    }
  }
  function append(strings) {
    let i = 1;
    this._ += strings[0];
    for (const j = strings.length; i < j; ++i) {
      this._ += arguments[i] + strings[i];
    }
  }
  function appendRound(digits) {
    const d = Math.floor(digits);
    if (!(d >= 0)) throw new RangeError(`invalid digits: ${digits}`);
    if (d > 15) return append;
    if (d !== cacheDigits) {
      const k = 10 ** d;
      cacheDigits = d;
      cacheAppend = function append2(strings) {
        let i = 1;
        this._ += strings[0];
        for (const j = strings.length; i < j; ++i) {
          this._ += Math.round(arguments[i] * k) / k + strings[i];
        }
      };
    }
    return cacheAppend;
  }
  function geoPath(projection2, context2) {
    let digits = 3, pointRadius = 4.5, projectionStream, contextStream;
    function path2(object2) {
      if (object2) {
        if (typeof pointRadius === "function") contextStream.pointRadius(+pointRadius.apply(this, arguments));
        geoStream(object2, projectionStream(contextStream));
      }
      return contextStream.result();
    }
    path2.area = function(object2) {
      geoStream(object2, projectionStream(areaStream));
      return areaStream.result();
    };
    path2.measure = function(object2) {
      geoStream(object2, projectionStream(lengthStream));
      return lengthStream.result();
    };
    path2.bounds = function(object2) {
      geoStream(object2, projectionStream(boundsStream));
      return boundsStream.result();
    };
    path2.centroid = function(object2) {
      geoStream(object2, projectionStream(centroidStream));
      return centroidStream.result();
    };
    path2.projection = function(_) {
      if (!arguments.length) return projection2;
      projectionStream = _ == null ? (projection2 = null, identity) : (projection2 = _).stream;
      return path2;
    };
    path2.context = function(_) {
      if (!arguments.length) return context2;
      contextStream = _ == null ? (context2 = null, new PathString(digits)) : new PathContext(context2 = _);
      if (typeof pointRadius !== "function") contextStream.pointRadius(pointRadius);
      return path2;
    };
    path2.pointRadius = function(_) {
      if (!arguments.length) return pointRadius;
      pointRadius = typeof _ === "function" ? _ : (contextStream.pointRadius(+_), +_);
      return path2;
    };
    path2.digits = function(_) {
      if (!arguments.length) return digits;
      if (_ == null) digits = null;
      else {
        const d = Math.floor(_);
        if (!(d >= 0)) throw new RangeError(`invalid digits: ${_}`);
        digits = d;
      }
      if (context2 === null) contextStream = new PathString(digits);
      return path2;
    };
    return path2.projection(projection2).digits(digits).context(context2);
  }
  function transformer(methods2) {
    return function(stream2) {
      var s = new TransformStream();
      for (var key2 in methods2) s[key2] = methods2[key2];
      s.stream = stream2;
      return s;
    };
  }
  function TransformStream() {
  }
  TransformStream.prototype = {
    constructor: TransformStream,
    point: function(x2, y2) {
      this.stream.point(x2, y2);
    },
    sphere: function() {
      this.stream.sphere();
    },
    lineStart: function() {
      this.stream.lineStart();
    },
    lineEnd: function() {
      this.stream.lineEnd();
    },
    polygonStart: function() {
      this.stream.polygonStart();
    },
    polygonEnd: function() {
      this.stream.polygonEnd();
    }
  };
  function fit$1(projection2, fitBounds, object2) {
    var clip2 = projection2.clipExtent && projection2.clipExtent();
    projection2.scale(150).translate([0, 0]);
    if (clip2 != null) projection2.clipExtent(null);
    geoStream(object2, projection2.stream(boundsStream));
    fitBounds(boundsStream.result());
    if (clip2 != null) projection2.clipExtent(clip2);
    return projection2;
  }
  function fitExtent(projection2, extent2, object2) {
    return fit$1(projection2, function(b2) {
      var w2 = extent2[1][0] - extent2[0][0], h2 = extent2[1][1] - extent2[0][1], k = Math.min(w2 / (b2[1][0] - b2[0][0]), h2 / (b2[1][1] - b2[0][1])), x2 = +extent2[0][0] + (w2 - k * (b2[1][0] + b2[0][0])) / 2, y2 = +extent2[0][1] + (h2 - k * (b2[1][1] + b2[0][1])) / 2;
      projection2.scale(150 * k).translate([x2, y2]);
    }, object2);
  }
  function fitSize(projection2, size, object2) {
    return fitExtent(projection2, [[0, 0], size], object2);
  }
  function fitWidth(projection2, width2, object2) {
    return fit$1(projection2, function(b2) {
      var w2 = +width2, k = w2 / (b2[1][0] - b2[0][0]), x2 = (w2 - k * (b2[1][0] + b2[0][0])) / 2, y2 = -k * b2[0][1];
      projection2.scale(150 * k).translate([x2, y2]);
    }, object2);
  }
  function fitHeight(projection2, height2, object2) {
    return fit$1(projection2, function(b2) {
      var h2 = +height2, k = h2 / (b2[1][1] - b2[0][1]), x2 = -k * b2[0][0], y2 = (h2 - k * (b2[1][1] + b2[0][1])) / 2;
      projection2.scale(150 * k).translate([x2, y2]);
    }, object2);
  }
  var maxDepth = 16, cosMinDistance = cos$1(30 * radians);
  function resample(project2, delta2) {
    return +delta2 ? resample$1(project2, delta2) : resampleNone(project2);
  }
  function resampleNone(project2) {
    return transformer({
      point: function(x2, y2) {
        x2 = project2(x2, y2);
        this.stream.point(x2[0], x2[1]);
      }
    });
  }
  function resample$1(project2, delta2) {
    function resampleLineTo(x02, y02, lambda02, a0, b0, c0, x12, y12, lambda12, a1, b1, c1, depth, stream2) {
      var dx = x12 - x02, dy = y12 - y02, d2 = dx * dx + dy * dy;
      if (d2 > 4 * delta2 && depth--) {
        var a2 = a0 + a1, b2 = b0 + b1, c2 = c0 + c1, m2 = sqrt$1(a2 * a2 + b2 * b2 + c2 * c2), phi2 = asin$1(c2 /= m2), lambda22 = abs$1(abs$1(c2) - 1) < epsilon$3 || abs$1(lambda02 - lambda12) < epsilon$3 ? (lambda02 + lambda12) / 2 : atan2(b2, a2), p = project2(lambda22, phi2), x2 = p[0], y2 = p[1], dx2 = x2 - x02, dy2 = y2 - y02, dz = dy * dx2 - dx * dy2;
        if (dz * dz / d2 > delta2 || abs$1((dx * dx2 + dy * dy2) / d2 - 0.5) > 0.3 || a0 * a1 + b0 * b1 + c0 * c1 < cosMinDistance) {
          resampleLineTo(x02, y02, lambda02, a0, b0, c0, x2, y2, lambda22, a2 /= m2, b2 /= m2, c2, depth, stream2);
          stream2.point(x2, y2);
          resampleLineTo(x2, y2, lambda22, a2, b2, c2, x12, y12, lambda12, a1, b1, c1, depth, stream2);
        }
      }
    }
    return function(stream2) {
      var lambda002, x002, y002, a00, b00, c00, lambda02, x02, y02, a0, b0, c0;
      var resampleStream = {
        point: point2,
        lineStart,
        lineEnd,
        polygonStart: function() {
          stream2.polygonStart();
          resampleStream.lineStart = ringStart;
        },
        polygonEnd: function() {
          stream2.polygonEnd();
          resampleStream.lineStart = lineStart;
        }
      };
      function point2(x2, y2) {
        x2 = project2(x2, y2);
        stream2.point(x2[0], x2[1]);
      }
      function lineStart() {
        x02 = NaN;
        resampleStream.point = linePoint2;
        stream2.lineStart();
      }
      function linePoint2(lambda, phi2) {
        var c2 = cartesian([lambda, phi2]), p = project2(lambda, phi2);
        resampleLineTo(x02, y02, lambda02, a0, b0, c0, x02 = p[0], y02 = p[1], lambda02 = lambda, a0 = c2[0], b0 = c2[1], c0 = c2[2], maxDepth, stream2);
        stream2.point(x02, y02);
      }
      function lineEnd() {
        resampleStream.point = point2;
        stream2.lineEnd();
      }
      function ringStart() {
        lineStart();
        resampleStream.point = ringPoint;
        resampleStream.lineEnd = ringEnd;
      }
      function ringPoint(lambda, phi2) {
        linePoint2(lambda002 = lambda, phi2), x002 = x02, y002 = y02, a00 = a0, b00 = b0, c00 = c0;
        resampleStream.point = linePoint2;
      }
      function ringEnd() {
        resampleLineTo(x02, y02, lambda02, a0, b0, c0, x002, y002, lambda002, a00, b00, c00, maxDepth, stream2);
        resampleStream.lineEnd = lineEnd;
        lineEnd();
      }
      return resampleStream;
    };
  }
  var transformRadians = transformer({
    point: function(x2, y2) {
      this.stream.point(x2 * radians, y2 * radians);
    }
  });
  function transformRotate(rotate2) {
    return transformer({
      point: function(x2, y2) {
        var r = rotate2(x2, y2);
        return this.stream.point(r[0], r[1]);
      }
    });
  }
  function scaleTranslate(k, dx, dy, sx, sy) {
    function transform2(x2, y2) {
      x2 *= sx;
      y2 *= sy;
      return [dx + k * x2, dy - k * y2];
    }
    transform2.invert = function(x2, y2) {
      return [(x2 - dx) / k * sx, (dy - y2) / k * sy];
    };
    return transform2;
  }
  function scaleTranslateRotate(k, dx, dy, sx, sy, alpha) {
    if (!alpha) return scaleTranslate(k, dx, dy, sx, sy);
    var cosAlpha = cos$1(alpha), sinAlpha = sin$1(alpha), a2 = cosAlpha * k, b2 = sinAlpha * k, ai = cosAlpha / k, bi = sinAlpha / k, ci = (sinAlpha * dy - cosAlpha * dx) / k, fi = (sinAlpha * dx + cosAlpha * dy) / k;
    function transform2(x2, y2) {
      x2 *= sx;
      y2 *= sy;
      return [a2 * x2 - b2 * y2 + dx, dy - b2 * x2 - a2 * y2];
    }
    transform2.invert = function(x2, y2) {
      return [sx * (ai * x2 - bi * y2 + ci), sy * (fi - bi * x2 - ai * y2)];
    };
    return transform2;
  }
  function projection$1(project2) {
    return projectionMutator(function() {
      return project2;
    })();
  }
  function projectionMutator(projectAt) {
    var project2, k = 150, x2 = 480, y2 = 250, lambda = 0, phi2 = 0, deltaLambda = 0, deltaPhi = 0, deltaGamma = 0, rotate2, alpha = 0, sx = 1, sy = 1, theta = null, preclip = clipAntimeridian, x02 = null, y02, x12, y12, postclip = identity, delta2 = 0.5, projectResample, projectTransform, projectRotateTransform, cache2, cacheStream;
    function projection2(point2) {
      return projectRotateTransform(point2[0] * radians, point2[1] * radians);
    }
    function invert2(point2) {
      point2 = projectRotateTransform.invert(point2[0], point2[1]);
      return point2 && [point2[0] * degrees, point2[1] * degrees];
    }
    projection2.stream = function(stream2) {
      return cache2 && cacheStream === stream2 ? cache2 : cache2 = transformRadians(transformRotate(rotate2)(preclip(projectResample(postclip(cacheStream = stream2)))));
    };
    projection2.preclip = function(_) {
      return arguments.length ? (preclip = _, theta = void 0, reset2()) : preclip;
    };
    projection2.postclip = function(_) {
      return arguments.length ? (postclip = _, x02 = y02 = x12 = y12 = null, reset2()) : postclip;
    };
    projection2.clipAngle = function(_) {
      return arguments.length ? (preclip = +_ ? clipCircle(theta = _ * radians) : (theta = null, clipAntimeridian), reset2()) : theta * degrees;
    };
    projection2.clipExtent = function(_) {
      return arguments.length ? (postclip = _ == null ? (x02 = y02 = x12 = y12 = null, identity) : clipRectangle(x02 = +_[0][0], y02 = +_[0][1], x12 = +_[1][0], y12 = +_[1][1]), reset2()) : x02 == null ? null : [[x02, y02], [x12, y12]];
    };
    projection2.scale = function(_) {
      return arguments.length ? (k = +_, recenter()) : k;
    };
    projection2.translate = function(_) {
      return arguments.length ? (x2 = +_[0], y2 = +_[1], recenter()) : [x2, y2];
    };
    projection2.center = function(_) {
      return arguments.length ? (lambda = _[0] % 360 * radians, phi2 = _[1] % 360 * radians, recenter()) : [lambda * degrees, phi2 * degrees];
    };
    projection2.rotate = function(_) {
      return arguments.length ? (deltaLambda = _[0] % 360 * radians, deltaPhi = _[1] % 360 * radians, deltaGamma = _.length > 2 ? _[2] % 360 * radians : 0, recenter()) : [deltaLambda * degrees, deltaPhi * degrees, deltaGamma * degrees];
    };
    projection2.angle = function(_) {
      return arguments.length ? (alpha = _ % 360 * radians, recenter()) : alpha * degrees;
    };
    projection2.reflectX = function(_) {
      return arguments.length ? (sx = _ ? -1 : 1, recenter()) : sx < 0;
    };
    projection2.reflectY = function(_) {
      return arguments.length ? (sy = _ ? -1 : 1, recenter()) : sy < 0;
    };
    projection2.precision = function(_) {
      return arguments.length ? (projectResample = resample(projectTransform, delta2 = _ * _), reset2()) : sqrt$1(delta2);
    };
    projection2.fitExtent = function(extent2, object2) {
      return fitExtent(projection2, extent2, object2);
    };
    projection2.fitSize = function(size, object2) {
      return fitSize(projection2, size, object2);
    };
    projection2.fitWidth = function(width2, object2) {
      return fitWidth(projection2, width2, object2);
    };
    projection2.fitHeight = function(height2, object2) {
      return fitHeight(projection2, height2, object2);
    };
    function recenter() {
      var center = scaleTranslateRotate(k, 0, 0, sx, sy, alpha).apply(null, project2(lambda, phi2)), transform2 = scaleTranslateRotate(k, x2 - center[0], y2 - center[1], sx, sy, alpha);
      rotate2 = rotateRadians(deltaLambda, deltaPhi, deltaGamma);
      projectTransform = compose(project2, transform2);
      projectRotateTransform = compose(rotate2, projectTransform);
      projectResample = resample(projectTransform, delta2);
      return reset2();
    }
    function reset2() {
      cache2 = cacheStream = null;
      return projection2;
    }
    return function() {
      project2 = projectAt.apply(this, arguments);
      projection2.invert = project2.invert && invert2;
      return recenter();
    };
  }
  function conicProjection(projectAt) {
    var phi02 = 0, phi12 = pi$1 / 3, m2 = projectionMutator(projectAt), p = m2(phi02, phi12);
    p.parallels = function(_) {
      return arguments.length ? m2(phi02 = _[0] * radians, phi12 = _[1] * radians) : [phi02 * degrees, phi12 * degrees];
    };
    return p;
  }
  function cylindricalEqualAreaRaw(phi02) {
    var cosPhi02 = cos$1(phi02);
    function forward(lambda, phi2) {
      return [lambda * cosPhi02, sin$1(phi2) / cosPhi02];
    }
    forward.invert = function(x2, y2) {
      return [x2 / cosPhi02, asin$1(y2 * cosPhi02)];
    };
    return forward;
  }
  function conicEqualAreaRaw(y02, y12) {
    var sy0 = sin$1(y02), n = (sy0 + sin$1(y12)) / 2;
    if (abs$1(n) < epsilon$3) return cylindricalEqualAreaRaw(y02);
    var c2 = 1 + sy0 * (2 * n - sy0), r0 = sqrt$1(c2) / n;
    function project2(x2, y2) {
      var r = sqrt$1(c2 - 2 * n * sin$1(y2)) / n;
      return [r * sin$1(x2 *= n), r0 - r * cos$1(x2)];
    }
    project2.invert = function(x2, y2) {
      var r0y = r0 - y2, l = atan2(x2, abs$1(r0y)) * sign(r0y);
      if (r0y * n < 0)
        l -= pi$1 * sign(x2) * sign(r0y);
      return [l / n, asin$1((c2 - (x2 * x2 + r0y * r0y) * n * n) / (2 * n))];
    };
    return project2;
  }
  function geoConicEqualArea() {
    return conicProjection(conicEqualAreaRaw).scale(155.424).center([0, 33.6442]);
  }
  function geoAlbers() {
    return geoConicEqualArea().parallels([29.5, 45.5]).scale(1070).translate([480, 250]).rotate([96, 0]).center([-0.6, 38.7]);
  }
  function multiplex(streams) {
    var n = streams.length;
    return {
      point: function(x2, y2) {
        var i = -1;
        while (++i < n) streams[i].point(x2, y2);
      },
      sphere: function() {
        var i = -1;
        while (++i < n) streams[i].sphere();
      },
      lineStart: function() {
        var i = -1;
        while (++i < n) streams[i].lineStart();
      },
      lineEnd: function() {
        var i = -1;
        while (++i < n) streams[i].lineEnd();
      },
      polygonStart: function() {
        var i = -1;
        while (++i < n) streams[i].polygonStart();
      },
      polygonEnd: function() {
        var i = -1;
        while (++i < n) streams[i].polygonEnd();
      }
    };
  }
  function geoAlbersUsa() {
    var cache2, cacheStream, lower48 = geoAlbers(), lower48Point, alaska = geoConicEqualArea().rotate([154, 0]).center([-2, 58.5]).parallels([55, 65]), alaskaPoint, hawaii = geoConicEqualArea().rotate([157, 0]).center([-3, 19.9]).parallels([8, 18]), hawaiiPoint, point2, pointStream = { point: function(x2, y2) {
      point2 = [x2, y2];
    } };
    function albersUsa(coordinates) {
      var x2 = coordinates[0], y2 = coordinates[1];
      return point2 = null, (lower48Point.point(x2, y2), point2) || (alaskaPoint.point(x2, y2), point2) || (hawaiiPoint.point(x2, y2), point2);
    }
    albersUsa.invert = function(coordinates) {
      var k = lower48.scale(), t = lower48.translate(), x2 = (coordinates[0] - t[0]) / k, y2 = (coordinates[1] - t[1]) / k;
      return (y2 >= 0.12 && y2 < 0.234 && x2 >= -0.425 && x2 < -0.214 ? alaska : y2 >= 0.166 && y2 < 0.234 && x2 >= -0.214 && x2 < -0.115 ? hawaii : lower48).invert(coordinates);
    };
    albersUsa.stream = function(stream2) {
      return cache2 && cacheStream === stream2 ? cache2 : cache2 = multiplex([lower48.stream(cacheStream = stream2), alaska.stream(stream2), hawaii.stream(stream2)]);
    };
    albersUsa.precision = function(_) {
      if (!arguments.length) return lower48.precision();
      lower48.precision(_), alaska.precision(_), hawaii.precision(_);
      return reset2();
    };
    albersUsa.scale = function(_) {
      if (!arguments.length) return lower48.scale();
      lower48.scale(_), alaska.scale(_ * 0.35), hawaii.scale(_);
      return albersUsa.translate(lower48.translate());
    };
    albersUsa.translate = function(_) {
      if (!arguments.length) return lower48.translate();
      var k = lower48.scale(), x2 = +_[0], y2 = +_[1];
      lower48Point = lower48.translate(_).clipExtent([[x2 - 0.455 * k, y2 - 0.238 * k], [x2 + 0.455 * k, y2 + 0.238 * k]]).stream(pointStream);
      alaskaPoint = alaska.translate([x2 - 0.307 * k, y2 + 0.201 * k]).clipExtent([[x2 - 0.425 * k + epsilon$3, y2 + 0.12 * k + epsilon$3], [x2 - 0.214 * k - epsilon$3, y2 + 0.234 * k - epsilon$3]]).stream(pointStream);
      hawaiiPoint = hawaii.translate([x2 - 0.205 * k, y2 + 0.212 * k]).clipExtent([[x2 - 0.214 * k + epsilon$3, y2 + 0.166 * k + epsilon$3], [x2 - 0.115 * k - epsilon$3, y2 + 0.234 * k - epsilon$3]]).stream(pointStream);
      return reset2();
    };
    albersUsa.fitExtent = function(extent2, object2) {
      return fitExtent(albersUsa, extent2, object2);
    };
    albersUsa.fitSize = function(size, object2) {
      return fitSize(albersUsa, size, object2);
    };
    albersUsa.fitWidth = function(width2, object2) {
      return fitWidth(albersUsa, width2, object2);
    };
    albersUsa.fitHeight = function(height2, object2) {
      return fitHeight(albersUsa, height2, object2);
    };
    function reset2() {
      cache2 = cacheStream = null;
      return albersUsa;
    }
    return albersUsa.scale(1070);
  }
  function azimuthalRaw(scale2) {
    return function(x2, y2) {
      var cx = cos$1(x2), cy = cos$1(y2), k = scale2(cx * cy);
      if (k === Infinity) return [2, 0];
      return [
        k * cy * sin$1(x2),
        k * sin$1(y2)
      ];
    };
  }
  function azimuthalInvert(angle2) {
    return function(x2, y2) {
      var z = sqrt$1(x2 * x2 + y2 * y2), c2 = angle2(z), sc = sin$1(c2), cc = cos$1(c2);
      return [
        atan2(x2 * sc, z * cc),
        asin$1(z && y2 * sc / z)
      ];
    };
  }
  var azimuthalEqualAreaRaw = azimuthalRaw(function(cxcy) {
    return sqrt$1(2 / (1 + cxcy));
  });
  azimuthalEqualAreaRaw.invert = azimuthalInvert(function(z) {
    return 2 * asin$1(z / 2);
  });
  function geoAzimuthalEqualArea() {
    return projection$1(azimuthalEqualAreaRaw).scale(124.75).clipAngle(180 - 1e-3);
  }
  var azimuthalEquidistantRaw = azimuthalRaw(function(c2) {
    return (c2 = acos(c2)) && c2 / sin$1(c2);
  });
  azimuthalEquidistantRaw.invert = azimuthalInvert(function(z) {
    return z;
  });
  function geoAzimuthalEquidistant() {
    return projection$1(azimuthalEquidistantRaw).scale(79.4188).clipAngle(180 - 1e-3);
  }
  function mercatorRaw(lambda, phi2) {
    return [lambda, log$1(tan((halfPi$1 + phi2) / 2))];
  }
  mercatorRaw.invert = function(x2, y2) {
    return [x2, 2 * atan(exp(y2)) - halfPi$1];
  };
  function geoMercator() {
    return mercatorProjection(mercatorRaw).scale(961 / tau$1);
  }
  function mercatorProjection(project2) {
    var m2 = projection$1(project2), center = m2.center, scale2 = m2.scale, translate2 = m2.translate, clipExtent = m2.clipExtent, x02 = null, y02, x12, y12;
    m2.scale = function(_) {
      return arguments.length ? (scale2(_), reclip()) : scale2();
    };
    m2.translate = function(_) {
      return arguments.length ? (translate2(_), reclip()) : translate2();
    };
    m2.center = function(_) {
      return arguments.length ? (center(_), reclip()) : center();
    };
    m2.clipExtent = function(_) {
      return arguments.length ? (_ == null ? x02 = y02 = x12 = y12 = null : (x02 = +_[0][0], y02 = +_[0][1], x12 = +_[1][0], y12 = +_[1][1]), reclip()) : x02 == null ? null : [[x02, y02], [x12, y12]];
    };
    function reclip() {
      var k = pi$1 * scale2(), t = m2(rotation(m2.rotate()).invert([0, 0]));
      return clipExtent(x02 == null ? [[t[0] - k, t[1] - k], [t[0] + k, t[1] + k]] : project2 === mercatorRaw ? [[Math.max(t[0] - k, x02), y02], [Math.min(t[0] + k, x12), y12]] : [[x02, Math.max(t[1] - k, y02)], [x12, Math.min(t[1] + k, y12)]]);
    }
    return reclip();
  }
  function tany(y2) {
    return tan((halfPi$1 + y2) / 2);
  }
  function conicConformalRaw(y02, y12) {
    var cy0 = cos$1(y02), n = y02 === y12 ? sin$1(y02) : log$1(cy0 / cos$1(y12)) / log$1(tany(y12) / tany(y02)), f = cy0 * pow$1(tany(y02), n) / n;
    if (!n) return mercatorRaw;
    function project2(x2, y2) {
      if (f > 0) {
        if (y2 < -halfPi$1 + epsilon$3) y2 = -halfPi$1 + epsilon$3;
      } else {
        if (y2 > halfPi$1 - epsilon$3) y2 = halfPi$1 - epsilon$3;
      }
      var r = f / pow$1(tany(y2), n);
      return [r * sin$1(n * x2), f - r * cos$1(n * x2)];
    }
    project2.invert = function(x2, y2) {
      var fy = f - y2, r = sign(n) * sqrt$1(x2 * x2 + fy * fy), l = atan2(x2, abs$1(fy)) * sign(fy);
      if (fy * n < 0)
        l -= pi$1 * sign(x2) * sign(fy);
      return [l / n, 2 * atan(pow$1(f / r, 1 / n)) - halfPi$1];
    };
    return project2;
  }
  function geoConicConformal() {
    return conicProjection(conicConformalRaw).scale(109.5).parallels([30, 30]);
  }
  function equirectangularRaw(lambda, phi2) {
    return [lambda, phi2];
  }
  equirectangularRaw.invert = equirectangularRaw;
  function geoEquirectangular() {
    return projection$1(equirectangularRaw).scale(152.63);
  }
  function conicEquidistantRaw(y02, y12) {
    var cy0 = cos$1(y02), n = y02 === y12 ? sin$1(y02) : (cy0 - cos$1(y12)) / (y12 - y02), g = cy0 / n + y02;
    if (abs$1(n) < epsilon$3) return equirectangularRaw;
    function project2(x2, y2) {
      var gy = g - y2, nx = n * x2;
      return [gy * sin$1(nx), g - gy * cos$1(nx)];
    }
    project2.invert = function(x2, y2) {
      var gy = g - y2, l = atan2(x2, abs$1(gy)) * sign(gy);
      if (gy * n < 0)
        l -= pi$1 * sign(x2) * sign(gy);
      return [l / n, g - sign(n) * sqrt$1(x2 * x2 + gy * gy)];
    };
    return project2;
  }
  function geoConicEquidistant() {
    return conicProjection(conicEquidistantRaw).scale(131.154).center([0, 13.9389]);
  }
  var A1 = 1.340264, A2 = -0.081106, A3 = 893e-6, A4 = 3796e-6, M = sqrt$1(3) / 2, iterations = 12;
  function equalEarthRaw(lambda, phi2) {
    var l = asin$1(M * sin$1(phi2)), l2 = l * l, l6 = l2 * l2 * l2;
    return [
      lambda * cos$1(l) / (M * (A1 + 3 * A2 * l2 + l6 * (7 * A3 + 9 * A4 * l2))),
      l * (A1 + A2 * l2 + l6 * (A3 + A4 * l2))
    ];
  }
  equalEarthRaw.invert = function(x2, y2) {
    var l = y2, l2 = l * l, l6 = l2 * l2 * l2;
    for (var i = 0, delta, fy, fpy; i < iterations; ++i) {
      fy = l * (A1 + A2 * l2 + l6 * (A3 + A4 * l2)) - y2;
      fpy = A1 + 3 * A2 * l2 + l6 * (7 * A3 + 9 * A4 * l2);
      l -= delta = fy / fpy, l2 = l * l, l6 = l2 * l2 * l2;
      if (abs$1(delta) < epsilon2) break;
    }
    return [
      M * x2 * (A1 + 3 * A2 * l2 + l6 * (7 * A3 + 9 * A4 * l2)) / cos$1(l),
      asin$1(sin$1(l) / M)
    ];
  };
  function geoEqualEarth() {
    return projection$1(equalEarthRaw).scale(177.158);
  }
  function gnomonicRaw(x2, y2) {
    var cy = cos$1(y2), k = cos$1(x2) * cy;
    return [cy * sin$1(x2) / k, sin$1(y2) / k];
  }
  gnomonicRaw.invert = azimuthalInvert(atan);
  function geoGnomonic() {
    return projection$1(gnomonicRaw).scale(144.049).clipAngle(60);
  }
  function geoIdentity() {
    var k = 1, tx2 = 0, ty = 0, sx = 1, sy = 1, alpha = 0, ca, sa2, x02 = null, y02, x12, y12, kx = 1, ky = 1, transform2 = transformer({
      point: function(x2, y2) {
        var p = projection2([x2, y2]);
        this.stream.point(p[0], p[1]);
      }
    }), postclip = identity, cache2, cacheStream;
    function reset2() {
      kx = k * sx;
      ky = k * sy;
      cache2 = cacheStream = null;
      return projection2;
    }
    function projection2(p) {
      var x2 = p[0] * kx, y2 = p[1] * ky;
      if (alpha) {
        var t = y2 * ca - x2 * sa2;
        x2 = x2 * ca + y2 * sa2;
        y2 = t;
      }
      return [x2 + tx2, y2 + ty];
    }
    projection2.invert = function(p) {
      var x2 = p[0] - tx2, y2 = p[1] - ty;
      if (alpha) {
        var t = y2 * ca + x2 * sa2;
        x2 = x2 * ca - y2 * sa2;
        y2 = t;
      }
      return [x2 / kx, y2 / ky];
    };
    projection2.stream = function(stream2) {
      return cache2 && cacheStream === stream2 ? cache2 : cache2 = transform2(postclip(cacheStream = stream2));
    };
    projection2.postclip = function(_) {
      return arguments.length ? (postclip = _, x02 = y02 = x12 = y12 = null, reset2()) : postclip;
    };
    projection2.clipExtent = function(_) {
      return arguments.length ? (postclip = _ == null ? (x02 = y02 = x12 = y12 = null, identity) : clipRectangle(x02 = +_[0][0], y02 = +_[0][1], x12 = +_[1][0], y12 = +_[1][1]), reset2()) : x02 == null ? null : [[x02, y02], [x12, y12]];
    };
    projection2.scale = function(_) {
      return arguments.length ? (k = +_, reset2()) : k;
    };
    projection2.translate = function(_) {
      return arguments.length ? (tx2 = +_[0], ty = +_[1], reset2()) : [tx2, ty];
    };
    projection2.angle = function(_) {
      return arguments.length ? (alpha = _ % 360 * radians, sa2 = sin$1(alpha), ca = cos$1(alpha), reset2()) : alpha * degrees;
    };
    projection2.reflectX = function(_) {
      return arguments.length ? (sx = _ ? -1 : 1, reset2()) : sx < 0;
    };
    projection2.reflectY = function(_) {
      return arguments.length ? (sy = _ ? -1 : 1, reset2()) : sy < 0;
    };
    projection2.fitExtent = function(extent2, object2) {
      return fitExtent(projection2, extent2, object2);
    };
    projection2.fitSize = function(size, object2) {
      return fitSize(projection2, size, object2);
    };
    projection2.fitWidth = function(width2, object2) {
      return fitWidth(projection2, width2, object2);
    };
    projection2.fitHeight = function(height2, object2) {
      return fitHeight(projection2, height2, object2);
    };
    return projection2;
  }
  function naturalEarth1Raw(lambda, phi2) {
    var phi22 = phi2 * phi2, phi4 = phi22 * phi22;
    return [
      lambda * (0.8707 - 0.131979 * phi22 + phi4 * (-0.013791 + phi4 * (3971e-6 * phi22 - 1529e-6 * phi4))),
      phi2 * (1.007226 + phi22 * (0.015085 + phi4 * (-0.044475 + 0.028874 * phi22 - 5916e-6 * phi4)))
    ];
  }
  naturalEarth1Raw.invert = function(x2, y2) {
    var phi2 = y2, i = 25, delta;
    do {
      var phi22 = phi2 * phi2, phi4 = phi22 * phi22;
      phi2 -= delta = (phi2 * (1.007226 + phi22 * (0.015085 + phi4 * (-0.044475 + 0.028874 * phi22 - 5916e-6 * phi4))) - y2) / (1.007226 + phi22 * (0.015085 * 3 + phi4 * (-0.044475 * 7 + 0.028874 * 9 * phi22 - 5916e-6 * 11 * phi4)));
    } while (abs$1(delta) > epsilon$3 && --i > 0);
    return [
      x2 / (0.8707 + (phi22 = phi2 * phi2) * (-0.131979 + phi22 * (-0.013791 + phi22 * phi22 * phi22 * (3971e-6 - 1529e-6 * phi22)))),
      phi2
    ];
  };
  function geoNaturalEarth1() {
    return projection$1(naturalEarth1Raw).scale(175.295);
  }
  function orthographicRaw(x2, y2) {
    return [cos$1(y2) * sin$1(x2), sin$1(y2)];
  }
  orthographicRaw.invert = azimuthalInvert(asin$1);
  function geoOrthographic() {
    return projection$1(orthographicRaw).scale(249.5).clipAngle(90 + epsilon$3);
  }
  function stereographicRaw(x2, y2) {
    var cy = cos$1(y2), k = 1 + cos$1(x2) * cy;
    return [cy * sin$1(x2) / k, sin$1(y2) / k];
  }
  stereographicRaw.invert = azimuthalInvert(function(z) {
    return 2 * atan(z);
  });
  function geoStereographic() {
    return projection$1(stereographicRaw).scale(250).clipAngle(142);
  }
  function transverseMercatorRaw(lambda, phi2) {
    return [log$1(tan((halfPi$1 + phi2) / 2)), -lambda];
  }
  transverseMercatorRaw.invert = function(x2, y2) {
    return [-y2, 2 * atan(exp(x2)) - halfPi$1];
  };
  function geoTransverseMercator() {
    var m2 = mercatorProjection(transverseMercatorRaw), center = m2.center, rotate2 = m2.rotate;
    m2.center = function(_) {
      return arguments.length ? center([-_[1], _[0]]) : (_ = center(), [_[1], -_[0]]);
    };
    m2.rotate = function(_) {
      return arguments.length ? rotate2([_[0], _[1], _.length > 2 ? _[2] + 90 : 90]) : (_ = rotate2(), [_[0], _[1], _[2] - 90]);
    };
    return rotate2([0, 0, 90]).scale(159.155);
  }
  var abs = Math.abs;
  var cos = Math.cos;
  var sin = Math.sin;
  var epsilon$2 = 1e-6;
  var pi = Math.PI;
  var halfPi = pi / 2;
  var sqrt2 = sqrt(2);
  function asin(x2) {
    return x2 > 1 ? halfPi : x2 < -1 ? -halfPi : Math.asin(x2);
  }
  function sqrt(x2) {
    return x2 > 0 ? Math.sqrt(x2) : 0;
  }
  function mollweideBromleyTheta(cp, phi2) {
    var cpsinPhi = cp * sin(phi2), i = 30, delta;
    do
      phi2 -= delta = (phi2 + sin(phi2) - cpsinPhi) / (1 + cos(phi2));
    while (abs(delta) > epsilon$2 && --i > 0);
    return phi2 / 2;
  }
  function mollweideBromleyRaw(cx, cy, cp) {
    function forward(lambda, phi2) {
      return [cx * lambda * cos(phi2 = mollweideBromleyTheta(cp, phi2)), cy * sin(phi2)];
    }
    forward.invert = function(x2, y2) {
      return y2 = asin(y2 / cy), [x2 / (cx * cos(y2)), asin((2 * y2 + sin(2 * y2)) / cp)];
    };
    return forward;
  }
  var mollweideRaw = mollweideBromleyRaw(sqrt2 / halfPi, sqrt2, pi);
  function geoMollweide() {
    return projection$1(mollweideRaw).scale(169.529);
  }
  const defaultPath = geoPath();
  const projectionProperties = [
    // standard properties in d3-geo
    "clipAngle",
    "clipExtent",
    "scale",
    "translate",
    "center",
    "rotate",
    "parallels",
    "precision",
    "reflectX",
    "reflectY",
    // extended properties in d3-geo-projections
    "coefficient",
    "distance",
    "fraction",
    "lobes",
    "parallel",
    "radius",
    "ratio",
    "spacing",
    "tilt"
  ];
  function create$1(type2, constructor) {
    return function projection2() {
      const p = constructor();
      p.type = type2;
      p.path = geoPath().projection(p);
      p.copy = p.copy || function() {
        const c2 = projection2();
        projectionProperties.forEach((prop) => {
          if (p[prop]) c2[prop](p[prop]());
        });
        c2.path.pointRadius(p.path.pointRadius());
        return c2;
      };
      return registerScale(p);
    };
  }
  function projection(type2, proj) {
    if (!type2 || typeof type2 !== "string") {
      throw new Error("Projection type must be a name string.");
    }
    type2 = type2.toLowerCase();
    if (arguments.length > 1) {
      projections[type2] = create$1(type2, proj);
      return this;
    } else {
      return projections[type2] || null;
    }
  }
  function getProjectionPath(proj) {
    return proj && proj.path || defaultPath;
  }
  const projections = {
    // base d3-geo projection types
    albers: geoAlbers,
    albersusa: geoAlbersUsa,
    azimuthalequalarea: geoAzimuthalEqualArea,
    azimuthalequidistant: geoAzimuthalEquidistant,
    conicconformal: geoConicConformal,
    conicequalarea: geoConicEqualArea,
    conicequidistant: geoConicEquidistant,
    equalEarth: geoEqualEarth,
    equirectangular: geoEquirectangular,
    gnomonic: geoGnomonic,
    identity: geoIdentity,
    mercator: geoMercator,
    mollweide: geoMollweide,
    naturalEarth1: geoNaturalEarth1,
    orthographic: geoOrthographic,
    stereographic: geoStereographic,
    transversemercator: geoTransverseMercator
  };
  for (const key2 in projections) {
    projection(key2, projections[key2]);
  }
  function noop$1() {
  }
  const cases = [[], [[[1, 1.5], [0.5, 1]]], [[[1.5, 1], [1, 1.5]]], [[[1.5, 1], [0.5, 1]]], [[[1, 0.5], [1.5, 1]]], [[[1, 1.5], [0.5, 1]], [[1, 0.5], [1.5, 1]]], [[[1, 0.5], [1, 1.5]]], [[[1, 0.5], [0.5, 1]]], [[[0.5, 1], [1, 0.5]]], [[[1, 1.5], [1, 0.5]]], [[[0.5, 1], [1, 0.5]], [[1.5, 1], [1, 1.5]]], [[[1.5, 1], [1, 0.5]]], [[[0.5, 1], [1.5, 1]]], [[[1, 1.5], [1.5, 1]]], [[[0.5, 1], [1, 1.5]]], []];
  function contours() {
    var dx = 1, dy = 1, smooth = smoothLinear;
    function contours2(values2, tz) {
      return tz.map((value2) => contour(values2, value2));
    }
    function contour(values2, value2) {
      var polygons = [], holes = [];
      isorings(values2, value2, (ring) => {
        smooth(ring, values2, value2);
        if (area$1(ring) > 0) polygons.push([ring]);
        else holes.push(ring);
      });
      holes.forEach((hole) => {
        for (var i = 0, n = polygons.length, polygon; i < n; ++i) {
          if (contains$1((polygon = polygons[i])[0], hole) !== -1) {
            polygon.push(hole);
            return;
          }
        }
      });
      return {
        type: "MultiPolygon",
        value: value2,
        coordinates: polygons
      };
    }
    function isorings(values2, value2, callback) {
      var fragmentByStart = [], fragmentByEnd = [], x2, y2, t02, t12, t22, t32;
      x2 = y2 = -1;
      t12 = values2[0] >= value2;
      cases[t12 << 1].forEach(stitch2);
      while (++x2 < dx - 1) {
        t02 = t12, t12 = values2[x2 + 1] >= value2;
        cases[t02 | t12 << 1].forEach(stitch2);
      }
      cases[t12 << 0].forEach(stitch2);
      while (++y2 < dy - 1) {
        x2 = -1;
        t12 = values2[y2 * dx + dx] >= value2;
        t22 = values2[y2 * dx] >= value2;
        cases[t12 << 1 | t22 << 2].forEach(stitch2);
        while (++x2 < dx - 1) {
          t02 = t12, t12 = values2[y2 * dx + dx + x2 + 1] >= value2;
          t32 = t22, t22 = values2[y2 * dx + x2 + 1] >= value2;
          cases[t02 | t12 << 1 | t22 << 2 | t32 << 3].forEach(stitch2);
        }
        cases[t12 | t22 << 3].forEach(stitch2);
      }
      x2 = -1;
      t22 = values2[y2 * dx] >= value2;
      cases[t22 << 2].forEach(stitch2);
      while (++x2 < dx - 1) {
        t32 = t22, t22 = values2[y2 * dx + x2 + 1] >= value2;
        cases[t22 << 2 | t32 << 3].forEach(stitch2);
      }
      cases[t22 << 3].forEach(stitch2);
      function stitch2(line2) {
        var start = [line2[0][0] + x2, line2[0][1] + y2], end = [line2[1][0] + x2, line2[1][1] + y2], startIndex = index2(start), endIndex = index2(end), f, g;
        if (f = fragmentByEnd[startIndex]) {
          if (g = fragmentByStart[endIndex]) {
            delete fragmentByEnd[f.end];
            delete fragmentByStart[g.start];
            if (f === g) {
              f.ring.push(end);
              callback(f.ring);
            } else {
              fragmentByStart[f.start] = fragmentByEnd[g.end] = {
                start: f.start,
                end: g.end,
                ring: f.ring.concat(g.ring)
              };
            }
          } else {
            delete fragmentByEnd[f.end];
            f.ring.push(end);
            fragmentByEnd[f.end = endIndex] = f;
          }
        } else if (f = fragmentByStart[endIndex]) {
          if (g = fragmentByEnd[startIndex]) {
            delete fragmentByStart[f.start];
            delete fragmentByEnd[g.end];
            if (f === g) {
              f.ring.push(end);
              callback(f.ring);
            } else {
              fragmentByStart[g.start] = fragmentByEnd[f.end] = {
                start: g.start,
                end: f.end,
                ring: g.ring.concat(f.ring)
              };
            }
          } else {
            delete fragmentByStart[f.start];
            f.ring.unshift(start);
            fragmentByStart[f.start = startIndex] = f;
          }
        } else {
          fragmentByStart[startIndex] = fragmentByEnd[endIndex] = {
            start: startIndex,
            end: endIndex,
            ring: [start, end]
          };
        }
      }
    }
    function index2(point2) {
      return point2[0] * 2 + point2[1] * (dx + 1) * 4;
    }
    function smoothLinear(ring, values2, value2) {
      ring.forEach((point2) => {
        var x2 = point2[0], y2 = point2[1], xt = x2 | 0, yt = y2 | 0, v0, v1 = values2[yt * dx + xt];
        if (x2 > 0 && x2 < dx && xt === x2) {
          v0 = values2[yt * dx + xt - 1];
          point2[0] = x2 + (value2 - v0) / (v1 - v0) - 0.5;
        }
        if (y2 > 0 && y2 < dy && yt === y2) {
          v0 = values2[(yt - 1) * dx + xt];
          point2[1] = y2 + (value2 - v0) / (v1 - v0) - 0.5;
        }
      });
    }
    contours2.contour = contour;
    contours2.size = function(_) {
      if (!arguments.length) return [dx, dy];
      var _0 = Math.floor(_[0]), _1 = Math.floor(_[1]);
      if (!(_0 >= 0 && _1 >= 0)) error$1("invalid size");
      return dx = _0, dy = _1, contours2;
    };
    contours2.smooth = function(_) {
      return arguments.length ? (smooth = _ ? smoothLinear : noop$1, contours2) : smooth === smoothLinear;
    };
    return contours2;
  }
  function area$1(ring) {
    var i = 0, n = ring.length, area2 = ring[n - 1][1] * ring[0][0] - ring[n - 1][0] * ring[0][1];
    while (++i < n) area2 += ring[i - 1][1] * ring[i][0] - ring[i - 1][0] * ring[i][1];
    return area2;
  }
  function contains$1(ring, hole) {
    var i = -1, n = hole.length, c2;
    while (++i < n) if (c2 = ringContains(ring, hole[i])) return c2;
    return 0;
  }
  function ringContains(ring, point2) {
    var x2 = point2[0], y2 = point2[1], contains2 = -1;
    for (var i = 0, n = ring.length, j = n - 1; i < n; j = i++) {
      var pi2 = ring[i], xi = pi2[0], yi = pi2[1], pj = ring[j], xj = pj[0], yj = pj[1];
      if (segmentContains(pi2, pj, point2)) return 0;
      if (yi > y2 !== yj > y2 && x2 < (xj - xi) * (y2 - yi) / (yj - yi) + xi) contains2 = -contains2;
    }
    return contains2;
  }
  function segmentContains(a2, b2, c2) {
    var i;
    return collinear$1(a2, b2, c2) && within(a2[i = +(a2[0] === b2[0])], c2[i], b2[i]);
  }
  function collinear$1(a2, b2, c2) {
    return (b2[0] - a2[0]) * (c2[1] - a2[1]) === (c2[0] - a2[0]) * (b2[1] - a2[1]);
  }
  function within(p, q, r) {
    return p <= q && q <= r || r <= q && q <= p;
  }
  function quantize(k, nice2, zero2) {
    return function(values2) {
      var ex = extent(values2), start = zero2 ? Math.min(ex[0], 0) : ex[0], stop2 = ex[1], span2 = stop2 - start, step = nice2 ? tickStep(start, stop2, k) : span2 / (k + 1);
      return range$5(start + step, stop2, step);
    };
  }
  function Isocontour(params2) {
    Transform.call(this, null, params2);
  }
  Isocontour.Definition = {
    "type": "Isocontour",
    "metadata": {
      "generates": true
    },
    "params": [{
      "name": "field",
      "type": "field"
    }, {
      "name": "thresholds",
      "type": "number",
      "array": true
    }, {
      "name": "levels",
      "type": "number"
    }, {
      "name": "nice",
      "type": "boolean",
      "default": false
    }, {
      "name": "resolve",
      "type": "enum",
      "values": ["shared", "independent"],
      "default": "independent"
    }, {
      "name": "zero",
      "type": "boolean",
      "default": true
    }, {
      "name": "smooth",
      "type": "boolean",
      "default": true
    }, {
      "name": "scale",
      "type": "number",
      "expr": true
    }, {
      "name": "translate",
      "type": "number",
      "array": true,
      "expr": true
    }, {
      "name": "as",
      "type": "string",
      "null": true,
      "default": "contour"
    }]
  };
  inherits(Isocontour, Transform, {
    transform(_, pulse2) {
      if (this.value && !pulse2.changed() && !_.modified()) {
        return pulse2.StopPropagation;
      }
      var out = pulse2.fork(pulse2.NO_SOURCE | pulse2.NO_FIELDS), source2 = pulse2.materialize(pulse2.SOURCE).source, field2 = _.field || identity$6, contour = contours().smooth(_.smooth !== false), tz = _.thresholds || levels(source2, field2, _), as = _.as === null ? null : _.as || "contour", values2 = [];
      source2.forEach((t) => {
        const grid = field2(t);
        const paths = contour.size([grid.width, grid.height])(grid.values, isArray(tz) ? tz : tz(grid.values));
        transformPaths(paths, grid, t, _);
        paths.forEach((p) => {
          values2.push(rederive(t, ingest$1(as != null ? {
            [as]: p
          } : p)));
        });
      });
      if (this.value) out.rem = this.value;
      this.value = out.source = out.add = values2;
      return out;
    }
  });
  function levels(values2, f, _) {
    const q = quantize(_.levels || 10, _.nice, _.zero !== false);
    return _.resolve !== "shared" ? q : q(values2.map((t) => max$2(f(t).values)));
  }
  function transformPaths(paths, grid, datum2, _) {
    let s = _.scale || grid.scale, t = _.translate || grid.translate;
    if (isFunction(s)) s = s(datum2, _);
    if (isFunction(t)) t = t(datum2, _);
    if ((s === 1 || s == null) && !t) return;
    const sx = (isNumber$1(s) ? s : s[0]) || 1, sy = (isNumber$1(s) ? s : s[1]) || 1, tx2 = t && t[0] || 0, ty = t && t[1] || 0;
    paths.forEach(transform$1(grid, sx, sy, tx2, ty));
  }
  function transform$1(grid, sx, sy, tx2, ty) {
    const x12 = grid.x1 || 0, y12 = grid.y1 || 0, flip2 = sx * sy < 0;
    function transformPolygon(coordinates) {
      coordinates.forEach(transformRing);
    }
    function transformRing(coordinates) {
      if (flip2) coordinates.reverse();
      coordinates.forEach(transformPoint);
    }
    function transformPoint(coordinates) {
      coordinates[0] = (coordinates[0] - x12) * sx + tx2;
      coordinates[1] = (coordinates[1] - y12) * sy + ty;
    }
    return function(geometry) {
      geometry.coordinates.forEach(transformPolygon);
      return geometry;
    };
  }
  function radius(bw, data2, f) {
    const v = bw >= 0 ? bw : estimateBandwidth(data2, f);
    return Math.round((Math.sqrt(4 * v * v + 1) - 1) / 2);
  }
  function number$2(_) {
    return isFunction(_) ? _ : constant$5(+_);
  }
  function density2D() {
    var x2 = (d) => d[0], y2 = (d) => d[1], weight = one$2, bandwidth2 = [-1, -1], dx = 960, dy = 500, k = 2;
    function density(data2, counts) {
      const rx = radius(bandwidth2[0], data2, x2) >> k, ry = radius(bandwidth2[1], data2, y2) >> k, ox = rx ? rx + 2 : 0, oy = ry ? ry + 2 : 0, n = 2 * ox + (dx >> k), m2 = 2 * oy + (dy >> k), values0 = new Float32Array(n * m2), values1 = new Float32Array(n * m2);
      let values2 = values0;
      data2.forEach((d) => {
        const xi = ox + (+x2(d) >> k), yi = oy + (+y2(d) >> k);
        if (xi >= 0 && xi < n && yi >= 0 && yi < m2) {
          values0[xi + yi * n] += +weight(d);
        }
      });
      if (rx > 0 && ry > 0) {
        blurX(n, m2, values0, values1, rx);
        blurY(n, m2, values1, values0, ry);
        blurX(n, m2, values0, values1, rx);
        blurY(n, m2, values1, values0, ry);
        blurX(n, m2, values0, values1, rx);
        blurY(n, m2, values1, values0, ry);
      } else if (rx > 0) {
        blurX(n, m2, values0, values1, rx);
        blurX(n, m2, values1, values0, rx);
        blurX(n, m2, values0, values1, rx);
        values2 = values1;
      } else if (ry > 0) {
        blurY(n, m2, values0, values1, ry);
        blurY(n, m2, values1, values0, ry);
        blurY(n, m2, values0, values1, ry);
        values2 = values1;
      }
      const s = counts ? Math.pow(2, -2 * k) : 1 / sum$1(values2);
      for (let i = 0, sz2 = n * m2; i < sz2; ++i) values2[i] *= s;
      return {
        values: values2,
        scale: 1 << k,
        width: n,
        height: m2,
        x1: ox,
        y1: oy,
        x2: ox + (dx >> k),
        y2: oy + (dy >> k)
      };
    }
    density.x = function(_) {
      return arguments.length ? (x2 = number$2(_), density) : x2;
    };
    density.y = function(_) {
      return arguments.length ? (y2 = number$2(_), density) : y2;
    };
    density.weight = function(_) {
      return arguments.length ? (weight = number$2(_), density) : weight;
    };
    density.size = function(_) {
      if (!arguments.length) return [dx, dy];
      var _0 = +_[0], _1 = +_[1];
      if (!(_0 >= 0 && _1 >= 0)) error$1("invalid size");
      return dx = _0, dy = _1, density;
    };
    density.cellSize = function(_) {
      if (!arguments.length) return 1 << k;
      if (!((_ = +_) >= 1)) error$1("invalid cell size");
      k = Math.floor(Math.log(_) / Math.LN2);
      return density;
    };
    density.bandwidth = function(_) {
      if (!arguments.length) return bandwidth2;
      _ = array$5(_);
      if (_.length === 1) _ = [+_[0], +_[0]];
      if (_.length !== 2) error$1("invalid bandwidth");
      return bandwidth2 = _, density;
    };
    return density;
  }
  function blurX(n, m2, source2, target2, r) {
    const w2 = (r << 1) + 1;
    for (let j = 0; j < m2; ++j) {
      for (let i = 0, sr = 0; i < n + r; ++i) {
        if (i < n) {
          sr += source2[i + j * n];
        }
        if (i >= r) {
          if (i >= w2) {
            sr -= source2[i - w2 + j * n];
          }
          target2[i - r + j * n] = sr / Math.min(i + 1, n - 1 + w2 - i, w2);
        }
      }
    }
  }
  function blurY(n, m2, source2, target2, r) {
    const w2 = (r << 1) + 1;
    for (let i = 0; i < n; ++i) {
      for (let j = 0, sr = 0; j < m2 + r; ++j) {
        if (j < m2) {
          sr += source2[i + j * n];
        }
        if (j >= r) {
          if (j >= w2) {
            sr -= source2[i + (j - w2) * n];
          }
          target2[i + (j - r) * n] = sr / Math.min(j + 1, m2 - 1 + w2 - j, w2);
        }
      }
    }
  }
  function KDE2D(params2) {
    Transform.call(this, null, params2);
  }
  KDE2D.Definition = {
    "type": "KDE2D",
    "metadata": {
      "generates": true
    },
    "params": [{
      "name": "size",
      "type": "number",
      "array": true,
      "length": 2,
      "required": true
    }, {
      "name": "x",
      "type": "field",
      "required": true
    }, {
      "name": "y",
      "type": "field",
      "required": true
    }, {
      "name": "weight",
      "type": "field"
    }, {
      "name": "groupby",
      "type": "field",
      "array": true
    }, {
      "name": "cellSize",
      "type": "number"
    }, {
      "name": "bandwidth",
      "type": "number",
      "array": true,
      "length": 2
    }, {
      "name": "counts",
      "type": "boolean",
      "default": false
    }, {
      "name": "as",
      "type": "string",
      "default": "grid"
    }]
  };
  const PARAMS = ["x", "y", "weight", "size", "cellSize", "bandwidth"];
  function params(obj, _) {
    PARAMS.forEach((param2) => _[param2] != null ? obj[param2](_[param2]) : 0);
    return obj;
  }
  inherits(KDE2D, Transform, {
    transform(_, pulse2) {
      if (this.value && !pulse2.changed() && !_.modified()) return pulse2.StopPropagation;
      var out = pulse2.fork(pulse2.NO_SOURCE | pulse2.NO_FIELDS), source2 = pulse2.materialize(pulse2.SOURCE).source, groups = partition$2(source2, _.groupby), names = (_.groupby || []).map(accessorName), kde2 = params(density2D(), _), as = _.as || "grid", values2 = [];
      function set2(t, vals2) {
        for (let i = 0; i < names.length; ++i) t[names[i]] = vals2[i];
        return t;
      }
      values2 = groups.map((g) => ingest$1(set2({
        [as]: kde2(g, _.counts)
      }, g.dims)));
      if (this.value) out.rem = this.value;
      this.value = out.source = out.add = values2;
      return out;
    }
  });
  function partition$2(data2, groupby) {
    var groups = [], get2 = (f) => f(t), map2, i, n, t, k, g;
    if (groupby == null) {
      groups.push(data2);
    } else {
      for (map2 = {}, i = 0, n = data2.length; i < n; ++i) {
        t = data2[i];
        k = groupby.map(get2);
        g = map2[k];
        if (!g) {
          map2[k] = g = [];
          g.dims = k;
          groups.push(g);
        }
        g.push(t);
      }
    }
    return groups;
  }
  function Contour(params2) {
    Transform.call(this, null, params2);
  }
  Contour.Definition = {
    "type": "Contour",
    "metadata": {
      "generates": true
    },
    "params": [{
      "name": "size",
      "type": "number",
      "array": true,
      "length": 2,
      "required": true
    }, {
      "name": "values",
      "type": "number",
      "array": true
    }, {
      "name": "x",
      "type": "field"
    }, {
      "name": "y",
      "type": "field"
    }, {
      "name": "weight",
      "type": "field"
    }, {
      "name": "cellSize",
      "type": "number"
    }, {
      "name": "bandwidth",
      "type": "number"
    }, {
      "name": "count",
      "type": "number"
    }, {
      "name": "nice",
      "type": "boolean",
      "default": false
    }, {
      "name": "thresholds",
      "type": "number",
      "array": true
    }, {
      "name": "smooth",
      "type": "boolean",
      "default": true
    }]
  };
  inherits(Contour, Transform, {
    transform(_, pulse2) {
      if (this.value && !pulse2.changed() && !_.modified()) {
        return pulse2.StopPropagation;
      }
      var out = pulse2.fork(pulse2.NO_SOURCE | pulse2.NO_FIELDS), contour = contours().smooth(_.smooth !== false), values2 = _.values, thresh = _.thresholds || quantize(_.count || 10, _.nice, !!values2), size = _.size, grid, post2;
      if (!values2) {
        values2 = pulse2.materialize(pulse2.SOURCE).source;
        grid = params(density2D(), _)(values2, true);
        post2 = transform$1(grid, grid.scale || 1, grid.scale || 1, 0, 0);
        size = [grid.width, grid.height];
        values2 = grid.values;
      }
      thresh = isArray(thresh) ? thresh : thresh(values2);
      values2 = contour.size(size)(values2, thresh);
      if (post2) values2.forEach(post2);
      if (this.value) out.rem = this.value;
      this.value = out.source = out.add = (values2 || []).map(ingest$1);
      return out;
    }
  });
  const Feature = "Feature";
  const FeatureCollection = "FeatureCollection";
  const MultiPoint = "MultiPoint";
  function GeoJSON(params2) {
    Transform.call(this, null, params2);
  }
  GeoJSON.Definition = {
    "type": "GeoJSON",
    "metadata": {},
    "params": [{
      "name": "fields",
      "type": "field",
      "array": true,
      "length": 2
    }, {
      "name": "geojson",
      "type": "field"
    }]
  };
  inherits(GeoJSON, Transform, {
    transform(_, pulse2) {
      var features = this._features, points2 = this._points, fields = _.fields, lon = fields && fields[0], lat = fields && fields[1], geojson = _.geojson || !fields && identity$6, flag2 = pulse2.ADD, mod;
      mod = _.modified() || pulse2.changed(pulse2.REM) || pulse2.modified(accessorFields(geojson)) || lon && pulse2.modified(accessorFields(lon)) || lat && pulse2.modified(accessorFields(lat));
      if (!this.value || mod) {
        flag2 = pulse2.SOURCE;
        this._features = features = [];
        this._points = points2 = [];
      }
      if (geojson) {
        pulse2.visit(flag2, (t) => features.push(geojson(t)));
      }
      if (lon && lat) {
        pulse2.visit(flag2, (t) => {
          var x2 = lon(t), y2 = lat(t);
          if (x2 != null && y2 != null && (x2 = +x2) === x2 && (y2 = +y2) === y2) {
            points2.push([x2, y2]);
          }
        });
        features = features.concat({
          type: Feature,
          geometry: {
            type: MultiPoint,
            coordinates: points2
          }
        });
      }
      this.value = {
        type: FeatureCollection,
        features
      };
    }
  });
  function GeoPath(params2) {
    Transform.call(this, null, params2);
  }
  GeoPath.Definition = {
    "type": "GeoPath",
    "metadata": {
      "modifies": true
    },
    "params": [{
      "name": "projection",
      "type": "projection"
    }, {
      "name": "field",
      "type": "field"
    }, {
      "name": "pointRadius",
      "type": "number",
      "expr": true
    }, {
      "name": "as",
      "type": "string",
      "default": "path"
    }]
  };
  inherits(GeoPath, Transform, {
    transform(_, pulse2) {
      var out = pulse2.fork(pulse2.ALL), path2 = this.value, field2 = _.field || identity$6, as = _.as || "path", flag2 = out.SOURCE;
      if (!path2 || _.modified()) {
        this.value = path2 = getProjectionPath(_.projection);
        out.materialize().reflow();
      } else {
        flag2 = field2 === identity$6 || pulse2.modified(field2.fields) ? out.ADD_MOD : out.ADD;
      }
      const prev = initPath(path2, _.pointRadius);
      out.visit(flag2, (t) => t[as] = path2(field2(t)));
      path2.pointRadius(prev);
      return out.modifies(as);
    }
  });
  function initPath(path2, pointRadius) {
    const prev = path2.pointRadius();
    path2.context(null);
    if (pointRadius != null) {
      path2.pointRadius(pointRadius);
    }
    return prev;
  }
  function GeoPoint(params2) {
    Transform.call(this, null, params2);
  }
  GeoPoint.Definition = {
    "type": "GeoPoint",
    "metadata": {
      "modifies": true
    },
    "params": [{
      "name": "projection",
      "type": "projection",
      "required": true
    }, {
      "name": "fields",
      "type": "field",
      "array": true,
      "required": true,
      "length": 2
    }, {
      "name": "as",
      "type": "string",
      "array": true,
      "length": 2,
      "default": ["x", "y"]
    }]
  };
  inherits(GeoPoint, Transform, {
    transform(_, pulse2) {
      var proj = _.projection, lon = _.fields[0], lat = _.fields[1], as = _.as || ["x", "y"], x2 = as[0], y2 = as[1], mod;
      function set2(t) {
        const xy = proj([lon(t), lat(t)]);
        if (xy) {
          t[x2] = xy[0];
          t[y2] = xy[1];
        } else {
          t[x2] = void 0;
          t[y2] = void 0;
        }
      }
      if (_.modified()) {
        pulse2 = pulse2.materialize().reflow(true).visit(pulse2.SOURCE, set2);
      } else {
        mod = pulse2.modified(lon.fields) || pulse2.modified(lat.fields);
        pulse2.visit(mod ? pulse2.ADD_MOD : pulse2.ADD, set2);
      }
      return pulse2.modifies(as);
    }
  });
  function GeoShape(params2) {
    Transform.call(this, null, params2);
  }
  GeoShape.Definition = {
    "type": "GeoShape",
    "metadata": {
      "modifies": true,
      "nomod": true
    },
    "params": [{
      "name": "projection",
      "type": "projection"
    }, {
      "name": "field",
      "type": "field",
      "default": "datum"
    }, {
      "name": "pointRadius",
      "type": "number",
      "expr": true
    }, {
      "name": "as",
      "type": "string",
      "default": "shape"
    }]
  };
  inherits(GeoShape, Transform, {
    transform(_, pulse2) {
      var out = pulse2.fork(pulse2.ALL), shape2 = this.value, as = _.as || "shape", flag2 = out.ADD;
      if (!shape2 || _.modified()) {
        this.value = shape2 = shapeGenerator(getProjectionPath(_.projection), _.field || field$1("datum"), _.pointRadius);
        out.materialize().reflow();
        flag2 = out.SOURCE;
      }
      out.visit(flag2, (t) => t[as] = shape2);
      return out.modifies(as);
    }
  });
  function shapeGenerator(path2, field2, pointRadius) {
    const shape2 = pointRadius == null ? (_) => path2(field2(_)) : (_) => {
      var prev = path2.pointRadius(), value2 = path2.pointRadius(pointRadius)(field2(_));
      path2.pointRadius(prev);
      return value2;
    };
    shape2.context = (_) => {
      path2.context(_);
      return shape2;
    };
    return shape2;
  }
  function Graticule(params2) {
    Transform.call(this, [], params2);
    this.generator = graticule();
  }
  Graticule.Definition = {
    "type": "Graticule",
    "metadata": {
      "changes": true,
      "generates": true
    },
    "params": [{
      "name": "extent",
      "type": "array",
      "array": true,
      "length": 2,
      "content": {
        "type": "number",
        "array": true,
        "length": 2
      }
    }, {
      "name": "extentMajor",
      "type": "array",
      "array": true,
      "length": 2,
      "content": {
        "type": "number",
        "array": true,
        "length": 2
      }
    }, {
      "name": "extentMinor",
      "type": "array",
      "array": true,
      "length": 2,
      "content": {
        "type": "number",
        "array": true,
        "length": 2
      }
    }, {
      "name": "step",
      "type": "number",
      "array": true,
      "length": 2
    }, {
      "name": "stepMajor",
      "type": "number",
      "array": true,
      "length": 2,
      "default": [90, 360]
    }, {
      "name": "stepMinor",
      "type": "number",
      "array": true,
      "length": 2,
      "default": [10, 10]
    }, {
      "name": "precision",
      "type": "number",
      "default": 2.5
    }]
  };
  inherits(Graticule, Transform, {
    transform(_, pulse2) {
      var src = this.value, gen = this.generator, t;
      if (!src.length || _.modified()) {
        for (const prop in _) {
          if (isFunction(gen[prop])) {
            gen[prop](_[prop]);
          }
        }
      }
      t = gen();
      if (src.length) {
        pulse2.mod.push(replace$1(src[0], t));
      } else {
        pulse2.add.push(ingest$1(t));
      }
      src[0] = t;
      return pulse2;
    }
  });
  function Heatmap(params2) {
    Transform.call(this, null, params2);
  }
  Heatmap.Definition = {
    "type": "heatmap",
    "metadata": {
      "modifies": true
    },
    "params": [{
      "name": "field",
      "type": "field"
    }, {
      "name": "color",
      "type": "string",
      "expr": true
    }, {
      "name": "opacity",
      "type": "number",
      "expr": true
    }, {
      "name": "resolve",
      "type": "enum",
      "values": ["shared", "independent"],
      "default": "independent"
    }, {
      "name": "as",
      "type": "string",
      "default": "image"
    }]
  };
  inherits(Heatmap, Transform, {
    transform(_, pulse2) {
      if (!pulse2.changed() && !_.modified()) {
        return pulse2.StopPropagation;
      }
      var source2 = pulse2.materialize(pulse2.SOURCE).source, shared = _.resolve === "shared", field2 = _.field || identity$6, opacity2 = opacity_(_.opacity, _), color2 = color_(_.color, _), as = _.as || "image", obj = {
        $x: 0,
        $y: 0,
        $value: 0,
        $max: shared ? max$2(source2.map((t) => max$2(field2(t).values))) : 0
      };
      source2.forEach((t) => {
        const v = field2(t);
        const o = extend$1({}, t, obj);
        if (!shared) o.$max = max$2(v.values || []);
        t[as] = toCanvas(v, o, color2.dep ? color2 : constant$5(color2(o)), opacity2.dep ? opacity2 : constant$5(opacity2(o)));
      });
      return pulse2.reflow(true).modifies(as);
    }
  });
  function color_(color2, _) {
    let f;
    if (isFunction(color2)) {
      f = (obj) => rgb$1(color2(obj, _));
      f.dep = dependency(color2);
    } else {
      f = constant$5(rgb$1(color2 || "#888"));
    }
    return f;
  }
  function opacity_(opacity2, _) {
    let f;
    if (isFunction(opacity2)) {
      f = (obj) => opacity2(obj, _);
      f.dep = dependency(opacity2);
    } else if (opacity2) {
      f = constant$5(opacity2);
    } else {
      f = (obj) => obj.$value / obj.$max || 0;
      f.dep = true;
    }
    return f;
  }
  function dependency(f) {
    if (!isFunction(f)) return false;
    const set2 = toSet(accessorFields(f));
    return set2.$x || set2.$y || set2.$value || set2.$max;
  }
  function toCanvas(grid, obj, color2, opacity2) {
    const n = grid.width, m2 = grid.height, x12 = grid.x1 || 0, y12 = grid.y1 || 0, x2 = grid.x2 || n, y2 = grid.y2 || m2, val = grid.values, value2 = val ? (i) => val[i] : zero$4, can = domCanvas(x2 - x12, y2 - y12), ctx = can.getContext("2d"), img = ctx.getImageData(0, 0, x2 - x12, y2 - y12), pix = img.data;
    for (let j = y12, k = 0; j < y2; ++j) {
      obj.$y = j - y12;
      for (let i = x12, r = j * n; i < x2; ++i, k += 4) {
        obj.$x = i - x12;
        obj.$value = value2(i + r);
        const v = color2(obj);
        pix[k + 0] = v.r;
        pix[k + 1] = v.g;
        pix[k + 2] = v.b;
        pix[k + 3] = ~~(255 * opacity2(obj));
      }
    }
    ctx.putImageData(img, 0, 0);
    return can;
  }
  function Projection$1(params2) {
    Transform.call(this, null, params2);
    this.modified(true);
  }
  inherits(Projection$1, Transform, {
    transform(_, pulse2) {
      let proj = this.value;
      if (!proj || _.modified("type")) {
        this.value = proj = create(_.type);
        projectionProperties.forEach((prop) => {
          if (_[prop] != null) set$2(proj, prop, _[prop]);
        });
      } else {
        projectionProperties.forEach((prop) => {
          if (_.modified(prop)) set$2(proj, prop, _[prop]);
        });
      }
      if (_.pointRadius != null) proj.path.pointRadius(_.pointRadius);
      if (_.fit) fit(proj, _);
      return pulse2.fork(pulse2.NO_SOURCE | pulse2.NO_FIELDS);
    }
  });
  function fit(proj, _) {
    const data2 = collectGeoJSON(_.fit);
    _.extent ? proj.fitExtent(_.extent, data2) : _.size ? proj.fitSize(_.size, data2) : 0;
  }
  function create(type2) {
    const constructor = projection((type2 || "mercator").toLowerCase());
    if (!constructor) error$1("Unrecognized projection type: " + type2);
    return constructor();
  }
  function set$2(proj, key2, value2) {
    if (isFunction(proj[key2])) proj[key2](value2);
  }
  function collectGeoJSON(data2) {
    data2 = array$5(data2);
    return data2.length === 1 ? data2[0] : {
      type: FeatureCollection,
      features: data2.reduce((a2, f) => a2.concat(featurize(f)), [])
    };
  }
  function featurize(f) {
    return f.type === FeatureCollection ? f.features : array$5(f).filter((d) => d != null).map((d) => d.type === Feature ? d : {
      type: Feature,
      geometry: d
    });
  }
  const geo = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
    __proto__: null,
    contour: Contour,
    geojson: GeoJSON,
    geopath: GeoPath,
    geopoint: GeoPoint,
    geoshape: GeoShape,
    graticule: Graticule,
    heatmap: Heatmap,
    isocontour: Isocontour,
    kde2d: KDE2D,
    projection: Projection$1
  }, Symbol.toStringTag, { value: "Module" }));
  function forceCenter(x2, y2) {
    var nodes, strength = 1;
    if (x2 == null) x2 = 0;
    if (y2 == null) y2 = 0;
    function force2() {
      var i, n = nodes.length, node, sx = 0, sy = 0;
      for (i = 0; i < n; ++i) {
        node = nodes[i], sx += node.x, sy += node.y;
      }
      for (sx = (sx / n - x2) * strength, sy = (sy / n - y2) * strength, i = 0; i < n; ++i) {
        node = nodes[i], node.x -= sx, node.y -= sy;
      }
    }
    force2.initialize = function(_) {
      nodes = _;
    };
    force2.x = function(_) {
      return arguments.length ? (x2 = +_, force2) : x2;
    };
    force2.y = function(_) {
      return arguments.length ? (y2 = +_, force2) : y2;
    };
    force2.strength = function(_) {
      return arguments.length ? (strength = +_, force2) : strength;
    };
    return force2;
  }
  function tree_add(d) {
    const x2 = +this._x.call(null, d), y2 = +this._y.call(null, d);
    return add$1(this.cover(x2, y2), x2, y2, d);
  }
  function add$1(tree2, x2, y2, d) {
    if (isNaN(x2) || isNaN(y2)) return tree2;
    var parent, node = tree2._root, leaf = { data: d }, x02 = tree2._x0, y02 = tree2._y0, x12 = tree2._x1, y12 = tree2._y1, xm, ym, xp, yp, right, bottom, i, j;
    if (!node) return tree2._root = leaf, tree2;
    while (node.length) {
      if (right = x2 >= (xm = (x02 + x12) / 2)) x02 = xm;
      else x12 = xm;
      if (bottom = y2 >= (ym = (y02 + y12) / 2)) y02 = ym;
      else y12 = ym;
      if (parent = node, !(node = node[i = bottom << 1 | right])) return parent[i] = leaf, tree2;
    }
    xp = +tree2._x.call(null, node.data);
    yp = +tree2._y.call(null, node.data);
    if (x2 === xp && y2 === yp) return leaf.next = node, parent ? parent[i] = leaf : tree2._root = leaf, tree2;
    do {
      parent = parent ? parent[i] = new Array(4) : tree2._root = new Array(4);
      if (right = x2 >= (xm = (x02 + x12) / 2)) x02 = xm;
      else x12 = xm;
      if (bottom = y2 >= (ym = (y02 + y12) / 2)) y02 = ym;
      else y12 = ym;
    } while ((i = bottom << 1 | right) === (j = (yp >= ym) << 1 | xp >= xm));
    return parent[j] = node, parent[i] = leaf, tree2;
  }
  function addAll(data2) {
    var d, i, n = data2.length, x2, y2, xz = new Array(n), yz = new Array(n), x02 = Infinity, y02 = Infinity, x12 = -Infinity, y12 = -Infinity;
    for (i = 0; i < n; ++i) {
      if (isNaN(x2 = +this._x.call(null, d = data2[i])) || isNaN(y2 = +this._y.call(null, d))) continue;
      xz[i] = x2;
      yz[i] = y2;
      if (x2 < x02) x02 = x2;
      if (x2 > x12) x12 = x2;
      if (y2 < y02) y02 = y2;
      if (y2 > y12) y12 = y2;
    }
    if (x02 > x12 || y02 > y12) return this;
    this.cover(x02, y02).cover(x12, y12);
    for (i = 0; i < n; ++i) {
      add$1(this, xz[i], yz[i], data2[i]);
    }
    return this;
  }
  function tree_cover(x2, y2) {
    if (isNaN(x2 = +x2) || isNaN(y2 = +y2)) return this;
    var x02 = this._x0, y02 = this._y0, x12 = this._x1, y12 = this._y1;
    if (isNaN(x02)) {
      x12 = (x02 = Math.floor(x2)) + 1;
      y12 = (y02 = Math.floor(y2)) + 1;
    } else {
      var z = x12 - x02 || 1, node = this._root, parent, i;
      while (x02 > x2 || x2 >= x12 || y02 > y2 || y2 >= y12) {
        i = (y2 < y02) << 1 | x2 < x02;
        parent = new Array(4), parent[i] = node, node = parent, z *= 2;
        switch (i) {
          case 0:
            x12 = x02 + z, y12 = y02 + z;
            break;
          case 1:
            x02 = x12 - z, y12 = y02 + z;
            break;
          case 2:
            x12 = x02 + z, y02 = y12 - z;
            break;
          case 3:
            x02 = x12 - z, y02 = y12 - z;
            break;
        }
      }
      if (this._root && this._root.length) this._root = node;
    }
    this._x0 = x02;
    this._y0 = y02;
    this._x1 = x12;
    this._y1 = y12;
    return this;
  }
  function tree_data() {
    var data2 = [];
    this.visit(function(node) {
      if (!node.length) do
        data2.push(node.data);
      while (node = node.next);
    });
    return data2;
  }
  function tree_extent(_) {
    return arguments.length ? this.cover(+_[0][0], +_[0][1]).cover(+_[1][0], +_[1][1]) : isNaN(this._x0) ? void 0 : [[this._x0, this._y0], [this._x1, this._y1]];
  }
  function Quad(node, x02, y02, x12, y12) {
    this.node = node;
    this.x0 = x02;
    this.y0 = y02;
    this.x1 = x12;
    this.y1 = y12;
  }
  function tree_find(x2, y2, radius2) {
    var data2, x02 = this._x0, y02 = this._y0, x12, y12, x22, y22, x3 = this._x1, y3 = this._y1, quads = [], node = this._root, q, i;
    if (node) quads.push(new Quad(node, x02, y02, x3, y3));
    if (radius2 == null) radius2 = Infinity;
    else {
      x02 = x2 - radius2, y02 = y2 - radius2;
      x3 = x2 + radius2, y3 = y2 + radius2;
      radius2 *= radius2;
    }
    while (q = quads.pop()) {
      if (!(node = q.node) || (x12 = q.x0) > x3 || (y12 = q.y0) > y3 || (x22 = q.x1) < x02 || (y22 = q.y1) < y02) continue;
      if (node.length) {
        var xm = (x12 + x22) / 2, ym = (y12 + y22) / 2;
        quads.push(
          new Quad(node[3], xm, ym, x22, y22),
          new Quad(node[2], x12, ym, xm, y22),
          new Quad(node[1], xm, y12, x22, ym),
          new Quad(node[0], x12, y12, xm, ym)
        );
        if (i = (y2 >= ym) << 1 | x2 >= xm) {
          q = quads[quads.length - 1];
          quads[quads.length - 1] = quads[quads.length - 1 - i];
          quads[quads.length - 1 - i] = q;
        }
      } else {
        var dx = x2 - +this._x.call(null, node.data), dy = y2 - +this._y.call(null, node.data), d2 = dx * dx + dy * dy;
        if (d2 < radius2) {
          var d = Math.sqrt(radius2 = d2);
          x02 = x2 - d, y02 = y2 - d;
          x3 = x2 + d, y3 = y2 + d;
          data2 = node.data;
        }
      }
    }
    return data2;
  }
  function tree_remove(d) {
    if (isNaN(x2 = +this._x.call(null, d)) || isNaN(y2 = +this._y.call(null, d))) return this;
    var parent, node = this._root, retainer, previous, next, x02 = this._x0, y02 = this._y0, x12 = this._x1, y12 = this._y1, x2, y2, xm, ym, right, bottom, i, j;
    if (!node) return this;
    if (node.length) while (true) {
      if (right = x2 >= (xm = (x02 + x12) / 2)) x02 = xm;
      else x12 = xm;
      if (bottom = y2 >= (ym = (y02 + y12) / 2)) y02 = ym;
      else y12 = ym;
      if (!(parent = node, node = node[i = bottom << 1 | right])) return this;
      if (!node.length) break;
      if (parent[i + 1 & 3] || parent[i + 2 & 3] || parent[i + 3 & 3]) retainer = parent, j = i;
    }
    while (node.data !== d) if (!(previous = node, node = node.next)) return this;
    if (next = node.next) delete node.next;
    if (previous) return next ? previous.next = next : delete previous.next, this;
    if (!parent) return this._root = next, this;
    next ? parent[i] = next : delete parent[i];
    if ((node = parent[0] || parent[1] || parent[2] || parent[3]) && node === (parent[3] || parent[2] || parent[1] || parent[0]) && !node.length) {
      if (retainer) retainer[j] = node;
      else this._root = node;
    }
    return this;
  }
  function removeAll(data2) {
    for (var i = 0, n = data2.length; i < n; ++i) this.remove(data2[i]);
    return this;
  }
  function tree_root() {
    return this._root;
  }
  function tree_size() {
    var size = 0;
    this.visit(function(node) {
      if (!node.length) do
        ++size;
      while (node = node.next);
    });
    return size;
  }
  function tree_visit(callback) {
    var quads = [], q, node = this._root, child, x02, y02, x12, y12;
    if (node) quads.push(new Quad(node, this._x0, this._y0, this._x1, this._y1));
    while (q = quads.pop()) {
      if (!callback(node = q.node, x02 = q.x0, y02 = q.y0, x12 = q.x1, y12 = q.y1) && node.length) {
        var xm = (x02 + x12) / 2, ym = (y02 + y12) / 2;
        if (child = node[3]) quads.push(new Quad(child, xm, ym, x12, y12));
        if (child = node[2]) quads.push(new Quad(child, x02, ym, xm, y12));
        if (child = node[1]) quads.push(new Quad(child, xm, y02, x12, ym));
        if (child = node[0]) quads.push(new Quad(child, x02, y02, xm, ym));
      }
    }
    return this;
  }
  function tree_visitAfter(callback) {
    var quads = [], next = [], q;
    if (this._root) quads.push(new Quad(this._root, this._x0, this._y0, this._x1, this._y1));
    while (q = quads.pop()) {
      var node = q.node;
      if (node.length) {
        var child, x02 = q.x0, y02 = q.y0, x12 = q.x1, y12 = q.y1, xm = (x02 + x12) / 2, ym = (y02 + y12) / 2;
        if (child = node[0]) quads.push(new Quad(child, x02, y02, xm, ym));
        if (child = node[1]) quads.push(new Quad(child, xm, y02, x12, ym));
        if (child = node[2]) quads.push(new Quad(child, x02, ym, xm, y12));
        if (child = node[3]) quads.push(new Quad(child, xm, ym, x12, y12));
      }
      next.push(q);
    }
    while (q = next.pop()) {
      callback(q.node, q.x0, q.y0, q.x1, q.y1);
    }
    return this;
  }
  function defaultX(d) {
    return d[0];
  }
  function tree_x(_) {
    return arguments.length ? (this._x = _, this) : this._x;
  }
  function defaultY(d) {
    return d[1];
  }
  function tree_y(_) {
    return arguments.length ? (this._y = _, this) : this._y;
  }
  function quadtree(nodes, x2, y2) {
    var tree2 = new Quadtree(x2 == null ? defaultX : x2, y2 == null ? defaultY : y2, NaN, NaN, NaN, NaN);
    return nodes == null ? tree2 : tree2.addAll(nodes);
  }
  function Quadtree(x2, y2, x02, y02, x12, y12) {
    this._x = x2;
    this._y = y2;
    this._x0 = x02;
    this._y0 = y02;
    this._x1 = x12;
    this._y1 = y12;
    this._root = void 0;
  }
  function leaf_copy(leaf) {
    var copy2 = { data: leaf.data }, next = copy2;
    while (leaf = leaf.next) next = next.next = { data: leaf.data };
    return copy2;
  }
  var treeProto = quadtree.prototype = Quadtree.prototype;
  treeProto.copy = function() {
    var copy2 = new Quadtree(this._x, this._y, this._x0, this._y0, this._x1, this._y1), node = this._root, nodes, child;
    if (!node) return copy2;
    if (!node.length) return copy2._root = leaf_copy(node), copy2;
    nodes = [{ source: node, target: copy2._root = new Array(4) }];
    while (node = nodes.pop()) {
      for (var i = 0; i < 4; ++i) {
        if (child = node.source[i]) {
          if (child.length) nodes.push({ source: child, target: node.target[i] = new Array(4) });
          else node.target[i] = leaf_copy(child);
        }
      }
    }
    return copy2;
  };
  treeProto.add = tree_add;
  treeProto.addAll = addAll;
  treeProto.cover = tree_cover;
  treeProto.data = tree_data;
  treeProto.extent = tree_extent;
  treeProto.find = tree_find;
  treeProto.remove = tree_remove;
  treeProto.removeAll = removeAll;
  treeProto.root = tree_root;
  treeProto.size = tree_size;
  treeProto.visit = tree_visit;
  treeProto.visitAfter = tree_visitAfter;
  treeProto.x = tree_x;
  treeProto.y = tree_y;
  function constant$1(x2) {
    return function() {
      return x2;
    };
  }
  function jiggle(random2) {
    return (random2() - 0.5) * 1e-6;
  }
  function x$1(d) {
    return d.x + d.vx;
  }
  function y$1(d) {
    return d.y + d.vy;
  }
  function forceCollide(radius2) {
    var nodes, radii, random2, strength = 1, iterations2 = 1;
    if (typeof radius2 !== "function") radius2 = constant$1(radius2 == null ? 1 : +radius2);
    function force2() {
      var i, n = nodes.length, tree2, node, xi, yi, ri, ri2;
      for (var k = 0; k < iterations2; ++k) {
        tree2 = quadtree(nodes, x$1, y$1).visitAfter(prepare2);
        for (i = 0; i < n; ++i) {
          node = nodes[i];
          ri = radii[node.index], ri2 = ri * ri;
          xi = node.x + node.vx;
          yi = node.y + node.vy;
          tree2.visit(apply2);
        }
      }
      function apply2(quad2, x02, y02, x12, y12) {
        var data2 = quad2.data, rj = quad2.r, r = ri + rj;
        if (data2) {
          if (data2.index > node.index) {
            var x2 = xi - data2.x - data2.vx, y2 = yi - data2.y - data2.vy, l = x2 * x2 + y2 * y2;
            if (l < r * r) {
              if (x2 === 0) x2 = jiggle(random2), l += x2 * x2;
              if (y2 === 0) y2 = jiggle(random2), l += y2 * y2;
              l = (r - (l = Math.sqrt(l))) / l * strength;
              node.vx += (x2 *= l) * (r = (rj *= rj) / (ri2 + rj));
              node.vy += (y2 *= l) * r;
              data2.vx -= x2 * (r = 1 - r);
              data2.vy -= y2 * r;
            }
          }
          return;
        }
        return x02 > xi + r || x12 < xi - r || y02 > yi + r || y12 < yi - r;
      }
    }
    function prepare2(quad2) {
      if (quad2.data) return quad2.r = radii[quad2.data.index];
      for (var i = quad2.r = 0; i < 4; ++i) {
        if (quad2[i] && quad2[i].r > quad2.r) {
          quad2.r = quad2[i].r;
        }
      }
    }
    function initialize2() {
      if (!nodes) return;
      var i, n = nodes.length, node;
      radii = new Array(n);
      for (i = 0; i < n; ++i) node = nodes[i], radii[node.index] = +radius2(node, i, nodes);
    }
    force2.initialize = function(_nodes, _random) {
      nodes = _nodes;
      random2 = _random;
      initialize2();
    };
    force2.iterations = function(_) {
      return arguments.length ? (iterations2 = +_, force2) : iterations2;
    };
    force2.strength = function(_) {
      return arguments.length ? (strength = +_, force2) : strength;
    };
    force2.radius = function(_) {
      return arguments.length ? (radius2 = typeof _ === "function" ? _ : constant$1(+_), initialize2(), force2) : radius2;
    };
    return force2;
  }
  function index$2(d) {
    return d.index;
  }
  function find$1(nodeById, nodeId) {
    var node = nodeById.get(nodeId);
    if (!node) throw new Error("node not found: " + nodeId);
    return node;
  }
  function forceLink(links) {
    var id2 = index$2, strength = defaultStrength, strengths, distance = constant$1(30), distances, nodes, count2, bias, random2, iterations2 = 1;
    if (links == null) links = [];
    function defaultStrength(link2) {
      return 1 / Math.min(count2[link2.source.index], count2[link2.target.index]);
    }
    function force2(alpha) {
      for (var k = 0, n = links.length; k < iterations2; ++k) {
        for (var i = 0, link2, source2, target2, x2, y2, l, b2; i < n; ++i) {
          link2 = links[i], source2 = link2.source, target2 = link2.target;
          x2 = target2.x + target2.vx - source2.x - source2.vx || jiggle(random2);
          y2 = target2.y + target2.vy - source2.y - source2.vy || jiggle(random2);
          l = Math.sqrt(x2 * x2 + y2 * y2);
          l = (l - distances[i]) / l * alpha * strengths[i];
          x2 *= l, y2 *= l;
          target2.vx -= x2 * (b2 = bias[i]);
          target2.vy -= y2 * b2;
          source2.vx += x2 * (b2 = 1 - b2);
          source2.vy += y2 * b2;
        }
      }
    }
    function initialize2() {
      if (!nodes) return;
      var i, n = nodes.length, m2 = links.length, nodeById = new Map(nodes.map((d, i2) => [id2(d, i2, nodes), d])), link2;
      for (i = 0, count2 = new Array(n); i < m2; ++i) {
        link2 = links[i], link2.index = i;
        if (typeof link2.source !== "object") link2.source = find$1(nodeById, link2.source);
        if (typeof link2.target !== "object") link2.target = find$1(nodeById, link2.target);
        count2[link2.source.index] = (count2[link2.source.index] || 0) + 1;
        count2[link2.target.index] = (count2[link2.target.index] || 0) + 1;
      }
      for (i = 0, bias = new Array(m2); i < m2; ++i) {
        link2 = links[i], bias[i] = count2[link2.source.index] / (count2[link2.source.index] + count2[link2.target.index]);
      }
      strengths = new Array(m2), initializeStrength();
      distances = new Array(m2), initializeDistance();
    }
    function initializeStrength() {
      if (!nodes) return;
      for (var i = 0, n = links.length; i < n; ++i) {
        strengths[i] = +strength(links[i], i, links);
      }
    }
    function initializeDistance() {
      if (!nodes) return;
      for (var i = 0, n = links.length; i < n; ++i) {
        distances[i] = +distance(links[i], i, links);
      }
    }
    force2.initialize = function(_nodes, _random) {
      nodes = _nodes;
      random2 = _random;
      initialize2();
    };
    force2.links = function(_) {
      return arguments.length ? (links = _, initialize2(), force2) : links;
    };
    force2.id = function(_) {
      return arguments.length ? (id2 = _, force2) : id2;
    };
    force2.iterations = function(_) {
      return arguments.length ? (iterations2 = +_, force2) : iterations2;
    };
    force2.strength = function(_) {
      return arguments.length ? (strength = typeof _ === "function" ? _ : constant$1(+_), initializeStrength(), force2) : strength;
    };
    force2.distance = function(_) {
      return arguments.length ? (distance = typeof _ === "function" ? _ : constant$1(+_), initializeDistance(), force2) : distance;
    };
    return force2;
  }
  var noop = { value: () => {
  } };
  function dispatch() {
    for (var i = 0, n = arguments.length, _ = {}, t; i < n; ++i) {
      if (!(t = arguments[i] + "") || t in _ || /[\s.]/.test(t)) throw new Error("illegal type: " + t);
      _[t] = [];
    }
    return new Dispatch(_);
  }
  function Dispatch(_) {
    this._ = _;
  }
  function parseTypenames(typenames, types) {
    return typenames.trim().split(/^|\s+/).map(function(t) {
      var name = "", i = t.indexOf(".");
      if (i >= 0) name = t.slice(i + 1), t = t.slice(0, i);
      if (t && !types.hasOwnProperty(t)) throw new Error("unknown type: " + t);
      return { type: t, name };
    });
  }
  Dispatch.prototype = dispatch.prototype = {
    constructor: Dispatch,
    on: function(typename, callback) {
      var _ = this._, T = parseTypenames(typename + "", _), t, i = -1, n = T.length;
      if (arguments.length < 2) {
        while (++i < n) if ((t = (typename = T[i]).type) && (t = get(_[t], typename.name))) return t;
        return;
      }
      if (callback != null && typeof callback !== "function") throw new Error("invalid callback: " + callback);
      while (++i < n) {
        if (t = (typename = T[i]).type) _[t] = set$1(_[t], typename.name, callback);
        else if (callback == null) for (t in _) _[t] = set$1(_[t], typename.name, null);
      }
      return this;
    },
    copy: function() {
      var copy2 = {}, _ = this._;
      for (var t in _) copy2[t] = _[t].slice();
      return new Dispatch(copy2);
    },
    call: function(type2, that) {
      if ((n = arguments.length - 2) > 0) for (var args = new Array(n), i = 0, n, t; i < n; ++i) args[i] = arguments[i + 2];
      if (!this._.hasOwnProperty(type2)) throw new Error("unknown type: " + type2);
      for (t = this._[type2], i = 0, n = t.length; i < n; ++i) t[i].value.apply(that, args);
    },
    apply: function(type2, that, args) {
      if (!this._.hasOwnProperty(type2)) throw new Error("unknown type: " + type2);
      for (var t = this._[type2], i = 0, n = t.length; i < n; ++i) t[i].value.apply(that, args);
    }
  };
  function get(type2, name) {
    for (var i = 0, n = type2.length, c2; i < n; ++i) {
      if ((c2 = type2[i]).name === name) {
        return c2.value;
      }
    }
  }
  function set$1(type2, name, callback) {
    for (var i = 0, n = type2.length; i < n; ++i) {
      if (type2[i].name === name) {
        type2[i] = noop, type2 = type2.slice(0, i).concat(type2.slice(i + 1));
        break;
      }
    }
    if (callback != null) type2.push({ name, value: callback });
    return type2;
  }
  var frame = 0, timeout = 0, interval$2 = 0, pokeDelay = 1e3, taskHead, taskTail, clockLast = 0, clockNow = 0, clockSkew = 0, clock = typeof performance === "object" && performance.now ? performance : Date, setFrame = typeof window === "object" && window.requestAnimationFrame ? window.requestAnimationFrame.bind(window) : function(f) {
    setTimeout(f, 17);
  };
  function now() {
    return clockNow || (setFrame(clearNow), clockNow = clock.now() + clockSkew);
  }
  function clearNow() {
    clockNow = 0;
  }
  function Timer$1() {
    this._call = this._time = this._next = null;
  }
  Timer$1.prototype = timer$1.prototype = {
    constructor: Timer$1,
    restart: function(callback, delay, time2) {
      if (typeof callback !== "function") throw new TypeError("callback is not a function");
      time2 = (time2 == null ? now() : +time2) + (delay == null ? 0 : +delay);
      if (!this._next && taskTail !== this) {
        if (taskTail) taskTail._next = this;
        else taskHead = this;
        taskTail = this;
      }
      this._call = callback;
      this._time = time2;
      sleep();
    },
    stop: function() {
      if (this._call) {
        this._call = null;
        this._time = Infinity;
        sleep();
      }
    }
  };
  function timer$1(callback, delay, time2) {
    var t = new Timer$1();
    t.restart(callback, delay, time2);
    return t;
  }
  function timerFlush() {
    now();
    ++frame;
    var t = taskHead, e3;
    while (t) {
      if ((e3 = clockNow - t._time) >= 0) t._call.call(void 0, e3);
      t = t._next;
    }
    --frame;
  }
  function wake() {
    clockNow = (clockLast = clock.now()) + clockSkew;
    frame = timeout = 0;
    try {
      timerFlush();
    } finally {
      frame = 0;
      nap();
      clockNow = 0;
    }
  }
  function poke() {
    var now2 = clock.now(), delay = now2 - clockLast;
    if (delay > pokeDelay) clockSkew -= delay, clockLast = now2;
  }
  function nap() {
    var t02, t12 = taskHead, t22, time2 = Infinity;
    while (t12) {
      if (t12._call) {
        if (time2 > t12._time) time2 = t12._time;
        t02 = t12, t12 = t12._next;
      } else {
        t22 = t12._next, t12._next = null;
        t12 = t02 ? t02._next = t22 : taskHead = t22;
      }
    }
    taskTail = t02;
    sleep(time2);
  }
  function sleep(time2) {
    if (frame) return;
    if (timeout) timeout = clearTimeout(timeout);
    var delay = time2 - clockNow;
    if (delay > 24) {
      if (time2 < Infinity) timeout = setTimeout(wake, time2 - clock.now() - clockSkew);
      if (interval$2) interval$2 = clearInterval(interval$2);
    } else {
      if (!interval$2) clockLast = clock.now(), interval$2 = setInterval(poke, pokeDelay);
      frame = 1, setFrame(wake);
    }
  }
  function interval$1(callback, delay, time2) {
    var t = new Timer$1(), total = delay;
    if (delay == null) return t.restart(callback, delay, time2), t;
    t._restart = t.restart;
    t.restart = function(callback2, delay2, time3) {
      delay2 = +delay2, time3 = time3 == null ? now() : +time3;
      t._restart(function tick2(elapsed) {
        elapsed += total;
        t._restart(tick2, total += delay2, time3);
        callback2(elapsed);
      }, delay2, time3);
    };
    t.restart(callback, delay, time2);
    return t;
  }
  const a$1 = 1664525;
  const c$1 = 1013904223;
  const m$1 = 4294967296;
  function lcg$1() {
    let s = 1;
    return () => (s = (a$1 * s + c$1) % m$1) / m$1;
  }
  function x(d) {
    return d.x;
  }
  function y(d) {
    return d.y;
  }
  var initialRadius = 10, initialAngle = Math.PI * (3 - Math.sqrt(5));
  function forceSimulation(nodes) {
    var simulation2, alpha = 1, alphaMin = 1e-3, alphaDecay = 1 - Math.pow(alphaMin, 1 / 300), alphaTarget = 0, velocityDecay = 0.6, forces = /* @__PURE__ */ new Map(), stepper = timer$1(step), event2 = dispatch("tick", "end"), random2 = lcg$1();
    if (nodes == null) nodes = [];
    function step() {
      tick2();
      event2.call("tick", simulation2);
      if (alpha < alphaMin) {
        stepper.stop();
        event2.call("end", simulation2);
      }
    }
    function tick2(iterations2) {
      var i, n = nodes.length, node;
      if (iterations2 === void 0) iterations2 = 1;
      for (var k = 0; k < iterations2; ++k) {
        alpha += (alphaTarget - alpha) * alphaDecay;
        forces.forEach(function(force2) {
          force2(alpha);
        });
        for (i = 0; i < n; ++i) {
          node = nodes[i];
          if (node.fx == null) node.x += node.vx *= velocityDecay;
          else node.x = node.fx, node.vx = 0;
          if (node.fy == null) node.y += node.vy *= velocityDecay;
          else node.y = node.fy, node.vy = 0;
        }
      }
      return simulation2;
    }
    function initializeNodes() {
      for (var i = 0, n = nodes.length, node; i < n; ++i) {
        node = nodes[i], node.index = i;
        if (node.fx != null) node.x = node.fx;
        if (node.fy != null) node.y = node.fy;
        if (isNaN(node.x) || isNaN(node.y)) {
          var radius2 = initialRadius * Math.sqrt(0.5 + i), angle2 = i * initialAngle;
          node.x = radius2 * Math.cos(angle2);
          node.y = radius2 * Math.sin(angle2);
        }
        if (isNaN(node.vx) || isNaN(node.vy)) {
          node.vx = node.vy = 0;
        }
      }
    }
    function initializeForce(force2) {
      if (force2.initialize) force2.initialize(nodes, random2);
      return force2;
    }
    initializeNodes();
    return simulation2 = {
      tick: tick2,
      restart: function() {
        return stepper.restart(step), simulation2;
      },
      stop: function() {
        return stepper.stop(), simulation2;
      },
      nodes: function(_) {
        return arguments.length ? (nodes = _, initializeNodes(), forces.forEach(initializeForce), simulation2) : nodes;
      },
      alpha: function(_) {
        return arguments.length ? (alpha = +_, simulation2) : alpha;
      },
      alphaMin: function(_) {
        return arguments.length ? (alphaMin = +_, simulation2) : alphaMin;
      },
      alphaDecay: function(_) {
        return arguments.length ? (alphaDecay = +_, simulation2) : +alphaDecay;
      },
      alphaTarget: function(_) {
        return arguments.length ? (alphaTarget = +_, simulation2) : alphaTarget;
      },
      velocityDecay: function(_) {
        return arguments.length ? (velocityDecay = 1 - _, simulation2) : 1 - velocityDecay;
      },
      randomSource: function(_) {
        return arguments.length ? (random2 = _, forces.forEach(initializeForce), simulation2) : random2;
      },
      force: function(name, _) {
        return arguments.length > 1 ? (_ == null ? forces.delete(name) : forces.set(name, initializeForce(_)), simulation2) : forces.get(name);
      },
      find: function(x2, y2, radius2) {
        var i = 0, n = nodes.length, dx, dy, d2, node, closest;
        if (radius2 == null) radius2 = Infinity;
        else radius2 *= radius2;
        for (i = 0; i < n; ++i) {
          node = nodes[i];
          dx = x2 - node.x;
          dy = y2 - node.y;
          d2 = dx * dx + dy * dy;
          if (d2 < radius2) closest = node, radius2 = d2;
        }
        return closest;
      },
      on: function(name, _) {
        return arguments.length > 1 ? (event2.on(name, _), simulation2) : event2.on(name);
      }
    };
  }
  function forceManyBody() {
    var nodes, node, random2, alpha, strength = constant$1(-30), strengths, distanceMin2 = 1, distanceMax2 = Infinity, theta2 = 0.81;
    function force2(_) {
      var i, n = nodes.length, tree2 = quadtree(nodes, x, y).visitAfter(accumulate);
      for (alpha = _, i = 0; i < n; ++i) node = nodes[i], tree2.visit(apply2);
    }
    function initialize2() {
      if (!nodes) return;
      var i, n = nodes.length, node2;
      strengths = new Array(n);
      for (i = 0; i < n; ++i) node2 = nodes[i], strengths[node2.index] = +strength(node2, i, nodes);
    }
    function accumulate(quad2) {
      var strength2 = 0, q, c2, weight = 0, x2, y2, i;
      if (quad2.length) {
        for (x2 = y2 = i = 0; i < 4; ++i) {
          if ((q = quad2[i]) && (c2 = Math.abs(q.value))) {
            strength2 += q.value, weight += c2, x2 += c2 * q.x, y2 += c2 * q.y;
          }
        }
        quad2.x = x2 / weight;
        quad2.y = y2 / weight;
      } else {
        q = quad2;
        q.x = q.data.x;
        q.y = q.data.y;
        do
          strength2 += strengths[q.data.index];
        while (q = q.next);
      }
      quad2.value = strength2;
    }
    function apply2(quad2, x12, _, x2) {
      if (!quad2.value) return true;
      var x3 = quad2.x - node.x, y2 = quad2.y - node.y, w2 = x2 - x12, l = x3 * x3 + y2 * y2;
      if (w2 * w2 / theta2 < l) {
        if (l < distanceMax2) {
          if (x3 === 0) x3 = jiggle(random2), l += x3 * x3;
          if (y2 === 0) y2 = jiggle(random2), l += y2 * y2;
          if (l < distanceMin2) l = Math.sqrt(distanceMin2 * l);
          node.vx += x3 * quad2.value * alpha / l;
          node.vy += y2 * quad2.value * alpha / l;
        }
        return true;
      } else if (quad2.length || l >= distanceMax2) return;
      if (quad2.data !== node || quad2.next) {
        if (x3 === 0) x3 = jiggle(random2), l += x3 * x3;
        if (y2 === 0) y2 = jiggle(random2), l += y2 * y2;
        if (l < distanceMin2) l = Math.sqrt(distanceMin2 * l);
      }
      do
        if (quad2.data !== node) {
          w2 = strengths[quad2.data.index] * alpha / l;
          node.vx += x3 * w2;
          node.vy += y2 * w2;
        }
      while (quad2 = quad2.next);
    }
    force2.initialize = function(_nodes, _random) {
      nodes = _nodes;
      random2 = _random;
      initialize2();
    };
    force2.strength = function(_) {
      return arguments.length ? (strength = typeof _ === "function" ? _ : constant$1(+_), initialize2(), force2) : strength;
    };
    force2.distanceMin = function(_) {
      return arguments.length ? (distanceMin2 = _ * _, force2) : Math.sqrt(distanceMin2);
    };
    force2.distanceMax = function(_) {
      return arguments.length ? (distanceMax2 = _ * _, force2) : Math.sqrt(distanceMax2);
    };
    force2.theta = function(_) {
      return arguments.length ? (theta2 = _ * _, force2) : Math.sqrt(theta2);
    };
    return force2;
  }
  function forceX(x2) {
    var strength = constant$1(0.1), nodes, strengths, xz;
    if (typeof x2 !== "function") x2 = constant$1(x2 == null ? 0 : +x2);
    function force2(alpha) {
      for (var i = 0, n = nodes.length, node; i < n; ++i) {
        node = nodes[i], node.vx += (xz[i] - node.x) * strengths[i] * alpha;
      }
    }
    function initialize2() {
      if (!nodes) return;
      var i, n = nodes.length;
      strengths = new Array(n);
      xz = new Array(n);
      for (i = 0; i < n; ++i) {
        strengths[i] = isNaN(xz[i] = +x2(nodes[i], i, nodes)) ? 0 : +strength(nodes[i], i, nodes);
      }
    }
    force2.initialize = function(_) {
      nodes = _;
      initialize2();
    };
    force2.strength = function(_) {
      return arguments.length ? (strength = typeof _ === "function" ? _ : constant$1(+_), initialize2(), force2) : strength;
    };
    force2.x = function(_) {
      return arguments.length ? (x2 = typeof _ === "function" ? _ : constant$1(+_), initialize2(), force2) : x2;
    };
    return force2;
  }
  function forceY(y2) {
    var strength = constant$1(0.1), nodes, strengths, yz;
    if (typeof y2 !== "function") y2 = constant$1(y2 == null ? 0 : +y2);
    function force2(alpha) {
      for (var i = 0, n = nodes.length, node; i < n; ++i) {
        node = nodes[i], node.vy += (yz[i] - node.y) * strengths[i] * alpha;
      }
    }
    function initialize2() {
      if (!nodes) return;
      var i, n = nodes.length;
      strengths = new Array(n);
      yz = new Array(n);
      for (i = 0; i < n; ++i) {
        strengths[i] = isNaN(yz[i] = +y2(nodes[i], i, nodes)) ? 0 : +strength(nodes[i], i, nodes);
      }
    }
    force2.initialize = function(_) {
      nodes = _;
      initialize2();
    };
    force2.strength = function(_) {
      return arguments.length ? (strength = typeof _ === "function" ? _ : constant$1(+_), initialize2(), force2) : strength;
    };
    force2.y = function(_) {
      return arguments.length ? (y2 = typeof _ === "function" ? _ : constant$1(+_), initialize2(), force2) : y2;
    };
    return force2;
  }
  const ForceMap = {
    center: forceCenter,
    collide: forceCollide,
    nbody: forceManyBody,
    link: forceLink,
    x: forceX,
    y: forceY
  };
  const Forces = "forces", ForceParams = ["alpha", "alphaMin", "alphaTarget", "velocityDecay", "forces"], ForceConfig = ["static", "iterations"], ForceOutput = ["x", "y", "vx", "vy"];
  function Force(params2) {
    Transform.call(this, null, params2);
  }
  Force.Definition = {
    "type": "Force",
    "metadata": {
      "modifies": true
    },
    "params": [{
      "name": "static",
      "type": "boolean",
      "default": false
    }, {
      "name": "restart",
      "type": "boolean",
      "default": false
    }, {
      "name": "iterations",
      "type": "number",
      "default": 300
    }, {
      "name": "alpha",
      "type": "number",
      "default": 1
    }, {
      "name": "alphaMin",
      "type": "number",
      "default": 1e-3
    }, {
      "name": "alphaTarget",
      "type": "number",
      "default": 0
    }, {
      "name": "velocityDecay",
      "type": "number",
      "default": 0.4
    }, {
      "name": "forces",
      "type": "param",
      "array": true,
      "params": [{
        "key": {
          "force": "center"
        },
        "params": [{
          "name": "x",
          "type": "number",
          "default": 0
        }, {
          "name": "y",
          "type": "number",
          "default": 0
        }]
      }, {
        "key": {
          "force": "collide"
        },
        "params": [{
          "name": "radius",
          "type": "number",
          "expr": true
        }, {
          "name": "strength",
          "type": "number",
          "default": 0.7
        }, {
          "name": "iterations",
          "type": "number",
          "default": 1
        }]
      }, {
        "key": {
          "force": "nbody"
        },
        "params": [{
          "name": "strength",
          "type": "number",
          "default": -30,
          "expr": true
        }, {
          "name": "theta",
          "type": "number",
          "default": 0.9
        }, {
          "name": "distanceMin",
          "type": "number",
          "default": 1
        }, {
          "name": "distanceMax",
          "type": "number"
        }]
      }, {
        "key": {
          "force": "link"
        },
        "params": [{
          "name": "links",
          "type": "data"
        }, {
          "name": "id",
          "type": "field"
        }, {
          "name": "distance",
          "type": "number",
          "default": 30,
          "expr": true
        }, {
          "name": "strength",
          "type": "number",
          "expr": true
        }, {
          "name": "iterations",
          "type": "number",
          "default": 1
        }]
      }, {
        "key": {
          "force": "x"
        },
        "params": [{
          "name": "strength",
          "type": "number",
          "default": 0.1
        }, {
          "name": "x",
          "type": "field"
        }]
      }, {
        "key": {
          "force": "y"
        },
        "params": [{
          "name": "strength",
          "type": "number",
          "default": 0.1
        }, {
          "name": "y",
          "type": "field"
        }]
      }]
    }, {
      "name": "as",
      "type": "string",
      "array": true,
      "modify": false,
      "default": ForceOutput
    }]
  };
  inherits(Force, Transform, {
    transform(_, pulse2) {
      var sim = this.value, change2 = pulse2.changed(pulse2.ADD_REM), params2 = _.modified(ForceParams), iters = _.iterations || 300;
      if (!sim) {
        this.value = sim = simulation(pulse2.source, _);
        sim.on("tick", rerun(pulse2.dataflow, this));
        if (!_.static) {
          change2 = true;
          sim.tick();
        }
        pulse2.modifies("index");
      } else {
        if (change2) {
          pulse2.modifies("index");
          sim.nodes(pulse2.source);
        }
        if (params2 || pulse2.changed(pulse2.MOD)) {
          setup(sim, _, 0, pulse2);
        }
      }
      if (params2 || change2 || _.modified(ForceConfig) || pulse2.changed() && _.restart) {
        sim.alpha(Math.max(sim.alpha(), _.alpha || 1)).alphaDecay(1 - Math.pow(sim.alphaMin(), 1 / iters));
        if (_.static) {
          for (sim.stop(); --iters >= 0; ) sim.tick();
        } else {
          if (sim.stopped()) sim.restart();
          if (!change2) return pulse2.StopPropagation;
        }
      }
      return this.finish(_, pulse2);
    },
    finish(_, pulse2) {
      const dataflow = pulse2.dataflow;
      for (let args = this._argops, j = 0, m2 = args.length, arg; j < m2; ++j) {
        arg = args[j];
        if (arg.name !== Forces || arg.op._argval.force !== "link") {
          continue;
        }
        for (var ops2 = arg.op._argops, i = 0, n = ops2.length, op; i < n; ++i) {
          if (ops2[i].name === "links" && (op = ops2[i].op.source)) {
            dataflow.pulse(op, dataflow.changeset().reflow());
            break;
          }
        }
      }
      return pulse2.reflow(_.modified()).modifies(ForceOutput);
    }
  });
  function rerun(df, op) {
    return () => df.touch(op).run();
  }
  function simulation(nodes, _) {
    const sim = forceSimulation(nodes), stop2 = sim.stop, restart = sim.restart;
    let stopped = false;
    sim.stopped = () => stopped;
    sim.restart = () => (stopped = false, restart());
    sim.stop = () => (stopped = true, stop2());
    return setup(sim, _, true).on("end", () => stopped = true);
  }
  function setup(sim, _, init2, pulse2) {
    var f = array$5(_.forces), i, n, p, name;
    for (i = 0, n = ForceParams.length; i < n; ++i) {
      p = ForceParams[i];
      if (p !== Forces && _.modified(p)) sim[p](_[p]);
    }
    for (i = 0, n = f.length; i < n; ++i) {
      name = Forces + i;
      p = init2 || _.modified(Forces, i) ? getForce(f[i]) : pulse2 && modified(f[i], pulse2) ? sim.force(name) : null;
      if (p) sim.force(name, p);
    }
    for (n = sim.numForces || 0; i < n; ++i) {
      sim.force(Forces + i, null);
    }
    sim.numForces = f.length;
    return sim;
  }
  function modified(f, pulse2) {
    var k, v;
    for (k in f) {
      if (isFunction(v = f[k]) && pulse2.modified(accessorFields(v))) return 1;
    }
    return 0;
  }
  function getForce(_) {
    var f, p;
    if (!has$1(ForceMap, _.force)) {
      error$1("Unrecognized force: " + _.force);
    }
    f = ForceMap[_.force]();
    for (p in _) {
      if (isFunction(f[p])) setForceParam(f[p], _[p], _);
    }
    return f;
  }
  function setForceParam(f, v, _) {
    f(isFunction(v) ? (d) => v(d, _) : v);
  }
  const force = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
    __proto__: null,
    force: Force
  }, Symbol.toStringTag, { value: "Module" }));
  function defaultSeparation$2(a2, b2) {
    return a2.parent === b2.parent ? 1 : 2;
  }
  function meanX(children2) {
    return children2.reduce(meanXReduce, 0) / children2.length;
  }
  function meanXReduce(x2, c2) {
    return x2 + c2.x;
  }
  function maxY(children2) {
    return 1 + children2.reduce(maxYReduce, 0);
  }
  function maxYReduce(y2, c2) {
    return Math.max(y2, c2.y);
  }
  function leafLeft(node) {
    var children2;
    while (children2 = node.children) node = children2[0];
    return node;
  }
  function leafRight(node) {
    var children2;
    while (children2 = node.children) node = children2[children2.length - 1];
    return node;
  }
  function cluster() {
    var separation = defaultSeparation$2, dx = 1, dy = 1, nodeSize = false;
    function cluster2(root) {
      var previousNode, x2 = 0;
      root.eachAfter(function(node) {
        var children2 = node.children;
        if (children2) {
          node.x = meanX(children2);
          node.y = maxY(children2);
        } else {
          node.x = previousNode ? x2 += separation(node, previousNode) : 0;
          node.y = 0;
          previousNode = node;
        }
      });
      var left = leafLeft(root), right = leafRight(root), x02 = left.x - separation(left, right) / 2, x12 = right.x + separation(right, left) / 2;
      return root.eachAfter(nodeSize ? function(node) {
        node.x = (node.x - root.x) * dx;
        node.y = (root.y - node.y) * dy;
      } : function(node) {
        node.x = (node.x - x02) / (x12 - x02) * dx;
        node.y = (1 - (root.y ? node.y / root.y : 1)) * dy;
      });
    }
    cluster2.separation = function(x2) {
      return arguments.length ? (separation = x2, cluster2) : separation;
    };
    cluster2.size = function(x2) {
      return arguments.length ? (nodeSize = false, dx = +x2[0], dy = +x2[1], cluster2) : nodeSize ? null : [dx, dy];
    };
    cluster2.nodeSize = function(x2) {
      return arguments.length ? (nodeSize = true, dx = +x2[0], dy = +x2[1], cluster2) : nodeSize ? [dx, dy] : null;
    };
    return cluster2;
  }
  function count(node) {
    var sum2 = 0, children2 = node.children, i = children2 && children2.length;
    if (!i) sum2 = 1;
    else while (--i >= 0) sum2 += children2[i].value;
    node.value = sum2;
  }
  function node_count() {
    return this.eachAfter(count);
  }
  function node_each(callback, that) {
    let index2 = -1;
    for (const node of this) {
      callback.call(that, node, ++index2, this);
    }
    return this;
  }
  function node_eachBefore(callback, that) {
    var node = this, nodes = [node], children2, i, index2 = -1;
    while (node = nodes.pop()) {
      callback.call(that, node, ++index2, this);
      if (children2 = node.children) {
        for (i = children2.length - 1; i >= 0; --i) {
          nodes.push(children2[i]);
        }
      }
    }
    return this;
  }
  function node_eachAfter(callback, that) {
    var node = this, nodes = [node], next = [], children2, i, n, index2 = -1;
    while (node = nodes.pop()) {
      next.push(node);
      if (children2 = node.children) {
        for (i = 0, n = children2.length; i < n; ++i) {
          nodes.push(children2[i]);
        }
      }
    }
    while (node = next.pop()) {
      callback.call(that, node, ++index2, this);
    }
    return this;
  }
  function node_find(callback, that) {
    let index2 = -1;
    for (const node of this) {
      if (callback.call(that, node, ++index2, this)) {
        return node;
      }
    }
  }
  function node_sum(value2) {
    return this.eachAfter(function(node) {
      var sum2 = +value2(node.data) || 0, children2 = node.children, i = children2 && children2.length;
      while (--i >= 0) sum2 += children2[i].value;
      node.value = sum2;
    });
  }
  function node_sort(compare2) {
    return this.eachBefore(function(node) {
      if (node.children) {
        node.children.sort(compare2);
      }
    });
  }
  function node_path(end) {
    var start = this, ancestor = leastCommonAncestor(start, end), nodes = [start];
    while (start !== ancestor) {
      start = start.parent;
      nodes.push(start);
    }
    var k = nodes.length;
    while (end !== ancestor) {
      nodes.splice(k, 0, end);
      end = end.parent;
    }
    return nodes;
  }
  function leastCommonAncestor(a2, b2) {
    if (a2 === b2) return a2;
    var aNodes = a2.ancestors(), bNodes = b2.ancestors(), c2 = null;
    a2 = aNodes.pop();
    b2 = bNodes.pop();
    while (a2 === b2) {
      c2 = a2;
      a2 = aNodes.pop();
      b2 = bNodes.pop();
    }
    return c2;
  }
  function node_ancestors() {
    var node = this, nodes = [node];
    while (node = node.parent) {
      nodes.push(node);
    }
    return nodes;
  }
  function node_descendants() {
    return Array.from(this);
  }
  function node_leaves() {
    var leaves = [];
    this.eachBefore(function(node) {
      if (!node.children) {
        leaves.push(node);
      }
    });
    return leaves;
  }
  function node_links() {
    var root = this, links = [];
    root.each(function(node) {
      if (node !== root) {
        links.push({ source: node.parent, target: node });
      }
    });
    return links;
  }
  function* node_iterator() {
    var node = this, current2, next = [node], children2, i, n;
    do {
      current2 = next.reverse(), next = [];
      while (node = current2.pop()) {
        yield node;
        if (children2 = node.children) {
          for (i = 0, n = children2.length; i < n; ++i) {
            next.push(children2[i]);
          }
        }
      }
    } while (next.length);
  }
  function hierarchy(data2, children2) {
    if (data2 instanceof Map) {
      data2 = [void 0, data2];
      if (children2 === void 0) children2 = mapChildren;
    } else if (children2 === void 0) {
      children2 = objectChildren;
    }
    var root = new Node$1(data2), node, nodes = [root], child, childs, i, n;
    while (node = nodes.pop()) {
      if ((childs = children2(node.data)) && (n = (childs = Array.from(childs)).length)) {
        node.children = childs;
        for (i = n - 1; i >= 0; --i) {
          nodes.push(child = childs[i] = new Node$1(childs[i]));
          child.parent = node;
          child.depth = node.depth + 1;
        }
      }
    }
    return root.eachBefore(computeHeight);
  }
  function node_copy() {
    return hierarchy(this).eachBefore(copyData);
  }
  function objectChildren(d) {
    return d.children;
  }
  function mapChildren(d) {
    return Array.isArray(d) ? d[1] : null;
  }
  function copyData(node) {
    if (node.data.value !== void 0) node.value = node.data.value;
    node.data = node.data.data;
  }
  function computeHeight(node) {
    var height2 = 0;
    do
      node.height = height2;
    while ((node = node.parent) && node.height < ++height2);
  }
  function Node$1(data2) {
    this.data = data2;
    this.depth = this.height = 0;
    this.parent = null;
  }
  Node$1.prototype = hierarchy.prototype = {
    constructor: Node$1,
    count: node_count,
    each: node_each,
    eachAfter: node_eachAfter,
    eachBefore: node_eachBefore,
    find: node_find,
    sum: node_sum,
    sort: node_sort,
    path: node_path,
    ancestors: node_ancestors,
    descendants: node_descendants,
    leaves: node_leaves,
    links: node_links,
    copy: node_copy,
    [Symbol.iterator]: node_iterator
  };
  function optional(f) {
    return f == null ? null : required(f);
  }
  function required(f) {
    if (typeof f !== "function") throw new Error();
    return f;
  }
  function constantZero() {
    return 0;
  }
  function constant(x2) {
    return function() {
      return x2;
    };
  }
  const a = 1664525;
  const c = 1013904223;
  const m = 4294967296;
  function lcg() {
    let s = 1;
    return () => (s = (a * s + c) % m) / m;
  }
  function array$2(x2) {
    return typeof x2 === "object" && "length" in x2 ? x2 : Array.from(x2);
  }
  function shuffle(array2, random2) {
    let m2 = array2.length, t, i;
    while (m2) {
      i = random2() * m2-- | 0;
      t = array2[m2];
      array2[m2] = array2[i];
      array2[i] = t;
    }
    return array2;
  }
  function packEncloseRandom(circles, random2) {
    var i = 0, n = (circles = shuffle(Array.from(circles), random2)).length, B2 = [], p, e3;
    while (i < n) {
      p = circles[i];
      if (e3 && enclosesWeak(e3, p)) ++i;
      else e3 = encloseBasis(B2 = extendBasis(B2, p)), i = 0;
    }
    return e3;
  }
  function extendBasis(B2, p) {
    var i, j;
    if (enclosesWeakAll(p, B2)) return [p];
    for (i = 0; i < B2.length; ++i) {
      if (enclosesNot(p, B2[i]) && enclosesWeakAll(encloseBasis2(B2[i], p), B2)) {
        return [B2[i], p];
      }
    }
    for (i = 0; i < B2.length - 1; ++i) {
      for (j = i + 1; j < B2.length; ++j) {
        if (enclosesNot(encloseBasis2(B2[i], B2[j]), p) && enclosesNot(encloseBasis2(B2[i], p), B2[j]) && enclosesNot(encloseBasis2(B2[j], p), B2[i]) && enclosesWeakAll(encloseBasis3(B2[i], B2[j], p), B2)) {
          return [B2[i], B2[j], p];
        }
      }
    }
    throw new Error();
  }
  function enclosesNot(a2, b2) {
    var dr = a2.r - b2.r, dx = b2.x - a2.x, dy = b2.y - a2.y;
    return dr < 0 || dr * dr < dx * dx + dy * dy;
  }
  function enclosesWeak(a2, b2) {
    var dr = a2.r - b2.r + Math.max(a2.r, b2.r, 1) * 1e-9, dx = b2.x - a2.x, dy = b2.y - a2.y;
    return dr > 0 && dr * dr > dx * dx + dy * dy;
  }
  function enclosesWeakAll(a2, B2) {
    for (var i = 0; i < B2.length; ++i) {
      if (!enclosesWeak(a2, B2[i])) {
        return false;
      }
    }
    return true;
  }
  function encloseBasis(B2) {
    switch (B2.length) {
      case 1:
        return encloseBasis1(B2[0]);
      case 2:
        return encloseBasis2(B2[0], B2[1]);
      case 3:
        return encloseBasis3(B2[0], B2[1], B2[2]);
    }
  }
  function encloseBasis1(a2) {
    return {
      x: a2.x,
      y: a2.y,
      r: a2.r
    };
  }
  function encloseBasis2(a2, b2) {
    var x12 = a2.x, y12 = a2.y, r1 = a2.r, x2 = b2.x, y2 = b2.y, r2 = b2.r, x21 = x2 - x12, y21 = y2 - y12, r21 = r2 - r1, l = Math.sqrt(x21 * x21 + y21 * y21);
    return {
      x: (x12 + x2 + x21 / l * r21) / 2,
      y: (y12 + y2 + y21 / l * r21) / 2,
      r: (l + r1 + r2) / 2
    };
  }
  function encloseBasis3(a2, b2, c2) {
    var x12 = a2.x, y12 = a2.y, r1 = a2.r, x2 = b2.x, y2 = b2.y, r2 = b2.r, x3 = c2.x, y3 = c2.y, r3 = c2.r, a22 = x12 - x2, a3 = x12 - x3, b22 = y12 - y2, b3 = y12 - y3, c22 = r2 - r1, c3 = r3 - r1, d1 = x12 * x12 + y12 * y12 - r1 * r1, d2 = d1 - x2 * x2 - y2 * y2 + r2 * r2, d3 = d1 - x3 * x3 - y3 * y3 + r3 * r3, ab = a3 * b22 - a22 * b3, xa = (b22 * d3 - b3 * d2) / (ab * 2) - x12, xb = (b3 * c22 - b22 * c3) / ab, ya = (a3 * d2 - a22 * d3) / (ab * 2) - y12, yb = (a22 * c3 - a3 * c22) / ab, A5 = xb * xb + yb * yb - 1, B2 = 2 * (r1 + xa * xb + ya * yb), C3 = xa * xa + ya * ya - r1 * r1, r = -(Math.abs(A5) > 1e-6 ? (B2 + Math.sqrt(B2 * B2 - 4 * A5 * C3)) / (2 * A5) : C3 / B2);
    return {
      x: x12 + xa + xb * r,
      y: y12 + ya + yb * r,
      r
    };
  }
  function place(b2, a2, c2) {
    var dx = b2.x - a2.x, x2, a22, dy = b2.y - a2.y, y2, b22, d2 = dx * dx + dy * dy;
    if (d2) {
      a22 = a2.r + c2.r, a22 *= a22;
      b22 = b2.r + c2.r, b22 *= b22;
      if (a22 > b22) {
        x2 = (d2 + b22 - a22) / (2 * d2);
        y2 = Math.sqrt(Math.max(0, b22 / d2 - x2 * x2));
        c2.x = b2.x - x2 * dx - y2 * dy;
        c2.y = b2.y - x2 * dy + y2 * dx;
      } else {
        x2 = (d2 + a22 - b22) / (2 * d2);
        y2 = Math.sqrt(Math.max(0, a22 / d2 - x2 * x2));
        c2.x = a2.x + x2 * dx - y2 * dy;
        c2.y = a2.y + x2 * dy + y2 * dx;
      }
    } else {
      c2.x = a2.x + c2.r;
      c2.y = a2.y;
    }
  }
  function intersects(a2, b2) {
    var dr = a2.r + b2.r - 1e-6, dx = b2.x - a2.x, dy = b2.y - a2.y;
    return dr > 0 && dr * dr > dx * dx + dy * dy;
  }
  function score(node) {
    var a2 = node._, b2 = node.next._, ab = a2.r + b2.r, dx = (a2.x * b2.r + b2.x * a2.r) / ab, dy = (a2.y * b2.r + b2.y * a2.r) / ab;
    return dx * dx + dy * dy;
  }
  function Node(circle2) {
    this._ = circle2;
    this.next = null;
    this.previous = null;
  }
  function packSiblingsRandom(circles, random2) {
    if (!(n = (circles = array$2(circles)).length)) return 0;
    var a2, b2, c2, n, aa, ca, i, j, k, sj, sk;
    a2 = circles[0], a2.x = 0, a2.y = 0;
    if (!(n > 1)) return a2.r;
    b2 = circles[1], a2.x = -b2.r, b2.x = a2.r, b2.y = 0;
    if (!(n > 2)) return a2.r + b2.r;
    place(b2, a2, c2 = circles[2]);
    a2 = new Node(a2), b2 = new Node(b2), c2 = new Node(c2);
    a2.next = c2.previous = b2;
    b2.next = a2.previous = c2;
    c2.next = b2.previous = a2;
    pack: for (i = 3; i < n; ++i) {
      place(a2._, b2._, c2 = circles[i]), c2 = new Node(c2);
      j = b2.next, k = a2.previous, sj = b2._.r, sk = a2._.r;
      do {
        if (sj <= sk) {
          if (intersects(j._, c2._)) {
            b2 = j, a2.next = b2, b2.previous = a2, --i;
            continue pack;
          }
          sj += j._.r, j = j.next;
        } else {
          if (intersects(k._, c2._)) {
            a2 = k, a2.next = b2, b2.previous = a2, --i;
            continue pack;
          }
          sk += k._.r, k = k.previous;
        }
      } while (j !== k.next);
      c2.previous = a2, c2.next = b2, a2.next = b2.previous = b2 = c2;
      aa = score(a2);
      while ((c2 = c2.next) !== b2) {
        if ((ca = score(c2)) < aa) {
          a2 = c2, aa = ca;
        }
      }
      b2 = a2.next;
    }
    a2 = [b2._], c2 = b2;
    while ((c2 = c2.next) !== b2) a2.push(c2._);
    c2 = packEncloseRandom(a2, random2);
    for (i = 0; i < n; ++i) a2 = circles[i], a2.x -= c2.x, a2.y -= c2.y;
    return c2.r;
  }
  function defaultRadius(d) {
    return Math.sqrt(d.value);
  }
  function pack() {
    var radius2 = null, dx = 1, dy = 1, padding2 = constantZero;
    function pack2(root) {
      const random2 = lcg();
      root.x = dx / 2, root.y = dy / 2;
      if (radius2) {
        root.eachBefore(radiusLeaf(radius2)).eachAfter(packChildrenRandom(padding2, 0.5, random2)).eachBefore(translateChild(1));
      } else {
        root.eachBefore(radiusLeaf(defaultRadius)).eachAfter(packChildrenRandom(constantZero, 1, random2)).eachAfter(packChildrenRandom(padding2, root.r / Math.min(dx, dy), random2)).eachBefore(translateChild(Math.min(dx, dy) / (2 * root.r)));
      }
      return root;
    }
    pack2.radius = function(x2) {
      return arguments.length ? (radius2 = optional(x2), pack2) : radius2;
    };
    pack2.size = function(x2) {
      return arguments.length ? (dx = +x2[0], dy = +x2[1], pack2) : [dx, dy];
    };
    pack2.padding = function(x2) {
      return arguments.length ? (padding2 = typeof x2 === "function" ? x2 : constant(+x2), pack2) : padding2;
    };
    return pack2;
  }
  function radiusLeaf(radius2) {
    return function(node) {
      if (!node.children) {
        node.r = Math.max(0, +radius2(node) || 0);
      }
    };
  }
  function packChildrenRandom(padding2, k, random2) {
    return function(node) {
      if (children2 = node.children) {
        var children2, i, n = children2.length, r = padding2(node) * k || 0, e3;
        if (r) for (i = 0; i < n; ++i) children2[i].r += r;
        e3 = packSiblingsRandom(children2, random2);
        if (r) for (i = 0; i < n; ++i) children2[i].r -= r;
        node.r = e3 + r;
      }
    };
  }
  function translateChild(k) {
    return function(node) {
      var parent = node.parent;
      node.r *= k;
      if (parent) {
        node.x = parent.x + k * node.x;
        node.y = parent.y + k * node.y;
      }
    };
  }
  function roundNode(node) {
    node.x0 = Math.round(node.x0);
    node.y0 = Math.round(node.y0);
    node.x1 = Math.round(node.x1);
    node.y1 = Math.round(node.y1);
  }
  function treemapDice(parent, x02, y02, x12, y12) {
    var nodes = parent.children, node, i = -1, n = nodes.length, k = parent.value && (x12 - x02) / parent.value;
    while (++i < n) {
      node = nodes[i], node.y0 = y02, node.y1 = y12;
      node.x0 = x02, node.x1 = x02 += node.value * k;
    }
  }
  function partition$1() {
    var dx = 1, dy = 1, padding2 = 0, round = false;
    function partition2(root) {
      var n = root.height + 1;
      root.x0 = root.y0 = padding2;
      root.x1 = dx;
      root.y1 = dy / n;
      root.eachBefore(positionNode(dy, n));
      if (round) root.eachBefore(roundNode);
      return root;
    }
    function positionNode(dy2, n) {
      return function(node) {
        if (node.children) {
          treemapDice(node, node.x0, dy2 * (node.depth + 1) / n, node.x1, dy2 * (node.depth + 2) / n);
        }
        var x02 = node.x0, y02 = node.y0, x12 = node.x1 - padding2, y12 = node.y1 - padding2;
        if (x12 < x02) x02 = x12 = (x02 + x12) / 2;
        if (y12 < y02) y02 = y12 = (y02 + y12) / 2;
        node.x0 = x02;
        node.y0 = y02;
        node.x1 = x12;
        node.y1 = y12;
      };
    }
    partition2.round = function(x2) {
      return arguments.length ? (round = !!x2, partition2) : round;
    };
    partition2.size = function(x2) {
      return arguments.length ? (dx = +x2[0], dy = +x2[1], partition2) : [dx, dy];
    };
    partition2.padding = function(x2) {
      return arguments.length ? (padding2 = +x2, partition2) : padding2;
    };
    return partition2;
  }
  var preroot = { depth: -1 }, ambiguous = {}, imputed = {};
  function defaultId(d) {
    return d.id;
  }
  function defaultParentId(d) {
    return d.parentId;
  }
  function stratify() {
    var id2 = defaultId, parentId = defaultParentId, path2;
    function stratify2(data2) {
      var nodes = Array.from(data2), currentId = id2, currentParentId = parentId, n, d, i, root, parent, node, nodeId, nodeKey, nodeByKey = /* @__PURE__ */ new Map();
      if (path2 != null) {
        const I = nodes.map((d2, i2) => normalize$1(path2(d2, i2, data2)));
        const P = I.map(parentof);
        const S = new Set(I).add("");
        for (const i2 of P) {
          if (!S.has(i2)) {
            S.add(i2);
            I.push(i2);
            P.push(parentof(i2));
            nodes.push(imputed);
          }
        }
        currentId = (_, i2) => I[i2];
        currentParentId = (_, i2) => P[i2];
      }
      for (i = 0, n = nodes.length; i < n; ++i) {
        d = nodes[i], node = nodes[i] = new Node$1(d);
        if ((nodeId = currentId(d, i, data2)) != null && (nodeId += "")) {
          nodeKey = node.id = nodeId;
          nodeByKey.set(nodeKey, nodeByKey.has(nodeKey) ? ambiguous : node);
        }
        if ((nodeId = currentParentId(d, i, data2)) != null && (nodeId += "")) {
          node.parent = nodeId;
        }
      }
      for (i = 0; i < n; ++i) {
        node = nodes[i];
        if (nodeId = node.parent) {
          parent = nodeByKey.get(nodeId);
          if (!parent) throw new Error("missing: " + nodeId);
          if (parent === ambiguous) throw new Error("ambiguous: " + nodeId);
          if (parent.children) parent.children.push(node);
          else parent.children = [node];
          node.parent = parent;
        } else {
          if (root) throw new Error("multiple roots");
          root = node;
        }
      }
      if (!root) throw new Error("no root");
      if (path2 != null) {
        while (root.data === imputed && root.children.length === 1) {
          root = root.children[0], --n;
        }
        for (let i2 = nodes.length - 1; i2 >= 0; --i2) {
          node = nodes[i2];
          if (node.data !== imputed) break;
          node.data = null;
        }
      }
      root.parent = preroot;
      root.eachBefore(function(node2) {
        node2.depth = node2.parent.depth + 1;
        --n;
      }).eachBefore(computeHeight);
      root.parent = null;
      if (n > 0) throw new Error("cycle");
      return root;
    }
    stratify2.id = function(x2) {
      return arguments.length ? (id2 = optional(x2), stratify2) : id2;
    };
    stratify2.parentId = function(x2) {
      return arguments.length ? (parentId = optional(x2), stratify2) : parentId;
    };
    stratify2.path = function(x2) {
      return arguments.length ? (path2 = optional(x2), stratify2) : path2;
    };
    return stratify2;
  }
  function normalize$1(path2) {
    path2 = `${path2}`;
    let i = path2.length;
    if (slash(path2, i - 1) && !slash(path2, i - 2)) path2 = path2.slice(0, -1);
    return path2[0] === "/" ? path2 : `/${path2}`;
  }
  function parentof(path2) {
    let i = path2.length;
    if (i < 2) return "";
    while (--i > 1) if (slash(path2, i)) break;
    return path2.slice(0, i);
  }
  function slash(path2, i) {
    if (path2[i] === "/") {
      let k = 0;
      while (i > 0 && path2[--i] === "\\") ++k;
      if ((k & 1) === 0) return true;
    }
    return false;
  }
  function defaultSeparation$1(a2, b2) {
    return a2.parent === b2.parent ? 1 : 2;
  }
  function nextLeft(v) {
    var children2 = v.children;
    return children2 ? children2[0] : v.t;
  }
  function nextRight(v) {
    var children2 = v.children;
    return children2 ? children2[children2.length - 1] : v.t;
  }
  function moveSubtree(wm, wp, shift) {
    var change2 = shift / (wp.i - wm.i);
    wp.c -= change2;
    wp.s += shift;
    wm.c += change2;
    wp.z += shift;
    wp.m += shift;
  }
  function executeShifts(v) {
    var shift = 0, change2 = 0, children2 = v.children, i = children2.length, w2;
    while (--i >= 0) {
      w2 = children2[i];
      w2.z += shift;
      w2.m += shift;
      shift += w2.s + (change2 += w2.c);
    }
  }
  function nextAncestor(vim, v, ancestor) {
    return vim.a.parent === v.parent ? vim.a : ancestor;
  }
  function TreeNode(node, i) {
    this._ = node;
    this.parent = null;
    this.children = null;
    this.A = null;
    this.a = this;
    this.z = 0;
    this.m = 0;
    this.c = 0;
    this.s = 0;
    this.t = null;
    this.i = i;
  }
  TreeNode.prototype = Object.create(Node$1.prototype);
  function treeRoot(root) {
    var tree2 = new TreeNode(root, 0), node, nodes = [tree2], child, children2, i, n;
    while (node = nodes.pop()) {
      if (children2 = node._.children) {
        node.children = new Array(n = children2.length);
        for (i = n - 1; i >= 0; --i) {
          nodes.push(child = node.children[i] = new TreeNode(children2[i], i));
          child.parent = node;
        }
      }
    }
    (tree2.parent = new TreeNode(null, 0)).children = [tree2];
    return tree2;
  }
  function tree$1() {
    var separation = defaultSeparation$1, dx = 1, dy = 1, nodeSize = null;
    function tree2(root) {
      var t = treeRoot(root);
      t.eachAfter(firstWalk), t.parent.m = -t.z;
      t.eachBefore(secondWalk);
      if (nodeSize) root.eachBefore(sizeNode);
      else {
        var left = root, right = root, bottom = root;
        root.eachBefore(function(node) {
          if (node.x < left.x) left = node;
          if (node.x > right.x) right = node;
          if (node.depth > bottom.depth) bottom = node;
        });
        var s = left === right ? 1 : separation(left, right) / 2, tx2 = s - left.x, kx = dx / (right.x + s + tx2), ky = dy / (bottom.depth || 1);
        root.eachBefore(function(node) {
          node.x = (node.x + tx2) * kx;
          node.y = node.depth * ky;
        });
      }
      return root;
    }
    function firstWalk(v) {
      var children2 = v.children, siblings = v.parent.children, w2 = v.i ? siblings[v.i - 1] : null;
      if (children2) {
        executeShifts(v);
        var midpoint = (children2[0].z + children2[children2.length - 1].z) / 2;
        if (w2) {
          v.z = w2.z + separation(v._, w2._);
          v.m = v.z - midpoint;
        } else {
          v.z = midpoint;
        }
      } else if (w2) {
        v.z = w2.z + separation(v._, w2._);
      }
      v.parent.A = apportion(v, w2, v.parent.A || siblings[0]);
    }
    function secondWalk(v) {
      v._.x = v.z + v.parent.m;
      v.m += v.parent.m;
    }
    function apportion(v, w2, ancestor) {
      if (w2) {
        var vip = v, vop = v, vim = w2, vom = vip.parent.children[0], sip = vip.m, sop = vop.m, sim = vim.m, som = vom.m, shift;
        while (vim = nextRight(vim), vip = nextLeft(vip), vim && vip) {
          vom = nextLeft(vom);
          vop = nextRight(vop);
          vop.a = v;
          shift = vim.z + sim - vip.z - sip + separation(vim._, vip._);
          if (shift > 0) {
            moveSubtree(nextAncestor(vim, v, ancestor), v, shift);
            sip += shift;
            sop += shift;
          }
          sim += vim.m;
          sip += vip.m;
          som += vom.m;
          sop += vop.m;
        }
        if (vim && !nextRight(vop)) {
          vop.t = vim;
          vop.m += sim - sop;
        }
        if (vip && !nextLeft(vom)) {
          vom.t = vip;
          vom.m += sip - som;
          ancestor = v;
        }
      }
      return ancestor;
    }
    function sizeNode(node) {
      node.x *= dx;
      node.y = node.depth * dy;
    }
    tree2.separation = function(x2) {
      return arguments.length ? (separation = x2, tree2) : separation;
    };
    tree2.size = function(x2) {
      return arguments.length ? (nodeSize = false, dx = +x2[0], dy = +x2[1], tree2) : nodeSize ? null : [dx, dy];
    };
    tree2.nodeSize = function(x2) {
      return arguments.length ? (nodeSize = true, dx = +x2[0], dy = +x2[1], tree2) : nodeSize ? [dx, dy] : null;
    };
    return tree2;
  }
  function treemapSlice(parent, x02, y02, x12, y12) {
    var nodes = parent.children, node, i = -1, n = nodes.length, k = parent.value && (y12 - y02) / parent.value;
    while (++i < n) {
      node = nodes[i], node.x0 = x02, node.x1 = x12;
      node.y0 = y02, node.y1 = y02 += node.value * k;
    }
  }
  var phi = (1 + Math.sqrt(5)) / 2;
  function squarifyRatio(ratio, parent, x02, y02, x12, y12) {
    var rows = [], nodes = parent.children, row, nodeValue, i0 = 0, i1 = 0, n = nodes.length, dx, dy, value2 = parent.value, sumValue, minValue, maxValue, newRatio, minRatio, alpha, beta;
    while (i0 < n) {
      dx = x12 - x02, dy = y12 - y02;
      do
        sumValue = nodes[i1++].value;
      while (!sumValue && i1 < n);
      minValue = maxValue = sumValue;
      alpha = Math.max(dy / dx, dx / dy) / (value2 * ratio);
      beta = sumValue * sumValue * alpha;
      minRatio = Math.max(maxValue / beta, beta / minValue);
      for (; i1 < n; ++i1) {
        sumValue += nodeValue = nodes[i1].value;
        if (nodeValue < minValue) minValue = nodeValue;
        if (nodeValue > maxValue) maxValue = nodeValue;
        beta = sumValue * sumValue * alpha;
        newRatio = Math.max(maxValue / beta, beta / minValue);
        if (newRatio > minRatio) {
          sumValue -= nodeValue;
          break;
        }
        minRatio = newRatio;
      }
      rows.push(row = { value: sumValue, dice: dx < dy, children: nodes.slice(i0, i1) });
      if (row.dice) treemapDice(row, x02, y02, x12, value2 ? y02 += dy * sumValue / value2 : y12);
      else treemapSlice(row, x02, y02, value2 ? x02 += dx * sumValue / value2 : x12, y12);
      value2 -= sumValue, i0 = i1;
    }
    return rows;
  }
  const treemapSquarify = function custom2(ratio) {
    function squarify(parent, x02, y02, x12, y12) {
      squarifyRatio(ratio, parent, x02, y02, x12, y12);
    }
    squarify.ratio = function(x2) {
      return custom2((x2 = +x2) > 1 ? x2 : 1);
    };
    return squarify;
  }(phi);
  function treemap() {
    var tile = treemapSquarify, round = false, dx = 1, dy = 1, paddingStack = [0], paddingInner2 = constantZero, paddingTop = constantZero, paddingRight = constantZero, paddingBottom = constantZero, paddingLeft = constantZero;
    function treemap2(root) {
      root.x0 = root.y0 = 0;
      root.x1 = dx;
      root.y1 = dy;
      root.eachBefore(positionNode);
      paddingStack = [0];
      if (round) root.eachBefore(roundNode);
      return root;
    }
    function positionNode(node) {
      var p = paddingStack[node.depth], x02 = node.x0 + p, y02 = node.y0 + p, x12 = node.x1 - p, y12 = node.y1 - p;
      if (x12 < x02) x02 = x12 = (x02 + x12) / 2;
      if (y12 < y02) y02 = y12 = (y02 + y12) / 2;
      node.x0 = x02;
      node.y0 = y02;
      node.x1 = x12;
      node.y1 = y12;
      if (node.children) {
        p = paddingStack[node.depth + 1] = paddingInner2(node) / 2;
        x02 += paddingLeft(node) - p;
        y02 += paddingTop(node) - p;
        x12 -= paddingRight(node) - p;
        y12 -= paddingBottom(node) - p;
        if (x12 < x02) x02 = x12 = (x02 + x12) / 2;
        if (y12 < y02) y02 = y12 = (y02 + y12) / 2;
        tile(node, x02, y02, x12, y12);
      }
    }
    treemap2.round = function(x2) {
      return arguments.length ? (round = !!x2, treemap2) : round;
    };
    treemap2.size = function(x2) {
      return arguments.length ? (dx = +x2[0], dy = +x2[1], treemap2) : [dx, dy];
    };
    treemap2.tile = function(x2) {
      return arguments.length ? (tile = required(x2), treemap2) : tile;
    };
    treemap2.padding = function(x2) {
      return arguments.length ? treemap2.paddingInner(x2).paddingOuter(x2) : treemap2.paddingInner();
    };
    treemap2.paddingInner = function(x2) {
      return arguments.length ? (paddingInner2 = typeof x2 === "function" ? x2 : constant(+x2), treemap2) : paddingInner2;
    };
    treemap2.paddingOuter = function(x2) {
      return arguments.length ? treemap2.paddingTop(x2).paddingRight(x2).paddingBottom(x2).paddingLeft(x2) : treemap2.paddingTop();
    };
    treemap2.paddingTop = function(x2) {
      return arguments.length ? (paddingTop = typeof x2 === "function" ? x2 : constant(+x2), treemap2) : paddingTop;
    };
    treemap2.paddingRight = function(x2) {
      return arguments.length ? (paddingRight = typeof x2 === "function" ? x2 : constant(+x2), treemap2) : paddingRight;
    };
    treemap2.paddingBottom = function(x2) {
      return arguments.length ? (paddingBottom = typeof x2 === "function" ? x2 : constant(+x2), treemap2) : paddingBottom;
    };
    treemap2.paddingLeft = function(x2) {
      return arguments.length ? (paddingLeft = typeof x2 === "function" ? x2 : constant(+x2), treemap2) : paddingLeft;
    };
    return treemap2;
  }
  function treemapBinary(parent, x02, y02, x12, y12) {
    var nodes = parent.children, i, n = nodes.length, sum2, sums = new Array(n + 1);
    for (sums[0] = sum2 = i = 0; i < n; ++i) {
      sums[i + 1] = sum2 += nodes[i].value;
    }
    partition2(0, n, parent.value, x02, y02, x12, y12);
    function partition2(i2, j, value2, x03, y03, x13, y13) {
      if (i2 >= j - 1) {
        var node = nodes[i2];
        node.x0 = x03, node.y0 = y03;
        node.x1 = x13, node.y1 = y13;
        return;
      }
      var valueOffset = sums[i2], valueTarget = value2 / 2 + valueOffset, k = i2 + 1, hi = j - 1;
      while (k < hi) {
        var mid = k + hi >>> 1;
        if (sums[mid] < valueTarget) k = mid + 1;
        else hi = mid;
      }
      if (valueTarget - sums[k - 1] < sums[k] - valueTarget && i2 + 1 < k) --k;
      var valueLeft = sums[k] - valueOffset, valueRight = value2 - valueLeft;
      if (x13 - x03 > y13 - y03) {
        var xk = value2 ? (x03 * valueRight + x13 * valueLeft) / value2 : x13;
        partition2(i2, k, valueLeft, x03, y03, xk, y13);
        partition2(k, j, valueRight, xk, y03, x13, y13);
      } else {
        var yk = value2 ? (y03 * valueRight + y13 * valueLeft) / value2 : y13;
        partition2(i2, k, valueLeft, x03, y03, x13, yk);
        partition2(k, j, valueRight, x03, yk, x13, y13);
      }
    }
  }
  function treemapSliceDice(parent, x02, y02, x12, y12) {
    (parent.depth & 1 ? treemapSlice : treemapDice)(parent, x02, y02, x12, y12);
  }
  const treemapResquarify = function custom2(ratio) {
    function resquarify(parent, x02, y02, x12, y12) {
      if ((rows = parent._squarify) && rows.ratio === ratio) {
        var rows, row, nodes, i, j = -1, n, m2 = rows.length, value2 = parent.value;
        while (++j < m2) {
          row = rows[j], nodes = row.children;
          for (i = row.value = 0, n = nodes.length; i < n; ++i) row.value += nodes[i].value;
          if (row.dice) treemapDice(row, x02, y02, x12, value2 ? y02 += (y12 - y02) * row.value / value2 : y12);
          else treemapSlice(row, x02, y02, value2 ? x02 += (x12 - x02) * row.value / value2 : x12, y12);
          value2 -= row.value;
        }
      } else {
        parent._squarify = rows = squarifyRatio(ratio, parent, x02, y02, x12, y12);
        rows.ratio = ratio;
      }
    }
    resquarify.ratio = function(x2) {
      return custom2((x2 = +x2) > 1 ? x2 : 1);
    };
    return resquarify;
  }(phi);
  function lookup$2(tree2, key2, filter2) {
    const map2 = {};
    tree2.each((node) => {
      const t = node.data;
      if (filter2(t)) map2[key2(t)] = node;
    });
    tree2.lookup = map2;
    return tree2;
  }
  function Nest(params2) {
    Transform.call(this, null, params2);
  }
  Nest.Definition = {
    "type": "Nest",
    "metadata": {
      "treesource": true,
      "changes": true
    },
    "params": [{
      "name": "keys",
      "type": "field",
      "array": true
    }, {
      "name": "generate",
      "type": "boolean"
    }]
  };
  const children$2 = (n) => n.values;
  inherits(Nest, Transform, {
    transform(_, pulse2) {
      if (!pulse2.source) {
        error$1("Nest transform requires an upstream data source.");
      }
      var gen = _.generate, mod = _.modified(), out = pulse2.clone(), tree2 = this.value;
      if (!tree2 || mod || pulse2.changed()) {
        if (tree2) {
          tree2.each((node) => {
            if (node.children && isTuple(node.data)) {
              out.rem.push(node.data);
            }
          });
        }
        this.value = tree2 = hierarchy({
          values: array$5(_.keys).reduce((n, k) => {
            n.key(k);
            return n;
          }, nest()).entries(out.source)
        }, children$2);
        if (gen) {
          tree2.each((node) => {
            if (node.children) {
              node = ingest$1(node.data);
              out.add.push(node);
              out.source.push(node);
            }
          });
        }
        lookup$2(tree2, tupleid, tupleid);
      }
      out.source.root = tree2;
      return out;
    }
  });
  function nest() {
    const keys2 = [], nest2 = {
      entries: (array2) => entries2(apply2(array2, 0), 0),
      key: (d) => (keys2.push(d), nest2)
    };
    function apply2(array2, depth) {
      if (depth >= keys2.length) {
        return array2;
      }
      const n = array2.length, key2 = keys2[depth++], valuesByKey = {}, result = {};
      let i = -1, keyValue, value2, values2;
      while (++i < n) {
        keyValue = key2(value2 = array2[i]) + "";
        if (values2 = valuesByKey[keyValue]) {
          values2.push(value2);
        } else {
          valuesByKey[keyValue] = [value2];
        }
      }
      for (keyValue in valuesByKey) {
        result[keyValue] = apply2(valuesByKey[keyValue], depth);
      }
      return result;
    }
    function entries2(map2, depth) {
      if (++depth > keys2.length) return map2;
      const array2 = [];
      for (const key2 in map2) {
        array2.push({
          key: key2,
          values: entries2(map2[key2], depth)
        });
      }
      return array2;
    }
    return nest2;
  }
  function HierarchyLayout(params2) {
    Transform.call(this, null, params2);
  }
  const defaultSeparation = (a2, b2) => a2.parent === b2.parent ? 1 : 2;
  inherits(HierarchyLayout, Transform, {
    transform(_, pulse2) {
      if (!pulse2.source || !pulse2.source.root) {
        error$1(this.constructor.name + " transform requires a backing tree data source.");
      }
      const layout = this.layout(_.method), fields = this.fields, root = pulse2.source.root, as = _.as || fields;
      if (_.field) root.sum(_.field);
      else root.count();
      if (_.sort) root.sort(stableCompare(_.sort, (d) => d.data));
      setParams(layout, this.params, _);
      if (layout.separation) {
        layout.separation(_.separation !== false ? defaultSeparation : one$2);
      }
      try {
        this.value = layout(root);
      } catch (err) {
        error$1(err);
      }
      root.each((node) => setFields(node, fields, as));
      return pulse2.reflow(_.modified()).modifies(as).modifies("leaf");
    }
  });
  function setParams(layout, params2, _) {
    for (let p, i = 0, n = params2.length; i < n; ++i) {
      p = params2[i];
      if (p in _) layout[p](_[p]);
    }
  }
  function setFields(node, fields, as) {
    const t = node.data, n = fields.length - 1;
    for (let i = 0; i < n; ++i) {
      t[as[i]] = node[fields[i]];
    }
    t[as[n]] = node.children ? node.children.length : 0;
  }
  const Output$3 = ["x", "y", "r", "depth", "children"];
  function Pack(params2) {
    HierarchyLayout.call(this, params2);
  }
  Pack.Definition = {
    "type": "Pack",
    "metadata": {
      "tree": true,
      "modifies": true
    },
    "params": [{
      "name": "field",
      "type": "field"
    }, {
      "name": "sort",
      "type": "compare"
    }, {
      "name": "padding",
      "type": "number",
      "default": 0
    }, {
      "name": "radius",
      "type": "field",
      "default": null
    }, {
      "name": "size",
      "type": "number",
      "array": true,
      "length": 2
    }, {
      "name": "as",
      "type": "string",
      "array": true,
      "length": Output$3.length,
      "default": Output$3
    }]
  };
  inherits(Pack, HierarchyLayout, {
    layout: pack,
    params: ["radius", "size", "padding"],
    fields: Output$3
  });
  const Output$2 = ["x0", "y0", "x1", "y1", "depth", "children"];
  function Partition(params2) {
    HierarchyLayout.call(this, params2);
  }
  Partition.Definition = {
    "type": "Partition",
    "metadata": {
      "tree": true,
      "modifies": true
    },
    "params": [{
      "name": "field",
      "type": "field"
    }, {
      "name": "sort",
      "type": "compare"
    }, {
      "name": "padding",
      "type": "number",
      "default": 0
    }, {
      "name": "round",
      "type": "boolean",
      "default": false
    }, {
      "name": "size",
      "type": "number",
      "array": true,
      "length": 2
    }, {
      "name": "as",
      "type": "string",
      "array": true,
      "length": Output$2.length,
      "default": Output$2
    }]
  };
  inherits(Partition, HierarchyLayout, {
    layout: partition$1,
    params: ["size", "round", "padding"],
    fields: Output$2
  });
  function Stratify(params2) {
    Transform.call(this, null, params2);
  }
  Stratify.Definition = {
    "type": "Stratify",
    "metadata": {
      "treesource": true
    },
    "params": [{
      "name": "key",
      "type": "field",
      "required": true
    }, {
      "name": "parentKey",
      "type": "field",
      "required": true
    }]
  };
  inherits(Stratify, Transform, {
    transform(_, pulse2) {
      if (!pulse2.source) {
        error$1("Stratify transform requires an upstream data source.");
      }
      let tree2 = this.value;
      const mod = _.modified(), out = pulse2.fork(pulse2.ALL).materialize(pulse2.SOURCE), run2 = !tree2 || mod || pulse2.changed(pulse2.ADD_REM) || pulse2.modified(_.key.fields) || pulse2.modified(_.parentKey.fields);
      out.source = out.source.slice();
      if (run2) {
        tree2 = out.source.length ? lookup$2(stratify().id(_.key).parentId(_.parentKey)(out.source), _.key, truthy) : lookup$2(stratify()([{}]), _.key, _.key);
      }
      out.source.root = this.value = tree2;
      return out;
    }
  });
  const Layouts = {
    tidy: tree$1,
    cluster
  };
  const Output$1$1 = ["x", "y", "depth", "children"];
  function Tree(params2) {
    HierarchyLayout.call(this, params2);
  }
  Tree.Definition = {
    "type": "Tree",
    "metadata": {
      "tree": true,
      "modifies": true
    },
    "params": [{
      "name": "field",
      "type": "field"
    }, {
      "name": "sort",
      "type": "compare"
    }, {
      "name": "method",
      "type": "enum",
      "default": "tidy",
      "values": ["tidy", "cluster"]
    }, {
      "name": "size",
      "type": "number",
      "array": true,
      "length": 2
    }, {
      "name": "nodeSize",
      "type": "number",
      "array": true,
      "length": 2
    }, {
      "name": "separation",
      "type": "boolean",
      "default": true
    }, {
      "name": "as",
      "type": "string",
      "array": true,
      "length": Output$1$1.length,
      "default": Output$1$1
    }]
  };
  inherits(Tree, HierarchyLayout, {
    /**
     * Tree layout generator. Supports both 'tidy' and 'cluster' layouts.
     */
    layout(method2) {
      const m2 = method2 || "tidy";
      if (has$1(Layouts, m2)) return Layouts[m2]();
      else error$1("Unrecognized Tree layout method: " + m2);
    },
    params: ["size", "nodeSize"],
    fields: Output$1$1
  });
  function TreeLinks(params2) {
    Transform.call(this, [], params2);
  }
  TreeLinks.Definition = {
    "type": "TreeLinks",
    "metadata": {
      "tree": true,
      "generates": true,
      "changes": true
    },
    "params": []
  };
  inherits(TreeLinks, Transform, {
    transform(_, pulse2) {
      const links = this.value, tree2 = pulse2.source && pulse2.source.root, out = pulse2.fork(pulse2.NO_SOURCE), lut = {};
      if (!tree2) error$1("TreeLinks transform requires a tree data source.");
      if (pulse2.changed(pulse2.ADD_REM)) {
        out.rem = links;
        pulse2.visit(pulse2.SOURCE, (t) => lut[tupleid(t)] = 1);
        tree2.each((node) => {
          const t = node.data, p = node.parent && node.parent.data;
          if (p && lut[tupleid(t)] && lut[tupleid(p)]) {
            out.add.push(ingest$1({
              source: p,
              target: t
            }));
          }
        });
        this.value = out.add;
      } else if (pulse2.changed(pulse2.MOD)) {
        pulse2.visit(pulse2.MOD, (t) => lut[tupleid(t)] = 1);
        links.forEach((link2) => {
          if (lut[tupleid(link2.source)] || lut[tupleid(link2.target)]) {
            out.mod.push(link2);
          }
        });
      }
      return out;
    }
  });
  const Tiles = {
    binary: treemapBinary,
    dice: treemapDice,
    slice: treemapSlice,
    slicedice: treemapSliceDice,
    squarify: treemapSquarify,
    resquarify: treemapResquarify
  };
  const Output$4 = ["x0", "y0", "x1", "y1", "depth", "children"];
  function Treemap(params2) {
    HierarchyLayout.call(this, params2);
  }
  Treemap.Definition = {
    "type": "Treemap",
    "metadata": {
      "tree": true,
      "modifies": true
    },
    "params": [{
      "name": "field",
      "type": "field"
    }, {
      "name": "sort",
      "type": "compare"
    }, {
      "name": "method",
      "type": "enum",
      "default": "squarify",
      "values": ["squarify", "resquarify", "binary", "dice", "slice", "slicedice"]
    }, {
      "name": "padding",
      "type": "number",
      "default": 0
    }, {
      "name": "paddingInner",
      "type": "number",
      "default": 0
    }, {
      "name": "paddingOuter",
      "type": "number",
      "default": 0
    }, {
      "name": "paddingTop",
      "type": "number",
      "default": 0
    }, {
      "name": "paddingRight",
      "type": "number",
      "default": 0
    }, {
      "name": "paddingBottom",
      "type": "number",
      "default": 0
    }, {
      "name": "paddingLeft",
      "type": "number",
      "default": 0
    }, {
      "name": "ratio",
      "type": "number",
      "default": 1.618033988749895
    }, {
      "name": "round",
      "type": "boolean",
      "default": false
    }, {
      "name": "size",
      "type": "number",
      "array": true,
      "length": 2
    }, {
      "name": "as",
      "type": "string",
      "array": true,
      "length": Output$4.length,
      "default": Output$4
    }]
  };
  inherits(Treemap, HierarchyLayout, {
    /**
     * Treemap layout generator. Adds 'method' and 'ratio' parameters
     * to configure the underlying tile method.
     */
    layout() {
      const x2 = treemap();
      x2.ratio = (_) => {
        const t = x2.tile();
        if (t.ratio) x2.tile(t.ratio(_));
      };
      x2.method = (_) => {
        if (has$1(Tiles, _)) x2.tile(Tiles[_]);
        else error$1("Unrecognized Treemap layout method: " + _);
      };
      return x2;
    },
    params: ["method", "ratio", "size", "round", "padding", "paddingInner", "paddingOuter", "paddingTop", "paddingRight", "paddingBottom", "paddingLeft"],
    fields: Output$4
  });
  const tree = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
    __proto__: null,
    nest: Nest,
    pack: Pack,
    partition: Partition,
    stratify: Stratify,
    tree: Tree,
    treelinks: TreeLinks,
    treemap: Treemap
  }, Symbol.toStringTag, { value: "Module" }));
  const ALPHA_MASK = 4278190080;
  function baseBitmaps($2, data2) {
    const bitmap = $2.bitmap();
    (data2 || []).forEach((d) => bitmap.set($2(d.boundary[0]), $2(d.boundary[3])));
    return [bitmap, void 0];
  }
  function markBitmaps($2, baseMark, avoidMarks, labelInside, isGroupArea) {
    const width2 = $2.width, height2 = $2.height, border = labelInside || isGroupArea, context2 = domCanvas(width2, height2).getContext("2d"), baseMarkContext = domCanvas(width2, height2).getContext("2d"), strokeContext = border && domCanvas(width2, height2).getContext("2d");
    avoidMarks.forEach((items) => draw(context2, items, false));
    draw(baseMarkContext, baseMark, false);
    if (border) {
      draw(strokeContext, baseMark, true);
    }
    const buffer = getBuffer(context2, width2, height2), baseMarkBuffer = getBuffer(baseMarkContext, width2, height2), strokeBuffer = border && getBuffer(strokeContext, width2, height2), layer1 = $2.bitmap(), layer2 = border && $2.bitmap();
    let x2, y2, u2, v, index2, alpha, strokeAlpha, baseMarkAlpha;
    for (y2 = 0; y2 < height2; ++y2) {
      for (x2 = 0; x2 < width2; ++x2) {
        index2 = y2 * width2 + x2;
        alpha = buffer[index2] & ALPHA_MASK;
        baseMarkAlpha = baseMarkBuffer[index2] & ALPHA_MASK;
        strokeAlpha = border && strokeBuffer[index2] & ALPHA_MASK;
        if (alpha || strokeAlpha || baseMarkAlpha) {
          u2 = $2(x2);
          v = $2(y2);
          if (!isGroupArea && (alpha || baseMarkAlpha)) layer1.set(u2, v);
          if (border && (alpha || strokeAlpha)) layer2.set(u2, v);
        }
      }
    }
    return [layer1, layer2];
  }
  function getBuffer(context2, width2, height2) {
    return new Uint32Array(context2.getImageData(0, 0, width2, height2).data.buffer);
  }
  function draw(context2, items, interior) {
    if (!items.length) return;
    const type2 = items[0].mark.marktype;
    if (type2 === "group") {
      items.forEach((group2) => {
        group2.items.forEach((mark) => draw(context2, mark.items, interior));
      });
    } else {
      Marks[type2].draw(context2, {
        items: interior ? items.map(prepare$1) : items
      });
    }
  }
  function prepare$1(source2) {
    const item = rederive(source2, {});
    if (item.stroke && item.strokeOpacity !== 0 || item.fill && item.fillOpacity !== 0) {
      return {
        ...item,
        strokeOpacity: 1,
        stroke: "#000",
        fillOpacity: 0
      };
    }
    return item;
  }
  const DIV = 5, MOD = 31, SIZE$1 = 32, RIGHT0 = new Uint32Array(SIZE$1 + 1), RIGHT1 = new Uint32Array(SIZE$1 + 1);
  RIGHT1[0] = 0;
  RIGHT0[0] = ~RIGHT1[0];
  for (let i = 1; i <= SIZE$1; ++i) {
    RIGHT1[i] = RIGHT1[i - 1] << 1 | 1;
    RIGHT0[i] = ~RIGHT1[i];
  }
  function Bitmap(w2, h2) {
    const array2 = new Uint32Array(~~((w2 * h2 + SIZE$1) / SIZE$1));
    function _set(index2, mask) {
      array2[index2] |= mask;
    }
    function _clear(index2, mask) {
      array2[index2] &= mask;
    }
    return {
      array: array2,
      get: (x2, y2) => {
        const index2 = y2 * w2 + x2;
        return array2[index2 >>> DIV] & 1 << (index2 & MOD);
      },
      set: (x2, y2) => {
        const index2 = y2 * w2 + x2;
        _set(index2 >>> DIV, 1 << (index2 & MOD));
      },
      clear: (x2, y2) => {
        const index2 = y2 * w2 + x2;
        _clear(index2 >>> DIV, ~(1 << (index2 & MOD)));
      },
      getRange: (x2, y2, x22, y22) => {
        let r = y22, start, end, indexStart, indexEnd;
        for (; r >= y2; --r) {
          start = r * w2 + x2;
          end = r * w2 + x22;
          indexStart = start >>> DIV;
          indexEnd = end >>> DIV;
          if (indexStart === indexEnd) {
            if (array2[indexStart] & RIGHT0[start & MOD] & RIGHT1[(end & MOD) + 1]) {
              return true;
            }
          } else {
            if (array2[indexStart] & RIGHT0[start & MOD]) return true;
            if (array2[indexEnd] & RIGHT1[(end & MOD) + 1]) return true;
            for (let i = indexStart + 1; i < indexEnd; ++i) {
              if (array2[i]) return true;
            }
          }
        }
        return false;
      },
      setRange: (x2, y2, x22, y22) => {
        let start, end, indexStart, indexEnd, i;
        for (; y2 <= y22; ++y2) {
          start = y2 * w2 + x2;
          end = y2 * w2 + x22;
          indexStart = start >>> DIV;
          indexEnd = end >>> DIV;
          if (indexStart === indexEnd) {
            _set(indexStart, RIGHT0[start & MOD] & RIGHT1[(end & MOD) + 1]);
          } else {
            _set(indexStart, RIGHT0[start & MOD]);
            _set(indexEnd, RIGHT1[(end & MOD) + 1]);
            for (i = indexStart + 1; i < indexEnd; ++i) _set(i, 4294967295);
          }
        }
      },
      clearRange: (x2, y2, x22, y22) => {
        let start, end, indexStart, indexEnd, i;
        for (; y2 <= y22; ++y2) {
          start = y2 * w2 + x2;
          end = y2 * w2 + x22;
          indexStart = start >>> DIV;
          indexEnd = end >>> DIV;
          if (indexStart === indexEnd) {
            _clear(indexStart, RIGHT1[start & MOD] | RIGHT0[(end & MOD) + 1]);
          } else {
            _clear(indexStart, RIGHT1[start & MOD]);
            _clear(indexEnd, RIGHT0[(end & MOD) + 1]);
            for (i = indexStart + 1; i < indexEnd; ++i) _clear(i, 0);
          }
        }
      },
      outOfBounds: (x2, y2, x22, y22) => x2 < 0 || y2 < 0 || y22 >= h2 || x22 >= w2
    };
  }
  function scaler(width2, height2, padding2) {
    const ratio = Math.max(1, Math.sqrt(width2 * height2 / 1e6)), w2 = ~~((width2 + 2 * padding2 + ratio) / ratio), h2 = ~~((height2 + 2 * padding2 + ratio) / ratio), scale2 = (_) => ~~((_ + padding2) / ratio);
    scale2.invert = (_) => _ * ratio - padding2;
    scale2.bitmap = () => Bitmap(w2, h2);
    scale2.ratio = ratio;
    scale2.padding = padding2;
    scale2.width = width2;
    scale2.height = height2;
    return scale2;
  }
  function placeAreaLabelNaive($2, bitmaps, avoidBaseMark, markIndex) {
    const width2 = $2.width, height2 = $2.height;
    return function(d) {
      const items = d.datum.datum.items[markIndex].items, n = items.length, textHeight = d.datum.fontSize, textWidth = textMetrics.width(d.datum, d.datum.text);
      let maxAreaWidth = 0, x12, x2, y12, y2, x3, y3, areaWidth;
      for (let i = 0; i < n; ++i) {
        x12 = items[i].x;
        y12 = items[i].y;
        x2 = items[i].x2 === void 0 ? x12 : items[i].x2;
        y2 = items[i].y2 === void 0 ? y12 : items[i].y2;
        x3 = (x12 + x2) / 2;
        y3 = (y12 + y2) / 2;
        areaWidth = Math.abs(x2 - x12 + y2 - y12);
        if (areaWidth >= maxAreaWidth) {
          maxAreaWidth = areaWidth;
          d.x = x3;
          d.y = y3;
        }
      }
      x3 = textWidth / 2;
      y3 = textHeight / 2;
      x12 = d.x - x3;
      x2 = d.x + x3;
      y12 = d.y - y3;
      y2 = d.y + y3;
      d.align = "center";
      if (x12 < 0 && x2 <= width2) {
        d.align = "left";
      } else if (0 <= x12 && width2 < x2) {
        d.align = "right";
      }
      d.baseline = "middle";
      if (y12 < 0 && y2 <= height2) {
        d.baseline = "top";
      } else if (0 <= y12 && height2 < y2) {
        d.baseline = "bottom";
      }
      return true;
    };
  }
  function outOfBounds(x2, y2, textWidth, textHeight, width2, height2) {
    let r = textWidth / 2;
    return x2 - r < 0 || x2 + r > width2 || y2 - (r = textHeight / 2) < 0 || y2 + r > height2;
  }
  function collision($2, x2, y2, textHeight, textWidth, h2, bm0, bm1) {
    const w2 = textWidth * h2 / (textHeight * 2), x12 = $2(x2 - w2), x22 = $2(x2 + w2), y12 = $2(y2 - (h2 = h2 / 2)), y22 = $2(y2 + h2);
    return bm0.outOfBounds(x12, y12, x22, y22) || bm0.getRange(x12, y12, x22, y22) || bm1 && bm1.getRange(x12, y12, x22, y22);
  }
  function placeAreaLabelReducedSearch($2, bitmaps, avoidBaseMark, markIndex) {
    const width2 = $2.width, height2 = $2.height, bm0 = bitmaps[0], bm1 = bitmaps[1];
    function tryLabel(_x3, _y3, maxSize, textWidth, textHeight) {
      const x2 = $2.invert(_x3), y2 = $2.invert(_y3);
      let lo = maxSize, hi = height2, mid;
      if (!outOfBounds(x2, y2, textWidth, textHeight, width2, height2) && !collision($2, x2, y2, textHeight, textWidth, lo, bm0, bm1) && !collision($2, x2, y2, textHeight, textWidth, textHeight, bm0, null)) {
        while (hi - lo >= 1) {
          mid = (lo + hi) / 2;
          if (collision($2, x2, y2, textHeight, textWidth, mid, bm0, bm1)) {
            hi = mid;
          } else {
            lo = mid;
          }
        }
        if (lo > maxSize) {
          return [x2, y2, lo, true];
        }
      }
    }
    return function(d) {
      const items = d.datum.datum.items[markIndex].items, n = items.length, textHeight = d.datum.fontSize, textWidth = textMetrics.width(d.datum, d.datum.text);
      let maxSize = avoidBaseMark ? textHeight : 0, labelPlaced = false, labelPlaced2 = false, maxAreaWidth = 0, x12, x2, y12, y2, x3, y3, _x3, _y3, _x1, _xMid, _x22, _y1, _yMid, _y22, areaWidth, result, swapTmp;
      for (let i = 0; i < n; ++i) {
        x12 = items[i].x;
        y12 = items[i].y;
        x2 = items[i].x2 === void 0 ? x12 : items[i].x2;
        y2 = items[i].y2 === void 0 ? y12 : items[i].y2;
        if (x12 > x2) {
          swapTmp = x12;
          x12 = x2;
          x2 = swapTmp;
        }
        if (y12 > y2) {
          swapTmp = y12;
          y12 = y2;
          y2 = swapTmp;
        }
        _x1 = $2(x12);
        _x22 = $2(x2);
        _xMid = ~~((_x1 + _x22) / 2);
        _y1 = $2(y12);
        _y22 = $2(y2);
        _yMid = ~~((_y1 + _y22) / 2);
        for (_x3 = _xMid; _x3 >= _x1; --_x3) {
          for (_y3 = _yMid; _y3 >= _y1; --_y3) {
            result = tryLabel(_x3, _y3, maxSize, textWidth, textHeight);
            if (result) {
              [d.x, d.y, maxSize, labelPlaced] = result;
            }
          }
        }
        for (_x3 = _xMid; _x3 <= _x22; ++_x3) {
          for (_y3 = _yMid; _y3 <= _y22; ++_y3) {
            result = tryLabel(_x3, _y3, maxSize, textWidth, textHeight);
            if (result) {
              [d.x, d.y, maxSize, labelPlaced] = result;
            }
          }
        }
        if (!labelPlaced && !avoidBaseMark) {
          areaWidth = Math.abs(x2 - x12 + y2 - y12);
          x3 = (x12 + x2) / 2;
          y3 = (y12 + y2) / 2;
          if (areaWidth >= maxAreaWidth && !outOfBounds(x3, y3, textWidth, textHeight, width2, height2) && !collision($2, x3, y3, textHeight, textWidth, textHeight, bm0, null)) {
            maxAreaWidth = areaWidth;
            d.x = x3;
            d.y = y3;
            labelPlaced2 = true;
          }
        }
      }
      if (labelPlaced || labelPlaced2) {
        x3 = textWidth / 2;
        y3 = textHeight / 2;
        bm0.setRange($2(d.x - x3), $2(d.y - y3), $2(d.x + x3), $2(d.y + y3));
        d.align = "center";
        d.baseline = "middle";
        return true;
      } else {
        return false;
      }
    };
  }
  const X_DIR = [-1, -1, 1, 1];
  const Y_DIR = [-1, 1, -1, 1];
  function placeAreaLabelFloodFill($2, bitmaps, avoidBaseMark, markIndex) {
    const width2 = $2.width, height2 = $2.height, bm0 = bitmaps[0], bm1 = bitmaps[1], bm2 = $2.bitmap();
    return function(d) {
      const items = d.datum.datum.items[markIndex].items, n = items.length, textHeight = d.datum.fontSize, textWidth = textMetrics.width(d.datum, d.datum.text), stack2 = [];
      let maxSize = avoidBaseMark ? textHeight : 0, labelPlaced = false, labelPlaced2 = false, maxAreaWidth = 0, x12, x2, y12, y2, x3, y3, _x3, _y3, lo, hi, mid, areaWidth;
      for (let i = 0; i < n; ++i) {
        x12 = items[i].x;
        y12 = items[i].y;
        x2 = items[i].x2 === void 0 ? x12 : items[i].x2;
        y2 = items[i].y2 === void 0 ? y12 : items[i].y2;
        stack2.push([$2((x12 + x2) / 2), $2((y12 + y2) / 2)]);
        while (stack2.length) {
          [_x3, _y3] = stack2.pop();
          if (bm0.get(_x3, _y3) || bm1.get(_x3, _y3) || bm2.get(_x3, _y3)) continue;
          bm2.set(_x3, _y3);
          for (let j = 0; j < 4; ++j) {
            x3 = _x3 + X_DIR[j];
            y3 = _y3 + Y_DIR[j];
            if (!bm2.outOfBounds(x3, y3, x3, y3)) stack2.push([x3, y3]);
          }
          x3 = $2.invert(_x3);
          y3 = $2.invert(_y3);
          lo = maxSize;
          hi = height2;
          if (!outOfBounds(x3, y3, textWidth, textHeight, width2, height2) && !collision($2, x3, y3, textHeight, textWidth, lo, bm0, bm1) && !collision($2, x3, y3, textHeight, textWidth, textHeight, bm0, null)) {
            while (hi - lo >= 1) {
              mid = (lo + hi) / 2;
              if (collision($2, x3, y3, textHeight, textWidth, mid, bm0, bm1)) {
                hi = mid;
              } else {
                lo = mid;
              }
            }
            if (lo > maxSize) {
              d.x = x3;
              d.y = y3;
              maxSize = lo;
              labelPlaced = true;
            }
          }
        }
        if (!labelPlaced && !avoidBaseMark) {
          areaWidth = Math.abs(x2 - x12 + y2 - y12);
          x3 = (x12 + x2) / 2;
          y3 = (y12 + y2) / 2;
          if (areaWidth >= maxAreaWidth && !outOfBounds(x3, y3, textWidth, textHeight, width2, height2) && !collision($2, x3, y3, textHeight, textWidth, textHeight, bm0, null)) {
            maxAreaWidth = areaWidth;
            d.x = x3;
            d.y = y3;
            labelPlaced2 = true;
          }
        }
      }
      if (labelPlaced || labelPlaced2) {
        x3 = textWidth / 2;
        y3 = textHeight / 2;
        bm0.setRange($2(d.x - x3), $2(d.y - y3), $2(d.x + x3), $2(d.y + y3));
        d.align = "center";
        d.baseline = "middle";
        return true;
      } else {
        return false;
      }
    };
  }
  const Aligns = ["right", "center", "left"], Baselines = ["bottom", "middle", "top"];
  function placeMarkLabel($2, bitmaps, anchors, offsets2) {
    const width2 = $2.width, height2 = $2.height, bm0 = bitmaps[0], bm1 = bitmaps[1], n = offsets2.length;
    return function(d) {
      const boundary = d.boundary, textHeight = d.datum.fontSize;
      if (boundary[2] < 0 || boundary[5] < 0 || boundary[0] > width2 || boundary[3] > height2) {
        return false;
      }
      let textWidth = d.textWidth ?? 0, dx, dy, isInside, sizeFactor, insideFactor, x12, x2, y12, y2, xc, yc, _x1, _x22, _y1, _y22;
      for (let i = 0; i < n; ++i) {
        dx = (anchors[i] & 3) - 1;
        dy = (anchors[i] >>> 2 & 3) - 1;
        isInside = dx === 0 && dy === 0 || offsets2[i] < 0;
        sizeFactor = dx && dy ? Math.SQRT1_2 : 1;
        insideFactor = offsets2[i] < 0 ? -1 : 1;
        x12 = boundary[1 + dx] + offsets2[i] * dx * sizeFactor;
        yc = boundary[4 + dy] + insideFactor * textHeight * dy / 2 + offsets2[i] * dy * sizeFactor;
        y12 = yc - textHeight / 2;
        y2 = yc + textHeight / 2;
        _x1 = $2(x12);
        _y1 = $2(y12);
        _y22 = $2(y2);
        if (!textWidth) {
          if (!test(_x1, _x1, _y1, _y22, bm0, bm1, x12, x12, y12, y2, boundary, isInside)) {
            continue;
          } else {
            textWidth = textMetrics.width(d.datum, d.datum.text);
          }
        }
        xc = x12 + insideFactor * textWidth * dx / 2;
        x12 = xc - textWidth / 2;
        x2 = xc + textWidth / 2;
        _x1 = $2(x12);
        _x22 = $2(x2);
        if (test(_x1, _x22, _y1, _y22, bm0, bm1, x12, x2, y12, y2, boundary, isInside)) {
          d.x = !dx ? xc : dx * insideFactor < 0 ? x2 : x12;
          d.y = !dy ? yc : dy * insideFactor < 0 ? y2 : y12;
          d.align = Aligns[dx * insideFactor + 1];
          d.baseline = Baselines[dy * insideFactor + 1];
          bm0.setRange(_x1, _y1, _x22, _y22);
          return true;
        }
      }
      return false;
    };
  }
  function test(_x1, _x22, _y1, _y22, bm0, bm1, x12, x2, y12, y2, boundary, isInside) {
    return !(bm0.outOfBounds(_x1, _y1, _x22, _y22) || (isInside && bm1 || bm0).getRange(_x1, _y1, _x22, _y22));
  }
  const TOP = 0, MIDDLE = 4, BOTTOM = 8, LEFT = 0, CENTER$1 = 1, RIGHT = 2;
  const anchorCode = {
    "top-left": TOP + LEFT,
    "top": TOP + CENTER$1,
    "top-right": TOP + RIGHT,
    "left": MIDDLE + LEFT,
    "middle": MIDDLE + CENTER$1,
    "right": MIDDLE + RIGHT,
    "bottom-left": BOTTOM + LEFT,
    "bottom": BOTTOM + CENTER$1,
    "bottom-right": BOTTOM + RIGHT
  };
  const placeAreaLabel = {
    "naive": placeAreaLabelNaive,
    "reduced-search": placeAreaLabelReducedSearch,
    "floodfill": placeAreaLabelFloodFill
  };
  function labelLayout(texts, size, compare2, offset2, anchor, avoidMarks, avoidBaseMark, lineAnchor, markIndex, padding2, method2) {
    if (!texts.length) return texts;
    const positions = Math.max(offset2.length, anchor.length), offsets2 = getOffsets(offset2, positions), anchors = getAnchors(anchor, positions), marktype = markType(texts[0].datum), grouptype = marktype === "group" && texts[0].datum.items[markIndex].marktype, isGroupArea = grouptype === "area", boundary = markBoundary(marktype, grouptype, lineAnchor, markIndex), infPadding = padding2 === null || padding2 === Infinity, isNaiveGroupArea = isGroupArea && method2 === "naive";
    let maxTextWidth = -1, maxTextHeight = -1;
    const data2 = texts.map((d) => {
      const textWidth = infPadding ? textMetrics.width(d, d.text) : void 0;
      maxTextWidth = Math.max(maxTextWidth, textWidth);
      maxTextHeight = Math.max(maxTextHeight, d.fontSize);
      return {
        datum: d,
        opacity: 0,
        x: void 0,
        y: void 0,
        align: void 0,
        baseline: void 0,
        boundary: boundary(d),
        textWidth
      };
    });
    padding2 = padding2 === null || padding2 === Infinity ? Math.max(maxTextWidth, maxTextHeight) + Math.max(...offset2) : padding2;
    const $2 = scaler(size[0], size[1], padding2);
    let bitmaps;
    if (!isNaiveGroupArea) {
      if (compare2) {
        data2.sort((a2, b2) => compare2(a2.datum, b2.datum));
      }
      let labelInside = false;
      for (let i = 0; i < anchors.length && !labelInside; ++i) {
        labelInside = anchors[i] === 5 || offsets2[i] < 0;
      }
      const baseMark = (marktype && avoidBaseMark || isGroupArea) && texts.map((d) => d.datum);
      bitmaps = avoidMarks.length || baseMark ? markBitmaps($2, baseMark || [], avoidMarks, labelInside, isGroupArea) : baseBitmaps($2, avoidBaseMark && data2);
    }
    const place2 = isGroupArea ? placeAreaLabel[method2]($2, bitmaps, avoidBaseMark, markIndex) : placeMarkLabel($2, bitmaps, anchors, offsets2);
    data2.forEach((d) => d.opacity = +place2(d));
    return data2;
  }
  function getOffsets(_, count2) {
    const offsets2 = new Float64Array(count2), n = _.length;
    for (let i = 0; i < n; ++i) offsets2[i] = _[i] || 0;
    for (let i = n; i < count2; ++i) offsets2[i] = offsets2[n - 1];
    return offsets2;
  }
  function getAnchors(_, count2) {
    const anchors = new Int8Array(count2), n = _.length;
    for (let i = 0; i < n; ++i) anchors[i] |= anchorCode[_[i]];
    for (let i = n; i < count2; ++i) anchors[i] = anchors[n - 1];
    return anchors;
  }
  function markType(item) {
    return item && item.mark && item.mark.marktype;
  }
  function markBoundary(marktype, grouptype, lineAnchor, markIndex) {
    const xy = (d) => [d.x, d.x, d.x, d.y, d.y, d.y];
    if (!marktype) {
      return xy;
    } else if (marktype === "line" || marktype === "area") {
      return (d) => xy(d.datum);
    } else if (grouptype === "line") {
      return (d) => {
        const items = d.datum.items[markIndex].items;
        return xy(items.length ? items[lineAnchor === "start" ? 0 : items.length - 1] : {
          x: NaN,
          y: NaN
        });
      };
    } else {
      return (d) => {
        const b2 = d.datum.bounds;
        return [b2.x1, (b2.x1 + b2.x2) / 2, b2.x2, b2.y1, (b2.y1 + b2.y2) / 2, b2.y2];
      };
    }
  }
  const Output$1 = ["x", "y", "opacity", "align", "baseline"];
  const Anchors = ["top-left", "left", "bottom-left", "top", "bottom", "top-right", "right", "bottom-right"];
  function Label$1(params2) {
    Transform.call(this, null, params2);
  }
  Label$1.Definition = {
    type: "Label",
    metadata: {
      modifies: true
    },
    params: [{
      name: "size",
      type: "number",
      array: true,
      length: 2,
      required: true
    }, {
      name: "sort",
      type: "compare"
    }, {
      name: "anchor",
      type: "string",
      array: true,
      default: Anchors
    }, {
      name: "offset",
      type: "number",
      array: true,
      default: [1]
    }, {
      name: "padding",
      type: "number",
      default: 0,
      null: true
    }, {
      name: "lineAnchor",
      type: "string",
      values: ["start", "end"],
      default: "end"
    }, {
      name: "markIndex",
      type: "number",
      default: 0
    }, {
      name: "avoidBaseMark",
      type: "boolean",
      default: true
    }, {
      name: "avoidMarks",
      type: "data",
      array: true
    }, {
      name: "method",
      type: "string",
      default: "naive"
    }, {
      name: "as",
      type: "string",
      array: true,
      length: Output$1.length,
      default: Output$1
    }]
  };
  inherits(Label$1, Transform, {
    transform(_, pulse2) {
      function modp(param2) {
        const p = _[param2];
        return isFunction(p) && pulse2.modified(p.fields);
      }
      const mod = _.modified();
      if (!(mod || pulse2.changed(pulse2.ADD_REM) || modp("sort"))) return;
      if (!_.size || _.size.length !== 2) {
        error$1("Size parameter should be specified as a [width, height] array.");
      }
      const as = _.as || Output$1;
      labelLayout(pulse2.materialize(pulse2.SOURCE).source || [], _.size, _.sort, array$5(_.offset == null ? 1 : _.offset), array$5(_.anchor || Anchors), _.avoidMarks || [], _.avoidBaseMark !== false, _.lineAnchor || "end", _.markIndex || 0, _.padding === void 0 ? 0 : _.padding, _.method || "naive").forEach((l) => {
        const t = l.datum;
        t[as[0]] = l.x;
        t[as[1]] = l.y;
        t[as[2]] = l.opacity;
        t[as[3]] = l.align;
        t[as[4]] = l.baseline;
      });
      return pulse2.reflow(mod).modifies(as);
    }
  });
  const label = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
    __proto__: null,
    label: Label$1
  }, Symbol.toStringTag, { value: "Module" }));
  function partition(data2, groupby) {
    var groups = [], get2 = function(f) {
      return f(t);
    }, map2, i, n, t, k, g;
    if (groupby == null) {
      groups.push(data2);
    } else {
      for (map2 = {}, i = 0, n = data2.length; i < n; ++i) {
        t = data2[i];
        k = groupby.map(get2);
        g = map2[k];
        if (!g) {
          map2[k] = g = [];
          g.dims = k;
          groups.push(g);
        }
        g.push(t);
      }
    }
    return groups;
  }
  function Loess(params2) {
    Transform.call(this, null, params2);
  }
  Loess.Definition = {
    "type": "Loess",
    "metadata": {
      "generates": true
    },
    "params": [{
      "name": "x",
      "type": "field",
      "required": true
    }, {
      "name": "y",
      "type": "field",
      "required": true
    }, {
      "name": "groupby",
      "type": "field",
      "array": true
    }, {
      "name": "bandwidth",
      "type": "number",
      "default": 0.3
    }, {
      "name": "as",
      "type": "string",
      "array": true
    }]
  };
  inherits(Loess, Transform, {
    transform(_, pulse2) {
      const out = pulse2.fork(pulse2.NO_SOURCE | pulse2.NO_FIELDS);
      if (!this.value || pulse2.changed() || _.modified()) {
        const source2 = pulse2.materialize(pulse2.SOURCE).source, groups = partition(source2, _.groupby), names = (_.groupby || []).map(accessorName), m2 = names.length, as = _.as || [accessorName(_.x), accessorName(_.y)], values2 = [];
        groups.forEach((g) => {
          loess(g, _.x, _.y, _.bandwidth || 0.3).forEach((p) => {
            const t = {};
            for (let i = 0; i < m2; ++i) {
              t[names[i]] = g.dims[i];
            }
            t[as[0]] = p[0];
            t[as[1]] = p[1];
            values2.push(ingest$1(t));
          });
        });
        if (this.value) out.rem = this.value;
        this.value = out.add = out.source = values2;
      }
      return out;
    }
  });
  const Methods = {
    constant: constant$4,
    linear: linear$2,
    log: log$3,
    exp: exp$1,
    pow: pow$3,
    quad,
    poly
  };
  const degreesOfFreedom = (method2, order) => method2 === "poly" ? order : method2 === "quad" ? 2 : 1;
  function Regression(params2) {
    Transform.call(this, null, params2);
  }
  Regression.Definition = {
    "type": "Regression",
    "metadata": {
      "generates": true
    },
    "params": [{
      "name": "x",
      "type": "field",
      "required": true
    }, {
      "name": "y",
      "type": "field",
      "required": true
    }, {
      "name": "groupby",
      "type": "field",
      "array": true
    }, {
      "name": "method",
      "type": "string",
      "default": "linear",
      "values": Object.keys(Methods)
    }, {
      "name": "order",
      "type": "number",
      "default": 3
    }, {
      "name": "extent",
      "type": "number",
      "array": true,
      "length": 2
    }, {
      "name": "params",
      "type": "boolean",
      "default": false
    }, {
      "name": "as",
      "type": "string",
      "array": true
    }]
  };
  inherits(Regression, Transform, {
    transform(_, pulse2) {
      const out = pulse2.fork(pulse2.NO_SOURCE | pulse2.NO_FIELDS);
      if (!this.value || pulse2.changed() || _.modified()) {
        const source2 = pulse2.materialize(pulse2.SOURCE).source, groups = partition(source2, _.groupby), names = (_.groupby || []).map(accessorName), method2 = _.method || "linear", order = _.order == null ? 3 : _.order, dof = degreesOfFreedom(method2, order), as = _.as || [accessorName(_.x), accessorName(_.y)], fit2 = Methods[method2], values2 = [];
        let domain2 = _.extent;
        if (!has$1(Methods, method2)) {
          error$1("Invalid regression method: " + method2);
        }
        if (domain2 != null) {
          if (method2 === "log" && domain2[0] <= 0) {
            pulse2.dataflow.warn("Ignoring extent with values <= 0 for log regression.");
            domain2 = null;
          }
        }
        groups.forEach((g) => {
          const n = g.length;
          if (n <= dof) {
            pulse2.dataflow.warn("Skipping regression with more parameters than data points.");
            return;
          }
          const model = fit2(g, _.x, _.y, order);
          if (_.params) {
            values2.push(ingest$1({
              keys: g.dims,
              coef: model.coef,
              rSquared: model.rSquared
            }));
            return;
          }
          const dom = domain2 || extent(g, _.x), add2 = (p) => {
            const t = {};
            for (let i = 0; i < names.length; ++i) {
              t[names[i]] = g.dims[i];
            }
            t[as[0]] = p[0];
            t[as[1]] = p[1];
            values2.push(ingest$1(t));
          };
          if (method2 === "linear" || method2 === "constant") {
            dom.forEach((x2) => add2([x2, model.predict(x2)]));
          } else {
            sampleCurve(model.predict, dom, 25, 200).forEach(add2);
          }
        });
        if (this.value) out.rem = this.value;
        this.value = out.add = out.source = values2;
      }
      return out;
    }
  });
  const reg = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
    __proto__: null,
    loess: Loess,
    regression: Regression
  }, Symbol.toStringTag, { value: "Module" }));
  const epsilon$1 = 11102230246251565e-32;
  const splitter = 134217729;
  const resulterrbound = (3 + 8 * epsilon$1) * epsilon$1;
  function sum(elen, e3, flen, f, h2) {
    let Q, Qnew, hh, bvirt;
    let enow = e3[0];
    let fnow = f[0];
    let eindex = 0;
    let findex = 0;
    if (fnow > enow === fnow > -enow) {
      Q = enow;
      enow = e3[++eindex];
    } else {
      Q = fnow;
      fnow = f[++findex];
    }
    let hindex = 0;
    if (eindex < elen && findex < flen) {
      if (fnow > enow === fnow > -enow) {
        Qnew = enow + Q;
        hh = Q - (Qnew - enow);
        enow = e3[++eindex];
      } else {
        Qnew = fnow + Q;
        hh = Q - (Qnew - fnow);
        fnow = f[++findex];
      }
      Q = Qnew;
      if (hh !== 0) {
        h2[hindex++] = hh;
      }
      while (eindex < elen && findex < flen) {
        if (fnow > enow === fnow > -enow) {
          Qnew = Q + enow;
          bvirt = Qnew - Q;
          hh = Q - (Qnew - bvirt) + (enow - bvirt);
          enow = e3[++eindex];
        } else {
          Qnew = Q + fnow;
          bvirt = Qnew - Q;
          hh = Q - (Qnew - bvirt) + (fnow - bvirt);
          fnow = f[++findex];
        }
        Q = Qnew;
        if (hh !== 0) {
          h2[hindex++] = hh;
        }
      }
    }
    while (eindex < elen) {
      Qnew = Q + enow;
      bvirt = Qnew - Q;
      hh = Q - (Qnew - bvirt) + (enow - bvirt);
      enow = e3[++eindex];
      Q = Qnew;
      if (hh !== 0) {
        h2[hindex++] = hh;
      }
    }
    while (findex < flen) {
      Qnew = Q + fnow;
      bvirt = Qnew - Q;
      hh = Q - (Qnew - bvirt) + (fnow - bvirt);
      fnow = f[++findex];
      Q = Qnew;
      if (hh !== 0) {
        h2[hindex++] = hh;
      }
    }
    if (Q !== 0 || hindex === 0) {
      h2[hindex++] = Q;
    }
    return hindex;
  }
  function estimate(elen, e3) {
    let Q = e3[0];
    for (let i = 1; i < elen; i++) Q += e3[i];
    return Q;
  }
  function vec(n) {
    return new Float64Array(n);
  }
  const ccwerrboundA = (3 + 16 * epsilon$1) * epsilon$1;
  const ccwerrboundB = (2 + 12 * epsilon$1) * epsilon$1;
  const ccwerrboundC = (9 + 64 * epsilon$1) * epsilon$1 * epsilon$1;
  const B = vec(4);
  const C1 = vec(8);
  const C2 = vec(12);
  const D = vec(16);
  const u = vec(4);
  function orient2dadapt(ax, ay, bx, by, cx, cy, detsum) {
    let acxtail, acytail, bcxtail, bcytail;
    let bvirt, c2, ahi, alo, bhi, blo, _i, _j, _0, s1, s0, t12, t02, u3;
    const acx = ax - cx;
    const bcx = bx - cx;
    const acy = ay - cy;
    const bcy = by - cy;
    s1 = acx * bcy;
    c2 = splitter * acx;
    ahi = c2 - (c2 - acx);
    alo = acx - ahi;
    c2 = splitter * bcy;
    bhi = c2 - (c2 - bcy);
    blo = bcy - bhi;
    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
    t12 = acy * bcx;
    c2 = splitter * acy;
    ahi = c2 - (c2 - acy);
    alo = acy - ahi;
    c2 = splitter * bcx;
    bhi = c2 - (c2 - bcx);
    blo = bcx - bhi;
    t02 = alo * blo - (t12 - ahi * bhi - alo * bhi - ahi * blo);
    _i = s0 - t02;
    bvirt = s0 - _i;
    B[0] = s0 - (_i + bvirt) + (bvirt - t02);
    _j = s1 + _i;
    bvirt = _j - s1;
    _0 = s1 - (_j - bvirt) + (_i - bvirt);
    _i = _0 - t12;
    bvirt = _0 - _i;
    B[1] = _0 - (_i + bvirt) + (bvirt - t12);
    u3 = _j + _i;
    bvirt = u3 - _j;
    B[2] = _j - (u3 - bvirt) + (_i - bvirt);
    B[3] = u3;
    let det = estimate(4, B);
    let errbound = ccwerrboundB * detsum;
    if (det >= errbound || -det >= errbound) {
      return det;
    }
    bvirt = ax - acx;
    acxtail = ax - (acx + bvirt) + (bvirt - cx);
    bvirt = bx - bcx;
    bcxtail = bx - (bcx + bvirt) + (bvirt - cx);
    bvirt = ay - acy;
    acytail = ay - (acy + bvirt) + (bvirt - cy);
    bvirt = by - bcy;
    bcytail = by - (bcy + bvirt) + (bvirt - cy);
    if (acxtail === 0 && acytail === 0 && bcxtail === 0 && bcytail === 0) {
      return det;
    }
    errbound = ccwerrboundC * detsum + resulterrbound * Math.abs(det);
    det += acx * bcytail + bcy * acxtail - (acy * bcxtail + bcx * acytail);
    if (det >= errbound || -det >= errbound) return det;
    s1 = acxtail * bcy;
    c2 = splitter * acxtail;
    ahi = c2 - (c2 - acxtail);
    alo = acxtail - ahi;
    c2 = splitter * bcy;
    bhi = c2 - (c2 - bcy);
    blo = bcy - bhi;
    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
    t12 = acytail * bcx;
    c2 = splitter * acytail;
    ahi = c2 - (c2 - acytail);
    alo = acytail - ahi;
    c2 = splitter * bcx;
    bhi = c2 - (c2 - bcx);
    blo = bcx - bhi;
    t02 = alo * blo - (t12 - ahi * bhi - alo * bhi - ahi * blo);
    _i = s0 - t02;
    bvirt = s0 - _i;
    u[0] = s0 - (_i + bvirt) + (bvirt - t02);
    _j = s1 + _i;
    bvirt = _j - s1;
    _0 = s1 - (_j - bvirt) + (_i - bvirt);
    _i = _0 - t12;
    bvirt = _0 - _i;
    u[1] = _0 - (_i + bvirt) + (bvirt - t12);
    u3 = _j + _i;
    bvirt = u3 - _j;
    u[2] = _j - (u3 - bvirt) + (_i - bvirt);
    u[3] = u3;
    const C1len = sum(4, B, 4, u, C1);
    s1 = acx * bcytail;
    c2 = splitter * acx;
    ahi = c2 - (c2 - acx);
    alo = acx - ahi;
    c2 = splitter * bcytail;
    bhi = c2 - (c2 - bcytail);
    blo = bcytail - bhi;
    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
    t12 = acy * bcxtail;
    c2 = splitter * acy;
    ahi = c2 - (c2 - acy);
    alo = acy - ahi;
    c2 = splitter * bcxtail;
    bhi = c2 - (c2 - bcxtail);
    blo = bcxtail - bhi;
    t02 = alo * blo - (t12 - ahi * bhi - alo * bhi - ahi * blo);
    _i = s0 - t02;
    bvirt = s0 - _i;
    u[0] = s0 - (_i + bvirt) + (bvirt - t02);
    _j = s1 + _i;
    bvirt = _j - s1;
    _0 = s1 - (_j - bvirt) + (_i - bvirt);
    _i = _0 - t12;
    bvirt = _0 - _i;
    u[1] = _0 - (_i + bvirt) + (bvirt - t12);
    u3 = _j + _i;
    bvirt = u3 - _j;
    u[2] = _j - (u3 - bvirt) + (_i - bvirt);
    u[3] = u3;
    const C2len = sum(C1len, C1, 4, u, C2);
    s1 = acxtail * bcytail;
    c2 = splitter * acxtail;
    ahi = c2 - (c2 - acxtail);
    alo = acxtail - ahi;
    c2 = splitter * bcytail;
    bhi = c2 - (c2 - bcytail);
    blo = bcytail - bhi;
    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
    t12 = acytail * bcxtail;
    c2 = splitter * acytail;
    ahi = c2 - (c2 - acytail);
    alo = acytail - ahi;
    c2 = splitter * bcxtail;
    bhi = c2 - (c2 - bcxtail);
    blo = bcxtail - bhi;
    t02 = alo * blo - (t12 - ahi * bhi - alo * bhi - ahi * blo);
    _i = s0 - t02;
    bvirt = s0 - _i;
    u[0] = s0 - (_i + bvirt) + (bvirt - t02);
    _j = s1 + _i;
    bvirt = _j - s1;
    _0 = s1 - (_j - bvirt) + (_i - bvirt);
    _i = _0 - t12;
    bvirt = _0 - _i;
    u[1] = _0 - (_i + bvirt) + (bvirt - t12);
    u3 = _j + _i;
    bvirt = u3 - _j;
    u[2] = _j - (u3 - bvirt) + (_i - bvirt);
    u[3] = u3;
    const Dlen = sum(C2len, C2, 4, u, D);
    return D[Dlen - 1];
  }
  function orient2d(ax, ay, bx, by, cx, cy) {
    const detleft = (ay - cy) * (bx - cx);
    const detright = (ax - cx) * (by - cy);
    const det = detleft - detright;
    const detsum = Math.abs(detleft + detright);
    if (Math.abs(det) >= ccwerrboundA * detsum) return det;
    return -orient2dadapt(ax, ay, bx, by, cx, cy, detsum);
  }
  const EPSILON = Math.pow(2, -52);
  const EDGE_STACK = new Uint32Array(512);
  class Delaunator {
    static from(points2, getX = defaultGetX, getY = defaultGetY) {
      const n = points2.length;
      const coords = new Float64Array(n * 2);
      for (let i = 0; i < n; i++) {
        const p = points2[i];
        coords[2 * i] = getX(p);
        coords[2 * i + 1] = getY(p);
      }
      return new Delaunator(coords);
    }
    constructor(coords) {
      const n = coords.length >> 1;
      if (n > 0 && typeof coords[0] !== "number") throw new Error("Expected coords to contain numbers.");
      this.coords = coords;
      const maxTriangles = Math.max(2 * n - 5, 0);
      this._triangles = new Uint32Array(maxTriangles * 3);
      this._halfedges = new Int32Array(maxTriangles * 3);
      this._hashSize = Math.ceil(Math.sqrt(n));
      this._hullPrev = new Uint32Array(n);
      this._hullNext = new Uint32Array(n);
      this._hullTri = new Uint32Array(n);
      this._hullHash = new Int32Array(this._hashSize);
      this._ids = new Uint32Array(n);
      this._dists = new Float64Array(n);
      this.update();
    }
    update() {
      const { coords, _hullPrev: hullPrev, _hullNext: hullNext, _hullTri: hullTri, _hullHash: hullHash } = this;
      const n = coords.length >> 1;
      let minX = Infinity;
      let minY = Infinity;
      let maxX = -Infinity;
      let maxY2 = -Infinity;
      for (let i = 0; i < n; i++) {
        const x2 = coords[2 * i];
        const y2 = coords[2 * i + 1];
        if (x2 < minX) minX = x2;
        if (y2 < minY) minY = y2;
        if (x2 > maxX) maxX = x2;
        if (y2 > maxY2) maxY2 = y2;
        this._ids[i] = i;
      }
      const cx = (minX + maxX) / 2;
      const cy = (minY + maxY2) / 2;
      let i0, i1, i2;
      for (let i = 0, minDist = Infinity; i < n; i++) {
        const d = dist(cx, cy, coords[2 * i], coords[2 * i + 1]);
        if (d < minDist) {
          i0 = i;
          minDist = d;
        }
      }
      const i0x = coords[2 * i0];
      const i0y = coords[2 * i0 + 1];
      for (let i = 0, minDist = Infinity; i < n; i++) {
        if (i === i0) continue;
        const d = dist(i0x, i0y, coords[2 * i], coords[2 * i + 1]);
        if (d < minDist && d > 0) {
          i1 = i;
          minDist = d;
        }
      }
      let i1x = coords[2 * i1];
      let i1y = coords[2 * i1 + 1];
      let minRadius = Infinity;
      for (let i = 0; i < n; i++) {
        if (i === i0 || i === i1) continue;
        const r = circumradius(i0x, i0y, i1x, i1y, coords[2 * i], coords[2 * i + 1]);
        if (r < minRadius) {
          i2 = i;
          minRadius = r;
        }
      }
      let i2x = coords[2 * i2];
      let i2y = coords[2 * i2 + 1];
      if (minRadius === Infinity) {
        for (let i = 0; i < n; i++) {
          this._dists[i] = coords[2 * i] - coords[0] || coords[2 * i + 1] - coords[1];
        }
        quicksort(this._ids, this._dists, 0, n - 1);
        const hull = new Uint32Array(n);
        let j = 0;
        for (let i = 0, d0 = -Infinity; i < n; i++) {
          const id2 = this._ids[i];
          const d = this._dists[id2];
          if (d > d0) {
            hull[j++] = id2;
            d0 = d;
          }
        }
        this.hull = hull.subarray(0, j);
        this.triangles = new Uint32Array(0);
        this.halfedges = new Uint32Array(0);
        return;
      }
      if (orient2d(i0x, i0y, i1x, i1y, i2x, i2y) < 0) {
        const i = i1;
        const x2 = i1x;
        const y2 = i1y;
        i1 = i2;
        i1x = i2x;
        i1y = i2y;
        i2 = i;
        i2x = x2;
        i2y = y2;
      }
      const center = circumcenter(i0x, i0y, i1x, i1y, i2x, i2y);
      this._cx = center.x;
      this._cy = center.y;
      for (let i = 0; i < n; i++) {
        this._dists[i] = dist(coords[2 * i], coords[2 * i + 1], center.x, center.y);
      }
      quicksort(this._ids, this._dists, 0, n - 1);
      this._hullStart = i0;
      let hullSize = 3;
      hullNext[i0] = hullPrev[i2] = i1;
      hullNext[i1] = hullPrev[i0] = i2;
      hullNext[i2] = hullPrev[i1] = i0;
      hullTri[i0] = 0;
      hullTri[i1] = 1;
      hullTri[i2] = 2;
      hullHash.fill(-1);
      hullHash[this._hashKey(i0x, i0y)] = i0;
      hullHash[this._hashKey(i1x, i1y)] = i1;
      hullHash[this._hashKey(i2x, i2y)] = i2;
      this.trianglesLen = 0;
      this._addTriangle(i0, i1, i2, -1, -1, -1);
      for (let k = 0, xp, yp; k < this._ids.length; k++) {
        const i = this._ids[k];
        const x2 = coords[2 * i];
        const y2 = coords[2 * i + 1];
        if (k > 0 && Math.abs(x2 - xp) <= EPSILON && Math.abs(y2 - yp) <= EPSILON) continue;
        xp = x2;
        yp = y2;
        if (i === i0 || i === i1 || i === i2) continue;
        let start = 0;
        for (let j = 0, key2 = this._hashKey(x2, y2); j < this._hashSize; j++) {
          start = hullHash[(key2 + j) % this._hashSize];
          if (start !== -1 && start !== hullNext[start]) break;
        }
        start = hullPrev[start];
        let e3 = start, q;
        while (q = hullNext[e3], orient2d(x2, y2, coords[2 * e3], coords[2 * e3 + 1], coords[2 * q], coords[2 * q + 1]) >= 0) {
          e3 = q;
          if (e3 === start) {
            e3 = -1;
            break;
          }
        }
        if (e3 === -1) continue;
        let t = this._addTriangle(e3, i, hullNext[e3], -1, -1, hullTri[e3]);
        hullTri[i] = this._legalize(t + 2);
        hullTri[e3] = t;
        hullSize++;
        let n2 = hullNext[e3];
        while (q = hullNext[n2], orient2d(x2, y2, coords[2 * n2], coords[2 * n2 + 1], coords[2 * q], coords[2 * q + 1]) < 0) {
          t = this._addTriangle(n2, i, q, hullTri[i], -1, hullTri[n2]);
          hullTri[i] = this._legalize(t + 2);
          hullNext[n2] = n2;
          hullSize--;
          n2 = q;
        }
        if (e3 === start) {
          while (q = hullPrev[e3], orient2d(x2, y2, coords[2 * q], coords[2 * q + 1], coords[2 * e3], coords[2 * e3 + 1]) < 0) {
            t = this._addTriangle(q, i, e3, -1, hullTri[e3], hullTri[q]);
            this._legalize(t + 2);
            hullTri[q] = t;
            hullNext[e3] = e3;
            hullSize--;
            e3 = q;
          }
        }
        this._hullStart = hullPrev[i] = e3;
        hullNext[e3] = hullPrev[n2] = i;
        hullNext[i] = n2;
        hullHash[this._hashKey(x2, y2)] = i;
        hullHash[this._hashKey(coords[2 * e3], coords[2 * e3 + 1])] = e3;
      }
      this.hull = new Uint32Array(hullSize);
      for (let i = 0, e3 = this._hullStart; i < hullSize; i++) {
        this.hull[i] = e3;
        e3 = hullNext[e3];
      }
      this.triangles = this._triangles.subarray(0, this.trianglesLen);
      this.halfedges = this._halfedges.subarray(0, this.trianglesLen);
    }
    _hashKey(x2, y2) {
      return Math.floor(pseudoAngle(x2 - this._cx, y2 - this._cy) * this._hashSize) % this._hashSize;
    }
    _legalize(a2) {
      const { _triangles: triangles, _halfedges: halfedges, coords } = this;
      let i = 0;
      let ar = 0;
      while (true) {
        const b2 = halfedges[a2];
        const a0 = a2 - a2 % 3;
        ar = a0 + (a2 + 2) % 3;
        if (b2 === -1) {
          if (i === 0) break;
          a2 = EDGE_STACK[--i];
          continue;
        }
        const b0 = b2 - b2 % 3;
        const al = a0 + (a2 + 1) % 3;
        const bl2 = b0 + (b2 + 2) % 3;
        const p02 = triangles[ar];
        const pr = triangles[a2];
        const pl = triangles[al];
        const p1 = triangles[bl2];
        const illegal = inCircle(
          coords[2 * p02],
          coords[2 * p02 + 1],
          coords[2 * pr],
          coords[2 * pr + 1],
          coords[2 * pl],
          coords[2 * pl + 1],
          coords[2 * p1],
          coords[2 * p1 + 1]
        );
        if (illegal) {
          triangles[a2] = p1;
          triangles[b2] = p02;
          const hbl = halfedges[bl2];
          if (hbl === -1) {
            let e3 = this._hullStart;
            do {
              if (this._hullTri[e3] === bl2) {
                this._hullTri[e3] = a2;
                break;
              }
              e3 = this._hullPrev[e3];
            } while (e3 !== this._hullStart);
          }
          this._link(a2, hbl);
          this._link(b2, halfedges[ar]);
          this._link(ar, bl2);
          const br2 = b0 + (b2 + 1) % 3;
          if (i < EDGE_STACK.length) {
            EDGE_STACK[i++] = br2;
          }
        } else {
          if (i === 0) break;
          a2 = EDGE_STACK[--i];
        }
      }
      return ar;
    }
    _link(a2, b2) {
      this._halfedges[a2] = b2;
      if (b2 !== -1) this._halfedges[b2] = a2;
    }
    // add a new triangle given vertex indices and adjacent half-edge ids
    _addTriangle(i0, i1, i2, a2, b2, c2) {
      const t = this.trianglesLen;
      this._triangles[t] = i0;
      this._triangles[t + 1] = i1;
      this._triangles[t + 2] = i2;
      this._link(t, a2);
      this._link(t + 1, b2);
      this._link(t + 2, c2);
      this.trianglesLen += 3;
      return t;
    }
  }
  function pseudoAngle(dx, dy) {
    const p = dx / (Math.abs(dx) + Math.abs(dy));
    return (dy > 0 ? 3 - p : 1 + p) / 4;
  }
  function dist(ax, ay, bx, by) {
    const dx = ax - bx;
    const dy = ay - by;
    return dx * dx + dy * dy;
  }
  function inCircle(ax, ay, bx, by, cx, cy, px2, py2) {
    const dx = ax - px2;
    const dy = ay - py2;
    const ex = bx - px2;
    const ey = by - py2;
    const fx = cx - px2;
    const fy = cy - py2;
    const ap = dx * dx + dy * dy;
    const bp = ex * ex + ey * ey;
    const cp = fx * fx + fy * fy;
    return dx * (ey * cp - bp * fy) - dy * (ex * cp - bp * fx) + ap * (ex * fy - ey * fx) < 0;
  }
  function circumradius(ax, ay, bx, by, cx, cy) {
    const dx = bx - ax;
    const dy = by - ay;
    const ex = cx - ax;
    const ey = cy - ay;
    const bl2 = dx * dx + dy * dy;
    const cl = ex * ex + ey * ey;
    const d = 0.5 / (dx * ey - dy * ex);
    const x2 = (ey * bl2 - dy * cl) * d;
    const y2 = (dx * cl - ex * bl2) * d;
    return x2 * x2 + y2 * y2;
  }
  function circumcenter(ax, ay, bx, by, cx, cy) {
    const dx = bx - ax;
    const dy = by - ay;
    const ex = cx - ax;
    const ey = cy - ay;
    const bl2 = dx * dx + dy * dy;
    const cl = ex * ex + ey * ey;
    const d = 0.5 / (dx * ey - dy * ex);
    const x2 = ax + (ey * bl2 - dy * cl) * d;
    const y2 = ay + (dx * cl - ex * bl2) * d;
    return { x: x2, y: y2 };
  }
  function quicksort(ids, dists, left, right) {
    if (right - left <= 20) {
      for (let i = left + 1; i <= right; i++) {
        const temp2 = ids[i];
        const tempDist = dists[temp2];
        let j = i - 1;
        while (j >= left && dists[ids[j]] > tempDist) ids[j + 1] = ids[j--];
        ids[j + 1] = temp2;
      }
    } else {
      const median2 = left + right >> 1;
      let i = left + 1;
      let j = right;
      swap(ids, median2, i);
      if (dists[ids[left]] > dists[ids[right]]) swap(ids, left, right);
      if (dists[ids[i]] > dists[ids[right]]) swap(ids, i, right);
      if (dists[ids[left]] > dists[ids[i]]) swap(ids, left, i);
      const temp2 = ids[i];
      const tempDist = dists[temp2];
      while (true) {
        do
          i++;
        while (dists[ids[i]] < tempDist);
        do
          j--;
        while (dists[ids[j]] > tempDist);
        if (j < i) break;
        swap(ids, i, j);
      }
      ids[left + 1] = ids[j];
      ids[j] = temp2;
      if (right - i + 1 >= j - left) {
        quicksort(ids, dists, i, right);
        quicksort(ids, dists, left, j - 1);
      } else {
        quicksort(ids, dists, left, j - 1);
        quicksort(ids, dists, i, right);
      }
    }
  }
  function swap(arr, i, j) {
    const tmp = arr[i];
    arr[i] = arr[j];
    arr[j] = tmp;
  }
  function defaultGetX(p) {
    return p[0];
  }
  function defaultGetY(p) {
    return p[1];
  }
  const epsilon = 1e-6;
  class Path {
    constructor() {
      this._x0 = this._y0 = // start of current subpath
      this._x1 = this._y1 = null;
      this._ = "";
    }
    moveTo(x2, y2) {
      this._ += `M${this._x0 = this._x1 = +x2},${this._y0 = this._y1 = +y2}`;
    }
    closePath() {
      if (this._x1 !== null) {
        this._x1 = this._x0, this._y1 = this._y0;
        this._ += "Z";
      }
    }
    lineTo(x2, y2) {
      this._ += `L${this._x1 = +x2},${this._y1 = +y2}`;
    }
    arc(x2, y2, r) {
      x2 = +x2, y2 = +y2, r = +r;
      const x02 = x2 + r;
      const y02 = y2;
      if (r < 0) throw new Error("negative radius");
      if (this._x1 === null) this._ += `M${x02},${y02}`;
      else if (Math.abs(this._x1 - x02) > epsilon || Math.abs(this._y1 - y02) > epsilon) this._ += "L" + x02 + "," + y02;
      if (!r) return;
      this._ += `A${r},${r},0,1,1,${x2 - r},${y2}A${r},${r},0,1,1,${this._x1 = x02},${this._y1 = y02}`;
    }
    rect(x2, y2, w2, h2) {
      this._ += `M${this._x0 = this._x1 = +x2},${this._y0 = this._y1 = +y2}h${+w2}v${+h2}h${-w2}Z`;
    }
    value() {
      return this._ || null;
    }
  }
  class Polygon {
    constructor() {
      this._ = [];
    }
    moveTo(x2, y2) {
      this._.push([x2, y2]);
    }
    closePath() {
      this._.push(this._[0].slice());
    }
    lineTo(x2, y2) {
      this._.push([x2, y2]);
    }
    value() {
      return this._.length ? this._ : null;
    }
  }
  let Voronoi$1 = class Voronoi {
    constructor(delaunay, [xmin, ymin, xmax, ymax] = [0, 0, 960, 500]) {
      if (!((xmax = +xmax) >= (xmin = +xmin)) || !((ymax = +ymax) >= (ymin = +ymin))) throw new Error("invalid bounds");
      this.delaunay = delaunay;
      this._circumcenters = new Float64Array(delaunay.points.length * 2);
      this.vectors = new Float64Array(delaunay.points.length * 2);
      this.xmax = xmax, this.xmin = xmin;
      this.ymax = ymax, this.ymin = ymin;
      this._init();
    }
    update() {
      this.delaunay.update();
      this._init();
      return this;
    }
    _init() {
      const { delaunay: { points: points2, hull, triangles }, vectors } = this;
      let bx, by;
      const circumcenters = this.circumcenters = this._circumcenters.subarray(0, triangles.length / 3 * 2);
      for (let i = 0, j = 0, n = triangles.length, x2, y2; i < n; i += 3, j += 2) {
        const t12 = triangles[i] * 2;
        const t22 = triangles[i + 1] * 2;
        const t32 = triangles[i + 2] * 2;
        const x13 = points2[t12];
        const y13 = points2[t12 + 1];
        const x22 = points2[t22];
        const y22 = points2[t22 + 1];
        const x3 = points2[t32];
        const y3 = points2[t32 + 1];
        const dx = x22 - x13;
        const dy = y22 - y13;
        const ex = x3 - x13;
        const ey = y3 - y13;
        const ab = (dx * ey - dy * ex) * 2;
        if (Math.abs(ab) < 1e-9) {
          if (bx === void 0) {
            bx = by = 0;
            for (const i2 of hull) bx += points2[i2 * 2], by += points2[i2 * 2 + 1];
            bx /= hull.length, by /= hull.length;
          }
          const a2 = 1e9 * Math.sign((bx - x13) * ey - (by - y13) * ex);
          x2 = (x13 + x3) / 2 - a2 * ey;
          y2 = (y13 + y3) / 2 + a2 * ex;
        } else {
          const d = 1 / ab;
          const bl2 = dx * dx + dy * dy;
          const cl = ex * ex + ey * ey;
          x2 = x13 + (ey * bl2 - dy * cl) * d;
          y2 = y13 + (dx * cl - ex * bl2) * d;
        }
        circumcenters[j] = x2;
        circumcenters[j + 1] = y2;
      }
      let h2 = hull[hull.length - 1];
      let p02, p1 = h2 * 4;
      let x02, x12 = points2[2 * h2];
      let y02, y12 = points2[2 * h2 + 1];
      vectors.fill(0);
      for (let i = 0; i < hull.length; ++i) {
        h2 = hull[i];
        p02 = p1, x02 = x12, y02 = y12;
        p1 = h2 * 4, x12 = points2[2 * h2], y12 = points2[2 * h2 + 1];
        vectors[p02 + 2] = vectors[p1] = y02 - y12;
        vectors[p02 + 3] = vectors[p1 + 1] = x12 - x02;
      }
    }
    render(context2) {
      const buffer = context2 == null ? context2 = new Path() : void 0;
      const { delaunay: { halfedges, inedges, hull }, circumcenters, vectors } = this;
      if (hull.length <= 1) return null;
      for (let i = 0, n = halfedges.length; i < n; ++i) {
        const j = halfedges[i];
        if (j < i) continue;
        const ti = Math.floor(i / 3) * 2;
        const tj = Math.floor(j / 3) * 2;
        const xi = circumcenters[ti];
        const yi = circumcenters[ti + 1];
        const xj = circumcenters[tj];
        const yj = circumcenters[tj + 1];
        this._renderSegment(xi, yi, xj, yj, context2);
      }
      let h0, h1 = hull[hull.length - 1];
      for (let i = 0; i < hull.length; ++i) {
        h0 = h1, h1 = hull[i];
        const t = Math.floor(inedges[h1] / 3) * 2;
        const x2 = circumcenters[t];
        const y2 = circumcenters[t + 1];
        const v = h0 * 4;
        const p = this._project(x2, y2, vectors[v + 2], vectors[v + 3]);
        if (p) this._renderSegment(x2, y2, p[0], p[1], context2);
      }
      return buffer && buffer.value();
    }
    renderBounds(context2) {
      const buffer = context2 == null ? context2 = new Path() : void 0;
      context2.rect(this.xmin, this.ymin, this.xmax - this.xmin, this.ymax - this.ymin);
      return buffer && buffer.value();
    }
    renderCell(i, context2) {
      const buffer = context2 == null ? context2 = new Path() : void 0;
      const points2 = this._clip(i);
      if (points2 === null || !points2.length) return;
      context2.moveTo(points2[0], points2[1]);
      let n = points2.length;
      while (points2[0] === points2[n - 2] && points2[1] === points2[n - 1] && n > 1) n -= 2;
      for (let i2 = 2; i2 < n; i2 += 2) {
        if (points2[i2] !== points2[i2 - 2] || points2[i2 + 1] !== points2[i2 - 1])
          context2.lineTo(points2[i2], points2[i2 + 1]);
      }
      context2.closePath();
      return buffer && buffer.value();
    }
    *cellPolygons() {
      const { delaunay: { points: points2 } } = this;
      for (let i = 0, n = points2.length / 2; i < n; ++i) {
        const cell2 = this.cellPolygon(i);
        if (cell2) cell2.index = i, yield cell2;
      }
    }
    cellPolygon(i) {
      const polygon = new Polygon();
      this.renderCell(i, polygon);
      return polygon.value();
    }
    _renderSegment(x02, y02, x12, y12, context2) {
      let S;
      const c0 = this._regioncode(x02, y02);
      const c1 = this._regioncode(x12, y12);
      if (c0 === 0 && c1 === 0) {
        context2.moveTo(x02, y02);
        context2.lineTo(x12, y12);
      } else if (S = this._clipSegment(x02, y02, x12, y12, c0, c1)) {
        context2.moveTo(S[0], S[1]);
        context2.lineTo(S[2], S[3]);
      }
    }
    contains(i, x2, y2) {
      if ((x2 = +x2, x2 !== x2) || (y2 = +y2, y2 !== y2)) return false;
      return this.delaunay._step(i, x2, y2) === i;
    }
    *neighbors(i) {
      const ci = this._clip(i);
      if (ci) for (const j of this.delaunay.neighbors(i)) {
        const cj = this._clip(j);
        if (cj) loop: for (let ai = 0, li = ci.length; ai < li; ai += 2) {
          for (let aj = 0, lj = cj.length; aj < lj; aj += 2) {
            if (ci[ai] === cj[aj] && ci[ai + 1] === cj[aj + 1] && ci[(ai + 2) % li] === cj[(aj + lj - 2) % lj] && ci[(ai + 3) % li] === cj[(aj + lj - 1) % lj]) {
              yield j;
              break loop;
            }
          }
        }
      }
    }
    _cell(i) {
      const { circumcenters, delaunay: { inedges, halfedges, triangles } } = this;
      const e0 = inedges[i];
      if (e0 === -1) return null;
      const points2 = [];
      let e3 = e0;
      do {
        const t = Math.floor(e3 / 3);
        points2.push(circumcenters[t * 2], circumcenters[t * 2 + 1]);
        e3 = e3 % 3 === 2 ? e3 - 2 : e3 + 1;
        if (triangles[e3] !== i) break;
        e3 = halfedges[e3];
      } while (e3 !== e0 && e3 !== -1);
      return points2;
    }
    _clip(i) {
      if (i === 0 && this.delaunay.hull.length === 1) {
        return [this.xmax, this.ymin, this.xmax, this.ymax, this.xmin, this.ymax, this.xmin, this.ymin];
      }
      const points2 = this._cell(i);
      if (points2 === null) return null;
      const { vectors: V } = this;
      const v = i * 4;
      return this._simplify(V[v] || V[v + 1] ? this._clipInfinite(i, points2, V[v], V[v + 1], V[v + 2], V[v + 3]) : this._clipFinite(i, points2));
    }
    _clipFinite(i, points2) {
      const n = points2.length;
      let P = null;
      let x02, y02, x12 = points2[n - 2], y12 = points2[n - 1];
      let c0, c1 = this._regioncode(x12, y12);
      let e0, e1 = 0;
      for (let j = 0; j < n; j += 2) {
        x02 = x12, y02 = y12, x12 = points2[j], y12 = points2[j + 1];
        c0 = c1, c1 = this._regioncode(x12, y12);
        if (c0 === 0 && c1 === 0) {
          e0 = e1, e1 = 0;
          if (P) P.push(x12, y12);
          else P = [x12, y12];
        } else {
          let S, sx0, sy0, sx1, sy1;
          if (c0 === 0) {
            if ((S = this._clipSegment(x02, y02, x12, y12, c0, c1)) === null) continue;
            [sx0, sy0, sx1, sy1] = S;
          } else {
            if ((S = this._clipSegment(x12, y12, x02, y02, c1, c0)) === null) continue;
            [sx1, sy1, sx0, sy0] = S;
            e0 = e1, e1 = this._edgecode(sx0, sy0);
            if (e0 && e1) this._edge(i, e0, e1, P, P.length);
            if (P) P.push(sx0, sy0);
            else P = [sx0, sy0];
          }
          e0 = e1, e1 = this._edgecode(sx1, sy1);
          if (e0 && e1) this._edge(i, e0, e1, P, P.length);
          if (P) P.push(sx1, sy1);
          else P = [sx1, sy1];
        }
      }
      if (P) {
        e0 = e1, e1 = this._edgecode(P[0], P[1]);
        if (e0 && e1) this._edge(i, e0, e1, P, P.length);
      } else if (this.contains(i, (this.xmin + this.xmax) / 2, (this.ymin + this.ymax) / 2)) {
        return [this.xmax, this.ymin, this.xmax, this.ymax, this.xmin, this.ymax, this.xmin, this.ymin];
      }
      return P;
    }
    _clipSegment(x02, y02, x12, y12, c0, c1) {
      const flip2 = c0 < c1;
      if (flip2) [x02, y02, x12, y12, c0, c1] = [x12, y12, x02, y02, c1, c0];
      while (true) {
        if (c0 === 0 && c1 === 0) return flip2 ? [x12, y12, x02, y02] : [x02, y02, x12, y12];
        if (c0 & c1) return null;
        let x2, y2, c2 = c0 || c1;
        if (c2 & 8) x2 = x02 + (x12 - x02) * (this.ymax - y02) / (y12 - y02), y2 = this.ymax;
        else if (c2 & 4) x2 = x02 + (x12 - x02) * (this.ymin - y02) / (y12 - y02), y2 = this.ymin;
        else if (c2 & 2) y2 = y02 + (y12 - y02) * (this.xmax - x02) / (x12 - x02), x2 = this.xmax;
        else y2 = y02 + (y12 - y02) * (this.xmin - x02) / (x12 - x02), x2 = this.xmin;
        if (c0) x02 = x2, y02 = y2, c0 = this._regioncode(x02, y02);
        else x12 = x2, y12 = y2, c1 = this._regioncode(x12, y12);
      }
    }
    _clipInfinite(i, points2, vx0, vy0, vxn, vyn) {
      let P = Array.from(points2), p;
      if (p = this._project(P[0], P[1], vx0, vy0)) P.unshift(p[0], p[1]);
      if (p = this._project(P[P.length - 2], P[P.length - 1], vxn, vyn)) P.push(p[0], p[1]);
      if (P = this._clipFinite(i, P)) {
        for (let j = 0, n = P.length, c0, c1 = this._edgecode(P[n - 2], P[n - 1]); j < n; j += 2) {
          c0 = c1, c1 = this._edgecode(P[j], P[j + 1]);
          if (c0 && c1) j = this._edge(i, c0, c1, P, j), n = P.length;
        }
      } else if (this.contains(i, (this.xmin + this.xmax) / 2, (this.ymin + this.ymax) / 2)) {
        P = [this.xmin, this.ymin, this.xmax, this.ymin, this.xmax, this.ymax, this.xmin, this.ymax];
      }
      return P;
    }
    _edge(i, e0, e1, P, j) {
      while (e0 !== e1) {
        let x2, y2;
        switch (e0) {
          case 5:
            e0 = 4;
            continue;
          case 4:
            e0 = 6, x2 = this.xmax, y2 = this.ymin;
            break;
          case 6:
            e0 = 2;
            continue;
          case 2:
            e0 = 10, x2 = this.xmax, y2 = this.ymax;
            break;
          case 10:
            e0 = 8;
            continue;
          case 8:
            e0 = 9, x2 = this.xmin, y2 = this.ymax;
            break;
          case 9:
            e0 = 1;
            continue;
          case 1:
            e0 = 5, x2 = this.xmin, y2 = this.ymin;
            break;
        }
        if ((P[j] !== x2 || P[j + 1] !== y2) && this.contains(i, x2, y2)) {
          P.splice(j, 0, x2, y2), j += 2;
        }
      }
      return j;
    }
    _project(x02, y02, vx, vy) {
      let t = Infinity, c2, x2, y2;
      if (vy < 0) {
        if (y02 <= this.ymin) return null;
        if ((c2 = (this.ymin - y02) / vy) < t) y2 = this.ymin, x2 = x02 + (t = c2) * vx;
      } else if (vy > 0) {
        if (y02 >= this.ymax) return null;
        if ((c2 = (this.ymax - y02) / vy) < t) y2 = this.ymax, x2 = x02 + (t = c2) * vx;
      }
      if (vx > 0) {
        if (x02 >= this.xmax) return null;
        if ((c2 = (this.xmax - x02) / vx) < t) x2 = this.xmax, y2 = y02 + (t = c2) * vy;
      } else if (vx < 0) {
        if (x02 <= this.xmin) return null;
        if ((c2 = (this.xmin - x02) / vx) < t) x2 = this.xmin, y2 = y02 + (t = c2) * vy;
      }
      return [x2, y2];
    }
    _edgecode(x2, y2) {
      return (x2 === this.xmin ? 1 : x2 === this.xmax ? 2 : 0) | (y2 === this.ymin ? 4 : y2 === this.ymax ? 8 : 0);
    }
    _regioncode(x2, y2) {
      return (x2 < this.xmin ? 1 : x2 > this.xmax ? 2 : 0) | (y2 < this.ymin ? 4 : y2 > this.ymax ? 8 : 0);
    }
    _simplify(P) {
      if (P && P.length > 4) {
        for (let i = 0; i < P.length; i += 2) {
          const j = (i + 2) % P.length, k = (i + 4) % P.length;
          if (P[i] === P[j] && P[j] === P[k] || P[i + 1] === P[j + 1] && P[j + 1] === P[k + 1]) {
            P.splice(j, 2), i -= 2;
          }
        }
        if (!P.length) P = null;
      }
      return P;
    }
  };
  const tau = 2 * Math.PI, pow = Math.pow;
  function pointX(p) {
    return p[0];
  }
  function pointY(p) {
    return p[1];
  }
  function collinear(d) {
    const { triangles, coords } = d;
    for (let i = 0; i < triangles.length; i += 3) {
      const a2 = 2 * triangles[i], b2 = 2 * triangles[i + 1], c2 = 2 * triangles[i + 2], cross2 = (coords[c2] - coords[a2]) * (coords[b2 + 1] - coords[a2 + 1]) - (coords[b2] - coords[a2]) * (coords[c2 + 1] - coords[a2 + 1]);
      if (cross2 > 1e-10) return false;
    }
    return true;
  }
  function jitter(x2, y2, r) {
    return [x2 + Math.sin(x2 + y2) * r, y2 + Math.cos(x2 - y2) * r];
  }
  class Delaunay {
    static from(points2, fx = pointX, fy = pointY, that) {
      return new Delaunay("length" in points2 ? flatArray(points2, fx, fy, that) : Float64Array.from(flatIterable(points2, fx, fy, that)));
    }
    constructor(points2) {
      this._delaunator = new Delaunator(points2);
      this.inedges = new Int32Array(points2.length / 2);
      this._hullIndex = new Int32Array(points2.length / 2);
      this.points = this._delaunator.coords;
      this._init();
    }
    update() {
      this._delaunator.update();
      this._init();
      return this;
    }
    _init() {
      const d = this._delaunator, points2 = this.points;
      if (d.hull && d.hull.length > 2 && collinear(d)) {
        this.collinear = Int32Array.from({ length: points2.length / 2 }, (_, i) => i).sort((i, j) => points2[2 * i] - points2[2 * j] || points2[2 * i + 1] - points2[2 * j + 1]);
        const e3 = this.collinear[0], f = this.collinear[this.collinear.length - 1], bounds2 = [points2[2 * e3], points2[2 * e3 + 1], points2[2 * f], points2[2 * f + 1]], r = 1e-8 * Math.hypot(bounds2[3] - bounds2[1], bounds2[2] - bounds2[0]);
        for (let i = 0, n = points2.length / 2; i < n; ++i) {
          const p = jitter(points2[2 * i], points2[2 * i + 1], r);
          points2[2 * i] = p[0];
          points2[2 * i + 1] = p[1];
        }
        this._delaunator = new Delaunator(points2);
      } else {
        delete this.collinear;
      }
      const halfedges = this.halfedges = this._delaunator.halfedges;
      const hull = this.hull = this._delaunator.hull;
      const triangles = this.triangles = this._delaunator.triangles;
      const inedges = this.inedges.fill(-1);
      const hullIndex = this._hullIndex.fill(-1);
      for (let e3 = 0, n = halfedges.length; e3 < n; ++e3) {
        const p = triangles[e3 % 3 === 2 ? e3 - 2 : e3 + 1];
        if (halfedges[e3] === -1 || inedges[p] === -1) inedges[p] = e3;
      }
      for (let i = 0, n = hull.length; i < n; ++i) {
        hullIndex[hull[i]] = i;
      }
      if (hull.length <= 2 && hull.length > 0) {
        this.triangles = new Int32Array(3).fill(-1);
        this.halfedges = new Int32Array(3).fill(-1);
        this.triangles[0] = hull[0];
        inedges[hull[0]] = 1;
        if (hull.length === 2) {
          inedges[hull[1]] = 0;
          this.triangles[1] = hull[1];
          this.triangles[2] = hull[1];
        }
      }
    }
    voronoi(bounds2) {
      return new Voronoi$1(this, bounds2);
    }
    *neighbors(i) {
      const { inedges, hull, _hullIndex, halfedges, triangles, collinear: collinear2 } = this;
      if (collinear2) {
        const l = collinear2.indexOf(i);
        if (l > 0) yield collinear2[l - 1];
        if (l < collinear2.length - 1) yield collinear2[l + 1];
        return;
      }
      const e0 = inedges[i];
      if (e0 === -1) return;
      let e3 = e0, p02 = -1;
      do {
        yield p02 = triangles[e3];
        e3 = e3 % 3 === 2 ? e3 - 2 : e3 + 1;
        if (triangles[e3] !== i) return;
        e3 = halfedges[e3];
        if (e3 === -1) {
          const p = hull[(_hullIndex[i] + 1) % hull.length];
          if (p !== p02) yield p;
          return;
        }
      } while (e3 !== e0);
    }
    find(x2, y2, i = 0) {
      if ((x2 = +x2, x2 !== x2) || (y2 = +y2, y2 !== y2)) return -1;
      const i0 = i;
      let c2;
      while ((c2 = this._step(i, x2, y2)) >= 0 && c2 !== i && c2 !== i0) i = c2;
      return c2;
    }
    _step(i, x2, y2) {
      const { inedges, hull, _hullIndex, halfedges, triangles, points: points2 } = this;
      if (inedges[i] === -1 || !points2.length) return (i + 1) % (points2.length >> 1);
      let c2 = i;
      let dc = pow(x2 - points2[i * 2], 2) + pow(y2 - points2[i * 2 + 1], 2);
      const e0 = inedges[i];
      let e3 = e0;
      do {
        let t = triangles[e3];
        const dt = pow(x2 - points2[t * 2], 2) + pow(y2 - points2[t * 2 + 1], 2);
        if (dt < dc) dc = dt, c2 = t;
        e3 = e3 % 3 === 2 ? e3 - 2 : e3 + 1;
        if (triangles[e3] !== i) break;
        e3 = halfedges[e3];
        if (e3 === -1) {
          e3 = hull[(_hullIndex[i] + 1) % hull.length];
          if (e3 !== t) {
            if (pow(x2 - points2[e3 * 2], 2) + pow(y2 - points2[e3 * 2 + 1], 2) < dc) return e3;
          }
          break;
        }
      } while (e3 !== e0);
      return c2;
    }
    render(context2) {
      const buffer = context2 == null ? context2 = new Path() : void 0;
      const { points: points2, halfedges, triangles } = this;
      for (let i = 0, n = halfedges.length; i < n; ++i) {
        const j = halfedges[i];
        if (j < i) continue;
        const ti = triangles[i] * 2;
        const tj = triangles[j] * 2;
        context2.moveTo(points2[ti], points2[ti + 1]);
        context2.lineTo(points2[tj], points2[tj + 1]);
      }
      this.renderHull(context2);
      return buffer && buffer.value();
    }
    renderPoints(context2, r) {
      if (r === void 0 && (!context2 || typeof context2.moveTo !== "function")) r = context2, context2 = null;
      r = r == void 0 ? 2 : +r;
      const buffer = context2 == null ? context2 = new Path() : void 0;
      const { points: points2 } = this;
      for (let i = 0, n = points2.length; i < n; i += 2) {
        const x2 = points2[i], y2 = points2[i + 1];
        context2.moveTo(x2 + r, y2);
        context2.arc(x2, y2, r, 0, tau);
      }
      return buffer && buffer.value();
    }
    renderHull(context2) {
      const buffer = context2 == null ? context2 = new Path() : void 0;
      const { hull, points: points2 } = this;
      const h2 = hull[0] * 2, n = hull.length;
      context2.moveTo(points2[h2], points2[h2 + 1]);
      for (let i = 1; i < n; ++i) {
        const h3 = 2 * hull[i];
        context2.lineTo(points2[h3], points2[h3 + 1]);
      }
      context2.closePath();
      return buffer && buffer.value();
    }
    hullPolygon() {
      const polygon = new Polygon();
      this.renderHull(polygon);
      return polygon.value();
    }
    renderTriangle(i, context2) {
      const buffer = context2 == null ? context2 = new Path() : void 0;
      const { points: points2, triangles } = this;
      const t02 = triangles[i *= 3] * 2;
      const t12 = triangles[i + 1] * 2;
      const t22 = triangles[i + 2] * 2;
      context2.moveTo(points2[t02], points2[t02 + 1]);
      context2.lineTo(points2[t12], points2[t12 + 1]);
      context2.lineTo(points2[t22], points2[t22 + 1]);
      context2.closePath();
      return buffer && buffer.value();
    }
    *trianglePolygons() {
      const { triangles } = this;
      for (let i = 0, n = triangles.length / 3; i < n; ++i) {
        yield this.trianglePolygon(i);
      }
    }
    trianglePolygon(i) {
      const polygon = new Polygon();
      this.renderTriangle(i, polygon);
      return polygon.value();
    }
  }
  function flatArray(points2, fx, fy, that) {
    const n = points2.length;
    const array2 = new Float64Array(n * 2);
    for (let i = 0; i < n; ++i) {
      const p = points2[i];
      array2[i * 2] = fx.call(that, p, i, points2);
      array2[i * 2 + 1] = fy.call(that, p, i, points2);
    }
    return array2;
  }
  function* flatIterable(points2, fx, fy, that) {
    let i = 0;
    for (const p of points2) {
      yield fx.call(that, p, i, points2);
      yield fy.call(that, p, i, points2);
      ++i;
    }
  }
  function Voronoi(params2) {
    Transform.call(this, null, params2);
  }
  Voronoi.Definition = {
    "type": "Voronoi",
    "metadata": {
      "modifies": true
    },
    "params": [{
      "name": "x",
      "type": "field",
      "required": true
    }, {
      "name": "y",
      "type": "field",
      "required": true
    }, {
      "name": "size",
      "type": "number",
      "array": true,
      "length": 2
    }, {
      "name": "extent",
      "type": "array",
      "array": true,
      "length": 2,
      "default": [[-1e5, -1e5], [1e5, 1e5]],
      "content": {
        "type": "number",
        "array": true,
        "length": 2
      }
    }, {
      "name": "as",
      "type": "string",
      "default": "path"
    }]
  };
  const defaultExtent = [-1e5, -1e5, 1e5, 1e5];
  inherits(Voronoi, Transform, {
    transform(_, pulse2) {
      const as = _.as || "path", data2 = pulse2.source;
      if (!data2 || !data2.length) return pulse2;
      let s = _.size;
      s = s ? [0, 0, s[0], s[1]] : (s = _.extent) ? [s[0][0], s[0][1], s[1][0], s[1][1]] : defaultExtent;
      const voronoi2 = this.value = Delaunay.from(data2, _.x, _.y).voronoi(s);
      for (let i = 0, n = data2.length; i < n; ++i) {
        const polygon = voronoi2.cellPolygon(i);
        data2[i][as] = polygon && !isPoint(polygon) ? toPathString(polygon) : null;
      }
      return pulse2.reflow(_.modified()).modifies(as);
    }
  });
  function toPathString(p) {
    const x2 = p[0][0], y2 = p[0][1];
    let n = p.length - 1;
    for (; p[n][0] === x2 && p[n][1] === y2; --n) ;
    return "M" + p.slice(0, n + 1).join("L") + "Z";
  }
  function isPoint(p) {
    return p.length === 2 && p[0][0] === p[1][0] && p[0][1] === p[1][1];
  }
  const voronoi = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
    __proto__: null,
    voronoi: Voronoi
  }, Symbol.toStringTag, { value: "Module" }));
  var cloudRadians = Math.PI / 180, cw = 1 << 11 >> 5, ch = 1 << 11;
  function cloud() {
    var size = [256, 256], text2, font2, fontSize2, fontStyle, fontWeight2, rotate2, padding2, spiral = archimedeanSpiral, words = [], random2 = Math.random, cloud2 = {};
    cloud2.layout = function() {
      var contextAndRatio = getContext2(domCanvas()), board = zeroArray((size[0] >> 5) * size[1]), bounds2 = null, n = words.length, i = -1, tags = [], data2 = words.map((d2) => ({
        text: text2(d2),
        font: font2(d2),
        style: fontStyle(d2),
        weight: fontWeight2(d2),
        rotate: rotate2(d2),
        size: ~~(fontSize2(d2) + 1e-14),
        padding: padding2(d2),
        xoff: 0,
        yoff: 0,
        x1: 0,
        y1: 0,
        x0: 0,
        y0: 0,
        hasText: false,
        sprite: null,
        datum: d2
      })).sort((a2, b2) => b2.size - a2.size);
      while (++i < n) {
        var d = data2[i];
        d.x = size[0] * (random2() + 0.5) >> 1;
        d.y = size[1] * (random2() + 0.5) >> 1;
        cloudSprite(contextAndRatio, d, data2, i);
        if (d.hasText && place2(board, d, bounds2)) {
          tags.push(d);
          if (bounds2) cloudBounds(bounds2, d);
          else bounds2 = [{
            x: d.x + d.x0,
            y: d.y + d.y0
          }, {
            x: d.x + d.x1,
            y: d.y + d.y1
          }];
          d.x -= size[0] >> 1;
          d.y -= size[1] >> 1;
        }
      }
      return tags;
    };
    function getContext2(canvas) {
      canvas.width = canvas.height = 1;
      var ratio = Math.sqrt(canvas.getContext("2d").getImageData(0, 0, 1, 1).data.length >> 2);
      canvas.width = (cw << 5) / ratio;
      canvas.height = ch / ratio;
      var context2 = canvas.getContext("2d");
      context2.fillStyle = context2.strokeStyle = "red";
      context2.textAlign = "center";
      return {
        context: context2,
        ratio
      };
    }
    function place2(board, tag, bounds2) {
      var startX = tag.x, startY = tag.y, maxDelta = Math.hypot(size[0], size[1]), s = spiral(size), dt = random2() < 0.5 ? 1 : -1, t = -dt, dxdy, dx, dy;
      while (dxdy = s(t += dt)) {
        dx = ~~dxdy[0];
        dy = ~~dxdy[1];
        if (Math.min(Math.abs(dx), Math.abs(dy)) >= maxDelta) break;
        tag.x = startX + dx;
        tag.y = startY + dy;
        if (tag.x + tag.x0 < 0 || tag.y + tag.y0 < 0 || tag.x + tag.x1 > size[0] || tag.y + tag.y1 > size[1]) continue;
        if (!bounds2 || !cloudCollide(tag, board, size[0])) {
          if (!bounds2 || collideRects(tag, bounds2)) {
            var sprite = tag.sprite, w2 = tag.width >> 5, sw = size[0] >> 5, lx2 = tag.x - (w2 << 4), sx = lx2 & 127, msx = 32 - sx, h2 = tag.y1 - tag.y0, x2 = (tag.y + tag.y0) * sw + (lx2 >> 5), last;
            for (var j = 0; j < h2; j++) {
              last = 0;
              for (var i = 0; i <= w2; i++) {
                board[x2 + i] |= last << msx | (i < w2 ? (last = sprite[j * w2 + i]) >>> sx : 0);
              }
              x2 += sw;
            }
            tag.sprite = null;
            return true;
          }
        }
      }
      return false;
    }
    cloud2.words = function(_) {
      if (arguments.length) {
        words = _;
        return cloud2;
      } else {
        return words;
      }
    };
    cloud2.size = function(_) {
      if (arguments.length) {
        size = [+_[0], +_[1]];
        return cloud2;
      } else {
        return size;
      }
    };
    cloud2.font = function(_) {
      if (arguments.length) {
        font2 = functor(_);
        return cloud2;
      } else {
        return font2;
      }
    };
    cloud2.fontStyle = function(_) {
      if (arguments.length) {
        fontStyle = functor(_);
        return cloud2;
      } else {
        return fontStyle;
      }
    };
    cloud2.fontWeight = function(_) {
      if (arguments.length) {
        fontWeight2 = functor(_);
        return cloud2;
      } else {
        return fontWeight2;
      }
    };
    cloud2.rotate = function(_) {
      if (arguments.length) {
        rotate2 = functor(_);
        return cloud2;
      } else {
        return rotate2;
      }
    };
    cloud2.text = function(_) {
      if (arguments.length) {
        text2 = functor(_);
        return cloud2;
      } else {
        return text2;
      }
    };
    cloud2.spiral = function(_) {
      if (arguments.length) {
        spiral = spirals[_] || _;
        return cloud2;
      } else {
        return spiral;
      }
    };
    cloud2.fontSize = function(_) {
      if (arguments.length) {
        fontSize2 = functor(_);
        return cloud2;
      } else {
        return fontSize2;
      }
    };
    cloud2.padding = function(_) {
      if (arguments.length) {
        padding2 = functor(_);
        return cloud2;
      } else {
        return padding2;
      }
    };
    cloud2.random = function(_) {
      if (arguments.length) {
        random2 = _;
        return cloud2;
      } else {
        return random2;
      }
    };
    return cloud2;
  }
  function cloudSprite(contextAndRatio, d, data2, di) {
    if (d.sprite) return;
    var c2 = contextAndRatio.context, ratio = contextAndRatio.ratio;
    c2.clearRect(0, 0, (cw << 5) / ratio, ch / ratio);
    var x2 = 0, y2 = 0, maxh = 0, n = data2.length, w2, w32, h2, i, j;
    --di;
    while (++di < n) {
      d = data2[di];
      c2.save();
      c2.font = d.style + " " + d.weight + " " + ~~((d.size + 1) / ratio) + "px " + d.font;
      w2 = c2.measureText(d.text + "m").width * ratio;
      h2 = d.size << 1;
      if (d.rotate) {
        var sr = Math.sin(d.rotate * cloudRadians), cr2 = Math.cos(d.rotate * cloudRadians), wcr = w2 * cr2, wsr = w2 * sr, hcr = h2 * cr2, hsr = h2 * sr;
        w2 = Math.max(Math.abs(wcr + hsr), Math.abs(wcr - hsr)) + 31 >> 5 << 5;
        h2 = ~~Math.max(Math.abs(wsr + hcr), Math.abs(wsr - hcr));
      } else {
        w2 = w2 + 31 >> 5 << 5;
      }
      if (h2 > maxh) maxh = h2;
      if (x2 + w2 >= cw << 5) {
        x2 = 0;
        y2 += maxh;
        maxh = 0;
      }
      if (y2 + h2 >= ch) break;
      c2.translate((x2 + (w2 >> 1)) / ratio, (y2 + (h2 >> 1)) / ratio);
      if (d.rotate) c2.rotate(d.rotate * cloudRadians);
      c2.fillText(d.text, 0, 0);
      if (d.padding) {
        c2.lineWidth = 2 * d.padding;
        c2.strokeText(d.text, 0, 0);
      }
      c2.restore();
      d.width = w2;
      d.height = h2;
      d.xoff = x2;
      d.yoff = y2;
      d.x1 = w2 >> 1;
      d.y1 = h2 >> 1;
      d.x0 = -d.x1;
      d.y0 = -d.y1;
      d.hasText = true;
      x2 += w2;
    }
    var pixels = c2.getImageData(0, 0, (cw << 5) / ratio, ch / ratio).data, sprite = [];
    while (--di >= 0) {
      d = data2[di];
      if (!d.hasText) continue;
      w2 = d.width;
      w32 = w2 >> 5;
      h2 = d.y1 - d.y0;
      for (i = 0; i < h2 * w32; i++) sprite[i] = 0;
      x2 = d.xoff;
      if (x2 == null) return;
      y2 = d.yoff;
      var seen = 0, seenRow = -1;
      for (j = 0; j < h2; j++) {
        for (i = 0; i < w2; i++) {
          var k = w32 * j + (i >> 5), m2 = pixels[(y2 + j) * (cw << 5) + (x2 + i) << 2] ? 1 << 31 - i % 32 : 0;
          sprite[k] |= m2;
          seen |= m2;
        }
        if (seen) seenRow = j;
        else {
          d.y0++;
          h2--;
          j--;
          y2++;
        }
      }
      d.y1 = d.y0 + seenRow;
      d.sprite = sprite.slice(0, (d.y1 - d.y0) * w32);
    }
  }
  function cloudCollide(tag, board, sw) {
    sw >>= 5;
    var sprite = tag.sprite, w2 = tag.width >> 5, lx2 = tag.x - (w2 << 4), sx = lx2 & 127, msx = 32 - sx, h2 = tag.y1 - tag.y0, x2 = (tag.y + tag.y0) * sw + (lx2 >> 5), last;
    for (var j = 0; j < h2; j++) {
      last = 0;
      for (var i = 0; i <= w2; i++) {
        if ((last << msx | (i < w2 ? (last = sprite[j * w2 + i]) >>> sx : 0)) & board[x2 + i]) return true;
      }
      x2 += sw;
    }
    return false;
  }
  function cloudBounds(bounds2, d) {
    var b0 = bounds2[0], b1 = bounds2[1];
    if (d.x + d.x0 < b0.x) b0.x = d.x + d.x0;
    if (d.y + d.y0 < b0.y) b0.y = d.y + d.y0;
    if (d.x + d.x1 > b1.x) b1.x = d.x + d.x1;
    if (d.y + d.y1 > b1.y) b1.y = d.y + d.y1;
  }
  function collideRects(a2, b2) {
    return a2.x + a2.x1 > b2[0].x && a2.x + a2.x0 < b2[1].x && a2.y + a2.y1 > b2[0].y && a2.y + a2.y0 < b2[1].y;
  }
  function archimedeanSpiral(size) {
    var e3 = size[0] / size[1];
    return function(t) {
      return [e3 * (t *= 0.1) * Math.cos(t), t * Math.sin(t)];
    };
  }
  function rectangularSpiral(size) {
    var dy = 4, dx = dy * size[0] / size[1], x2 = 0, y2 = 0;
    return function(t) {
      var sign2 = t < 0 ? -1 : 1;
      switch (Math.sqrt(1 + 4 * sign2 * t) - sign2 & 3) {
        case 0:
          x2 += dx;
          break;
        case 1:
          y2 += dy;
          break;
        case 2:
          x2 -= dx;
          break;
        default:
          y2 -= dy;
          break;
      }
      return [x2, y2];
    };
  }
  function zeroArray(n) {
    var a2 = [], i = -1;
    while (++i < n) a2[i] = 0;
    return a2;
  }
  function functor(d) {
    return typeof d === "function" ? d : function() {
      return d;
    };
  }
  var spirals = {
    archimedean: archimedeanSpiral,
    rectangular: rectangularSpiral
  };
  const Output = ["x", "y", "font", "fontSize", "fontStyle", "fontWeight", "angle"];
  const Params$1 = ["text", "font", "rotate", "fontSize", "fontStyle", "fontWeight"];
  function Wordcloud(params2) {
    Transform.call(this, cloud(), params2);
  }
  Wordcloud.Definition = {
    "type": "Wordcloud",
    "metadata": {
      "modifies": true
    },
    "params": [{
      "name": "size",
      "type": "number",
      "array": true,
      "length": 2
    }, {
      "name": "font",
      "type": "string",
      "expr": true,
      "default": "sans-serif"
    }, {
      "name": "fontStyle",
      "type": "string",
      "expr": true,
      "default": "normal"
    }, {
      "name": "fontWeight",
      "type": "string",
      "expr": true,
      "default": "normal"
    }, {
      "name": "fontSize",
      "type": "number",
      "expr": true,
      "default": 14
    }, {
      "name": "fontSizeRange",
      "type": "number",
      "array": "nullable",
      "default": [10, 50]
    }, {
      "name": "rotate",
      "type": "number",
      "expr": true,
      "default": 0
    }, {
      "name": "text",
      "type": "field"
    }, {
      "name": "spiral",
      "type": "string",
      "values": ["archimedean", "rectangular"]
    }, {
      "name": "padding",
      "type": "number",
      "expr": true
    }, {
      "name": "as",
      "type": "string",
      "array": true,
      "length": 7,
      "default": Output
    }]
  };
  inherits(Wordcloud, Transform, {
    transform(_, pulse2) {
      if (_.size && !(_.size[0] && _.size[1])) {
        error$1("Wordcloud size dimensions must be non-zero.");
      }
      function modp(param2) {
        const p = _[param2];
        return isFunction(p) && pulse2.modified(p.fields);
      }
      const mod = _.modified();
      if (!(mod || pulse2.changed(pulse2.ADD_REM) || Params$1.some(modp))) return;
      const data2 = pulse2.materialize(pulse2.SOURCE).source, layout = this.value, as = _.as || Output;
      let fontSize2 = _.fontSize || 14, range2;
      isFunction(fontSize2) ? range2 = _.fontSizeRange : fontSize2 = constant$5(fontSize2);
      if (range2) {
        const fsize = fontSize2, sizeScale = scale$4("sqrt")().domain(extent(data2, fsize)).range(range2);
        fontSize2 = (x2) => sizeScale(fsize(x2));
      }
      data2.forEach((t) => {
        t[as[0]] = NaN;
        t[as[1]] = NaN;
        t[as[3]] = 0;
      });
      const words = layout.words(data2).text(_.text).size(_.size || [500, 500]).padding(_.padding || 1).spiral(_.spiral || "archimedean").rotate(_.rotate || 0).font(_.font || "sans-serif").fontStyle(_.fontStyle || "normal").fontWeight(_.fontWeight || "normal").fontSize(fontSize2).random(random).layout();
      const size = layout.size(), dx = size[0] >> 1, dy = size[1] >> 1, n = words.length;
      for (let i = 0, w2, t; i < n; ++i) {
        w2 = words[i];
        t = w2.datum;
        t[as[0]] = w2.x + dx;
        t[as[1]] = w2.y + dy;
        t[as[2]] = w2.font;
        t[as[3]] = w2.size;
        t[as[4]] = w2.style;
        t[as[5]] = w2.weight;
        t[as[6]] = w2.rotate;
      }
      return pulse2.reflow(mod).modifies(as);
    }
  });
  const wordcloud = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
    __proto__: null,
    wordcloud: Wordcloud
  }, Symbol.toStringTag, { value: "Module" }));
  const array8 = (n) => new Uint8Array(n);
  const array16 = (n) => new Uint16Array(n);
  const array32 = (n) => new Uint32Array(n);
  function Bitmaps() {
    let width2 = 8, data2 = [], seen = array32(0), curr = array$1(0, width2), prev = array$1(0, width2);
    return {
      data: () => data2,
      seen: () => seen = lengthen(seen, data2.length),
      add(array2) {
        for (let i = 0, j = data2.length, n = array2.length, t; i < n; ++i) {
          t = array2[i];
          t._index = j++;
          data2.push(t);
        }
      },
      remove(num, map2) {
        const n = data2.length, copy2 = Array(n - num), reindex = data2;
        let t, i, j;
        for (i = 0; !map2[i] && i < n; ++i) {
          copy2[i] = data2[i];
          reindex[i] = i;
        }
        for (j = i; i < n; ++i) {
          t = data2[i];
          if (!map2[i]) {
            reindex[i] = j;
            curr[j] = curr[i];
            prev[j] = prev[i];
            copy2[j] = t;
            t._index = j++;
          } else {
            reindex[i] = -1;
          }
          curr[i] = 0;
        }
        data2 = copy2;
        return reindex;
      },
      size: () => data2.length,
      curr: () => curr,
      prev: () => prev,
      reset: (k) => prev[k] = curr[k],
      all: () => width2 < 257 ? 255 : width2 < 65537 ? 65535 : 4294967295,
      set(k, one2) {
        curr[k] |= one2;
      },
      clear(k, one2) {
        curr[k] &= ~one2;
      },
      resize(n, m2) {
        const k = curr.length;
        if (n > k || m2 > width2) {
          width2 = Math.max(m2, width2);
          curr = array$1(n, width2, curr);
          prev = array$1(n, width2);
        }
      }
    };
  }
  function lengthen(array2, length2, copy2) {
    if (array2.length >= length2) return array2;
    copy2 = copy2 || new array2.constructor(length2);
    copy2.set(array2);
    return copy2;
  }
  function array$1(n, m2, array2) {
    const copy2 = (m2 < 257 ? array8 : m2 < 65537 ? array16 : array32)(n);
    if (array2) copy2.set(array2);
    return copy2;
  }
  function Dimension(index2, i, query) {
    const bit = 1 << i;
    return {
      one: bit,
      zero: ~bit,
      range: query.slice(),
      bisect: index2.bisect,
      index: index2.index,
      size: index2.size,
      onAdd(added, curr) {
        const dim = this, range2 = dim.bisect(dim.range, added.value), idx = added.index, lo = range2[0], hi = range2[1], n1 = idx.length;
        let i2;
        for (i2 = 0; i2 < lo; ++i2) curr[idx[i2]] |= bit;
        for (i2 = hi; i2 < n1; ++i2) curr[idx[i2]] |= bit;
        return dim;
      }
    };
  }
  function SortedIndex() {
    let index2 = array32(0), value2 = [], size = 0;
    function insert2(key2, data2, base) {
      if (!data2.length) return [];
      const n0 = size, n1 = data2.length, addi = array32(n1);
      let addv = Array(n1), oldv, oldi, i;
      for (i = 0; i < n1; ++i) {
        addv[i] = key2(data2[i]);
        addi[i] = i;
      }
      addv = sort$1(addv, addi);
      if (n0) {
        oldv = value2;
        oldi = index2;
        value2 = Array(n0 + n1);
        index2 = array32(n0 + n1);
        merge$1(base, oldv, oldi, n0, addv, addi, n1, value2, index2);
      } else {
        if (base > 0) for (i = 0; i < n1; ++i) {
          addi[i] += base;
        }
        value2 = addv;
        index2 = addi;
      }
      size = n0 + n1;
      return {
        index: addi,
        value: addv
      };
    }
    function remove2(num, map2) {
      const n = size;
      let idx, i, j;
      for (i = 0; !map2[index2[i]] && i < n; ++i) ;
      for (j = i; i < n; ++i) {
        if (!map2[idx = index2[i]]) {
          index2[j] = idx;
          value2[j] = value2[i];
          ++j;
        }
      }
      size = n - num;
    }
    function reindex(map2) {
      for (let i = 0, n = size; i < n; ++i) {
        index2[i] = map2[index2[i]];
      }
    }
    function bisect2(range2, array2) {
      let n;
      if (array2) {
        n = array2.length;
      } else {
        array2 = value2;
        n = size;
      }
      return [bisectLeft$1(array2, range2[0], 0, n), bisectRight$1(array2, range2[1], 0, n)];
    }
    return {
      insert: insert2,
      remove: remove2,
      bisect: bisect2,
      reindex,
      index: () => index2,
      size: () => size
    };
  }
  function sort$1(values2, index2) {
    values2.sort.call(index2, (a2, b2) => {
      const x2 = values2[a2], y2 = values2[b2];
      return x2 < y2 ? -1 : x2 > y2 ? 1 : 0;
    });
    return permute(values2, index2);
  }
  function merge$1(base, value0, index0, n0, value1, index1, n1, value2, index2) {
    let i0 = 0, i1 = 0, i;
    for (i = 0; i0 < n0 && i1 < n1; ++i) {
      if (value0[i0] < value1[i1]) {
        value2[i] = value0[i0];
        index2[i] = index0[i0++];
      } else {
        value2[i] = value1[i1];
        index2[i] = index1[i1++] + base;
      }
    }
    for (; i0 < n0; ++i0, ++i) {
      value2[i] = value0[i0];
      index2[i] = index0[i0];
    }
    for (; i1 < n1; ++i1, ++i) {
      value2[i] = value1[i1];
      index2[i] = index1[i1] + base;
    }
  }
  function CrossFilter(params2) {
    Transform.call(this, Bitmaps(), params2);
    this._indices = null;
    this._dims = null;
  }
  CrossFilter.Definition = {
    "type": "CrossFilter",
    "metadata": {},
    "params": [{
      "name": "fields",
      "type": "field",
      "array": true,
      "required": true
    }, {
      "name": "query",
      "type": "array",
      "array": true,
      "required": true,
      "content": {
        "type": "number",
        "array": true,
        "length": 2
      }
    }]
  };
  inherits(CrossFilter, Transform, {
    transform(_, pulse2) {
      if (!this._dims) {
        return this.init(_, pulse2);
      } else {
        var init2 = _.modified("fields") || _.fields.some((f) => pulse2.modified(f.fields));
        return init2 ? this.reinit(_, pulse2) : this.eval(_, pulse2);
      }
    },
    init(_, pulse2) {
      const fields = _.fields, query = _.query, indices = this._indices = {}, dims = this._dims = [], m2 = query.length;
      let i = 0, key2, index2;
      for (; i < m2; ++i) {
        key2 = fields[i].fname;
        index2 = indices[key2] || (indices[key2] = SortedIndex());
        dims.push(Dimension(index2, i, query[i]));
      }
      return this.eval(_, pulse2);
    },
    reinit(_, pulse2) {
      const output2 = pulse2.materialize().fork(), fields = _.fields, query = _.query, indices = this._indices, dims = this._dims, bits = this.value, curr = bits.curr(), prev = bits.prev(), all = bits.all(), out = output2.rem = output2.add, mod = output2.mod, m2 = query.length, adds = {};
      let add2, index2, key2, mods, remMap, modMap, i, n, f;
      prev.set(curr);
      if (pulse2.rem.length) {
        remMap = this.remove(_, pulse2, output2);
      }
      if (pulse2.add.length) {
        bits.add(pulse2.add);
      }
      if (pulse2.mod.length) {
        modMap = {};
        for (mods = pulse2.mod, i = 0, n = mods.length; i < n; ++i) {
          modMap[mods[i]._index] = 1;
        }
      }
      for (i = 0; i < m2; ++i) {
        f = fields[i];
        if (!dims[i] || _.modified("fields", i) || pulse2.modified(f.fields)) {
          key2 = f.fname;
          if (!(add2 = adds[key2])) {
            indices[key2] = index2 = SortedIndex();
            adds[key2] = add2 = index2.insert(f, pulse2.source, 0);
          }
          dims[i] = Dimension(index2, i, query[i]).onAdd(add2, curr);
        }
      }
      for (i = 0, n = bits.data().length; i < n; ++i) {
        if (remMap[i]) {
          continue;
        } else if (prev[i] !== curr[i]) {
          out.push(i);
        } else if (modMap[i] && curr[i] !== all) {
          mod.push(i);
        }
      }
      bits.mask = (1 << m2) - 1;
      return output2;
    },
    eval(_, pulse2) {
      const output2 = pulse2.materialize().fork(), m2 = this._dims.length;
      let mask = 0;
      if (pulse2.rem.length) {
        this.remove(_, pulse2, output2);
        mask |= (1 << m2) - 1;
      }
      if (_.modified("query") && !_.modified("fields")) {
        mask |= this.update(_, pulse2, output2);
      }
      if (pulse2.add.length) {
        this.insert(_, pulse2, output2);
        mask |= (1 << m2) - 1;
      }
      if (pulse2.mod.length) {
        this.modify(pulse2, output2);
        mask |= (1 << m2) - 1;
      }
      this.value.mask = mask;
      return output2;
    },
    insert(_, pulse2, output2) {
      const tuples = pulse2.add, bits = this.value, dims = this._dims, indices = this._indices, fields = _.fields, adds = {}, out = output2.add, n = bits.size() + tuples.length, m2 = dims.length;
      let k = bits.size(), j, key2, add2;
      bits.resize(n, m2);
      bits.add(tuples);
      const curr = bits.curr(), prev = bits.prev(), all = bits.all();
      for (j = 0; j < m2; ++j) {
        key2 = fields[j].fname;
        add2 = adds[key2] || (adds[key2] = indices[key2].insert(fields[j], tuples, k));
        dims[j].onAdd(add2, curr);
      }
      for (; k < n; ++k) {
        prev[k] = all;
        if (curr[k] !== all) out.push(k);
      }
    },
    modify(pulse2, output2) {
      const out = output2.mod, bits = this.value, curr = bits.curr(), all = bits.all(), tuples = pulse2.mod;
      let i, n, k;
      for (i = 0, n = tuples.length; i < n; ++i) {
        k = tuples[i]._index;
        if (curr[k] !== all) out.push(k);
      }
    },
    remove(_, pulse2, output2) {
      const indices = this._indices, bits = this.value, curr = bits.curr(), prev = bits.prev(), all = bits.all(), map2 = {}, out = output2.rem, tuples = pulse2.rem;
      let i, n, k, f;
      for (i = 0, n = tuples.length; i < n; ++i) {
        k = tuples[i]._index;
        map2[k] = 1;
        prev[k] = f = curr[k];
        curr[k] = all;
        if (f !== all) out.push(k);
      }
      for (k in indices) {
        indices[k].remove(n, map2);
      }
      this.reindex(pulse2, n, map2);
      return map2;
    },
    // reindex filters and indices after propagation completes
    reindex(pulse2, num, map2) {
      const indices = this._indices, bits = this.value;
      pulse2.runAfter(() => {
        const indexMap = bits.remove(num, map2);
        for (const key2 in indices) indices[key2].reindex(indexMap);
      });
    },
    update(_, pulse2, output2) {
      const dims = this._dims, query = _.query, stamp = pulse2.stamp, m2 = dims.length;
      let mask = 0, i, q;
      output2.filters = 0;
      for (q = 0; q < m2; ++q) {
        if (_.modified("query", q)) {
          i = q;
          ++mask;
        }
      }
      if (mask === 1) {
        mask = dims[i].one;
        this.incrementOne(dims[i], query[i], output2.add, output2.rem);
      } else {
        for (q = 0, mask = 0; q < m2; ++q) {
          if (!_.modified("query", q)) continue;
          mask |= dims[q].one;
          this.incrementAll(dims[q], query[q], stamp, output2.add);
          output2.rem = output2.add;
        }
      }
      return mask;
    },
    incrementAll(dim, query, stamp, out) {
      const bits = this.value, seen = bits.seen(), curr = bits.curr(), prev = bits.prev(), index2 = dim.index(), old = dim.bisect(dim.range), range2 = dim.bisect(query), lo1 = range2[0], hi1 = range2[1], lo0 = old[0], hi0 = old[1], one2 = dim.one;
      let i, j, k;
      if (lo1 < lo0) {
        for (i = lo1, j = Math.min(lo0, hi1); i < j; ++i) {
          k = index2[i];
          if (seen[k] !== stamp) {
            prev[k] = curr[k];
            seen[k] = stamp;
            out.push(k);
          }
          curr[k] ^= one2;
        }
      } else if (lo1 > lo0) {
        for (i = lo0, j = Math.min(lo1, hi0); i < j; ++i) {
          k = index2[i];
          if (seen[k] !== stamp) {
            prev[k] = curr[k];
            seen[k] = stamp;
            out.push(k);
          }
          curr[k] ^= one2;
        }
      }
      if (hi1 > hi0) {
        for (i = Math.max(lo1, hi0), j = hi1; i < j; ++i) {
          k = index2[i];
          if (seen[k] !== stamp) {
            prev[k] = curr[k];
            seen[k] = stamp;
            out.push(k);
          }
          curr[k] ^= one2;
        }
      } else if (hi1 < hi0) {
        for (i = Math.max(lo0, hi1), j = hi0; i < j; ++i) {
          k = index2[i];
          if (seen[k] !== stamp) {
            prev[k] = curr[k];
            seen[k] = stamp;
            out.push(k);
          }
          curr[k] ^= one2;
        }
      }
      dim.range = query.slice();
    },
    incrementOne(dim, query, add2, rem2) {
      const bits = this.value, curr = bits.curr(), index2 = dim.index(), old = dim.bisect(dim.range), range2 = dim.bisect(query), lo1 = range2[0], hi1 = range2[1], lo0 = old[0], hi0 = old[1], one2 = dim.one;
      let i, j, k;
      if (lo1 < lo0) {
        for (i = lo1, j = Math.min(lo0, hi1); i < j; ++i) {
          k = index2[i];
          curr[k] ^= one2;
          add2.push(k);
        }
      } else if (lo1 > lo0) {
        for (i = lo0, j = Math.min(lo1, hi0); i < j; ++i) {
          k = index2[i];
          curr[k] ^= one2;
          rem2.push(k);
        }
      }
      if (hi1 > hi0) {
        for (i = Math.max(lo1, hi0), j = hi1; i < j; ++i) {
          k = index2[i];
          curr[k] ^= one2;
          add2.push(k);
        }
      } else if (hi1 < hi0) {
        for (i = Math.max(lo0, hi1), j = hi0; i < j; ++i) {
          k = index2[i];
          curr[k] ^= one2;
          rem2.push(k);
        }
      }
      dim.range = query.slice();
    }
  });
  function ResolveFilter(params2) {
    Transform.call(this, null, params2);
  }
  ResolveFilter.Definition = {
    "type": "ResolveFilter",
    "metadata": {},
    "params": [{
      "name": "ignore",
      "type": "number",
      "required": true,
      "description": "A bit mask indicating which filters to ignore."
    }, {
      "name": "filter",
      "type": "object",
      "required": true,
      "description": "Per-tuple filter bitmaps from a CrossFilter transform."
    }]
  };
  inherits(ResolveFilter, Transform, {
    transform(_, pulse2) {
      const ignore = ~(_.ignore || 0), bitmap = _.filter, mask = bitmap.mask;
      if ((mask & ignore) === 0) return pulse2.StopPropagation;
      const output2 = pulse2.fork(pulse2.ALL), data2 = bitmap.data(), curr = bitmap.curr(), prev = bitmap.prev(), pass = (k) => !(curr[k] & ignore) ? data2[k] : null;
      output2.filter(output2.MOD, pass);
      if (!(mask & mask - 1)) {
        output2.filter(output2.ADD, pass);
        output2.filter(output2.REM, (k) => (curr[k] & ignore) === mask ? data2[k] : null);
      } else {
        output2.filter(output2.ADD, (k) => {
          const c2 = curr[k] & ignore, f = !c2 && c2 ^ prev[k] & ignore;
          return f ? data2[k] : null;
        });
        output2.filter(output2.REM, (k) => {
          const c2 = curr[k] & ignore, f = c2 && !(c2 ^ (c2 ^ prev[k] & ignore));
          return f ? data2[k] : null;
        });
      }
      return output2.filter(output2.SOURCE, (t) => pass(t._index));
    }
  });
  const xf = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
    __proto__: null,
    crossfilter: CrossFilter,
    resolvefilter: ResolveFilter
  }, Symbol.toStringTag, { value: "Module" }));
  const RawCode$1 = "RawCode";
  const Literal$1 = "Literal";
  const Property$1 = "Property";
  const Identifier$1 = "Identifier";
  const ArrayExpression$1 = "ArrayExpression";
  const BinaryExpression$1 = "BinaryExpression";
  const CallExpression$1 = "CallExpression";
  const ConditionalExpression$1 = "ConditionalExpression";
  const LogicalExpression$1 = "LogicalExpression";
  const MemberExpression$1 = "MemberExpression";
  const ObjectExpression$1 = "ObjectExpression";
  const UnaryExpression$1 = "UnaryExpression";
  function ASTNode$1(type2) {
    this.type = type2;
  }
  ASTNode$1.prototype.visit = function(visitor) {
    let c2, i, n;
    if (visitor(this)) return 1;
    for (c2 = children$1(this), i = 0, n = c2.length; i < n; ++i) {
      if (c2[i].visit(visitor)) return 1;
    }
  };
  function children$1(node) {
    switch (node.type) {
      case ArrayExpression$1:
        return node.elements;
      case BinaryExpression$1:
      case LogicalExpression$1:
        return [node.left, node.right];
      case CallExpression$1:
        return [node.callee].concat(node.arguments);
      case ConditionalExpression$1:
        return [node.test, node.consequent, node.alternate];
      case MemberExpression$1:
        return [node.object, node.property];
      case ObjectExpression$1:
        return node.properties;
      case Property$1:
        return [node.key, node.value];
      case UnaryExpression$1:
        return [node.argument];
      case Identifier$1:
      case Literal$1:
      case RawCode$1:
      default:
        return [];
    }
  }
  var TokenName$1, source$1, index$1, length$1, lookahead$1;
  var TokenBooleanLiteral$1 = 1, TokenEOF$1 = 2, TokenIdentifier$1 = 3, TokenKeyword$1 = 4, TokenNullLiteral$1 = 5, TokenNumericLiteral$1 = 6, TokenPunctuator$1 = 7, TokenStringLiteral$1 = 8, TokenRegularExpression$1 = 9;
  TokenName$1 = {};
  TokenName$1[TokenBooleanLiteral$1] = "Boolean";
  TokenName$1[TokenEOF$1] = "<end>";
  TokenName$1[TokenIdentifier$1] = "Identifier";
  TokenName$1[TokenKeyword$1] = "Keyword";
  TokenName$1[TokenNullLiteral$1] = "Null";
  TokenName$1[TokenNumericLiteral$1] = "Numeric";
  TokenName$1[TokenPunctuator$1] = "Punctuator";
  TokenName$1[TokenStringLiteral$1] = "String";
  TokenName$1[TokenRegularExpression$1] = "RegularExpression";
  var SyntaxArrayExpression$1 = "ArrayExpression", SyntaxBinaryExpression$1 = "BinaryExpression", SyntaxCallExpression$1 = "CallExpression", SyntaxConditionalExpression$1 = "ConditionalExpression", SyntaxIdentifier$1 = "Identifier", SyntaxLiteral$1 = "Literal", SyntaxLogicalExpression$1 = "LogicalExpression", SyntaxMemberExpression$1 = "MemberExpression", SyntaxObjectExpression$1 = "ObjectExpression", SyntaxProperty$1 = "Property", SyntaxUnaryExpression$1 = "UnaryExpression";
  var MessageUnexpectedToken$1 = "Unexpected token %0", MessageUnexpectedNumber$1 = "Unexpected number", MessageUnexpectedString$1 = "Unexpected string", MessageUnexpectedIdentifier$1 = "Unexpected identifier", MessageUnexpectedReserved$1 = "Unexpected reserved word", MessageUnexpectedEOS$1 = "Unexpected end of input", MessageInvalidRegExp$1 = "Invalid regular expression", MessageUnterminatedRegExp$1 = "Invalid regular expression: missing /", MessageStrictOctalLiteral$1 = "Octal literals are not allowed in strict mode.", MessageStrictDuplicateProperty$1 = "Duplicate data property in object literal not allowed in strict mode";
  var ILLEGAL$2 = "ILLEGAL", DISABLED$1 = "Disabled.";
  var RegexNonAsciiIdentifierStart$1 = new RegExp("[\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u08A0-\\u08B2\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58\\u0C59\\u0C60\\u0C61\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D60\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F4\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19C1-\\u19C7\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2E2F\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FCC\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA69D\\uA6A0-\\uA6EF\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA78E\\uA790-\\uA7AD\\uA7B0\\uA7B1\\uA7F7-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uA9E0-\\uA9E4\\uA9E6-\\uA9EF\\uA9FA-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB5F\\uAB64\\uAB65\\uABC0-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]"), RegexNonAsciiIdentifierPart$1 = new RegExp("[\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0300-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u0483-\\u0487\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0610-\\u061A\\u0620-\\u0669\\u066E-\\u06D3\\u06D5-\\u06DC\\u06DF-\\u06E8\\u06EA-\\u06FC\\u06FF\\u0710-\\u074A\\u074D-\\u07B1\\u07C0-\\u07F5\\u07FA\\u0800-\\u082D\\u0840-\\u085B\\u08A0-\\u08B2\\u08E4-\\u0963\\u0966-\\u096F\\u0971-\\u0983\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BC-\\u09C4\\u09C7\\u09C8\\u09CB-\\u09CE\\u09D7\\u09DC\\u09DD\\u09DF-\\u09E3\\u09E6-\\u09F1\\u0A01-\\u0A03\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A3C\\u0A3E-\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A59-\\u0A5C\\u0A5E\\u0A66-\\u0A75\\u0A81-\\u0A83\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABC-\\u0AC5\\u0AC7-\\u0AC9\\u0ACB-\\u0ACD\\u0AD0\\u0AE0-\\u0AE3\\u0AE6-\\u0AEF\\u0B01-\\u0B03\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3C-\\u0B44\\u0B47\\u0B48\\u0B4B-\\u0B4D\\u0B56\\u0B57\\u0B5C\\u0B5D\\u0B5F-\\u0B63\\u0B66-\\u0B6F\\u0B71\\u0B82\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCD\\u0BD0\\u0BD7\\u0BE6-\\u0BEF\\u0C00-\\u0C03\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C58\\u0C59\\u0C60-\\u0C63\\u0C66-\\u0C6F\\u0C81-\\u0C83\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBC-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCD\\u0CD5\\u0CD6\\u0CDE\\u0CE0-\\u0CE3\\u0CE6-\\u0CEF\\u0CF1\\u0CF2\\u0D01-\\u0D03\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D-\\u0D44\\u0D46-\\u0D48\\u0D4A-\\u0D4E\\u0D57\\u0D60-\\u0D63\\u0D66-\\u0D6F\\u0D7A-\\u0D7F\\u0D82\\u0D83\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0DCA\\u0DCF-\\u0DD4\\u0DD6\\u0DD8-\\u0DDF\\u0DE6-\\u0DEF\\u0DF2\\u0DF3\\u0E01-\\u0E3A\\u0E40-\\u0E4E\\u0E50-\\u0E59\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB9\\u0EBB-\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EC8-\\u0ECD\\u0ED0-\\u0ED9\\u0EDC-\\u0EDF\\u0F00\\u0F18\\u0F19\\u0F20-\\u0F29\\u0F35\\u0F37\\u0F39\\u0F3E-\\u0F47\\u0F49-\\u0F6C\\u0F71-\\u0F84\\u0F86-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u1000-\\u1049\\u1050-\\u109D\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u135D-\\u135F\\u1380-\\u138F\\u13A0-\\u13F4\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1714\\u1720-\\u1734\\u1740-\\u1753\\u1760-\\u176C\\u176E-\\u1770\\u1772\\u1773\\u1780-\\u17D3\\u17D7\\u17DC\\u17DD\\u17E0-\\u17E9\\u180B-\\u180D\\u1810-\\u1819\\u1820-\\u1877\\u1880-\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1920-\\u192B\\u1930-\\u193B\\u1946-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u19D0-\\u19D9\\u1A00-\\u1A1B\\u1A20-\\u1A5E\\u1A60-\\u1A7C\\u1A7F-\\u1A89\\u1A90-\\u1A99\\u1AA7\\u1AB0-\\u1ABD\\u1B00-\\u1B4B\\u1B50-\\u1B59\\u1B6B-\\u1B73\\u1B80-\\u1BF3\\u1C00-\\u1C37\\u1C40-\\u1C49\\u1C4D-\\u1C7D\\u1CD0-\\u1CD2\\u1CD4-\\u1CF6\\u1CF8\\u1CF9\\u1D00-\\u1DF5\\u1DFC-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u200C\\u200D\\u203F\\u2040\\u2054\\u2071\\u207F\\u2090-\\u209C\\u20D0-\\u20DC\\u20E1\\u20E5-\\u20F0\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D7F-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2DE0-\\u2DFF\\u2E2F\\u3005-\\u3007\\u3021-\\u302F\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u3099\\u309A\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FCC\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA62B\\uA640-\\uA66F\\uA674-\\uA67D\\uA67F-\\uA69D\\uA69F-\\uA6F1\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA78E\\uA790-\\uA7AD\\uA7B0\\uA7B1\\uA7F7-\\uA827\\uA840-\\uA873\\uA880-\\uA8C4\\uA8D0-\\uA8D9\\uA8E0-\\uA8F7\\uA8FB\\uA900-\\uA92D\\uA930-\\uA953\\uA960-\\uA97C\\uA980-\\uA9C0\\uA9CF-\\uA9D9\\uA9E0-\\uA9FE\\uAA00-\\uAA36\\uAA40-\\uAA4D\\uAA50-\\uAA59\\uAA60-\\uAA76\\uAA7A-\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEF\\uAAF2-\\uAAF6\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB5F\\uAB64\\uAB65\\uABC0-\\uABEA\\uABEC\\uABED\\uABF0-\\uABF9\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE00-\\uFE0F\\uFE20-\\uFE2D\\uFE33\\uFE34\\uFE4D-\\uFE4F\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF10-\\uFF19\\uFF21-\\uFF3A\\uFF3F\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]");
  function assert$1(condition, message) {
    if (!condition) {
      throw new Error("ASSERT: " + message);
    }
  }
  function isDecimalDigit$1(ch2) {
    return ch2 >= 48 && ch2 <= 57;
  }
  function isHexDigit$1(ch2) {
    return "0123456789abcdefABCDEF".includes(ch2);
  }
  function isOctalDigit$1(ch2) {
    return "01234567".includes(ch2);
  }
  function isWhiteSpace$1(ch2) {
    return ch2 === 32 || ch2 === 9 || ch2 === 11 || ch2 === 12 || ch2 === 160 || ch2 >= 5760 && [5760, 6158, 8192, 8193, 8194, 8195, 8196, 8197, 8198, 8199, 8200, 8201, 8202, 8239, 8287, 12288, 65279].includes(ch2);
  }
  function isLineTerminator$1(ch2) {
    return ch2 === 10 || ch2 === 13 || ch2 === 8232 || ch2 === 8233;
  }
  function isIdentifierStart$1(ch2) {
    return ch2 === 36 || ch2 === 95 || // $ (dollar) and _ (underscore)
    ch2 >= 65 && ch2 <= 90 || // A..Z
    ch2 >= 97 && ch2 <= 122 || // a..z
    ch2 === 92 || // \ (backslash)
    ch2 >= 128 && RegexNonAsciiIdentifierStart$1.test(String.fromCharCode(ch2));
  }
  function isIdentifierPart$1(ch2) {
    return ch2 === 36 || ch2 === 95 || // $ (dollar) and _ (underscore)
    ch2 >= 65 && ch2 <= 90 || // A..Z
    ch2 >= 97 && ch2 <= 122 || // a..z
    ch2 >= 48 && ch2 <= 57 || // 0..9
    ch2 === 92 || // \ (backslash)
    ch2 >= 128 && RegexNonAsciiIdentifierPart$1.test(String.fromCharCode(ch2));
  }
  const keywords$1 = {
    "if": 1,
    "in": 1,
    "do": 1,
    "var": 1,
    "for": 1,
    "new": 1,
    "try": 1,
    "let": 1,
    "this": 1,
    "else": 1,
    "case": 1,
    "void": 1,
    "with": 1,
    "enum": 1,
    "while": 1,
    "break": 1,
    "catch": 1,
    "throw": 1,
    "const": 1,
    "yield": 1,
    "class": 1,
    "super": 1,
    "return": 1,
    "typeof": 1,
    "delete": 1,
    "switch": 1,
    "export": 1,
    "import": 1,
    "public": 1,
    "static": 1,
    "default": 1,
    "finally": 1,
    "extends": 1,
    "package": 1,
    "private": 1,
    "function": 1,
    "continue": 1,
    "debugger": 1,
    "interface": 1,
    "protected": 1,
    "instanceof": 1,
    "implements": 1
  };
  function skipComment$1() {
    while (index$1 < length$1) {
      const ch2 = source$1.charCodeAt(index$1);
      if (isWhiteSpace$1(ch2) || isLineTerminator$1(ch2)) {
        ++index$1;
      } else {
        break;
      }
    }
  }
  function scanHexEscape$1(prefix) {
    var i, len, ch2, code = 0;
    len = prefix === "u" ? 4 : 2;
    for (i = 0; i < len; ++i) {
      if (index$1 < length$1 && isHexDigit$1(source$1[index$1])) {
        ch2 = source$1[index$1++];
        code = code * 16 + "0123456789abcdef".indexOf(ch2.toLowerCase());
      } else {
        throwError$1({}, MessageUnexpectedToken$1, ILLEGAL$2);
      }
    }
    return String.fromCharCode(code);
  }
  function scanUnicodeCodePointEscape$1() {
    var ch2, code, cu1, cu2;
    ch2 = source$1[index$1];
    code = 0;
    if (ch2 === "}") {
      throwError$1({}, MessageUnexpectedToken$1, ILLEGAL$2);
    }
    while (index$1 < length$1) {
      ch2 = source$1[index$1++];
      if (!isHexDigit$1(ch2)) {
        break;
      }
      code = code * 16 + "0123456789abcdef".indexOf(ch2.toLowerCase());
    }
    if (code > 1114111 || ch2 !== "}") {
      throwError$1({}, MessageUnexpectedToken$1, ILLEGAL$2);
    }
    if (code <= 65535) {
      return String.fromCharCode(code);
    }
    cu1 = (code - 65536 >> 10) + 55296;
    cu2 = (code - 65536 & 1023) + 56320;
    return String.fromCharCode(cu1, cu2);
  }
  function getEscapedIdentifier$1() {
    var ch2, id2;
    ch2 = source$1.charCodeAt(index$1++);
    id2 = String.fromCharCode(ch2);
    if (ch2 === 92) {
      if (source$1.charCodeAt(index$1) !== 117) {
        throwError$1({}, MessageUnexpectedToken$1, ILLEGAL$2);
      }
      ++index$1;
      ch2 = scanHexEscape$1("u");
      if (!ch2 || ch2 === "\\" || !isIdentifierStart$1(ch2.charCodeAt(0))) {
        throwError$1({}, MessageUnexpectedToken$1, ILLEGAL$2);
      }
      id2 = ch2;
    }
    while (index$1 < length$1) {
      ch2 = source$1.charCodeAt(index$1);
      if (!isIdentifierPart$1(ch2)) {
        break;
      }
      ++index$1;
      id2 += String.fromCharCode(ch2);
      if (ch2 === 92) {
        id2 = id2.substr(0, id2.length - 1);
        if (source$1.charCodeAt(index$1) !== 117) {
          throwError$1({}, MessageUnexpectedToken$1, ILLEGAL$2);
        }
        ++index$1;
        ch2 = scanHexEscape$1("u");
        if (!ch2 || ch2 === "\\" || !isIdentifierPart$1(ch2.charCodeAt(0))) {
          throwError$1({}, MessageUnexpectedToken$1, ILLEGAL$2);
        }
        id2 += ch2;
      }
    }
    return id2;
  }
  function getIdentifier$1() {
    var start, ch2;
    start = index$1++;
    while (index$1 < length$1) {
      ch2 = source$1.charCodeAt(index$1);
      if (ch2 === 92) {
        index$1 = start;
        return getEscapedIdentifier$1();
      }
      if (isIdentifierPart$1(ch2)) {
        ++index$1;
      } else {
        break;
      }
    }
    return source$1.slice(start, index$1);
  }
  function scanIdentifier$1() {
    var start, id2, type2;
    start = index$1;
    id2 = source$1.charCodeAt(index$1) === 92 ? getEscapedIdentifier$1() : getIdentifier$1();
    if (id2.length === 1) {
      type2 = TokenIdentifier$1;
    } else if (keywords$1.hasOwnProperty(id2)) {
      type2 = TokenKeyword$1;
    } else if (id2 === "null") {
      type2 = TokenNullLiteral$1;
    } else if (id2 === "true" || id2 === "false") {
      type2 = TokenBooleanLiteral$1;
    } else {
      type2 = TokenIdentifier$1;
    }
    return {
      type: type2,
      value: id2,
      start,
      end: index$1
    };
  }
  function scanPunctuator$1() {
    var start = index$1, code = source$1.charCodeAt(index$1), code2, ch1 = source$1[index$1], ch2, ch3, ch4;
    switch (code) {
      case 46:
      case 40:
      case 41:
      case 59:
      case 44:
      case 123:
      case 125:
      case 91:
      case 93:
      case 58:
      case 63:
      case 126:
        ++index$1;
        return {
          type: TokenPunctuator$1,
          value: String.fromCharCode(code),
          start,
          end: index$1
        };
      default:
        code2 = source$1.charCodeAt(index$1 + 1);
        if (code2 === 61) {
          switch (code) {
            case 43:
            case 45:
            case 47:
            case 60:
            case 62:
            case 94:
            case 124:
            case 37:
            case 38:
            case 42:
              index$1 += 2;
              return {
                type: TokenPunctuator$1,
                value: String.fromCharCode(code) + String.fromCharCode(code2),
                start,
                end: index$1
              };
            case 33:
            case 61:
              index$1 += 2;
              if (source$1.charCodeAt(index$1) === 61) {
                ++index$1;
              }
              return {
                type: TokenPunctuator$1,
                value: source$1.slice(start, index$1),
                start,
                end: index$1
              };
          }
        }
    }
    ch4 = source$1.substr(index$1, 4);
    if (ch4 === ">>>=") {
      index$1 += 4;
      return {
        type: TokenPunctuator$1,
        value: ch4,
        start,
        end: index$1
      };
    }
    ch3 = ch4.substr(0, 3);
    if (ch3 === ">>>" || ch3 === "<<=" || ch3 === ">>=") {
      index$1 += 3;
      return {
        type: TokenPunctuator$1,
        value: ch3,
        start,
        end: index$1
      };
    }
    ch2 = ch3.substr(0, 2);
    if (ch1 === ch2[1] && "+-<>&|".includes(ch1) || ch2 === "=>") {
      index$1 += 2;
      return {
        type: TokenPunctuator$1,
        value: ch2,
        start,
        end: index$1
      };
    }
    if (ch2 === "//") {
      throwError$1({}, MessageUnexpectedToken$1, ILLEGAL$2);
    }
    if ("<>=!+-*%&|^/".includes(ch1)) {
      ++index$1;
      return {
        type: TokenPunctuator$1,
        value: ch1,
        start,
        end: index$1
      };
    }
    throwError$1({}, MessageUnexpectedToken$1, ILLEGAL$2);
  }
  function scanHexLiteral$1(start) {
    let number2 = "";
    while (index$1 < length$1) {
      if (!isHexDigit$1(source$1[index$1])) {
        break;
      }
      number2 += source$1[index$1++];
    }
    if (number2.length === 0) {
      throwError$1({}, MessageUnexpectedToken$1, ILLEGAL$2);
    }
    if (isIdentifierStart$1(source$1.charCodeAt(index$1))) {
      throwError$1({}, MessageUnexpectedToken$1, ILLEGAL$2);
    }
    return {
      type: TokenNumericLiteral$1,
      value: parseInt("0x" + number2, 16),
      start,
      end: index$1
    };
  }
  function scanOctalLiteral$1(start) {
    let number2 = "0" + source$1[index$1++];
    while (index$1 < length$1) {
      if (!isOctalDigit$1(source$1[index$1])) {
        break;
      }
      number2 += source$1[index$1++];
    }
    if (isIdentifierStart$1(source$1.charCodeAt(index$1)) || isDecimalDigit$1(source$1.charCodeAt(index$1))) {
      throwError$1({}, MessageUnexpectedToken$1, ILLEGAL$2);
    }
    return {
      type: TokenNumericLiteral$1,
      value: parseInt(number2, 8),
      octal: true,
      start,
      end: index$1
    };
  }
  function scanNumericLiteral$1() {
    var number2, start, ch2;
    ch2 = source$1[index$1];
    assert$1(isDecimalDigit$1(ch2.charCodeAt(0)) || ch2 === ".", "Numeric literal must start with a decimal digit or a decimal point");
    start = index$1;
    number2 = "";
    if (ch2 !== ".") {
      number2 = source$1[index$1++];
      ch2 = source$1[index$1];
      if (number2 === "0") {
        if (ch2 === "x" || ch2 === "X") {
          ++index$1;
          return scanHexLiteral$1(start);
        }
        if (isOctalDigit$1(ch2)) {
          return scanOctalLiteral$1(start);
        }
        if (ch2 && isDecimalDigit$1(ch2.charCodeAt(0))) {
          throwError$1({}, MessageUnexpectedToken$1, ILLEGAL$2);
        }
      }
      while (isDecimalDigit$1(source$1.charCodeAt(index$1))) {
        number2 += source$1[index$1++];
      }
      ch2 = source$1[index$1];
    }
    if (ch2 === ".") {
      number2 += source$1[index$1++];
      while (isDecimalDigit$1(source$1.charCodeAt(index$1))) {
        number2 += source$1[index$1++];
      }
      ch2 = source$1[index$1];
    }
    if (ch2 === "e" || ch2 === "E") {
      number2 += source$1[index$1++];
      ch2 = source$1[index$1];
      if (ch2 === "+" || ch2 === "-") {
        number2 += source$1[index$1++];
      }
      if (isDecimalDigit$1(source$1.charCodeAt(index$1))) {
        while (isDecimalDigit$1(source$1.charCodeAt(index$1))) {
          number2 += source$1[index$1++];
        }
      } else {
        throwError$1({}, MessageUnexpectedToken$1, ILLEGAL$2);
      }
    }
    if (isIdentifierStart$1(source$1.charCodeAt(index$1))) {
      throwError$1({}, MessageUnexpectedToken$1, ILLEGAL$2);
    }
    return {
      type: TokenNumericLiteral$1,
      value: parseFloat(number2),
      start,
      end: index$1
    };
  }
  function scanStringLiteral$1() {
    var str = "", quote, start, ch2, code, octal = false;
    quote = source$1[index$1];
    assert$1(quote === "'" || quote === '"', "String literal must starts with a quote");
    start = index$1;
    ++index$1;
    while (index$1 < length$1) {
      ch2 = source$1[index$1++];
      if (ch2 === quote) {
        quote = "";
        break;
      } else if (ch2 === "\\") {
        ch2 = source$1[index$1++];
        if (!ch2 || !isLineTerminator$1(ch2.charCodeAt(0))) {
          switch (ch2) {
            case "u":
            case "x":
              if (source$1[index$1] === "{") {
                ++index$1;
                str += scanUnicodeCodePointEscape$1();
              } else {
                str += scanHexEscape$1(ch2);
              }
              break;
            case "n":
              str += "\n";
              break;
            case "r":
              str += "\r";
              break;
            case "t":
              str += "	";
              break;
            case "b":
              str += "\b";
              break;
            case "f":
              str += "\f";
              break;
            case "v":
              str += "\v";
              break;
            default:
              if (isOctalDigit$1(ch2)) {
                code = "01234567".indexOf(ch2);
                if (code !== 0) {
                  octal = true;
                }
                if (index$1 < length$1 && isOctalDigit$1(source$1[index$1])) {
                  octal = true;
                  code = code * 8 + "01234567".indexOf(source$1[index$1++]);
                  if ("0123".includes(ch2) && index$1 < length$1 && isOctalDigit$1(source$1[index$1])) {
                    code = code * 8 + "01234567".indexOf(source$1[index$1++]);
                  }
                }
                str += String.fromCharCode(code);
              } else {
                str += ch2;
              }
              break;
          }
        } else {
          if (ch2 === "\r" && source$1[index$1] === "\n") {
            ++index$1;
          }
        }
      } else if (isLineTerminator$1(ch2.charCodeAt(0))) {
        break;
      } else {
        str += ch2;
      }
    }
    if (quote !== "") {
      throwError$1({}, MessageUnexpectedToken$1, ILLEGAL$2);
    }
    return {
      type: TokenStringLiteral$1,
      value: str,
      octal,
      start,
      end: index$1
    };
  }
  function testRegExp$1(pattern, flags) {
    let tmp = pattern;
    if (flags.includes("u")) {
      tmp = tmp.replace(/\\u\{([0-9a-fA-F]+)\}/g, ($0, $1) => {
        if (parseInt($1, 16) <= 1114111) {
          return "x";
        }
        throwError$1({}, MessageInvalidRegExp$1);
      }).replace(/[\uD800-\uDBFF][\uDC00-\uDFFF]/g, "x");
    }
    try {
      new RegExp(tmp);
    } catch (e3) {
      throwError$1({}, MessageInvalidRegExp$1);
    }
    try {
      return new RegExp(pattern, flags);
    } catch (exception) {
      return null;
    }
  }
  function scanRegExpBody$1() {
    var ch2, str, classMarker, terminated, body;
    ch2 = source$1[index$1];
    assert$1(ch2 === "/", "Regular expression literal must start with a slash");
    str = source$1[index$1++];
    classMarker = false;
    terminated = false;
    while (index$1 < length$1) {
      ch2 = source$1[index$1++];
      str += ch2;
      if (ch2 === "\\") {
        ch2 = source$1[index$1++];
        if (isLineTerminator$1(ch2.charCodeAt(0))) {
          throwError$1({}, MessageUnterminatedRegExp$1);
        }
        str += ch2;
      } else if (isLineTerminator$1(ch2.charCodeAt(0))) {
        throwError$1({}, MessageUnterminatedRegExp$1);
      } else if (classMarker) {
        if (ch2 === "]") {
          classMarker = false;
        }
      } else {
        if (ch2 === "/") {
          terminated = true;
          break;
        } else if (ch2 === "[") {
          classMarker = true;
        }
      }
    }
    if (!terminated) {
      throwError$1({}, MessageUnterminatedRegExp$1);
    }
    body = str.substr(1, str.length - 2);
    return {
      value: body,
      literal: str
    };
  }
  function scanRegExpFlags$1() {
    var ch2, str, flags;
    str = "";
    flags = "";
    while (index$1 < length$1) {
      ch2 = source$1[index$1];
      if (!isIdentifierPart$1(ch2.charCodeAt(0))) {
        break;
      }
      ++index$1;
      if (ch2 === "\\" && index$1 < length$1) {
        throwError$1({}, MessageUnexpectedToken$1, ILLEGAL$2);
      } else {
        flags += ch2;
        str += ch2;
      }
    }
    if (flags.search(/[^gimuy]/g) >= 0) {
      throwError$1({}, MessageInvalidRegExp$1, flags);
    }
    return {
      value: flags,
      literal: str
    };
  }
  function scanRegExp$1() {
    var start, body, flags, value2;
    lookahead$1 = null;
    skipComment$1();
    start = index$1;
    body = scanRegExpBody$1();
    flags = scanRegExpFlags$1();
    value2 = testRegExp$1(body.value, flags.value);
    return {
      literal: body.literal + flags.literal,
      value: value2,
      regex: {
        pattern: body.value,
        flags: flags.value
      },
      start,
      end: index$1
    };
  }
  function isIdentifierName$1(token) {
    return token.type === TokenIdentifier$1 || token.type === TokenKeyword$1 || token.type === TokenBooleanLiteral$1 || token.type === TokenNullLiteral$1;
  }
  function advance$1() {
    skipComment$1();
    if (index$1 >= length$1) {
      return {
        type: TokenEOF$1,
        start: index$1,
        end: index$1
      };
    }
    const ch2 = source$1.charCodeAt(index$1);
    if (isIdentifierStart$1(ch2)) {
      return scanIdentifier$1();
    }
    if (ch2 === 40 || ch2 === 41 || ch2 === 59) {
      return scanPunctuator$1();
    }
    if (ch2 === 39 || ch2 === 34) {
      return scanStringLiteral$1();
    }
    if (ch2 === 46) {
      if (isDecimalDigit$1(source$1.charCodeAt(index$1 + 1))) {
        return scanNumericLiteral$1();
      }
      return scanPunctuator$1();
    }
    if (isDecimalDigit$1(ch2)) {
      return scanNumericLiteral$1();
    }
    return scanPunctuator$1();
  }
  function lex$1() {
    const token = lookahead$1;
    index$1 = token.end;
    lookahead$1 = advance$1();
    index$1 = token.end;
    return token;
  }
  function peek$1() {
    const pos = index$1;
    lookahead$1 = advance$1();
    index$1 = pos;
  }
  function finishArrayExpression$1(elements) {
    const node = new ASTNode$1(SyntaxArrayExpression$1);
    node.elements = elements;
    return node;
  }
  function finishBinaryExpression$1(operator2, left, right) {
    const node = new ASTNode$1(operator2 === "||" || operator2 === "&&" ? SyntaxLogicalExpression$1 : SyntaxBinaryExpression$1);
    node.operator = operator2;
    node.left = left;
    node.right = right;
    return node;
  }
  function finishCallExpression$1(callee, args) {
    const node = new ASTNode$1(SyntaxCallExpression$1);
    node.callee = callee;
    node.arguments = args;
    return node;
  }
  function finishConditionalExpression$1(test2, consequent, alternate) {
    const node = new ASTNode$1(SyntaxConditionalExpression$1);
    node.test = test2;
    node.consequent = consequent;
    node.alternate = alternate;
    return node;
  }
  function finishIdentifier$1(name) {
    const node = new ASTNode$1(SyntaxIdentifier$1);
    node.name = name;
    return node;
  }
  function finishLiteral$1(token) {
    const node = new ASTNode$1(SyntaxLiteral$1);
    node.value = token.value;
    node.raw = source$1.slice(token.start, token.end);
    if (token.regex) {
      if (node.raw === "//") {
        node.raw = "/(?:)/";
      }
      node.regex = token.regex;
    }
    return node;
  }
  function finishMemberExpression$1(accessor2, object2, property2) {
    const node = new ASTNode$1(SyntaxMemberExpression$1);
    node.computed = accessor2 === "[";
    node.object = object2;
    node.property = property2;
    if (!node.computed) property2.member = true;
    return node;
  }
  function finishObjectExpression$1(properties) {
    const node = new ASTNode$1(SyntaxObjectExpression$1);
    node.properties = properties;
    return node;
  }
  function finishProperty$1(kind, key2, value2) {
    const node = new ASTNode$1(SyntaxProperty$1);
    node.key = key2;
    node.value = value2;
    node.kind = kind;
    return node;
  }
  function finishUnaryExpression$1(operator2, argument) {
    const node = new ASTNode$1(SyntaxUnaryExpression$1);
    node.operator = operator2;
    node.argument = argument;
    node.prefix = true;
    return node;
  }
  function throwError$1(token, messageFormat) {
    var error2, args = Array.prototype.slice.call(arguments, 2), msg = messageFormat.replace(/%(\d)/g, (whole, index2) => {
      assert$1(index2 < args.length, "Message reference must be in range");
      return args[index2];
    });
    error2 = new Error(msg);
    error2.index = index$1;
    error2.description = msg;
    throw error2;
  }
  function throwUnexpected$1(token) {
    if (token.type === TokenEOF$1) {
      throwError$1(token, MessageUnexpectedEOS$1);
    }
    if (token.type === TokenNumericLiteral$1) {
      throwError$1(token, MessageUnexpectedNumber$1);
    }
    if (token.type === TokenStringLiteral$1) {
      throwError$1(token, MessageUnexpectedString$1);
    }
    if (token.type === TokenIdentifier$1) {
      throwError$1(token, MessageUnexpectedIdentifier$1);
    }
    if (token.type === TokenKeyword$1) {
      throwError$1(token, MessageUnexpectedReserved$1);
    }
    throwError$1(token, MessageUnexpectedToken$1, token.value);
  }
  function expect$1(value2) {
    const token = lex$1();
    if (token.type !== TokenPunctuator$1 || token.value !== value2) {
      throwUnexpected$1(token);
    }
  }
  function match$1(value2) {
    return lookahead$1.type === TokenPunctuator$1 && lookahead$1.value === value2;
  }
  function matchKeyword$1(keyword) {
    return lookahead$1.type === TokenKeyword$1 && lookahead$1.value === keyword;
  }
  function parseArrayInitialiser$1() {
    const elements = [];
    index$1 = lookahead$1.start;
    expect$1("[");
    while (!match$1("]")) {
      if (match$1(",")) {
        lex$1();
        elements.push(null);
      } else {
        elements.push(parseConditionalExpression$1());
        if (!match$1("]")) {
          expect$1(",");
        }
      }
    }
    lex$1();
    return finishArrayExpression$1(elements);
  }
  function parseObjectPropertyKey$1() {
    index$1 = lookahead$1.start;
    const token = lex$1();
    if (token.type === TokenStringLiteral$1 || token.type === TokenNumericLiteral$1) {
      if (token.octal) {
        throwError$1(token, MessageStrictOctalLiteral$1);
      }
      return finishLiteral$1(token);
    }
    return finishIdentifier$1(token.value);
  }
  function parseObjectProperty$1() {
    var token, key2, id2, value2;
    index$1 = lookahead$1.start;
    token = lookahead$1;
    if (token.type === TokenIdentifier$1) {
      id2 = parseObjectPropertyKey$1();
      expect$1(":");
      value2 = parseConditionalExpression$1();
      return finishProperty$1("init", id2, value2);
    }
    if (token.type === TokenEOF$1 || token.type === TokenPunctuator$1) {
      throwUnexpected$1(token);
    } else {
      key2 = parseObjectPropertyKey$1();
      expect$1(":");
      value2 = parseConditionalExpression$1();
      return finishProperty$1("init", key2, value2);
    }
  }
  function parseObjectInitialiser$1() {
    var properties = [], property2, name, key2, map2 = {}, toString2 = String;
    index$1 = lookahead$1.start;
    expect$1("{");
    while (!match$1("}")) {
      property2 = parseObjectProperty$1();
      if (property2.key.type === SyntaxIdentifier$1) {
        name = property2.key.name;
      } else {
        name = toString2(property2.key.value);
      }
      key2 = "$" + name;
      if (Object.prototype.hasOwnProperty.call(map2, key2)) {
        throwError$1({}, MessageStrictDuplicateProperty$1);
      } else {
        map2[key2] = true;
      }
      properties.push(property2);
      if (!match$1("}")) {
        expect$1(",");
      }
    }
    expect$1("}");
    return finishObjectExpression$1(properties);
  }
  function parseGroupExpression$1() {
    expect$1("(");
    const expr2 = parseExpression$2();
    expect$1(")");
    return expr2;
  }
  const legalKeywords$1 = {
    "if": 1
  };
  function parsePrimaryExpression$1() {
    var type2, token, expr2;
    if (match$1("(")) {
      return parseGroupExpression$1();
    }
    if (match$1("[")) {
      return parseArrayInitialiser$1();
    }
    if (match$1("{")) {
      return parseObjectInitialiser$1();
    }
    type2 = lookahead$1.type;
    index$1 = lookahead$1.start;
    if (type2 === TokenIdentifier$1 || legalKeywords$1[lookahead$1.value]) {
      expr2 = finishIdentifier$1(lex$1().value);
    } else if (type2 === TokenStringLiteral$1 || type2 === TokenNumericLiteral$1) {
      if (lookahead$1.octal) {
        throwError$1(lookahead$1, MessageStrictOctalLiteral$1);
      }
      expr2 = finishLiteral$1(lex$1());
    } else if (type2 === TokenKeyword$1) {
      throw new Error(DISABLED$1);
    } else if (type2 === TokenBooleanLiteral$1) {
      token = lex$1();
      token.value = token.value === "true";
      expr2 = finishLiteral$1(token);
    } else if (type2 === TokenNullLiteral$1) {
      token = lex$1();
      token.value = null;
      expr2 = finishLiteral$1(token);
    } else if (match$1("/") || match$1("/=")) {
      expr2 = finishLiteral$1(scanRegExp$1());
      peek$1();
    } else {
      throwUnexpected$1(lex$1());
    }
    return expr2;
  }
  function parseArguments$1() {
    const args = [];
    expect$1("(");
    if (!match$1(")")) {
      while (index$1 < length$1) {
        args.push(parseConditionalExpression$1());
        if (match$1(")")) {
          break;
        }
        expect$1(",");
      }
    }
    expect$1(")");
    return args;
  }
  function parseNonComputedProperty$1() {
    index$1 = lookahead$1.start;
    const token = lex$1();
    if (!isIdentifierName$1(token)) {
      throwUnexpected$1(token);
    }
    return finishIdentifier$1(token.value);
  }
  function parseNonComputedMember$1() {
    expect$1(".");
    return parseNonComputedProperty$1();
  }
  function parseComputedMember$1() {
    expect$1("[");
    const expr2 = parseExpression$2();
    expect$1("]");
    return expr2;
  }
  function parseLeftHandSideExpressionAllowCall$1() {
    var expr2, args, property2;
    expr2 = parsePrimaryExpression$1();
    for (; ; ) {
      if (match$1(".")) {
        property2 = parseNonComputedMember$1();
        expr2 = finishMemberExpression$1(".", expr2, property2);
      } else if (match$1("(")) {
        args = parseArguments$1();
        expr2 = finishCallExpression$1(expr2, args);
      } else if (match$1("[")) {
        property2 = parseComputedMember$1();
        expr2 = finishMemberExpression$1("[", expr2, property2);
      } else {
        break;
      }
    }
    return expr2;
  }
  function parsePostfixExpression$1() {
    const expr2 = parseLeftHandSideExpressionAllowCall$1();
    if (lookahead$1.type === TokenPunctuator$1) {
      if (match$1("++") || match$1("--")) {
        throw new Error(DISABLED$1);
      }
    }
    return expr2;
  }
  function parseUnaryExpression$1() {
    var token, expr2;
    if (lookahead$1.type !== TokenPunctuator$1 && lookahead$1.type !== TokenKeyword$1) {
      expr2 = parsePostfixExpression$1();
    } else if (match$1("++") || match$1("--")) {
      throw new Error(DISABLED$1);
    } else if (match$1("+") || match$1("-") || match$1("~") || match$1("!")) {
      token = lex$1();
      expr2 = parseUnaryExpression$1();
      expr2 = finishUnaryExpression$1(token.value, expr2);
    } else if (matchKeyword$1("delete") || matchKeyword$1("void") || matchKeyword$1("typeof")) {
      throw new Error(DISABLED$1);
    } else {
      expr2 = parsePostfixExpression$1();
    }
    return expr2;
  }
  function binaryPrecedence$1(token) {
    let prec = 0;
    if (token.type !== TokenPunctuator$1 && token.type !== TokenKeyword$1) {
      return 0;
    }
    switch (token.value) {
      case "||":
        prec = 1;
        break;
      case "&&":
        prec = 2;
        break;
      case "|":
        prec = 3;
        break;
      case "^":
        prec = 4;
        break;
      case "&":
        prec = 5;
        break;
      case "==":
      case "!=":
      case "===":
      case "!==":
        prec = 6;
        break;
      case "<":
      case ">":
      case "<=":
      case ">=":
      case "instanceof":
      case "in":
        prec = 7;
        break;
      case "<<":
      case ">>":
      case ">>>":
        prec = 8;
        break;
      case "+":
      case "-":
        prec = 9;
        break;
      case "*":
      case "/":
      case "%":
        prec = 11;
        break;
    }
    return prec;
  }
  function parseBinaryExpression$1() {
    var marker, markers, expr2, token, prec, stack2, right, operator2, left, i;
    marker = lookahead$1;
    left = parseUnaryExpression$1();
    token = lookahead$1;
    prec = binaryPrecedence$1(token);
    if (prec === 0) {
      return left;
    }
    token.prec = prec;
    lex$1();
    markers = [marker, lookahead$1];
    right = parseUnaryExpression$1();
    stack2 = [left, token, right];
    while ((prec = binaryPrecedence$1(lookahead$1)) > 0) {
      while (stack2.length > 2 && prec <= stack2[stack2.length - 2].prec) {
        right = stack2.pop();
        operator2 = stack2.pop().value;
        left = stack2.pop();
        markers.pop();
        expr2 = finishBinaryExpression$1(operator2, left, right);
        stack2.push(expr2);
      }
      token = lex$1();
      token.prec = prec;
      stack2.push(token);
      markers.push(lookahead$1);
      expr2 = parseUnaryExpression$1();
      stack2.push(expr2);
    }
    i = stack2.length - 1;
    expr2 = stack2[i];
    markers.pop();
    while (i > 1) {
      markers.pop();
      expr2 = finishBinaryExpression$1(stack2[i - 1].value, stack2[i - 2], expr2);
      i -= 2;
    }
    return expr2;
  }
  function parseConditionalExpression$1() {
    var expr2, consequent, alternate;
    expr2 = parseBinaryExpression$1();
    if (match$1("?")) {
      lex$1();
      consequent = parseConditionalExpression$1();
      expect$1(":");
      alternate = parseConditionalExpression$1();
      expr2 = finishConditionalExpression$1(expr2, consequent, alternate);
    }
    return expr2;
  }
  function parseExpression$2() {
    const expr2 = parseConditionalExpression$1();
    if (match$1(",")) {
      throw new Error(DISABLED$1);
    }
    return expr2;
  }
  function parser$2(code) {
    source$1 = code;
    index$1 = 0;
    length$1 = source$1.length;
    lookahead$1 = null;
    peek$1();
    const expr2 = parseExpression$2();
    if (lookahead$1.type !== TokenEOF$1) {
      throw new Error("Unexpect token after expression.");
    }
    return expr2;
  }
  var Constants$1 = {
    NaN: "NaN",
    E: "Math.E",
    LN2: "Math.LN2",
    LN10: "Math.LN10",
    LOG2E: "Math.LOG2E",
    LOG10E: "Math.LOG10E",
    PI: "Math.PI",
    SQRT1_2: "Math.SQRT1_2",
    SQRT2: "Math.SQRT2",
    MIN_VALUE: "Number.MIN_VALUE",
    MAX_VALUE: "Number.MAX_VALUE"
  };
  function Functions$1(codegen2) {
    function fncall(name, args, cast, type2) {
      let obj = codegen2(args[0]);
      if (cast) {
        obj = cast + "(" + obj + ")";
        if (cast.lastIndexOf("new ", 0) === 0) obj = "(" + obj + ")";
      }
      return obj + "." + name + (type2 < 0 ? "" : type2 === 0 ? "()" : "(" + args.slice(1).map(codegen2).join(",") + ")");
    }
    function fn(name, cast, type2) {
      return (args) => fncall(name, args, cast, type2);
    }
    const DATE2 = "new Date", STRING = "String", REGEXP = "RegExp";
    return {
      // MATH functions
      isNaN: "Number.isNaN",
      isFinite: "Number.isFinite",
      abs: "Math.abs",
      acos: "Math.acos",
      asin: "Math.asin",
      atan: "Math.atan",
      atan2: "Math.atan2",
      ceil: "Math.ceil",
      cos: "Math.cos",
      exp: "Math.exp",
      floor: "Math.floor",
      hypot: "Math.hypot",
      log: "Math.log",
      max: "Math.max",
      min: "Math.min",
      pow: "Math.pow",
      random: "Math.random",
      round: "Math.round",
      sin: "Math.sin",
      sqrt: "Math.sqrt",
      tan: "Math.tan",
      clamp: function(args) {
        if (args.length < 3) error$1("Missing arguments to clamp function.");
        if (args.length > 3) error$1("Too many arguments to clamp function.");
        const a2 = args.map(codegen2);
        return "Math.max(" + a2[1] + ", Math.min(" + a2[2] + "," + a2[0] + "))";
      },
      // DATE functions
      now: "Date.now",
      utc: "Date.UTC",
      datetime: DATE2,
      date: fn("getDate", DATE2, 0),
      day: fn("getDay", DATE2, 0),
      year: fn("getFullYear", DATE2, 0),
      month: fn("getMonth", DATE2, 0),
      hours: fn("getHours", DATE2, 0),
      minutes: fn("getMinutes", DATE2, 0),
      seconds: fn("getSeconds", DATE2, 0),
      milliseconds: fn("getMilliseconds", DATE2, 0),
      time: fn("getTime", DATE2, 0),
      timezoneoffset: fn("getTimezoneOffset", DATE2, 0),
      utcdate: fn("getUTCDate", DATE2, 0),
      utcday: fn("getUTCDay", DATE2, 0),
      utcyear: fn("getUTCFullYear", DATE2, 0),
      utcmonth: fn("getUTCMonth", DATE2, 0),
      utchours: fn("getUTCHours", DATE2, 0),
      utcminutes: fn("getUTCMinutes", DATE2, 0),
      utcseconds: fn("getUTCSeconds", DATE2, 0),
      utcmilliseconds: fn("getUTCMilliseconds", DATE2, 0),
      // sequence functions
      length: fn("length", null, -1),
      // STRING functions
      parseFloat: "parseFloat",
      parseInt: "parseInt",
      upper: fn("toUpperCase", STRING, 0),
      lower: fn("toLowerCase", STRING, 0),
      substring: fn("substring", STRING),
      split: fn("split", STRING),
      trim: fn("trim", STRING, 0),
      // base64 encode/decode
      btoa: "btoa",
      atob: "atob",
      // REGEXP functions
      regexp: REGEXP,
      test: fn("test", REGEXP),
      // Control Flow functions
      if: function(args) {
        if (args.length < 3) error$1("Missing arguments to if function.");
        if (args.length > 3) error$1("Too many arguments to if function.");
        const a2 = args.map(codegen2);
        return "(" + a2[0] + "?" + a2[1] + ":" + a2[2] + ")";
      }
    };
  }
  function stripQuotes(s) {
    const n = s && s.length - 1;
    return n && (s[0] === '"' && s[n] === '"' || s[0] === "'" && s[n] === "'") ? s.slice(1, -1) : s;
  }
  function codegen(opt) {
    opt = opt || {};
    const allowed = opt.allowed ? toSet(opt.allowed) : {}, forbidden = opt.forbidden ? toSet(opt.forbidden) : {}, constants2 = opt.constants || Constants$1, functions = (opt.functions || Functions$1)(visit2), globalvar = opt.globalvar, fieldvar = opt.fieldvar, outputGlobal = isFunction(globalvar) ? globalvar : (id2) => `${globalvar}["${id2}"]`;
    let globals2 = {}, fields = {}, memberDepth = 0;
    function visit2(ast) {
      if (isString(ast)) return ast;
      const generator = Generators[ast.type];
      if (generator == null) error$1("Unsupported type: " + ast.type);
      return generator(ast);
    }
    const Generators = {
      Literal: (n) => n.raw,
      Identifier: (n) => {
        const id2 = n.name;
        if (memberDepth > 0) {
          return id2;
        } else if (has$1(forbidden, id2)) {
          return error$1("Illegal identifier: " + id2);
        } else if (has$1(constants2, id2)) {
          return constants2[id2];
        } else if (has$1(allowed, id2)) {
          return id2;
        } else {
          globals2[id2] = 1;
          return outputGlobal(id2);
        }
      },
      MemberExpression: (n) => {
        const d = !n.computed, o = visit2(n.object);
        if (d) memberDepth += 1;
        const p = visit2(n.property);
        if (o === fieldvar) {
          fields[stripQuotes(p)] = 1;
        }
        if (d) memberDepth -= 1;
        return o + (d ? "." + p : "[" + p + "]");
      },
      CallExpression: (n) => {
        if (n.callee.type !== "Identifier") {
          error$1("Illegal callee type: " + n.callee.type);
        }
        const callee = n.callee.name, args = n.arguments, fn = has$1(functions, callee) && functions[callee];
        if (!fn) error$1("Unrecognized function: " + callee);
        return isFunction(fn) ? fn(args) : fn + "(" + args.map(visit2).join(",") + ")";
      },
      ArrayExpression: (n) => "[" + n.elements.map(visit2).join(",") + "]",
      BinaryExpression: (n) => "(" + visit2(n.left) + " " + n.operator + " " + visit2(n.right) + ")",
      UnaryExpression: (n) => "(" + n.operator + visit2(n.argument) + ")",
      ConditionalExpression: (n) => "(" + visit2(n.test) + "?" + visit2(n.consequent) + ":" + visit2(n.alternate) + ")",
      LogicalExpression: (n) => "(" + visit2(n.left) + n.operator + visit2(n.right) + ")",
      ObjectExpression: (n) => "{" + n.properties.map(visit2).join(",") + "}",
      Property: (n) => {
        memberDepth += 1;
        const k = visit2(n.key);
        memberDepth -= 1;
        return k + ":" + visit2(n.value);
      }
    };
    function codegen2(ast) {
      const result = {
        code: visit2(ast),
        globals: Object.keys(globals2),
        fields: Object.keys(fields)
      };
      globals2 = {};
      fields = {};
      return result;
    }
    codegen2.functions = functions;
    codegen2.constants = constants2;
    return codegen2;
  }
  const SELECTION_GETTER = Symbol("vega_selection_getter");
  function getter(f) {
    if (!f.getter || !f.getter[SELECTION_GETTER]) {
      f.getter = field$1(f.field);
      f.getter[SELECTION_GETTER] = true;
    }
    return f.getter;
  }
  const Intersect = "intersect";
  const Union = "union";
  const VlMulti = "vlMulti";
  const VlPoint = "vlPoint";
  const Or = "or";
  const And = "and";
  const SelectionId = "_vgsid_";
  const $selectionId = field$1(SelectionId);
  const TYPE_ENUM = "E", TYPE_RANGE_INC = "R", TYPE_RANGE_EXC = "R-E", TYPE_RANGE_LE = "R-LE", TYPE_RANGE_RE = "R-RE", TYPE_PRED_LT = "E-LT", TYPE_PRED_LTE = "E-LTE", TYPE_PRED_GT = "E-GT", TYPE_PRED_GTE = "E-GTE", TYPE_PRED_VALID = "E-VALID", TYPE_PRED_ONE_OF = "E-ONE", UNIT_INDEX = "index:unit";
  function testPoint(datum2, entry2) {
    var fields = entry2.fields, values2 = entry2.values, n = fields.length, i = 0, dval, f;
    for (; i < n; ++i) {
      f = fields[i];
      dval = getter(f)(datum2);
      if (isDate$1(dval)) dval = toNumber(dval);
      if (isDate$1(values2[i])) values2[i] = toNumber(values2[i]);
      if (isArray(values2[i]) && isDate$1(values2[i][0])) values2[i] = values2[i].map(toNumber);
      if (f.type === TYPE_ENUM) {
        if (isArray(values2[i]) ? !values2[i].includes(dval) : dval !== values2[i]) {
          return false;
        }
      } else {
        if (f.type === TYPE_RANGE_INC) {
          if (!inrange(dval, values2[i])) return false;
        } else if (f.type === TYPE_RANGE_RE) {
          if (!inrange(dval, values2[i], true, false)) return false;
        } else if (f.type === TYPE_RANGE_EXC) {
          if (!inrange(dval, values2[i], false, false)) return false;
        } else if (f.type === TYPE_RANGE_LE) {
          if (!inrange(dval, values2[i], false, true)) return false;
        } else if (f.type === TYPE_PRED_LT) {
          if (dval >= values2[i]) return false;
        } else if (f.type === TYPE_PRED_LTE) {
          if (dval > values2[i]) return false;
        } else if (f.type === TYPE_PRED_GT) {
          if (dval <= values2[i]) return false;
        } else if (f.type === TYPE_PRED_GTE) {
          if (dval < values2[i]) return false;
        } else if (f.type === TYPE_PRED_VALID) {
          if (dval === null || isNaN(dval)) return false;
        } else if (f.type === TYPE_PRED_ONE_OF) {
          if (values2[i].indexOf(dval) === -1) return false;
        }
      }
    }
    return true;
  }
  function selectionTest(name, datum2, op) {
    var data2 = this.context.data[name], entries2 = data2 ? data2.values.value : [], unitIdx = data2 ? data2[UNIT_INDEX] && data2[UNIT_INDEX].value : void 0, intersect2 = op === Intersect, n = entries2.length, i = 0, entry2, miss, count2, unit2, b2;
    for (; i < n; ++i) {
      entry2 = entries2[i];
      if (unitIdx && intersect2) {
        miss = miss || {};
        count2 = miss[unit2 = entry2.unit] || 0;
        if (count2 === -1) continue;
        b2 = testPoint(datum2, entry2);
        miss[unit2] = b2 ? -1 : ++count2;
        if (b2 && unitIdx.size === 1) return true;
        if (!b2 && count2 === unitIdx.get(unit2).count) return false;
      } else {
        b2 = testPoint(datum2, entry2);
        if (intersect2 ^ b2) return b2;
      }
    }
    return n && intersect2;
  }
  const bisect = bisector($selectionId), bisectLeft = bisect.left, bisectRight = bisect.right;
  function selectionIdTest(name, datum2, op) {
    const data2 = this.context.data[name], entries2 = data2 ? data2.values.value : [], unitIdx = data2 ? data2[UNIT_INDEX] && data2[UNIT_INDEX].value : void 0, intersect2 = op === Intersect, value2 = $selectionId(datum2), index2 = bisectLeft(entries2, value2);
    if (index2 === entries2.length) return false;
    if ($selectionId(entries2[index2]) !== value2) return false;
    if (unitIdx && intersect2) {
      if (unitIdx.size === 1) return true;
      if (bisectRight(entries2, value2) - index2 < unitIdx.size) return false;
    }
    return true;
  }
  function selectionTuples(array2, base) {
    return array2.map((x2) => extend$1(base.fields ? {
      values: base.fields.map((f) => getter(f)(x2.datum))
    } : {
      [SelectionId]: $selectionId(x2.datum)
    }, base));
  }
  function selectionResolve(name, op, isMulti, vl5) {
    var data2 = this.context.data[name], entries2 = data2 ? data2.values.value : [], resolved = {}, multiRes = {}, types = {}, entry2, fields, values2, unit2, field2, value2, res, resUnit, type2, union2, n = entries2.length, i = 0, j, m2;
    for (; i < n; ++i) {
      entry2 = entries2[i];
      unit2 = entry2.unit;
      fields = entry2.fields;
      values2 = entry2.values;
      if (fields && values2) {
        for (j = 0, m2 = fields.length; j < m2; ++j) {
          field2 = fields[j];
          res = resolved[field2.field] || (resolved[field2.field] = {});
          resUnit = res[unit2] || (res[unit2] = []);
          types[field2.field] = type2 = field2.type.charAt(0);
          union2 = ops[`${type2}_union`];
          res[unit2] = union2(resUnit, array$5(values2[j]));
        }
        if (isMulti) {
          resUnit = multiRes[unit2] || (multiRes[unit2] = []);
          resUnit.push(array$5(values2).reduce((obj, curr, j2) => (obj[fields[j2].field] = curr, obj), {}));
        }
      } else {
        field2 = SelectionId;
        value2 = $selectionId(entry2);
        res = resolved[field2] || (resolved[field2] = {});
        resUnit = res[unit2] || (res[unit2] = []);
        resUnit.push(value2);
        if (isMulti) {
          resUnit = multiRes[unit2] || (multiRes[unit2] = []);
          resUnit.push({
            [SelectionId]: value2
          });
        }
      }
    }
    op = op || Union;
    if (resolved[SelectionId]) {
      resolved[SelectionId] = ops[`${SelectionId}_${op}`](...Object.values(resolved[SelectionId]));
    } else {
      Object.keys(resolved).forEach((field3) => {
        resolved[field3] = Object.keys(resolved[field3]).map((unit3) => resolved[field3][unit3]).reduce((acc, curr) => acc === void 0 ? curr : ops[`${types[field3]}_${op}`](acc, curr));
      });
    }
    entries2 = Object.keys(multiRes);
    if (isMulti && entries2.length) {
      const key2 = vl5 ? VlPoint : VlMulti;
      resolved[key2] = op === Union ? {
        [Or]: entries2.reduce((acc, k) => (acc.push(...multiRes[k]), acc), [])
      } : {
        [And]: entries2.map((k) => ({
          [Or]: multiRes[k]
        }))
      };
    }
    return resolved;
  }
  var ops = {
    [`${SelectionId}_union`]: union,
    [`${SelectionId}_intersect`]: intersection,
    E_union: function(base, value2) {
      if (!base.length) return value2;
      var i = 0, n = value2.length;
      for (; i < n; ++i) if (!base.includes(value2[i])) base.push(value2[i]);
      return base;
    },
    E_intersect: function(base, value2) {
      return !base.length ? value2 : base.filter((v) => value2.includes(v));
    },
    R_union: function(base, value2) {
      var lo = toNumber(value2[0]), hi = toNumber(value2[1]);
      if (lo > hi) {
        lo = value2[1];
        hi = value2[0];
      }
      if (!base.length) return [lo, hi];
      if (base[0] > lo) base[0] = lo;
      if (base[1] < hi) base[1] = hi;
      return base;
    },
    R_intersect: function(base, value2) {
      var lo = toNumber(value2[0]), hi = toNumber(value2[1]);
      if (lo > hi) {
        lo = value2[1];
        hi = value2[0];
      }
      if (!base.length) return [lo, hi];
      if (hi < base[0] || base[1] < lo) {
        return [];
      } else {
        if (base[0] < lo) base[0] = lo;
        if (base[1] > hi) base[1] = hi;
      }
      return base;
    }
  };
  const DataPrefix$1 = ":", IndexPrefix$1 = "@";
  function selectionVisitor(name, args, scope, params2) {
    if (args[0].type !== Literal$1) error$1("First argument to selection functions must be a string literal.");
    const data2 = args[0].value, op = args.length >= 2 && peek$2(args).value, field2 = "unit", indexName = IndexPrefix$1 + field2, dataName = DataPrefix$1 + data2;
    if (op === Intersect && !has$1(params2, indexName)) {
      params2[indexName] = scope.getData(data2).indataRef(scope, field2);
    }
    if (!has$1(params2, dataName)) {
      params2[dataName] = scope.getData(data2).tuplesRef();
    }
  }
  function data$1(name) {
    const data2 = this.context.data[name];
    return data2 ? data2.values.value : [];
  }
  function indata(name, field2, value2) {
    const index2 = this.context.data[name]["index:" + field2], entry2 = index2 ? index2.value.get(value2) : void 0;
    return entry2 ? entry2.count : entry2;
  }
  function setdata(name, tuples) {
    const df = this.context.dataflow, data2 = this.context.data[name], input = data2.input;
    df.pulse(input, df.changeset().remove(truthy).insert(tuples));
    return 1;
  }
  function encode(item, name, retval) {
    if (item) {
      const df = this.context.dataflow, target2 = item.mark.source;
      df.pulse(target2, df.changeset().encode(item, name));
    }
    return retval !== void 0 ? retval : item;
  }
  const wrap = (method2) => function(value2, spec) {
    const locale2 = this.context.dataflow.locale();
    return value2 === null ? "null" : locale2[method2](spec)(value2);
  };
  const format = wrap("format");
  const timeFormat$1 = wrap("timeFormat");
  const utcFormat = wrap("utcFormat");
  const timeParse = wrap("timeParse");
  const utcParse = wrap("utcParse");
  const dateObj = new Date(2e3, 0, 1);
  function time(month, day, specifier) {
    if (!Number.isInteger(month) || !Number.isInteger(day)) return "";
    dateObj.setYear(2e3);
    dateObj.setMonth(month);
    dateObj.setDate(day);
    return timeFormat$1.call(this, dateObj, specifier);
  }
  function monthFormat(month) {
    return time.call(this, month, 1, "%B");
  }
  function monthAbbrevFormat(month) {
    return time.call(this, month, 1, "%b");
  }
  function dayFormat(day) {
    return time.call(this, 0, 2 + day, "%A");
  }
  function dayAbbrevFormat(day) {
    return time.call(this, 0, 2 + day, "%a");
  }
  const DataPrefix = ":";
  const IndexPrefix = "@";
  const ScalePrefix = "%";
  const SignalPrefix = "$";
  function dataVisitor(name, args, scope, params2) {
    if (args[0].type !== Literal$1) {
      error$1("First argument to data functions must be a string literal.");
    }
    const data2 = args[0].value, dataName = DataPrefix + data2;
    if (!has$1(dataName, params2)) {
      try {
        params2[dataName] = scope.getData(data2).tuplesRef();
      } catch (err) {
      }
    }
  }
  function indataVisitor(name, args, scope, params2) {
    if (args[0].type !== Literal$1) error$1("First argument to indata must be a string literal.");
    if (args[1].type !== Literal$1) error$1("Second argument to indata must be a string literal.");
    const data2 = args[0].value, field2 = args[1].value, indexName = IndexPrefix + field2;
    if (!has$1(indexName, params2)) {
      params2[indexName] = scope.getData(data2).indataRef(scope, field2);
    }
  }
  function scaleVisitor(name, args, scope, params2) {
    if (args[0].type === Literal$1) {
      addScaleDependency(scope, params2, args[0].value);
    } else {
      for (name in scope.scales) {
        addScaleDependency(scope, params2, name);
      }
    }
  }
  function addScaleDependency(scope, params2, name) {
    const scaleName = ScalePrefix + name;
    if (!has$1(params2, scaleName)) {
      try {
        params2[scaleName] = scope.scaleRef(name);
      } catch (err) {
      }
    }
  }
  function getScale(nameOrFunction, ctx) {
    if (isString(nameOrFunction)) {
      const maybeScale = ctx.scales[nameOrFunction];
      return maybeScale && isRegisteredScale(maybeScale.value) ? maybeScale.value : void 0;
    } else if (isFunction(nameOrFunction)) {
      return isRegisteredScale(nameOrFunction) ? nameOrFunction : void 0;
    }
    return void 0;
  }
  function internalScaleFunctions(codegen2, fnctx, visitors) {
    fnctx.__bandwidth = (s) => s && s.bandwidth ? s.bandwidth() : 0;
    visitors._bandwidth = scaleVisitor;
    visitors._range = scaleVisitor;
    visitors._scale = scaleVisitor;
    const ref2 = (arg) => "_[" + (arg.type === Literal$1 ? $(ScalePrefix + arg.value) : $(ScalePrefix) + "+" + codegen2(arg)) + "]";
    return {
      _bandwidth: (args) => `this.__bandwidth(${ref2(args[0])})`,
      _range: (args) => `${ref2(args[0])}.range()`,
      _scale: (args) => `${ref2(args[0])}(${codegen2(args[1])})`
    };
  }
  function geoMethod(methodName, globalMethod) {
    return function(projection2, geojson, group2) {
      if (projection2) {
        const p = getScale(projection2, (group2 || this).context);
        return p && p.path[methodName](geojson);
      } else {
        return globalMethod(geojson);
      }
    };
  }
  const geoArea = geoMethod("area", geoArea$1);
  const geoBounds = geoMethod("bounds", geoBounds$1);
  const geoCentroid = geoMethod("centroid", geoCentroid$1);
  function geoScale(projection2, group2) {
    const p = getScale(projection2, (group2 || this).context);
    return p && p.scale();
  }
  function inScope(item) {
    const group2 = this.context.group;
    let value2 = false;
    if (group2) while (item) {
      if (item === group2) {
        value2 = true;
        break;
      }
      item = item.mark.group;
    }
    return value2;
  }
  function log(df, method2, args) {
    try {
      df[method2].apply(df, ["EXPRESSION"].concat([].slice.call(args)));
    } catch (err) {
      df.warn(err);
    }
    return args[args.length - 1];
  }
  function warn$1() {
    return log(this.context.dataflow, "warn", arguments);
  }
  function info() {
    return log(this.context.dataflow, "info", arguments);
  }
  function debug$1() {
    return log(this.context.dataflow, "debug", arguments);
  }
  function channel_luminance_value(channelValue) {
    const val = channelValue / 255;
    if (val <= 0.03928) {
      return val / 12.92;
    }
    return Math.pow((val + 0.055) / 1.055, 2.4);
  }
  function luminance(color2) {
    const c2 = rgb$1(color2), r = channel_luminance_value(c2.r), g = channel_luminance_value(c2.g), b2 = channel_luminance_value(c2.b);
    return 0.2126 * r + 0.7152 * g + 0.0722 * b2;
  }
  function contrast(color1, color2) {
    const lum1 = luminance(color1), lum2 = luminance(color2), lumL = Math.max(lum1, lum2), lumD = Math.min(lum1, lum2);
    return (lumL + 0.05) / (lumD + 0.05);
  }
  function merge() {
    const args = [].slice.call(arguments);
    args.unshift({});
    return extend$1(...args);
  }
  function equal$1(a2, b2) {
    return a2 === b2 || a2 !== a2 && b2 !== b2 ? true : isArray(a2) ? isArray(b2) && a2.length === b2.length ? equalArray(a2, b2) : false : isObject(a2) && isObject(b2) ? equalObject(a2, b2) : false;
  }
  function equalArray(a2, b2) {
    for (let i = 0, n = a2.length; i < n; ++i) {
      if (!equal$1(a2[i], b2[i])) return false;
    }
    return true;
  }
  function equalObject(a2, b2) {
    for (const key2 in a2) {
      if (!equal$1(a2[key2], b2[key2])) return false;
    }
    return true;
  }
  function removePredicate(props) {
    return (_) => equalObject(props, _);
  }
  function modify(name, insert2, remove2, toggle2, modify2, values2) {
    const df = this.context.dataflow, data2 = this.context.data[name], input = data2.input, stamp = df.stamp();
    let changes = data2.changes, predicate, key2;
    if (df._trigger === false || !(input.value.length || insert2 || toggle2)) {
      return 0;
    }
    if (!changes || changes.stamp < stamp) {
      data2.changes = changes = df.changeset();
      changes.stamp = stamp;
      df.runAfter(() => {
        data2.modified = true;
        df.pulse(input, changes).run();
      }, true, 1);
    }
    if (remove2) {
      predicate = remove2 === true ? truthy : isArray(remove2) || isTuple(remove2) ? remove2 : removePredicate(remove2);
      changes.remove(predicate);
    }
    if (insert2) {
      changes.insert(insert2);
    }
    if (toggle2) {
      predicate = removePredicate(toggle2);
      if (input.value.some(predicate)) {
        changes.remove(predicate);
      } else {
        changes.insert(toggle2);
      }
    }
    if (modify2) {
      for (key2 in values2) {
        changes.modify(modify2, key2, values2[key2]);
      }
    }
    return 1;
  }
  function pinchDistance(event2) {
    const t = event2.touches, dx = t[0].clientX - t[1].clientX, dy = t[0].clientY - t[1].clientY;
    return Math.hypot(dx, dy);
  }
  function pinchAngle(event2) {
    const t = event2.touches;
    return Math.atan2(t[0].clientY - t[1].clientY, t[0].clientX - t[1].clientX);
  }
  const accessors = {};
  function pluck(data2, name) {
    const accessor2 = accessors[name] || (accessors[name] = field$1(name));
    return isArray(data2) ? data2.map(accessor2) : accessor2(data2);
  }
  function array(seq) {
    return isArray(seq) || ArrayBuffer.isView(seq) ? seq : null;
  }
  function sequence(seq) {
    return array(seq) || (isString(seq) ? seq : null);
  }
  function join(seq) {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }
    return array(seq).join(...args);
  }
  function indexof(seq) {
    for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
      args[_key2 - 1] = arguments[_key2];
    }
    return sequence(seq).indexOf(...args);
  }
  function lastindexof(seq) {
    for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
      args[_key3 - 1] = arguments[_key3];
    }
    return sequence(seq).lastIndexOf(...args);
  }
  function slice$1(seq) {
    for (var _len4 = arguments.length, args = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
      args[_key4 - 1] = arguments[_key4];
    }
    return sequence(seq).slice(...args);
  }
  function replace(str, pattern, repl) {
    if (isFunction(repl)) error$1("Function argument passed to replace.");
    if (!isString(pattern) && !isRegExp(pattern)) error$1("Please pass a string or RegExp argument to replace.");
    return String(str).replace(pattern, repl);
  }
  function reverse$1(seq) {
    return array(seq).slice().reverse();
  }
  function sort(seq) {
    return array(seq).slice().sort(ascending$2);
  }
  function bandspace(count2, paddingInner2, paddingOuter2) {
    return bandSpace(count2 || 0, paddingInner2 || 0, paddingOuter2 || 0);
  }
  function bandwidth(name, group2) {
    const s = getScale(name, (group2 || this).context);
    return s && s.bandwidth ? s.bandwidth() : 0;
  }
  function copy(name, group2) {
    const s = getScale(name, (group2 || this).context);
    return s ? s.copy() : void 0;
  }
  function domain$2(name, group2) {
    const s = getScale(name, (group2 || this).context);
    return s ? s.domain() : [];
  }
  function invert(name, range2, group2) {
    const s = getScale(name, (group2 || this).context);
    return !s ? void 0 : isArray(range2) ? (s.invertRange || s.invert)(range2) : (s.invert || s.invertExtent)(range2);
  }
  function range$3(name, group2) {
    const s = getScale(name, (group2 || this).context);
    return s && s.range ? s.range() : [];
  }
  function scale$2(name, value2, group2) {
    const s = getScale(name, (group2 || this).context);
    return s ? s(value2) : void 0;
  }
  function scaleGradient(scale2, p02, p1, count2, group2) {
    scale2 = getScale(scale2, (group2 || this).context);
    const gradient2 = Gradient$1(p02, p1);
    let stops = scale2.domain(), min2 = stops[0], max2 = peek$2(stops), fraction = identity$6;
    if (!(max2 - min2)) {
      scale2 = (scale2.interpolator ? scale$4("sequential")().interpolator(scale2.interpolator()) : scale$4("linear")().interpolate(scale2.interpolate()).range(scale2.range())).domain([min2 = 0, max2 = 1]);
    } else {
      fraction = scaleFraction(scale2, min2, max2);
    }
    if (scale2.ticks) {
      stops = scale2.ticks(+count2 || 15);
      if (min2 !== stops[0]) stops.unshift(min2);
      if (max2 !== peek$2(stops)) stops.push(max2);
    }
    stops.forEach((_) => gradient2.stop(fraction(_), scale2(_)));
    return gradient2;
  }
  function geoShape(projection2, geojson, group2) {
    const p = getScale(projection2, (group2 || this).context);
    return function(context2) {
      return p ? p.path.context(context2)(geojson) : "";
    };
  }
  function pathShape(path2) {
    let p = null;
    return function(context2) {
      return context2 ? pathRender(context2, p = p || parse$3(path2)) : path2;
    };
  }
  const datum = (d) => d.data;
  function treeNodes(name, context2) {
    const tree2 = data$1.call(context2, name);
    return tree2.root && tree2.root.lookup || {};
  }
  function treePath(name, source2, target2) {
    const nodes = treeNodes(name, this), s = nodes[source2], t = nodes[target2];
    return s && t ? s.path(t).map(datum) : void 0;
  }
  function treeAncestors(name, node) {
    const n = treeNodes(name, this)[node];
    return n ? n.ancestors().map(datum) : void 0;
  }
  const _window$1 = () => typeof window !== "undefined" && window || null;
  function screen() {
    const w2 = _window$1();
    return w2 ? w2.screen : {};
  }
  function windowSize() {
    const w2 = _window$1();
    return w2 ? [w2.innerWidth, w2.innerHeight] : [void 0, void 0];
  }
  function containerSize() {
    const view = this.context.dataflow, el = view.container && view.container();
    return el ? [el.clientWidth, el.clientHeight] : [void 0, void 0];
  }
  function intersect(b2, opt, group2) {
    if (!b2) return [];
    const [u2, v] = b2, box = new Bounds().set(u2[0], u2[1], v[0], v[1]), scene = group2 || this.context.dataflow.scenegraph().root;
    return intersect$2(scene, box, filter(opt));
  }
  function filter(opt) {
    let p = null;
    if (opt) {
      const types = array$5(opt.marktype), names = array$5(opt.markname);
      p = (_) => (!types.length || types.some((t) => _.marktype === t)) && (!names.length || names.some((s) => _.name === s));
    }
    return p;
  }
  function lassoAppend(lasso, x2, y2) {
    let minDist = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 5;
    lasso = array$5(lasso);
    const last = lasso[lasso.length - 1];
    return last === void 0 || Math.hypot(last[0] - x2, last[1] - y2) > minDist ? [...lasso, [x2, y2]] : lasso;
  }
  function lassoPath(lasso) {
    return array$5(lasso).reduce((svg, _ref, i) => {
      let [x2, y2] = _ref;
      return svg += i == 0 ? `M ${x2},${y2} ` : i === lasso.length - 1 ? " Z" : `L ${x2},${y2} `;
    }, "");
  }
  function intersectLasso(markname, pixelLasso, unit2) {
    const {
      x: x2,
      y: y2,
      mark
    } = unit2;
    const bb = new Bounds().set(Number.MAX_SAFE_INTEGER, Number.MAX_SAFE_INTEGER, Number.MIN_SAFE_INTEGER, Number.MIN_SAFE_INTEGER);
    for (const [px2, py2] of pixelLasso) {
      if (px2 < bb.x1) bb.x1 = px2;
      if (px2 > bb.x2) bb.x2 = px2;
      if (py2 < bb.y1) bb.y1 = py2;
      if (py2 > bb.y2) bb.y2 = py2;
    }
    bb.translate(x2, y2);
    const intersection2 = intersect([[bb.x1, bb.y1], [bb.x2, bb.y2]], markname, mark);
    return intersection2.filter((tuple) => pointInPolygon(tuple.x, tuple.y, pixelLasso));
  }
  function pointInPolygon(testx, testy, polygon) {
    let intersections = 0;
    for (let i = 0, j = polygon.length - 1; i < polygon.length; j = i++) {
      const [prevX, prevY] = polygon[j];
      const [x2, y2] = polygon[i];
      if (y2 > testy != prevY > testy && testx < (prevX - x2) * (testy - y2) / (prevY - y2) + x2) {
        intersections++;
      }
    }
    return intersections & 1;
  }
  const functionContext = {
    random() {
      return random();
    },
    // override default
    cumulativeNormal,
    cumulativeLogNormal,
    cumulativeUniform,
    densityNormal,
    densityLogNormal,
    densityUniform,
    quantileNormal,
    quantileLogNormal,
    quantileUniform,
    sampleNormal,
    sampleLogNormal,
    sampleUniform,
    isArray,
    isBoolean: isBoolean$2,
    isDate: isDate$1,
    isDefined(_) {
      return _ !== void 0;
    },
    isNumber: isNumber$1,
    isObject,
    isRegExp,
    isString,
    isTuple,
    isValid(_) {
      return _ != null && _ === _;
    },
    toBoolean,
    toDate(_) {
      return toDate(_);
    },
    // suppress extra arguments
    toNumber,
    toString,
    indexof,
    join,
    lastindexof,
    replace,
    reverse: reverse$1,
    sort,
    slice: slice$1,
    flush,
    lerp,
    merge,
    pad: pad$2,
    peek: peek$2,
    pluck,
    span,
    inrange,
    truncate: truncate$1,
    rgb: rgb$1,
    lab: lab$1,
    hcl: hcl$2,
    hsl: hsl$2,
    luminance,
    contrast,
    sequence: range$5,
    format,
    utcFormat,
    utcParse,
    utcOffset,
    utcSequence,
    timeFormat: timeFormat$1,
    timeParse,
    timeOffset,
    timeSequence,
    timeUnitSpecifier,
    monthFormat,
    monthAbbrevFormat,
    dayFormat,
    dayAbbrevFormat,
    quarter,
    utcquarter,
    week,
    utcweek,
    dayofyear,
    utcdayofyear,
    warn: warn$1,
    info,
    debug: debug$1,
    extent(_) {
      return extent(_);
    },
    // suppress extra arguments
    inScope,
    intersect,
    clampRange,
    pinchDistance,
    pinchAngle,
    screen,
    containerSize,
    windowSize,
    bandspace,
    setdata,
    pathShape,
    panLinear,
    panLog,
    panPow,
    panSymlog,
    zoomLinear,
    zoomLog,
    zoomPow,
    zoomSymlog,
    encode,
    modify,
    lassoAppend,
    lassoPath,
    intersectLasso
  };
  const eventFunctions = ["view", "item", "group", "xy", "x", "y"], eventPrefix = "event.vega.", thisPrefix = "this.", astVisitors = {};
  const codegenParams = {
    forbidden: ["_"],
    allowed: ["datum", "event", "item"],
    fieldvar: "datum",
    globalvar: (id2) => `_[${$(SignalPrefix + id2)}]`,
    functions: buildFunctions,
    constants: Constants$1,
    visitors: astVisitors
  };
  const codeGenerator = codegen(codegenParams);
  function buildFunctions(codegen2) {
    const fn = Functions$1(codegen2);
    eventFunctions.forEach((name) => fn[name] = eventPrefix + name);
    for (const name in functionContext) {
      fn[name] = thisPrefix + name;
    }
    extend$1(fn, internalScaleFunctions(codegen2, functionContext, astVisitors));
    return fn;
  }
  function expressionFunction(name, fn, visitor) {
    if (arguments.length === 1) {
      return functionContext[name];
    }
    functionContext[name] = fn;
    if (visitor) astVisitors[name] = visitor;
    if (codeGenerator) codeGenerator.functions[name] = thisPrefix + name;
    return this;
  }
  expressionFunction("bandwidth", bandwidth, scaleVisitor);
  expressionFunction("copy", copy, scaleVisitor);
  expressionFunction("domain", domain$2, scaleVisitor);
  expressionFunction("range", range$3, scaleVisitor);
  expressionFunction("invert", invert, scaleVisitor);
  expressionFunction("scale", scale$2, scaleVisitor);
  expressionFunction("gradient", scaleGradient, scaleVisitor);
  expressionFunction("geoArea", geoArea, scaleVisitor);
  expressionFunction("geoBounds", geoBounds, scaleVisitor);
  expressionFunction("geoCentroid", geoCentroid, scaleVisitor);
  expressionFunction("geoShape", geoShape, scaleVisitor);
  expressionFunction("geoScale", geoScale, scaleVisitor);
  expressionFunction("indata", indata, indataVisitor);
  expressionFunction("data", data$1, dataVisitor);
  expressionFunction("treePath", treePath, dataVisitor);
  expressionFunction("treeAncestors", treeAncestors, dataVisitor);
  expressionFunction("vlSelectionTest", selectionTest, selectionVisitor);
  expressionFunction("vlSelectionIdTest", selectionIdTest, selectionVisitor);
  expressionFunction("vlSelectionResolve", selectionResolve, selectionVisitor);
  expressionFunction("vlSelectionTuples", selectionTuples);
  function parser$1(expr2, scope) {
    const params2 = {};
    let ast;
    try {
      expr2 = isString(expr2) ? expr2 : $(expr2) + "";
      ast = parser$2(expr2);
    } catch (err) {
      error$1("Expression parse error: " + expr2);
    }
    ast.visit((node) => {
      if (node.type !== CallExpression$1) return;
      const name = node.callee.name, visit2 = codegenParams.visitors[name];
      if (visit2) visit2(name, node.arguments, scope, params2);
    });
    const gen = codeGenerator(ast);
    gen.globals.forEach((name) => {
      const signalName = SignalPrefix + name;
      if (!has$1(params2, signalName) && scope.getSignal(name)) {
        params2[signalName] = scope.signalRef(name);
      }
    });
    return {
      $expr: extend$1({
        code: gen.code
      }, scope.options.ast ? {
        ast
      } : null),
      $fields: gen.fields,
      $params: params2
    };
  }
  function parse$2(spec) {
    const ctx = this, operators = spec.operators || [];
    if (spec.background) {
      ctx.background = spec.background;
    }
    if (spec.eventConfig) {
      ctx.eventConfig = spec.eventConfig;
    }
    if (spec.locale) {
      ctx.locale = spec.locale;
    }
    operators.forEach((entry2) => ctx.parseOperator(entry2));
    operators.forEach((entry2) => ctx.parseOperatorParameters(entry2));
    (spec.streams || []).forEach((entry2) => ctx.parseStream(entry2));
    (spec.updates || []).forEach((entry2) => ctx.parseUpdate(entry2));
    return ctx.resolve();
  }
  const Skip$2 = toSet(["rule"]), Swap = toSet(["group", "image", "rect"]);
  function adjustSpatial$1(encode2, marktype) {
    let code = "";
    if (Skip$2[marktype]) return code;
    if (encode2.x2) {
      if (encode2.x) {
        if (Swap[marktype]) {
          code += "if(o.x>o.x2)$=o.x,o.x=o.x2,o.x2=$;";
        }
        code += "o.width=o.x2-o.x;";
      } else {
        code += "o.x=o.x2-(o.width||0);";
      }
    }
    if (encode2.xc) {
      code += "o.x=o.xc-(o.width||0)/2;";
    }
    if (encode2.y2) {
      if (encode2.y) {
        if (Swap[marktype]) {
          code += "if(o.y>o.y2)$=o.y,o.y=o.y2,o.y2=$;";
        }
        code += "o.height=o.y2-o.y;";
      } else {
        code += "o.y=o.y2-(o.height||0);";
      }
    }
    if (encode2.yc) {
      code += "o.y=o.yc-(o.height||0)/2;";
    }
    return code;
  }
  function canonicalType(type2) {
    return (type2 + "").toLowerCase();
  }
  function isOperator(type2) {
    return canonicalType(type2) === "operator";
  }
  function isCollect(type2) {
    return canonicalType(type2) === "collect";
  }
  function expression$2(ctx, args, code) {
    if (!code.endsWith(";")) {
      code = "return(" + code + ");";
    }
    const fn = Function(...args.concat(code));
    return ctx && ctx.functions ? fn.bind(ctx.functions) : fn;
  }
  function _compare(u2, v, lt, gt) {
    return `((u = ${u2}) < (v = ${v}) || u == null) && v != null ? ${lt}
  : (u > v || v == null) && u != null ? ${gt}
  : ((v = v instanceof Date ? +v : v), (u = u instanceof Date ? +u : u)) !== u && v === v ? ${lt}
  : v !== v && u === u ? ${gt} : `;
  }
  var expressionCodegen = {
    /**
     * Parse an expression used to update an operator value.
     */
    operator: (ctx, expr2) => expression$2(ctx, ["_"], expr2.code),
    /**
     * Parse an expression provided as an operator parameter value.
     */
    parameter: (ctx, expr2) => expression$2(ctx, ["datum", "_"], expr2.code),
    /**
     * Parse an expression applied to an event stream.
     */
    event: (ctx, expr2) => expression$2(ctx, ["event"], expr2.code),
    /**
     * Parse an expression used to handle an event-driven operator update.
     */
    handler: (ctx, expr2) => {
      const code = `var datum=event.item&&event.item.datum;return ${expr2.code};`;
      return expression$2(ctx, ["_", "event"], code);
    },
    /**
     * Parse an expression that performs visual encoding.
     */
    encode: (ctx, encode2) => {
      const {
        marktype,
        channels
      } = encode2;
      let code = "var o=item,datum=o.datum,m=0,$;";
      for (const name in channels) {
        const o = "o[" + $(name) + "]";
        code += `$=${channels[name].code};if(${o}!==$)${o}=$,m=1;`;
      }
      code += adjustSpatial$1(channels, marktype);
      code += "return m;";
      return expression$2(ctx, ["item", "_"], code);
    },
    /**
     * Optimized code generators for access and comparison.
     */
    codegen: {
      get(path2) {
        const ref2 = `[${path2.map($).join("][")}]`;
        const get2 = Function("_", `return _${ref2};`);
        get2.path = ref2;
        return get2;
      },
      comparator(fields, orders) {
        let t;
        const map2 = (f, i) => {
          const o = orders[i];
          let u2, v;
          if (f.path) {
            u2 = `a${f.path}`;
            v = `b${f.path}`;
          } else {
            (t = t || {})["f" + i] = f;
            u2 = `this.f${i}(a)`;
            v = `this.f${i}(b)`;
          }
          return _compare(u2, v, -o, o);
        };
        const fn = Function("a", "b", "var u, v; return " + fields.map(map2).join("") + "0;");
        return t ? fn.bind(t) : fn;
      }
    }
  };
  function parseOperator(spec) {
    const ctx = this;
    if (isOperator(spec.type) || !spec.type) {
      ctx.operator(spec, spec.update ? ctx.operatorExpression(spec.update) : null);
    } else {
      ctx.transform(spec, spec.type);
    }
  }
  function parseOperatorParameters(spec) {
    const ctx = this;
    if (spec.params) {
      const op = ctx.get(spec.id);
      if (!op) error$1("Invalid operator id: " + spec.id);
      ctx.dataflow.connect(op, op.parameters(ctx.parseParameters(spec.params), spec.react, spec.initonly));
    }
  }
  function parseParameters$1(spec, params2) {
    params2 = params2 || {};
    const ctx = this;
    for (const key2 in spec) {
      const value2 = spec[key2];
      params2[key2] = isArray(value2) ? value2.map((v) => parseParameter$2(v, ctx, params2)) : parseParameter$2(value2, ctx, params2);
    }
    return params2;
  }
  function parseParameter$2(spec, ctx, params2) {
    if (!spec || !isObject(spec)) return spec;
    for (let i = 0, n = PARSERS.length, p; i < n; ++i) {
      p = PARSERS[i];
      if (has$1(spec, p.key)) {
        return p.parse(spec, ctx, params2);
      }
    }
    return spec;
  }
  var PARSERS = [{
    key: "$ref",
    parse: getOperator
  }, {
    key: "$key",
    parse: getKey
  }, {
    key: "$expr",
    parse: getExpression
  }, {
    key: "$field",
    parse: getField
  }, {
    key: "$encode",
    parse: getEncode
  }, {
    key: "$compare",
    parse: getCompare
  }, {
    key: "$context",
    parse: getContext
  }, {
    key: "$subflow",
    parse: getSubflow
  }, {
    key: "$tupleid",
    parse: getTupleId
  }];
  function getOperator(_, ctx) {
    return ctx.get(_.$ref) || error$1("Operator not defined: " + _.$ref);
  }
  function getExpression(_, ctx, params2) {
    if (_.$params) {
      ctx.parseParameters(_.$params, params2);
    }
    const k = "e:" + _.$expr.code;
    return ctx.fn[k] || (ctx.fn[k] = accessor(ctx.parameterExpression(_.$expr), _.$fields));
  }
  function getKey(_, ctx) {
    const k = "k:" + _.$key + "_" + !!_.$flat;
    return ctx.fn[k] || (ctx.fn[k] = key(_.$key, _.$flat, ctx.expr.codegen));
  }
  function getField(_, ctx) {
    if (!_.$field) return null;
    const k = "f:" + _.$field + "_" + _.$name;
    return ctx.fn[k] || (ctx.fn[k] = field$1(_.$field, _.$name, ctx.expr.codegen));
  }
  function getCompare(_, ctx) {
    const k = "c:" + _.$compare + "_" + _.$order, c2 = array$5(_.$compare).map((_2) => _2 && _2.$tupleid ? tupleid : _2);
    return ctx.fn[k] || (ctx.fn[k] = compare$2(c2, _.$order, ctx.expr.codegen));
  }
  function getEncode(_, ctx) {
    const spec = _.$encode, encode2 = {};
    for (const name in spec) {
      const enc = spec[name];
      encode2[name] = accessor(ctx.encodeExpression(enc.$expr), enc.$fields);
      encode2[name].output = enc.$output;
    }
    return encode2;
  }
  function getContext(_, ctx) {
    return ctx;
  }
  function getSubflow(_, ctx) {
    const spec = _.$subflow;
    return function(dataflow, key2, parent) {
      const subctx = ctx.fork().parse(spec), op = subctx.get(spec.operators[0].id), p = subctx.signals.parent;
      if (p) p.set(parent);
      op.detachSubflow = () => ctx.detach(subctx);
      return op;
    };
  }
  function getTupleId() {
    return tupleid;
  }
  function parseStream$2(spec) {
    var ctx = this, filter2 = spec.filter != null ? ctx.eventExpression(spec.filter) : void 0, stream2 = spec.stream != null ? ctx.get(spec.stream) : void 0, args;
    if (spec.source) {
      stream2 = ctx.events(spec.source, spec.type, filter2);
    } else if (spec.merge) {
      args = spec.merge.map((_) => ctx.get(_));
      stream2 = args[0].merge.apply(args[0], args.slice(1));
    }
    if (spec.between) {
      args = spec.between.map((_) => ctx.get(_));
      stream2 = stream2.between(args[0], args[1]);
    }
    if (spec.filter) {
      stream2 = stream2.filter(filter2);
    }
    if (spec.throttle != null) {
      stream2 = stream2.throttle(+spec.throttle);
    }
    if (spec.debounce != null) {
      stream2 = stream2.debounce(+spec.debounce);
    }
    if (stream2 == null) {
      error$1("Invalid stream definition: " + JSON.stringify(spec));
    }
    if (spec.consume) stream2.consume(true);
    ctx.stream(spec, stream2);
  }
  function parseUpdate$1(spec) {
    var ctx = this, srcid = isObject(srcid = spec.source) ? srcid.$ref : srcid, source2 = ctx.get(srcid), target2 = null, update2 = spec.update, params2 = void 0;
    if (!source2) error$1("Source not defined: " + spec.source);
    target2 = spec.target && spec.target.$expr ? ctx.eventExpression(spec.target.$expr) : ctx.get(spec.target);
    if (update2 && update2.$expr) {
      if (update2.$params) {
        params2 = ctx.parseParameters(update2.$params);
      }
      update2 = ctx.handlerExpression(update2.$expr);
    }
    ctx.update(spec, source2, target2, update2, params2);
  }
  const SKIP = {
    skip: true
  };
  function getState$1(options) {
    var ctx = this, state = {};
    if (options.signals) {
      var signals = state.signals = {};
      Object.keys(ctx.signals).forEach((key2) => {
        const op = ctx.signals[key2];
        if (options.signals(key2, op)) {
          signals[key2] = op.value;
        }
      });
    }
    if (options.data) {
      var data2 = state.data = {};
      Object.keys(ctx.data).forEach((key2) => {
        const dataset = ctx.data[key2];
        if (options.data(key2, dataset)) {
          data2[key2] = dataset.input.value;
        }
      });
    }
    if (ctx.subcontext && options.recurse !== false) {
      state.subcontext = ctx.subcontext.map((ctx2) => ctx2.getState(options));
    }
    return state;
  }
  function setState$1(state) {
    var ctx = this, df = ctx.dataflow, data2 = state.data, signals = state.signals;
    Object.keys(signals || {}).forEach((key2) => {
      df.update(ctx.signals[key2], signals[key2], SKIP);
    });
    Object.keys(data2 || {}).forEach((key2) => {
      df.pulse(ctx.data[key2].input, df.changeset().remove(truthy).insert(data2[key2]));
    });
    (state.subcontext || []).forEach((substate, i) => {
      const subctx = ctx.subcontext[i];
      if (subctx) subctx.setState(substate);
    });
  }
  function context(df, transforms2, functions, expr2) {
    return new Context(df, transforms2, functions, expr2);
  }
  function Context(df, transforms2, functions, expr2) {
    this.dataflow = df;
    this.transforms = transforms2;
    this.events = df.events.bind(df);
    this.expr = expr2 || expressionCodegen, this.signals = {};
    this.scales = {};
    this.nodes = {};
    this.data = {};
    this.fn = {};
    if (functions) {
      this.functions = Object.create(functions);
      this.functions.context = this;
    }
  }
  function Subcontext(ctx) {
    this.dataflow = ctx.dataflow;
    this.transforms = ctx.transforms;
    this.events = ctx.events;
    this.expr = ctx.expr;
    this.signals = Object.create(ctx.signals);
    this.scales = Object.create(ctx.scales);
    this.nodes = Object.create(ctx.nodes);
    this.data = Object.create(ctx.data);
    this.fn = Object.create(ctx.fn);
    if (ctx.functions) {
      this.functions = Object.create(ctx.functions);
      this.functions.context = this;
    }
  }
  Context.prototype = Subcontext.prototype = {
    fork() {
      const ctx = new Subcontext(this);
      (this.subcontext || (this.subcontext = [])).push(ctx);
      return ctx;
    },
    detach(ctx) {
      this.subcontext = this.subcontext.filter((c2) => c2 !== ctx);
      const keys2 = Object.keys(ctx.nodes);
      for (const key2 of keys2) ctx.nodes[key2]._targets = null;
      for (const key2 of keys2) ctx.nodes[key2].detach();
      ctx.nodes = null;
    },
    get(id2) {
      return this.nodes[id2];
    },
    set(id2, node) {
      return this.nodes[id2] = node;
    },
    add(spec, op) {
      const ctx = this, df = ctx.dataflow, data2 = spec.value;
      ctx.set(spec.id, op);
      if (isCollect(spec.type) && data2) {
        if (data2.$ingest) {
          df.ingest(op, data2.$ingest, data2.$format);
        } else if (data2.$request) {
          df.preload(op, data2.$request, data2.$format);
        } else {
          df.pulse(op, df.changeset().insert(data2));
        }
      }
      if (spec.root) {
        ctx.root = op;
      }
      if (spec.parent) {
        let p = ctx.get(spec.parent.$ref);
        if (p) {
          df.connect(p, [op]);
          op.targets().add(p);
        } else {
          (ctx.unresolved = ctx.unresolved || []).push(() => {
            p = ctx.get(spec.parent.$ref);
            df.connect(p, [op]);
            op.targets().add(p);
          });
        }
      }
      if (spec.signal) {
        ctx.signals[spec.signal] = op;
      }
      if (spec.scale) {
        ctx.scales[spec.scale] = op;
      }
      if (spec.data) {
        for (const name in spec.data) {
          const data3 = ctx.data[name] || (ctx.data[name] = {});
          spec.data[name].forEach((role) => data3[role] = op);
        }
      }
    },
    resolve() {
      (this.unresolved || []).forEach((fn) => fn());
      delete this.unresolved;
      return this;
    },
    operator(spec, update2) {
      this.add(spec, this.dataflow.add(spec.value, update2));
    },
    transform(spec, type2) {
      this.add(spec, this.dataflow.add(this.transforms[canonicalType(type2)]));
    },
    stream(spec, stream2) {
      this.set(spec.id, stream2);
    },
    update(spec, stream2, target2, update2, params2) {
      this.dataflow.on(stream2, target2, update2, params2, spec.options);
    },
    // expression parsing
    operatorExpression(expr2) {
      return this.expr.operator(this, expr2);
    },
    parameterExpression(expr2) {
      return this.expr.parameter(this, expr2);
    },
    eventExpression(expr2) {
      return this.expr.event(this, expr2);
    },
    handlerExpression(expr2) {
      return this.expr.handler(this, expr2);
    },
    encodeExpression(encode2) {
      return this.expr.encode(this, encode2);
    },
    // parse methods
    parse: parse$2,
    parseOperator,
    parseOperatorParameters,
    parseParameters: parseParameters$1,
    parseStream: parseStream$2,
    parseUpdate: parseUpdate$1,
    // state methods
    getState: getState$1,
    setState: setState$1
  };
  function initializeAria(view) {
    const el = view.container();
    if (el) {
      el.setAttribute("role", "graphics-document");
      el.setAttribute("aria-roleDescription", "visualization");
      ariaLabel(el, view.description());
    }
  }
  function ariaLabel(el, desc) {
    if (el) desc == null ? el.removeAttribute("aria-label") : el.setAttribute("aria-label", desc);
  }
  function background(view) {
    view.add(null, (_) => {
      view._background = _.bg;
      view._resize = 1;
      return _.bg;
    }, {
      bg: view._signals.background
    });
  }
  const Default = "default";
  function cursor$1(view) {
    const cursor2 = view._signals.cursor || (view._signals.cursor = view.add({
      user: Default,
      item: null
    }));
    view.on(view.events("view", "pointermove"), cursor2, (_, event2) => {
      const value2 = cursor2.value, user = value2 ? isString(value2) ? value2 : value2.user : Default, item = event2.item && event2.item.cursor || null;
      return value2 && user === value2.user && item == value2.item ? value2 : {
        user,
        item
      };
    });
    view.add(null, function(_) {
      let user = _.cursor, item = this.value;
      if (!isString(user)) {
        item = user.item;
        user = user.user;
      }
      setCursor(view, user && user !== Default ? user : item || user);
      return item;
    }, {
      cursor: cursor2
    });
  }
  function setCursor(view, cursor2) {
    const el = view.globalCursor() ? typeof document !== "undefined" && document.body : view.container();
    if (el) {
      return cursor2 == null ? el.style.removeProperty("cursor") : el.style.cursor = cursor2;
    }
  }
  function dataref(view, name) {
    var data2 = view._runtime.data;
    if (!has$1(data2, name)) {
      error$1("Unrecognized data set: " + name);
    }
    return data2[name];
  }
  function data(name, values2) {
    return arguments.length < 2 ? dataref(this, name).values.value : change.call(this, name, changeset().remove(truthy).insert(values2));
  }
  function change(name, changes) {
    if (!isChangeSet(changes)) {
      error$1("Second argument to changes must be a changeset.");
    }
    const dataset = dataref(this, name);
    dataset.modified = true;
    return this.pulse(dataset.input, changes);
  }
  function insert(name, _) {
    return change.call(this, name, changeset().insert(_));
  }
  function remove(name, _) {
    return change.call(this, name, changeset().remove(_));
  }
  function width(view) {
    var padding2 = view.padding();
    return Math.max(0, view._viewWidth + padding2.left + padding2.right);
  }
  function height(view) {
    var padding2 = view.padding();
    return Math.max(0, view._viewHeight + padding2.top + padding2.bottom);
  }
  function offset(view) {
    var padding2 = view.padding(), origin = view._origin;
    return [padding2.left + origin[0], padding2.top + origin[1]];
  }
  function resizeRenderer(view) {
    var origin = offset(view), w2 = width(view), h2 = height(view);
    view._renderer.background(view.background());
    view._renderer.resize(w2, h2, origin);
    view._handler.origin(origin);
    view._resizeListeners.forEach((handler) => {
      try {
        handler(w2, h2);
      } catch (error2) {
        view.error(error2);
      }
    });
  }
  function eventExtend(view, event2, item) {
    var r = view._renderer, el = r && r.canvas(), p, e3, translate2;
    if (el) {
      translate2 = offset(view);
      e3 = event2.changedTouches ? event2.changedTouches[0] : event2;
      p = point$2(e3, el);
      p[0] -= translate2[0];
      p[1] -= translate2[1];
    }
    event2.dataflow = view;
    event2.item = item;
    event2.vega = extension(view, item, p);
    return event2;
  }
  function extension(view, item, point2) {
    const itemGroup = item ? item.mark.marktype === "group" ? item : item.mark.group : null;
    function group2(name) {
      var g = itemGroup, i;
      if (name) for (i = item; i; i = i.mark.group) {
        if (i.mark.name === name) {
          g = i;
          break;
        }
      }
      return g && g.mark && g.mark.interactive ? g : {};
    }
    function xy(item2) {
      if (!item2) return point2;
      if (isString(item2)) item2 = group2(item2);
      const p = point2.slice();
      while (item2) {
        p[0] -= item2.x || 0;
        p[1] -= item2.y || 0;
        item2 = item2.mark && item2.mark.group;
      }
      return p;
    }
    return {
      view: constant$5(view),
      item: constant$5(item || {}),
      group: group2,
      xy,
      x: (item2) => xy(item2)[0],
      y: (item2) => xy(item2)[1]
    };
  }
  const VIEW$1 = "view", TIMER = "timer", WINDOW = "window", NO_TRAP = {
    trap: false
  };
  function initializeEventConfig(config) {
    const events2 = extend$1({
      defaults: {}
    }, config);
    const unpack = (obj, keys2) => {
      keys2.forEach((k) => {
        if (isArray(obj[k])) obj[k] = toSet(obj[k]);
      });
    };
    unpack(events2.defaults, ["prevent", "allow"]);
    unpack(events2, ["view", "window", "selector"]);
    return events2;
  }
  function trackEventListener(view, sources, type2, handler) {
    view._eventListeners.push({
      type: type2,
      sources: array$5(sources),
      handler
    });
  }
  function prevent(view, type2) {
    var def2 = view._eventConfig.defaults, prevent2 = def2.prevent, allow = def2.allow;
    return prevent2 === false || allow === true ? false : prevent2 === true || allow === false ? true : prevent2 ? prevent2[type2] : allow ? !allow[type2] : view.preventDefault();
  }
  function permit(view, key2, type2) {
    const rule2 = view._eventConfig && view._eventConfig[key2];
    if (rule2 === false || isObject(rule2) && !rule2[type2]) {
      view.warn(`Blocked ${key2} ${type2} event listener.`);
      return false;
    }
    return true;
  }
  function events(source2, type2, filter2) {
    var view = this, s = new EventStream(filter2), send2 = function(e3, item) {
      view.runAsync(null, () => {
        if (source2 === VIEW$1 && prevent(view, type2)) {
          e3.preventDefault();
        }
        s.receive(eventExtend(view, e3, item));
      });
    }, sources;
    if (source2 === TIMER) {
      if (permit(view, "timer", type2)) {
        view.timer(send2, type2);
      }
    } else if (source2 === VIEW$1) {
      if (permit(view, "view", type2)) {
        view.addEventListener(type2, send2, NO_TRAP);
      }
    } else {
      if (source2 === WINDOW) {
        if (permit(view, "window", type2) && typeof window !== "undefined") {
          sources = [window];
        }
      } else if (typeof document !== "undefined") {
        if (permit(view, "selector", type2)) {
          sources = Array.from(document.querySelectorAll(source2));
        }
      }
      if (!sources) {
        view.warn("Can not resolve event source: " + source2);
      } else {
        for (var i = 0, n = sources.length; i < n; ++i) {
          sources[i].addEventListener(type2, send2);
        }
        trackEventListener(view, sources, type2, send2);
      }
    }
    return s;
  }
  function itemFilter(event2) {
    return event2.item;
  }
  function markTarget(event2) {
    return event2.item.mark.source;
  }
  function invoke(name) {
    return function(_, event2) {
      return event2.vega.view().changeset().encode(event2.item, name);
    };
  }
  function hover(hoverSet, leaveSet) {
    hoverSet = [hoverSet || "hover"];
    leaveSet = [leaveSet || "update", hoverSet[0]];
    this.on(this.events("view", "pointerover", itemFilter), markTarget, invoke(hoverSet));
    this.on(this.events("view", "pointerout", itemFilter), markTarget, invoke(leaveSet));
    return this;
  }
  function finalize() {
    var tooltip2 = this._tooltip, timers = this._timers, handlers = this._handler.handlers(), listeners = this._eventListeners, n, m2, e3, h2, t;
    n = timers.length;
    while (--n >= 0) {
      timers[n].stop();
    }
    n = listeners.length;
    while (--n >= 0) {
      e3 = listeners[n];
      m2 = e3.sources.length;
      while (--m2 >= 0) {
        e3.sources[m2].removeEventListener(e3.type, e3.handler);
      }
    }
    if (tooltip2) {
      tooltip2.call(this, this._handler, null, null, null);
    }
    n = handlers.length;
    while (--n >= 0) {
      t = handlers[n].type;
      h2 = handlers[n].handler;
      this._handler.off(t, h2);
    }
    return this;
  }
  function element(tag, attr2, text2) {
    const el = document.createElement(tag);
    for (const key2 in attr2) el.setAttribute(key2, attr2[key2]);
    if (text2 != null) el.textContent = text2;
    return el;
  }
  const BindClass = "vega-bind", NameClass = "vega-bind-name", RadioClass = "vega-bind-radio";
  function bind(view, el, binding) {
    if (!el) return;
    const param2 = binding.param;
    let bind2 = binding.state;
    if (!bind2) {
      bind2 = binding.state = {
        elements: null,
        active: false,
        set: null,
        update: (value2) => {
          if (value2 != view.signal(param2.signal)) {
            view.runAsync(null, () => {
              bind2.source = true;
              view.signal(param2.signal, value2);
            });
          }
        }
      };
      if (param2.debounce) {
        bind2.update = debounce(param2.debounce, bind2.update);
      }
    }
    const create2 = param2.input == null && param2.element ? target : generate$1;
    create2(bind2, el, param2, view);
    if (!bind2.active) {
      view.on(view._signals[param2.signal], null, () => {
        bind2.source ? bind2.source = false : bind2.set(view.signal(param2.signal));
      });
      bind2.active = true;
    }
    return bind2;
  }
  function target(bind2, node, param2, view) {
    const type2 = param2.event || "input";
    const handler = () => bind2.update(node.value);
    view.signal(param2.signal, node.value);
    node.addEventListener(type2, handler);
    trackEventListener(view, node, type2, handler);
    bind2.set = (value2) => {
      node.value = value2;
      node.dispatchEvent(event(type2));
    };
  }
  function event(type2) {
    return typeof Event !== "undefined" ? new Event(type2) : {
      type: type2
    };
  }
  function generate$1(bind2, el, param2, view) {
    const value2 = view.signal(param2.signal);
    const div = element("div", {
      "class": BindClass
    });
    const wrapper = param2.input === "radio" ? div : div.appendChild(element("label"));
    wrapper.appendChild(element("span", {
      "class": NameClass
    }, param2.name || param2.signal));
    el.appendChild(div);
    let input = form;
    switch (param2.input) {
      case "checkbox":
        input = checkbox;
        break;
      case "select":
        input = select;
        break;
      case "radio":
        input = radio;
        break;
      case "range":
        input = range$2;
        break;
    }
    input(bind2, wrapper, param2, value2);
  }
  function form(bind2, el, param2, value2) {
    const node = element("input");
    for (const key2 in param2) {
      if (key2 !== "signal" && key2 !== "element") {
        node.setAttribute(key2 === "input" ? "type" : key2, param2[key2]);
      }
    }
    node.setAttribute("name", param2.signal);
    node.value = value2;
    el.appendChild(node);
    node.addEventListener("input", () => bind2.update(node.value));
    bind2.elements = [node];
    bind2.set = (value3) => node.value = value3;
  }
  function checkbox(bind2, el, param2, value2) {
    const attr2 = {
      type: "checkbox",
      name: param2.signal
    };
    if (value2) attr2.checked = true;
    const node = element("input", attr2);
    el.appendChild(node);
    node.addEventListener("change", () => bind2.update(node.checked));
    bind2.elements = [node];
    bind2.set = (value3) => node.checked = !!value3 || null;
  }
  function select(bind2, el, param2, value2) {
    const node = element("select", {
      name: param2.signal
    }), labels2 = param2.labels || [];
    param2.options.forEach((option, i) => {
      const attr2 = {
        value: option
      };
      if (valuesEqual(option, value2)) attr2.selected = true;
      node.appendChild(element("option", attr2, (labels2[i] || option) + ""));
    });
    el.appendChild(node);
    node.addEventListener("change", () => {
      bind2.update(param2.options[node.selectedIndex]);
    });
    bind2.elements = [node];
    bind2.set = (value3) => {
      for (let i = 0, n = param2.options.length; i < n; ++i) {
        if (valuesEqual(param2.options[i], value3)) {
          node.selectedIndex = i;
          return;
        }
      }
    };
  }
  function radio(bind2, el, param2, value2) {
    const group2 = element("span", {
      "class": RadioClass
    }), labels2 = param2.labels || [];
    el.appendChild(group2);
    bind2.elements = param2.options.map((option, i) => {
      const attr2 = {
        type: "radio",
        name: param2.signal,
        value: option
      };
      if (valuesEqual(option, value2)) attr2.checked = true;
      const input = element("input", attr2);
      input.addEventListener("change", () => bind2.update(option));
      const label2 = element("label", {}, (labels2[i] || option) + "");
      label2.prepend(input);
      group2.appendChild(label2);
      return input;
    });
    bind2.set = (value3) => {
      const nodes = bind2.elements, n = nodes.length;
      for (let i = 0; i < n; ++i) {
        if (valuesEqual(nodes[i].value, value3)) nodes[i].checked = true;
      }
    };
  }
  function range$2(bind2, el, param2, value2) {
    value2 = value2 !== void 0 ? value2 : (+param2.max + +param2.min) / 2;
    const max2 = param2.max != null ? param2.max : Math.max(100, +value2) || 100, min2 = param2.min || Math.min(0, max2, +value2) || 0, step = param2.step || tickStep(min2, max2, 100);
    const node = element("input", {
      type: "range",
      name: param2.signal,
      min: min2,
      max: max2,
      step
    });
    node.value = value2;
    const span2 = element("span", {}, +value2);
    el.appendChild(node);
    el.appendChild(span2);
    const update2 = () => {
      span2.textContent = node.value;
      bind2.update(+node.value);
    };
    node.addEventListener("input", update2);
    node.addEventListener("change", update2);
    bind2.elements = [node];
    bind2.set = (value3) => {
      node.value = value3;
      span2.textContent = value3;
    };
  }
  function valuesEqual(a2, b2) {
    return a2 === b2 || a2 + "" === b2 + "";
  }
  function initializeRenderer(view, r, el, constructor, scaleFactor, opt) {
    r = r || new constructor(view.loader());
    return r.initialize(el, width(view), height(view), offset(view), scaleFactor, opt).background(view.background());
  }
  function trap(view, fn) {
    return !fn ? null : function() {
      try {
        fn.apply(this, arguments);
      } catch (error2) {
        view.error(error2);
      }
    };
  }
  function initializeHandler(view, prevHandler, el, constructor) {
    const handler = new constructor(view.loader(), trap(view, view.tooltip())).scene(view.scenegraph().root).initialize(el, offset(view), view);
    if (prevHandler) {
      prevHandler.handlers().forEach((h2) => {
        handler.on(h2.type, h2.handler);
      });
    }
    return handler;
  }
  function initialize(el, elBind) {
    const view = this, type2 = view._renderType, config = view._eventConfig.bind, module2 = renderModule(type2);
    el = view._el = el ? lookup$1(view, el, true) : null;
    initializeAria(view);
    if (!module2) view.error("Unrecognized renderer type: " + type2);
    const Handler2 = module2.handler || CanvasHandler, Renderer2 = el ? module2.renderer : module2.headless;
    view._renderer = !Renderer2 ? null : initializeRenderer(view, view._renderer, el, Renderer2);
    view._handler = initializeHandler(view, view._handler, el, Handler2);
    view._redraw = true;
    if (el && config !== "none") {
      elBind = elBind ? view._elBind = lookup$1(view, elBind, true) : el.appendChild(element("form", {
        "class": "vega-bindings"
      }));
      view._bind.forEach((_) => {
        if (_.param.element && config !== "container") {
          _.element = lookup$1(view, _.param.element, !!_.param.input);
        }
      });
      view._bind.forEach((_) => {
        bind(view, _.element || elBind, _);
      });
    }
    return view;
  }
  function lookup$1(view, el, clear2) {
    if (typeof el === "string") {
      if (typeof document !== "undefined") {
        el = document.querySelector(el);
        if (!el) {
          view.error("Signal bind element not found: " + el);
          return null;
        }
      } else {
        view.error("DOM document instance not found.");
        return null;
      }
    }
    if (el && clear2) {
      try {
        el.textContent = "";
      } catch (e3) {
        el = null;
        view.error(e3);
      }
    }
    return el;
  }
  const number$1 = (_) => +_ || 0;
  const paddingObject$1 = (_) => ({
    top: _,
    bottom: _,
    left: _,
    right: _
  });
  function padding$1(_) {
    return isObject(_) ? {
      top: number$1(_.top),
      bottom: number$1(_.bottom),
      left: number$1(_.left),
      right: number$1(_.right)
    } : paddingObject$1(number$1(_));
  }
  async function renderHeadless(view, type2, scaleFactor, opt) {
    const module2 = renderModule(type2), ctr = module2 && module2.headless;
    if (!ctr) error$1("Unrecognized renderer type: " + type2);
    await view.runAsync();
    return initializeRenderer(view, null, null, ctr, scaleFactor, opt).renderAsync(view._scenegraph.root);
  }
  async function renderToImageURL(type2, scaleFactor) {
    if (type2 !== RenderType.Canvas && type2 !== RenderType.SVG && type2 !== RenderType.PNG) {
      error$1("Unrecognized image type: " + type2);
    }
    const r = await renderHeadless(this, type2, scaleFactor);
    return type2 === RenderType.SVG ? toBlobURL(r.svg(), "image/svg+xml") : r.canvas().toDataURL("image/png");
  }
  function toBlobURL(data2, mime) {
    const blob = new Blob([data2], {
      type: mime
    });
    return window.URL.createObjectURL(blob);
  }
  async function renderToCanvas(scaleFactor, opt) {
    const r = await renderHeadless(this, RenderType.Canvas, scaleFactor, opt);
    return r.canvas();
  }
  async function renderToSVG(scaleFactor) {
    const r = await renderHeadless(this, RenderType.SVG, scaleFactor);
    return r.svg();
  }
  function runtime(view, spec, expr2) {
    return context(view, transforms, functionContext, expr2).parse(spec);
  }
  function scale$1(name) {
    var scales2 = this._runtime.scales;
    if (!has$1(scales2, name)) {
      error$1("Unrecognized scale or projection: " + name);
    }
    return scales2[name].value;
  }
  var Width = "width", Height = "height", Padding = "padding", Skip$1 = {
    skip: true
  };
  function viewWidth(view, width2) {
    var a2 = view.autosize(), p = view.padding();
    return width2 - (a2 && a2.contains === Padding ? p.left + p.right : 0);
  }
  function viewHeight(view, height2) {
    var a2 = view.autosize(), p = view.padding();
    return height2 - (a2 && a2.contains === Padding ? p.top + p.bottom : 0);
  }
  function initializeResize(view) {
    var s = view._signals, w2 = s[Width], h2 = s[Height], p = s[Padding];
    function resetSize() {
      view._autosize = view._resize = 1;
    }
    view._resizeWidth = view.add(null, (_) => {
      view._width = _.size;
      view._viewWidth = viewWidth(view, _.size);
      resetSize();
    }, {
      size: w2
    });
    view._resizeHeight = view.add(null, (_) => {
      view._height = _.size;
      view._viewHeight = viewHeight(view, _.size);
      resetSize();
    }, {
      size: h2
    });
    const resizePadding = view.add(null, resetSize, {
      pad: p
    });
    view._resizeWidth.rank = w2.rank + 1;
    view._resizeHeight.rank = h2.rank + 1;
    resizePadding.rank = p.rank + 1;
  }
  function resizeView(viewWidth2, viewHeight2, width2, height2, origin, auto) {
    this.runAfter((view) => {
      let rerun2 = 0;
      view._autosize = 0;
      if (view.width() !== width2) {
        rerun2 = 1;
        view.signal(Width, width2, Skip$1);
        view._resizeWidth.skip(true);
      }
      if (view.height() !== height2) {
        rerun2 = 1;
        view.signal(Height, height2, Skip$1);
        view._resizeHeight.skip(true);
      }
      if (view._viewWidth !== viewWidth2) {
        view._resize = 1;
        view._viewWidth = viewWidth2;
      }
      if (view._viewHeight !== viewHeight2) {
        view._resize = 1;
        view._viewHeight = viewHeight2;
      }
      if (view._origin[0] !== origin[0] || view._origin[1] !== origin[1]) {
        view._resize = 1;
        view._origin = origin;
      }
      if (rerun2) view.run("enter");
      if (auto) view.runAfter((v) => v.resize());
    }, false, 1);
  }
  function getState(options) {
    return this._runtime.getState(options || {
      data: dataTest,
      signals: signalTest,
      recurse: true
    });
  }
  function dataTest(name, data2) {
    return data2.modified && isArray(data2.input.value) && !name.startsWith("_:vega:_");
  }
  function signalTest(name, op) {
    return !(name === "parent" || op instanceof transforms.proxy);
  }
  function setState(state) {
    this.runAsync(null, (v) => {
      v._trigger = false;
      v._runtime.setState(state);
    }, (v) => {
      v._trigger = true;
    });
    return this;
  }
  function timer(callback, delay) {
    function tick2(elapsed) {
      callback({
        timestamp: Date.now(),
        elapsed
      });
    }
    this._timers.push(interval$1(tick2, delay));
  }
  function defaultTooltip(handler, event2, item, value2) {
    const el = handler.element();
    if (el) el.setAttribute("title", formatTooltip(value2));
  }
  function formatTooltip(value2) {
    return value2 == null ? "" : isArray(value2) ? formatArray(value2) : isObject(value2) && !isDate$1(value2) ? formatObject(value2) : value2 + "";
  }
  function formatObject(obj) {
    return Object.keys(obj).map((key2) => {
      const v = obj[key2];
      return key2 + ": " + (isArray(v) ? formatArray(v) : formatValue$1(v));
    }).join("\n");
  }
  function formatArray(value2) {
    return "[" + value2.map(formatValue$1).join(", ") + "]";
  }
  function formatValue$1(value2) {
    return isArray(value2) ? "[…]" : isObject(value2) && !isDate$1(value2) ? "{…}" : value2;
  }
  function watchPixelRatio() {
    if (this.renderer() === "canvas" && this._renderer._canvas) {
      let remove2 = null;
      const updatePixelRatio = () => {
        if (remove2 != null) {
          remove2();
        }
        const media = matchMedia(`(resolution: ${window.devicePixelRatio}dppx)`);
        media.addEventListener("change", updatePixelRatio);
        remove2 = () => {
          media.removeEventListener("change", updatePixelRatio);
        };
        this._renderer._canvas.getContext("2d").pixelRatio = window.devicePixelRatio || 1;
        this._redraw = true;
        this._resize = 1;
        this.resize().runAsync();
      };
      updatePixelRatio();
    }
  }
  function View$1(spec, options) {
    const view = this;
    options = options || {};
    Dataflow.call(view);
    if (options.loader) view.loader(options.loader);
    if (options.logger) view.logger(options.logger);
    if (options.logLevel != null) view.logLevel(options.logLevel);
    if (options.locale || spec.locale) {
      const loc = extend$1({}, spec.locale, options.locale);
      view.locale(locale(loc.number, loc.time));
    }
    view._el = null;
    view._elBind = null;
    view._renderType = options.renderer || RenderType.Canvas;
    view._scenegraph = new Scenegraph();
    const root = view._scenegraph.root;
    view._renderer = null;
    view._tooltip = options.tooltip || defaultTooltip, view._redraw = true;
    view._handler = new CanvasHandler().scene(root);
    view._globalCursor = false;
    view._preventDefault = false;
    view._timers = [];
    view._eventListeners = [];
    view._resizeListeners = [];
    view._eventConfig = initializeEventConfig(spec.eventConfig);
    view.globalCursor(view._eventConfig.globalCursor);
    const ctx = runtime(view, spec, options.expr);
    view._runtime = ctx;
    view._signals = ctx.signals;
    view._bind = (spec.bindings || []).map((_) => ({
      state: null,
      param: extend$1({}, _)
    }));
    if (ctx.root) ctx.root.set(root);
    root.source = ctx.data.root.input;
    view.pulse(ctx.data.root.input, view.changeset().insert(root.items));
    view._width = view.width();
    view._height = view.height();
    view._viewWidth = viewWidth(view, view._width);
    view._viewHeight = viewHeight(view, view._height);
    view._origin = [0, 0];
    view._resize = 0;
    view._autosize = 1;
    initializeResize(view);
    background(view);
    cursor$1(view);
    view.description(spec.description);
    if (options.hover) view.hover();
    if (options.container) view.initialize(options.container, options.bind);
    if (options.watchPixelRatio) view._watchPixelRatio();
  }
  function lookupSignal(view, name) {
    return has$1(view._signals, name) ? view._signals[name] : error$1("Unrecognized signal name: " + $(name));
  }
  function findOperatorHandler(op, handler) {
    const h2 = (op._targets || []).filter((op2) => op2._update && op2._update.handler === handler);
    return h2.length ? h2[0] : null;
  }
  function addOperatorListener(view, name, op, handler) {
    let h2 = findOperatorHandler(op, handler);
    if (!h2) {
      h2 = trap(view, () => handler(name, op.value));
      h2.handler = handler;
      view.on(op, null, h2);
    }
    return view;
  }
  function removeOperatorListener(view, op, handler) {
    const h2 = findOperatorHandler(op, handler);
    if (h2) op._targets.remove(h2);
    return view;
  }
  inherits(View$1, Dataflow, {
    // -- DATAFLOW / RENDERING ----
    async evaluate(encode2, prerun, postrun) {
      await Dataflow.prototype.evaluate.call(this, encode2, prerun);
      if (this._redraw || this._resize) {
        try {
          if (this._renderer) {
            if (this._resize) {
              this._resize = 0;
              resizeRenderer(this);
            }
            await this._renderer.renderAsync(this._scenegraph.root);
          }
          this._redraw = false;
        } catch (e3) {
          this.error(e3);
        }
      }
      if (postrun) asyncCallback(this, postrun);
      return this;
    },
    dirty(item) {
      this._redraw = true;
      this._renderer && this._renderer.dirty(item);
    },
    // -- GET / SET ----
    description(text2) {
      if (arguments.length) {
        const desc = text2 != null ? text2 + "" : null;
        if (desc !== this._desc) ariaLabel(this._el, this._desc = desc);
        return this;
      }
      return this._desc;
    },
    container() {
      return this._el;
    },
    scenegraph() {
      return this._scenegraph;
    },
    origin() {
      return this._origin.slice();
    },
    signal(name, value2, options) {
      const op = lookupSignal(this, name);
      return arguments.length === 1 ? op.value : this.update(op, value2, options);
    },
    width(_) {
      return arguments.length ? this.signal("width", _) : this.signal("width");
    },
    height(_) {
      return arguments.length ? this.signal("height", _) : this.signal("height");
    },
    padding(_) {
      return arguments.length ? this.signal("padding", padding$1(_)) : padding$1(this.signal("padding"));
    },
    autosize(_) {
      return arguments.length ? this.signal("autosize", _) : this.signal("autosize");
    },
    background(_) {
      return arguments.length ? this.signal("background", _) : this.signal("background");
    },
    renderer(type2) {
      if (!arguments.length) return this._renderType;
      if (!renderModule(type2)) error$1("Unrecognized renderer type: " + type2);
      if (type2 !== this._renderType) {
        this._renderType = type2;
        this._resetRenderer();
      }
      return this;
    },
    tooltip(handler) {
      if (!arguments.length) return this._tooltip;
      if (handler !== this._tooltip) {
        this._tooltip = handler;
        this._resetRenderer();
      }
      return this;
    },
    loader(loader2) {
      if (!arguments.length) return this._loader;
      if (loader2 !== this._loader) {
        Dataflow.prototype.loader.call(this, loader2);
        this._resetRenderer();
      }
      return this;
    },
    resize() {
      this._autosize = 1;
      return this.touch(lookupSignal(this, "autosize"));
    },
    _resetRenderer() {
      if (this._renderer) {
        this._renderer = null;
        this.initialize(this._el, this._elBind);
      }
    },
    // -- SIZING ----
    _resizeView: resizeView,
    // -- EVENT HANDLING ----
    addEventListener(type2, handler, options) {
      let callback = handler;
      if (!(options && options.trap === false)) {
        callback = trap(this, handler);
        callback.raw = handler;
      }
      this._handler.on(type2, callback);
      return this;
    },
    removeEventListener(type2, handler) {
      var handlers = this._handler.handlers(type2), i = handlers.length, h2, t;
      while (--i >= 0) {
        t = handlers[i].type;
        h2 = handlers[i].handler;
        if (type2 === t && (handler === h2 || handler === h2.raw)) {
          this._handler.off(t, h2);
          break;
        }
      }
      return this;
    },
    addResizeListener(handler) {
      const l = this._resizeListeners;
      if (!l.includes(handler)) {
        l.push(handler);
      }
      return this;
    },
    removeResizeListener(handler) {
      var l = this._resizeListeners, i = l.indexOf(handler);
      if (i >= 0) {
        l.splice(i, 1);
      }
      return this;
    },
    addSignalListener(name, handler) {
      return addOperatorListener(this, name, lookupSignal(this, name), handler);
    },
    removeSignalListener(name, handler) {
      return removeOperatorListener(this, lookupSignal(this, name), handler);
    },
    addDataListener(name, handler) {
      return addOperatorListener(this, name, dataref(this, name).values, handler);
    },
    removeDataListener(name, handler) {
      return removeOperatorListener(this, dataref(this, name).values, handler);
    },
    globalCursor(_) {
      if (arguments.length) {
        if (this._globalCursor !== !!_) {
          const prev = setCursor(this, null);
          this._globalCursor = !!_;
          if (prev) setCursor(this, prev);
        }
        return this;
      } else {
        return this._globalCursor;
      }
    },
    preventDefault(_) {
      if (arguments.length) {
        this._preventDefault = _;
        return this;
      } else {
        return this._preventDefault;
      }
    },
    timer,
    events,
    finalize,
    hover,
    // -- DATA ----
    data,
    change,
    insert,
    remove,
    // -- SCALES --
    scale: scale$1,
    // -- INITIALIZATION ----
    initialize,
    // -- HEADLESS RENDERING ----
    toImageURL: renderToImageURL,
    toCanvas: renderToCanvas,
    toSVG: renderToSVG,
    // -- SAVE / RESTORE STATE ----
    getState,
    setState,
    // RE-RENDER ON ZOOM
    _watchPixelRatio: watchPixelRatio
  });
  const VIEW = "view", LBRACK = "[", RBRACK = "]", LBRACE = "{", RBRACE = "}", COLON = ":", COMMA = ",", NAME = "@", GT = ">", ILLEGAL$1 = /[[\]{}]/, DEFAULT_MARKS = {
    "*": 1,
    arc: 1,
    area: 1,
    group: 1,
    image: 1,
    line: 1,
    path: 1,
    rect: 1,
    rule: 1,
    shape: 1,
    symbol: 1,
    text: 1,
    trail: 1
  };
  let DEFAULT_SOURCE, MARKS;
  function eventSelector(selector, source2, marks) {
    DEFAULT_SOURCE = source2 || VIEW;
    MARKS = marks || DEFAULT_MARKS;
    return parseMerge(selector.trim()).map(parseSelector);
  }
  function isMarkType(type2) {
    return MARKS[type2];
  }
  function find(s, i, endChar, pushChar, popChar) {
    const n = s.length;
    let count2 = 0, c2;
    for (; i < n; ++i) {
      c2 = s[i];
      if (!count2 && c2 === endChar) return i;
      else if (popChar && popChar.indexOf(c2) >= 0) --count2;
      else if (pushChar && pushChar.indexOf(c2) >= 0) ++count2;
    }
    return i;
  }
  function parseMerge(s) {
    const output2 = [], n = s.length;
    let start = 0, i = 0;
    while (i < n) {
      i = find(s, i, COMMA, LBRACK + LBRACE, RBRACK + RBRACE);
      output2.push(s.substring(start, i).trim());
      start = ++i;
    }
    if (output2.length === 0) {
      throw "Empty event selector: " + s;
    }
    return output2;
  }
  function parseSelector(s) {
    return s[0] === "[" ? parseBetween(s) : parseStream$1(s);
  }
  function parseBetween(s) {
    const n = s.length;
    let i = 1, b2;
    i = find(s, i, RBRACK, LBRACK, RBRACK);
    if (i === n) {
      throw "Empty between selector: " + s;
    }
    b2 = parseMerge(s.substring(1, i));
    if (b2.length !== 2) {
      throw "Between selector must have two elements: " + s;
    }
    s = s.slice(i + 1).trim();
    if (s[0] !== GT) {
      throw "Expected '>' after between selector: " + s;
    }
    b2 = b2.map(parseSelector);
    const stream2 = parseSelector(s.slice(1).trim());
    if (stream2.between) {
      return {
        between: b2,
        stream: stream2
      };
    } else {
      stream2.between = b2;
    }
    return stream2;
  }
  function parseStream$1(s) {
    const stream2 = {
      source: DEFAULT_SOURCE
    }, source2 = [];
    let throttle = [0, 0], markname = 0, start = 0, n = s.length, i = 0, j, filter2;
    if (s[n - 1] === RBRACE) {
      i = s.lastIndexOf(LBRACE);
      if (i >= 0) {
        try {
          throttle = parseThrottle(s.substring(i + 1, n - 1));
        } catch (e3) {
          throw "Invalid throttle specification: " + s;
        }
        s = s.slice(0, i).trim();
        n = s.length;
      } else throw "Unmatched right brace: " + s;
      i = 0;
    }
    if (!n) throw s;
    if (s[0] === NAME) markname = ++i;
    j = find(s, i, COLON);
    if (j < n) {
      source2.push(s.substring(start, j).trim());
      start = i = ++j;
    }
    i = find(s, i, LBRACK);
    if (i === n) {
      source2.push(s.substring(start, n).trim());
    } else {
      source2.push(s.substring(start, i).trim());
      filter2 = [];
      start = ++i;
      if (start === n) throw "Unmatched left bracket: " + s;
    }
    while (i < n) {
      i = find(s, i, RBRACK);
      if (i === n) throw "Unmatched left bracket: " + s;
      filter2.push(s.substring(start, i).trim());
      if (i < n - 1 && s[++i] !== LBRACK) throw "Expected left bracket: " + s;
      start = ++i;
    }
    if (!(n = source2.length) || ILLEGAL$1.test(source2[n - 1])) {
      throw "Invalid event selector: " + s;
    }
    if (n > 1) {
      stream2.type = source2[1];
      if (markname) {
        stream2.markname = source2[0].slice(1);
      } else if (isMarkType(source2[0])) {
        stream2.marktype = source2[0];
      } else {
        stream2.source = source2[0];
      }
    } else {
      stream2.type = source2[0];
    }
    if (stream2.type.slice(-1) === "!") {
      stream2.consume = true;
      stream2.type = stream2.type.slice(0, -1);
    }
    if (filter2 != null) stream2.filter = filter2;
    if (throttle[0]) stream2.throttle = throttle[0];
    if (throttle[1]) stream2.debounce = throttle[1];
    return stream2;
  }
  function parseThrottle(s) {
    const a2 = s.split(COMMA);
    if (!s.length || a2.length > 2) throw s;
    return a2.map((_) => {
      const x2 = +_;
      if (x2 !== x2) throw s;
      return x2;
    });
  }
  function parseAutosize(spec) {
    return isObject(spec) ? spec : {
      type: spec || "pad"
    };
  }
  const number = (_) => +_ || 0;
  const paddingObject = (_) => ({
    top: _,
    bottom: _,
    left: _,
    right: _
  });
  function parsePadding(spec) {
    return !isObject(spec) ? paddingObject(number(spec)) : spec.signal ? spec : {
      top: number(spec.top),
      bottom: number(spec.bottom),
      left: number(spec.left),
      right: number(spec.right)
    };
  }
  const encoder = (_) => isObject(_) && !isArray(_) ? extend$1({}, _) : {
    value: _
  };
  function addEncode(object2, name, value2, set2) {
    if (value2 != null) {
      const isEncoder = isObject(value2) && !isArray(value2) || isArray(value2) && value2.length && isObject(value2[0]);
      if (isEncoder) {
        object2.update[name] = value2;
      } else {
        object2[set2 || "enter"][name] = {
          value: value2
        };
      }
      return 1;
    } else {
      return 0;
    }
  }
  function addEncoders(object2, enter, update2) {
    for (const name in enter) {
      addEncode(object2, name, enter[name]);
    }
    for (const name in update2) {
      addEncode(object2, name, update2[name], "update");
    }
  }
  function extendEncode(encode2, extra, skip) {
    for (const name in extra) {
      if (skip && has$1(skip, name)) continue;
      encode2[name] = extend$1(encode2[name] || {}, extra[name]);
    }
    return encode2;
  }
  function has(key2, encode2) {
    return encode2 && (encode2.enter && encode2.enter[key2] || encode2.update && encode2.update[key2]);
  }
  const MarkRole = "mark";
  const FrameRole = "frame";
  const ScopeRole = "scope";
  const AxisRole = "axis";
  const AxisDomainRole = "axis-domain";
  const AxisGridRole = "axis-grid";
  const AxisLabelRole = "axis-label";
  const AxisTickRole = "axis-tick";
  const AxisTitleRole = "axis-title";
  const LegendRole = "legend";
  const LegendBandRole = "legend-band";
  const LegendEntryRole = "legend-entry";
  const LegendGradientRole = "legend-gradient";
  const LegendLabelRole = "legend-label";
  const LegendSymbolRole = "legend-symbol";
  const LegendTitleRole = "legend-title";
  const TitleRole = "title";
  const TitleTextRole = "title-text";
  const TitleSubtitleRole = "title-subtitle";
  function applyDefaults(encode2, type2, role, style2, config) {
    const defaults2 = {}, enter = {};
    let update2, key2, skip, props;
    key2 = "lineBreak";
    if (type2 === "text" && config[key2] != null && !has(key2, encode2)) {
      applyDefault(defaults2, key2, config[key2]);
    }
    if (role == "legend" || String(role).startsWith("axis")) {
      role = null;
    }
    props = role === FrameRole ? config.group : role === MarkRole ? extend$1({}, config.mark, config[type2]) : null;
    for (key2 in props) {
      skip = has(key2, encode2) || (key2 === "fill" || key2 === "stroke") && (has("fill", encode2) || has("stroke", encode2));
      if (!skip) applyDefault(defaults2, key2, props[key2]);
    }
    array$5(style2).forEach((name) => {
      const props2 = config.style && config.style[name];
      for (const key3 in props2) {
        if (!has(key3, encode2)) {
          applyDefault(defaults2, key3, props2[key3]);
        }
      }
    });
    encode2 = extend$1({}, encode2);
    for (key2 in defaults2) {
      props = defaults2[key2];
      if (props.signal) {
        (update2 = update2 || {})[key2] = props;
      } else {
        enter[key2] = props;
      }
    }
    encode2.enter = extend$1(enter, encode2.enter);
    if (update2) encode2.update = extend$1(update2, encode2.update);
    return encode2;
  }
  function applyDefault(defaults2, key2, value2) {
    defaults2[key2] = value2 && value2.signal ? {
      signal: value2.signal
    } : {
      value: value2
    };
  }
  const scaleRef = (scale2) => isString(scale2) ? $(scale2) : scale2.signal ? `(${scale2.signal})` : field(scale2);
  function entry$1(enc) {
    if (enc.gradient != null) {
      return gradient$1(enc);
    }
    let value2 = enc.signal ? `(${enc.signal})` : enc.color ? color$1(enc.color) : enc.field != null ? field(enc.field) : enc.value !== void 0 ? $(enc.value) : void 0;
    if (enc.scale != null) {
      value2 = scale(enc, value2);
    }
    if (value2 === void 0) {
      value2 = null;
    }
    if (enc.exponent != null) {
      value2 = `pow(${value2},${property(enc.exponent)})`;
    }
    if (enc.mult != null) {
      value2 += `*${property(enc.mult)}`;
    }
    if (enc.offset != null) {
      value2 += `+${property(enc.offset)}`;
    }
    if (enc.round) {
      value2 = `round(${value2})`;
    }
    return value2;
  }
  const _color = (type2, x2, y2, z) => `(${type2}(${[x2, y2, z].map(entry$1).join(",")})+'')`;
  function color$1(enc) {
    return enc.c ? _color("hcl", enc.h, enc.c, enc.l) : enc.h || enc.s ? _color("hsl", enc.h, enc.s, enc.l) : enc.l || enc.a ? _color("lab", enc.l, enc.a, enc.b) : enc.r || enc.g || enc.b ? _color("rgb", enc.r, enc.g, enc.b) : null;
  }
  function gradient$1(enc) {
    const args = [enc.start, enc.stop, enc.count].map((_) => _ == null ? null : $(_));
    while (args.length && peek$2(args) == null) args.pop();
    args.unshift(scaleRef(enc.gradient));
    return `gradient(${args.join(",")})`;
  }
  function property(property2) {
    return isObject(property2) ? "(" + entry$1(property2) + ")" : property2;
  }
  function field(ref2) {
    return resolveField(isObject(ref2) ? ref2 : {
      datum: ref2
    });
  }
  function resolveField(ref2) {
    let object2, level, field2;
    if (ref2.signal) {
      object2 = "datum";
      field2 = ref2.signal;
    } else if (ref2.group || ref2.parent) {
      level = Math.max(1, ref2.level || 1);
      object2 = "item";
      while (level-- > 0) {
        object2 += ".mark.group";
      }
      if (ref2.parent) {
        field2 = ref2.parent;
        object2 += ".datum";
      } else {
        field2 = ref2.group;
      }
    } else if (ref2.datum) {
      object2 = "datum";
      field2 = ref2.datum;
    } else {
      error$1("Invalid field reference: " + $(ref2));
    }
    if (!ref2.signal) {
      field2 = isString(field2) ? splitAccessPath(field2).map($).join("][") : resolveField(field2);
    }
    return object2 + "[" + field2 + "]";
  }
  function scale(enc, value2) {
    const scale2 = scaleRef(enc.scale);
    if (enc.range != null) {
      value2 = `lerp(_range(${scale2}), ${+enc.range})`;
    } else {
      if (value2 !== void 0) value2 = `_scale(${scale2}, ${value2})`;
      if (enc.band) {
        value2 = (value2 ? value2 + "+" : "") + `_bandwidth(${scale2})` + (+enc.band === 1 ? "" : "*" + property(enc.band));
        if (enc.extra) {
          value2 = `(datum.extra ? _scale(${scale2}, datum.extra.value) : ${value2})`;
        }
      }
      if (value2 == null) value2 = "0";
    }
    return value2;
  }
  function rule$1(enc) {
    let code = "";
    enc.forEach((rule2) => {
      const value2 = entry$1(rule2);
      code += rule2.test ? `(${rule2.test})?${value2}:` : value2;
    });
    if (peek$2(code) === ":") {
      code += "null";
    }
    return code;
  }
  function parseEncode(encode2, type2, role, style2, scope, params2) {
    const enc = {};
    params2 = params2 || {};
    params2.encoders = {
      $encode: enc
    };
    encode2 = applyDefaults(encode2, type2, role, style2, scope.config);
    for (const key2 in encode2) {
      enc[key2] = parseBlock(encode2[key2], type2, params2, scope);
    }
    return params2;
  }
  function parseBlock(block2, marktype, params2, scope) {
    const channels = {}, fields = {};
    for (const name in block2) {
      if (block2[name] != null) {
        channels[name] = parse$1(expr(block2[name]), scope, params2, fields);
      }
    }
    return {
      $expr: {
        marktype,
        channels
      },
      $fields: Object.keys(fields),
      $output: Object.keys(block2)
    };
  }
  function expr(enc) {
    return isArray(enc) ? rule$1(enc) : entry$1(enc);
  }
  function parse$1(code, scope, params2, fields) {
    const expr2 = parser$1(code, scope);
    expr2.$fields.forEach((name) => fields[name] = 1);
    extend$1(params2, expr2.$params);
    return expr2.$expr;
  }
  const OUTER = "outer", OUTER_INVALID = ["value", "update", "init", "react", "bind"];
  function outerError(prefix, name) {
    error$1(prefix + ' for "outer" push: ' + $(name));
  }
  function parseSignal(signal, scope) {
    const name = signal.name;
    if (signal.push === OUTER) {
      if (!scope.signals[name]) outerError("No prior signal definition", name);
      OUTER_INVALID.forEach((prop) => {
        if (signal[prop] !== void 0) outerError("Invalid property ", prop);
      });
    } else {
      const op = scope.addSignal(name, signal.value);
      if (signal.react === false) op.react = false;
      if (signal.bind) scope.addBinding(name, signal.bind);
    }
  }
  function Entry(type2, value2, params2, parent) {
    this.id = -1;
    this.type = type2;
    this.value = value2;
    this.params = params2;
    if (parent) this.parent = parent;
  }
  function entry(type2, value2, params2, parent) {
    return new Entry(type2, value2, params2, parent);
  }
  function operator(value2, params2) {
    return entry("operator", value2, params2);
  }
  function ref(op) {
    const ref2 = {
      $ref: op.id
    };
    if (op.id < 0) (op.refs = op.refs || []).push(ref2);
    return ref2;
  }
  function fieldRef$1(field2, name) {
    return name ? {
      $field: field2,
      $name: name
    } : {
      $field: field2
    };
  }
  const keyFieldRef = fieldRef$1("key");
  function compareRef(fields, orders) {
    return {
      $compare: fields,
      $order: orders
    };
  }
  function keyRef(fields, flat) {
    const ref2 = {
      $key: fields
    };
    if (flat) ref2.$flat = true;
    return ref2;
  }
  const Ascending = "ascending";
  const Descending = "descending";
  function sortKey(sort2) {
    return !isObject(sort2) ? "" : (sort2.order === Descending ? "-" : "+") + aggrField(sort2.op, sort2.field);
  }
  function aggrField(op, field2) {
    return (op && op.signal ? "$" + op.signal : op || "") + (op && field2 ? "_" : "") + (field2 && field2.signal ? "$" + field2.signal : field2 || "");
  }
  const Scope$1 = "scope";
  const View = "view";
  function isSignal(_) {
    return _ && _.signal;
  }
  function isExpr$1(_) {
    return _ && _.expr;
  }
  function hasSignal(_) {
    if (isSignal(_)) return true;
    if (isObject(_)) for (const key2 in _) {
      if (hasSignal(_[key2])) return true;
    }
    return false;
  }
  function value(specValue, defaultValue) {
    return specValue != null ? specValue : defaultValue;
  }
  function deref(v) {
    return v && v.signal || v;
  }
  const Timer = "timer";
  function parseStream(stream2, scope) {
    const method2 = stream2.merge ? mergeStream : stream2.stream ? nestedStream : stream2.type ? eventStream : error$1("Invalid stream specification: " + $(stream2));
    return method2(stream2, scope);
  }
  function eventSource(source2) {
    return source2 === Scope$1 ? View : source2 || View;
  }
  function mergeStream(stream2, scope) {
    const list = stream2.merge.map((s) => parseStream(s, scope)), entry2 = streamParameters({
      merge: list
    }, stream2, scope);
    return scope.addStream(entry2).id;
  }
  function nestedStream(stream2, scope) {
    const id2 = parseStream(stream2.stream, scope), entry2 = streamParameters({
      stream: id2
    }, stream2, scope);
    return scope.addStream(entry2).id;
  }
  function eventStream(stream2, scope) {
    let id2;
    if (stream2.type === Timer) {
      id2 = scope.event(Timer, stream2.throttle);
      stream2 = {
        between: stream2.between,
        filter: stream2.filter
      };
    } else {
      id2 = scope.event(eventSource(stream2.source), stream2.type);
    }
    const entry2 = streamParameters({
      stream: id2
    }, stream2, scope);
    return Object.keys(entry2).length === 1 ? id2 : scope.addStream(entry2).id;
  }
  function streamParameters(entry2, stream2, scope) {
    let param2 = stream2.between;
    if (param2) {
      if (param2.length !== 2) {
        error$1('Stream "between" parameter must have 2 entries: ' + $(stream2));
      }
      entry2.between = [parseStream(param2[0], scope), parseStream(param2[1], scope)];
    }
    param2 = stream2.filter ? [].concat(stream2.filter) : [];
    if (stream2.marktype || stream2.markname || stream2.markrole) {
      param2.push(filterMark(stream2.marktype, stream2.markname, stream2.markrole));
    }
    if (stream2.source === Scope$1) {
      param2.push("inScope(event.item)");
    }
    if (param2.length) {
      entry2.filter = parser$1("(" + param2.join(")&&(") + ")", scope).$expr;
    }
    if ((param2 = stream2.throttle) != null) {
      entry2.throttle = +param2;
    }
    if ((param2 = stream2.debounce) != null) {
      entry2.debounce = +param2;
    }
    if (stream2.consume) {
      entry2.consume = true;
    }
    return entry2;
  }
  function filterMark(type2, name, role) {
    const item = "event.item";
    return item + (type2 && type2 !== "*" ? "&&" + item + ".mark.marktype==='" + type2 + "'" : "") + (role ? "&&" + item + ".mark.role==='" + role + "'" : "") + (name ? "&&" + item + ".mark.name==='" + name + "'" : "");
  }
  const OP_VALUE_EXPR = {
    code: "_.$value",
    ast: {
      type: "Identifier",
      value: "value"
    }
  };
  function parseUpdate(spec, scope, target2) {
    const encode2 = spec.encode, entry2 = {
      target: target2
    };
    let events2 = spec.events, update2 = spec.update, sources = [];
    if (!events2) {
      error$1("Signal update missing events specification.");
    }
    if (isString(events2)) {
      events2 = eventSelector(events2, scope.isSubscope() ? Scope$1 : View);
    }
    events2 = array$5(events2).filter((s) => s.signal || s.scale ? (sources.push(s), 0) : 1);
    if (sources.length > 1) {
      sources = [mergeSources(sources)];
    }
    if (events2.length) {
      sources.push(events2.length > 1 ? {
        merge: events2
      } : events2[0]);
    }
    if (encode2 != null) {
      if (update2) error$1("Signal encode and update are mutually exclusive.");
      update2 = "encode(item()," + $(encode2) + ")";
    }
    entry2.update = isString(update2) ? parser$1(update2, scope) : update2.expr != null ? parser$1(update2.expr, scope) : update2.value != null ? update2.value : update2.signal != null ? {
      $expr: OP_VALUE_EXPR,
      $params: {
        $value: scope.signalRef(update2.signal)
      }
    } : error$1("Invalid signal update specification.");
    if (spec.force) {
      entry2.options = {
        force: true
      };
    }
    sources.forEach((source2) => scope.addUpdate(extend$1(streamSource(source2, scope), entry2)));
  }
  function streamSource(stream2, scope) {
    return {
      source: stream2.signal ? scope.signalRef(stream2.signal) : stream2.scale ? scope.scaleRef(stream2.scale) : parseStream(stream2, scope)
    };
  }
  function mergeSources(sources) {
    return {
      signal: "[" + sources.map((s) => s.scale ? 'scale("' + s.scale + '")' : s.signal) + "]"
    };
  }
  function parseSignalUpdates(signal, scope) {
    const op = scope.getSignal(signal.name);
    let expr2 = signal.update;
    if (signal.init) {
      if (expr2) {
        error$1("Signals can not include both init and update expressions.");
      } else {
        expr2 = signal.init;
        op.initonly = true;
      }
    }
    if (expr2) {
      expr2 = parser$1(expr2, scope);
      op.update = expr2.$expr;
      op.params = expr2.$params;
    }
    if (signal.on) {
      signal.on.forEach((_) => parseUpdate(_, scope, op.id));
    }
  }
  const transform = (name) => (params2, value2, parent) => entry(name, value2, params2 || void 0, parent);
  const Aggregate = transform("aggregate");
  const AxisTicks = transform("axisticks");
  const Bound = transform("bound");
  const Collect = transform("collect");
  const Compare = transform("compare");
  const DataJoin = transform("datajoin");
  const Encode = transform("encode");
  const Expression = transform("expression");
  const Facet = transform("facet");
  const Field = transform("field");
  const Key = transform("key");
  const LegendEntries = transform("legendentries");
  const Load = transform("load");
  const Mark$1 = transform("mark");
  const MultiExtent = transform("multiextent");
  const MultiValues = transform("multivalues");
  const Overlap = transform("overlap");
  const Params = transform("params");
  const PreFacet = transform("prefacet");
  const Projection = transform("projection");
  const Proxy2 = transform("proxy");
  const Relay = transform("relay");
  const Render = transform("render");
  const Scale = transform("scale");
  const Sieve = transform("sieve");
  const SortItems = transform("sortitems");
  const ViewLayout = transform("viewlayout");
  const Values = transform("values");
  let FIELD_REF_ID = 0;
  const MULTIDOMAIN_SORT_OPS = {
    min: "min",
    max: "max",
    count: "sum"
  };
  function initScale(spec, scope) {
    const type2 = spec.type || "linear";
    if (!isValidScaleType(type2)) {
      error$1("Unrecognized scale type: " + $(type2));
    }
    scope.addScale(spec.name, {
      type: type2,
      domain: void 0
    });
  }
  function parseScale(spec, scope) {
    const params2 = scope.getScale(spec.name).params;
    let key2;
    params2.domain = parseScaleDomain$1(spec.domain, spec, scope);
    if (spec.range != null) {
      params2.range = parseScaleRange$1(spec, scope, params2);
    }
    if (spec.interpolate != null) {
      parseScaleInterpolate(spec.interpolate, params2);
    }
    if (spec.nice != null) {
      params2.nice = parseScaleNice(spec.nice, scope);
    }
    if (spec.bins != null) {
      params2.bins = parseScaleBins(spec.bins, scope);
    }
    for (key2 in spec) {
      if (has$1(params2, key2) || key2 === "name") continue;
      params2[key2] = parseLiteral(spec[key2], scope);
    }
  }
  function parseLiteral(v, scope) {
    return !isObject(v) ? v : v.signal ? scope.signalRef(v.signal) : error$1("Unsupported object: " + $(v));
  }
  function parseArray(v, scope) {
    return v.signal ? scope.signalRef(v.signal) : v.map((v2) => parseLiteral(v2, scope));
  }
  function dataLookupError(name) {
    error$1("Can not find data set: " + $(name));
  }
  function parseScaleDomain$1(domain2, spec, scope) {
    if (!domain2) {
      if (spec.domainMin != null || spec.domainMax != null) {
        error$1("No scale domain defined for domainMin/domainMax to override.");
      }
      return;
    }
    return domain2.signal ? scope.signalRef(domain2.signal) : (isArray(domain2) ? explicitDomain : domain2.fields ? multipleDomain : singularDomain)(domain2, spec, scope);
  }
  function explicitDomain(domain2, spec, scope) {
    return domain2.map((v) => parseLiteral(v, scope));
  }
  function singularDomain(domain2, spec, scope) {
    const data2 = scope.getData(domain2.data);
    if (!data2) dataLookupError(domain2.data);
    return isDiscrete$2(spec.type) ? data2.valuesRef(scope, domain2.field, parseSort(domain2.sort, false)) : isQuantile$1(spec.type) ? data2.domainRef(scope, domain2.field) : data2.extentRef(scope, domain2.field);
  }
  function multipleDomain(domain2, spec, scope) {
    const data2 = domain2.data, fields = domain2.fields.reduce((dom, d) => {
      d = isString(d) ? {
        data: data2,
        field: d
      } : isArray(d) || d.signal ? fieldRef(d, scope) : d;
      dom.push(d);
      return dom;
    }, []);
    return (isDiscrete$2(spec.type) ? ordinalMultipleDomain : isQuantile$1(spec.type) ? quantileMultipleDomain : numericMultipleDomain)(domain2, scope, fields);
  }
  function fieldRef(data2, scope) {
    const name = "_:vega:_" + FIELD_REF_ID++, coll = Collect({});
    if (isArray(data2)) {
      coll.value = {
        $ingest: data2
      };
    } else if (data2.signal) {
      const code = "setdata(" + $(name) + "," + data2.signal + ")";
      coll.params.input = scope.signalRef(code);
    }
    scope.addDataPipeline(name, [coll, Sieve({})]);
    return {
      data: name,
      field: "data"
    };
  }
  function ordinalMultipleDomain(domain2, scope, fields) {
    const sort2 = parseSort(domain2.sort, true);
    let a2, v;
    const counts = fields.map((f) => {
      const data2 = scope.getData(f.data);
      if (!data2) dataLookupError(f.data);
      return data2.countsRef(scope, f.field, sort2);
    });
    const p = {
      groupby: keyFieldRef,
      pulse: counts
    };
    if (sort2) {
      a2 = sort2.op || "count";
      v = sort2.field ? aggrField(a2, sort2.field) : "count";
      p.ops = [MULTIDOMAIN_SORT_OPS[a2]];
      p.fields = [scope.fieldRef(v)];
      p.as = [v];
    }
    a2 = scope.add(Aggregate(p));
    const c2 = scope.add(Collect({
      pulse: ref(a2)
    }));
    v = scope.add(Values({
      field: keyFieldRef,
      sort: scope.sortRef(sort2),
      pulse: ref(c2)
    }));
    return ref(v);
  }
  function parseSort(sort2, multidomain) {
    if (sort2) {
      if (!sort2.field && !sort2.op) {
        if (isObject(sort2)) sort2.field = "key";
        else sort2 = {
          field: "key"
        };
      } else if (!sort2.field && sort2.op !== "count") {
        error$1("No field provided for sort aggregate op: " + sort2.op);
      } else if (multidomain && sort2.field) {
        if (sort2.op && !MULTIDOMAIN_SORT_OPS[sort2.op]) {
          error$1("Multiple domain scales can not be sorted using " + sort2.op);
        }
      }
    }
    return sort2;
  }
  function quantileMultipleDomain(domain2, scope, fields) {
    const values2 = fields.map((f) => {
      const data2 = scope.getData(f.data);
      if (!data2) dataLookupError(f.data);
      return data2.domainRef(scope, f.field);
    });
    return ref(scope.add(MultiValues({
      values: values2
    })));
  }
  function numericMultipleDomain(domain2, scope, fields) {
    const extents = fields.map((f) => {
      const data2 = scope.getData(f.data);
      if (!data2) dataLookupError(f.data);
      return data2.extentRef(scope, f.field);
    });
    return ref(scope.add(MultiExtent({
      extents
    })));
  }
  function parseScaleBins(v, scope) {
    return v.signal || isArray(v) ? parseArray(v, scope) : scope.objectProperty(v);
  }
  function parseScaleNice(nice2, scope) {
    return nice2.signal ? scope.signalRef(nice2.signal) : isObject(nice2) ? {
      interval: parseLiteral(nice2.interval),
      step: parseLiteral(nice2.step)
    } : parseLiteral(nice2);
  }
  function parseScaleInterpolate(interpolate2, params2) {
    params2.interpolate = parseLiteral(interpolate2.type || interpolate2);
    if (interpolate2.gamma != null) {
      params2.interpolateGamma = parseLiteral(interpolate2.gamma);
    }
  }
  function parseScaleRange$1(spec, scope, params2) {
    const config = scope.config.range;
    let range2 = spec.range;
    if (range2.signal) {
      return scope.signalRef(range2.signal);
    } else if (isString(range2)) {
      if (config && has$1(config, range2)) {
        spec = extend$1({}, spec, {
          range: config[range2]
        });
        return parseScaleRange$1(spec, scope, params2);
      } else if (range2 === "width") {
        range2 = [0, {
          signal: "width"
        }];
      } else if (range2 === "height") {
        range2 = isDiscrete$2(spec.type) ? [0, {
          signal: "height"
        }] : [{
          signal: "height"
        }, 0];
      } else {
        error$1("Unrecognized scale range value: " + $(range2));
      }
    } else if (range2.scheme) {
      params2.scheme = isArray(range2.scheme) ? parseArray(range2.scheme, scope) : parseLiteral(range2.scheme, scope);
      if (range2.extent) params2.schemeExtent = parseArray(range2.extent, scope);
      if (range2.count) params2.schemeCount = parseLiteral(range2.count, scope);
      return;
    } else if (range2.step) {
      params2.rangeStep = parseLiteral(range2.step, scope);
      return;
    } else if (isDiscrete$2(spec.type) && !isArray(range2)) {
      return parseScaleDomain$1(range2, spec, scope);
    } else if (!isArray(range2)) {
      error$1("Unsupported range type: " + $(range2));
    }
    return range2.map((v) => (isArray(v) ? parseArray : parseLiteral)(v, scope));
  }
  function parseProjection$1(proj, scope) {
    const config = scope.config.projection || {}, params2 = {};
    for (const name in proj) {
      if (name === "name") continue;
      params2[name] = parseParameter$1(proj[name], name, scope);
    }
    for (const name in config) {
      if (params2[name] == null) {
        params2[name] = parseParameter$1(config[name], name, scope);
      }
    }
    scope.addProjection(proj.name, params2);
  }
  function parseParameter$1(_, name, scope) {
    return isArray(_) ? _.map((_2) => parseParameter$1(_2, name, scope)) : !isObject(_) ? _ : _.signal ? scope.signalRef(_.signal) : name === "fit" ? _ : error$1("Unsupported parameter object: " + $(_));
  }
  const Top = "top";
  const Left = "left";
  const Right = "right";
  const Bottom = "bottom";
  const Center = "center";
  const Vertical = "vertical";
  const Start = "start";
  const Middle = "middle";
  const End = "end";
  const Index = "index";
  const Label = "label";
  const Offset = "offset";
  const Perc = "perc";
  const Perc2 = "perc2";
  const Value = "value";
  const GuideLabelStyle = "guide-label";
  const GuideTitleStyle = "guide-title";
  const GroupTitleStyle = "group-title";
  const GroupSubtitleStyle = "group-subtitle";
  const Symbols = "symbol";
  const Gradient = "gradient";
  const Discrete = "discrete";
  const Size = "size";
  const Shape = "shape";
  const Fill = "fill";
  const Stroke = "stroke";
  const StrokeWidth = "strokeWidth";
  const StrokeDash = "strokeDash";
  const Opacity = "opacity";
  const LegendScales = [Size, Shape, Fill, Stroke, StrokeWidth, StrokeDash, Opacity];
  const Skip = {
    name: 1,
    style: 1,
    interactive: 1
  };
  const zero$1 = {
    value: 0
  };
  const one = {
    value: 1
  };
  const GroupMark = "group";
  const RectMark = "rect";
  const RuleMark = "rule";
  const SymbolMark = "symbol";
  const TextMark = "text";
  function guideGroup(mark) {
    mark.type = GroupMark;
    mark.interactive = mark.interactive || false;
    return mark;
  }
  function lookup(spec, config) {
    const _ = (name, dflt) => value(spec[name], value(config[name], dflt));
    _.isVertical = (s) => Vertical === value(spec.direction, config.direction || (s ? config.symbolDirection : config.gradientDirection));
    _.gradientLength = () => value(spec.gradientLength, config.gradientLength || config.gradientWidth);
    _.gradientThickness = () => value(spec.gradientThickness, config.gradientThickness || config.gradientHeight);
    _.entryColumns = () => value(spec.columns, value(config.columns, +_.isVertical(true)));
    return _;
  }
  function getEncoding(name, encode2) {
    const v = encode2 && (encode2.update && encode2.update[name] || encode2.enter && encode2.enter[name]);
    return v && v.signal ? v : v ? v.value : null;
  }
  function getStyle(name, scope, style2) {
    const s = scope.config.style[style2];
    return s && s[name];
  }
  function anchorExpr(s, e3, m2) {
    return `item.anchor === '${Start}' ? ${s} : item.anchor === '${End}' ? ${e3} : ${m2}`;
  }
  const alignExpr$1 = anchorExpr($(Left), $(Right), $(Center));
  function tickBand(_) {
    const v = _("tickBand");
    let offset2 = _("tickOffset"), band2, extra;
    if (!v) {
      band2 = _("bandPosition");
      extra = _("tickExtra");
    } else if (v.signal) {
      band2 = {
        signal: `(${v.signal}) === 'extent' ? 1 : 0.5`
      };
      extra = {
        signal: `(${v.signal}) === 'extent'`
      };
      if (!isObject(offset2)) {
        offset2 = {
          signal: `(${v.signal}) === 'extent' ? 0 : ${offset2}`
        };
      }
    } else if (v === "extent") {
      band2 = 1;
      extra = true;
      offset2 = 0;
    } else {
      band2 = 0.5;
      extra = false;
    }
    return {
      extra,
      band: band2,
      offset: offset2
    };
  }
  function extendOffset(value2, offset2) {
    return !offset2 ? value2 : !value2 ? offset2 : !isObject(value2) ? {
      value: value2,
      offset: offset2
    } : Object.assign({}, value2, {
      offset: extendOffset(value2.offset, offset2)
    });
  }
  function guideMark(mark, extras) {
    if (extras) {
      mark.name = extras.name;
      mark.style = extras.style || mark.style;
      mark.interactive = !!extras.interactive;
      mark.encode = extendEncode(mark.encode, extras, Skip);
    } else {
      mark.interactive = false;
    }
    return mark;
  }
  function legendGradient(spec, scale2, config, userEncode) {
    const _ = lookup(spec, config), vertical = _.isVertical(), thickness = _.gradientThickness(), length2 = _.gradientLength();
    let enter, start, stop2, width2, height2;
    if (vertical) {
      start = [0, 1];
      stop2 = [0, 0];
      width2 = thickness;
      height2 = length2;
    } else {
      start = [0, 0];
      stop2 = [1, 0];
      width2 = length2;
      height2 = thickness;
    }
    const encode2 = {
      enter: enter = {
        opacity: zero$1,
        x: zero$1,
        y: zero$1,
        width: encoder(width2),
        height: encoder(height2)
      },
      update: extend$1({}, enter, {
        opacity: one,
        fill: {
          gradient: scale2,
          start,
          stop: stop2
        }
      }),
      exit: {
        opacity: zero$1
      }
    };
    addEncoders(encode2, {
      stroke: _("gradientStrokeColor"),
      strokeWidth: _("gradientStrokeWidth")
    }, {
      // update
      opacity: _("gradientOpacity")
    });
    return guideMark({
      type: RectMark,
      role: LegendGradientRole,
      encode: encode2
    }, userEncode);
  }
  function legendGradientDiscrete(spec, scale2, config, userEncode, dataRef) {
    const _ = lookup(spec, config), vertical = _.isVertical(), thickness = _.gradientThickness(), length2 = _.gradientLength();
    let u2, v, uu, vv, adjust = "";
    vertical ? (u2 = "y", uu = "y2", v = "x", vv = "width", adjust = "1-") : (u2 = "x", uu = "x2", v = "y", vv = "height");
    const enter = {
      opacity: zero$1,
      fill: {
        scale: scale2,
        field: Value
      }
    };
    enter[u2] = {
      signal: adjust + "datum." + Perc,
      mult: length2
    };
    enter[v] = zero$1;
    enter[uu] = {
      signal: adjust + "datum." + Perc2,
      mult: length2
    };
    enter[vv] = encoder(thickness);
    const encode2 = {
      enter,
      update: extend$1({}, enter, {
        opacity: one
      }),
      exit: {
        opacity: zero$1
      }
    };
    addEncoders(encode2, {
      stroke: _("gradientStrokeColor"),
      strokeWidth: _("gradientStrokeWidth")
    }, {
      // update
      opacity: _("gradientOpacity")
    });
    return guideMark({
      type: RectMark,
      role: LegendBandRole,
      key: Value,
      from: dataRef,
      encode: encode2
    }, userEncode);
  }
  const alignExpr = `datum.${Perc}<=0?"${Left}":datum.${Perc}>=1?"${Right}":"${Center}"`, baselineExpr = `datum.${Perc}<=0?"${Bottom}":datum.${Perc}>=1?"${Top}":"${Middle}"`;
  function legendGradientLabels(spec, config, userEncode, dataRef) {
    const _ = lookup(spec, config), vertical = _.isVertical(), thickness = encoder(_.gradientThickness()), length2 = _.gradientLength();
    let overlap = _("labelOverlap"), enter, update2, u2, v, adjust = "";
    const encode2 = {
      enter: enter = {
        opacity: zero$1
      },
      update: update2 = {
        opacity: one,
        text: {
          field: Label
        }
      },
      exit: {
        opacity: zero$1
      }
    };
    addEncoders(encode2, {
      fill: _("labelColor"),
      fillOpacity: _("labelOpacity"),
      font: _("labelFont"),
      fontSize: _("labelFontSize"),
      fontStyle: _("labelFontStyle"),
      fontWeight: _("labelFontWeight"),
      limit: value(spec.labelLimit, config.gradientLabelLimit)
    });
    if (vertical) {
      enter.align = {
        value: "left"
      };
      enter.baseline = update2.baseline = {
        signal: baselineExpr
      };
      u2 = "y";
      v = "x";
      adjust = "1-";
    } else {
      enter.align = update2.align = {
        signal: alignExpr
      };
      enter.baseline = {
        value: "top"
      };
      u2 = "x";
      v = "y";
    }
    enter[u2] = update2[u2] = {
      signal: adjust + "datum." + Perc,
      mult: length2
    };
    enter[v] = update2[v] = thickness;
    thickness.offset = value(spec.labelOffset, config.gradientLabelOffset) || 0;
    overlap = overlap ? {
      separation: _("labelSeparation"),
      method: overlap,
      order: "datum." + Index
    } : void 0;
    return guideMark({
      type: TextMark,
      role: LegendLabelRole,
      style: GuideLabelStyle,
      key: Value,
      from: dataRef,
      encode: encode2,
      overlap
    }, userEncode);
  }
  function legendSymbolGroups(spec, config, userEncode, dataRef, columns) {
    const _ = lookup(spec, config), entries2 = userEncode.entries, interactive2 = !!(entries2 && entries2.interactive), name = entries2 ? entries2.name : void 0, height2 = _("clipHeight"), symbolOffset = _("symbolOffset"), valueRef = {
      data: "value"
    }, xSignal = `(${columns}) ? datum.${Offset} : datum.${Size}`, yEncode = height2 ? encoder(height2) : {
      field: Size
    }, index2 = `datum.${Index}`, ncols = `max(1, ${columns})`;
    let encode2, enter, update2, nrows, sort2;
    yEncode.mult = 0.5;
    encode2 = {
      enter: enter = {
        opacity: zero$1,
        x: {
          signal: xSignal,
          mult: 0.5,
          offset: symbolOffset
        },
        y: yEncode
      },
      update: update2 = {
        opacity: one,
        x: enter.x,
        y: enter.y
      },
      exit: {
        opacity: zero$1
      }
    };
    let baseFill = null, baseStroke = null;
    if (!spec.fill) {
      baseFill = config.symbolBaseFillColor;
      baseStroke = config.symbolBaseStrokeColor;
    }
    addEncoders(encode2, {
      fill: _("symbolFillColor", baseFill),
      shape: _("symbolType"),
      size: _("symbolSize"),
      stroke: _("symbolStrokeColor", baseStroke),
      strokeDash: _("symbolDash"),
      strokeDashOffset: _("symbolDashOffset"),
      strokeWidth: _("symbolStrokeWidth")
    }, {
      // update
      opacity: _("symbolOpacity")
    });
    LegendScales.forEach((scale2) => {
      if (spec[scale2]) {
        update2[scale2] = enter[scale2] = {
          scale: spec[scale2],
          field: Value
        };
      }
    });
    const symbols2 = guideMark({
      type: SymbolMark,
      role: LegendSymbolRole,
      key: Value,
      from: valueRef,
      clip: height2 ? true : void 0,
      encode: encode2
    }, userEncode.symbols);
    const labelOffset = encoder(symbolOffset);
    labelOffset.offset = _("labelOffset");
    encode2 = {
      enter: enter = {
        opacity: zero$1,
        x: {
          signal: xSignal,
          offset: labelOffset
        },
        y: yEncode
      },
      update: update2 = {
        opacity: one,
        text: {
          field: Label
        },
        x: enter.x,
        y: enter.y
      },
      exit: {
        opacity: zero$1
      }
    };
    addEncoders(encode2, {
      align: _("labelAlign"),
      baseline: _("labelBaseline"),
      fill: _("labelColor"),
      fillOpacity: _("labelOpacity"),
      font: _("labelFont"),
      fontSize: _("labelFontSize"),
      fontStyle: _("labelFontStyle"),
      fontWeight: _("labelFontWeight"),
      limit: _("labelLimit")
    });
    const labels2 = guideMark({
      type: TextMark,
      role: LegendLabelRole,
      style: GuideLabelStyle,
      key: Value,
      from: valueRef,
      encode: encode2
    }, userEncode.labels);
    encode2 = {
      enter: {
        noBound: {
          value: !height2
        },
        // ignore width/height in bounds calc
        width: zero$1,
        height: height2 ? encoder(height2) : zero$1,
        opacity: zero$1
      },
      exit: {
        opacity: zero$1
      },
      update: update2 = {
        opacity: one,
        row: {
          signal: null
        },
        column: {
          signal: null
        }
      }
    };
    if (_.isVertical(true)) {
      nrows = `ceil(item.mark.items.length / ${ncols})`;
      update2.row.signal = `${index2}%${nrows}`;
      update2.column.signal = `floor(${index2} / ${nrows})`;
      sort2 = {
        field: ["row", index2]
      };
    } else {
      update2.row.signal = `floor(${index2} / ${ncols})`;
      update2.column.signal = `${index2} % ${ncols}`;
      sort2 = {
        field: index2
      };
    }
    update2.column.signal = `(${columns})?${update2.column.signal}:${index2}`;
    dataRef = {
      facet: {
        data: dataRef,
        name: "value",
        groupby: Index
      }
    };
    return guideGroup({
      role: ScopeRole,
      from: dataRef,
      encode: extendEncode(encode2, entries2, Skip),
      marks: [symbols2, labels2],
      name,
      interactive: interactive2,
      sort: sort2
    });
  }
  function legendSymbolLayout(spec, config) {
    const _ = lookup(spec, config);
    return {
      align: _("gridAlign"),
      columns: _.entryColumns(),
      center: {
        row: true,
        column: false
      },
      padding: {
        row: _("rowPadding"),
        column: _("columnPadding")
      }
    };
  }
  const isL = 'item.orient === "left"', isR = 'item.orient === "right"', isLR = `(${isL} || ${isR})`, isVG = `datum.vgrad && ${isLR}`, baseline$1 = anchorExpr('"top"', '"bottom"', '"middle"'), alignFlip = anchorExpr('"right"', '"left"', '"center"'), exprAlign = `datum.vgrad && ${isR} ? (${alignFlip}) : (${isLR} && !(datum.vgrad && ${isL})) ? "left" : ${alignExpr$1}`, exprAnchor = `item._anchor || (${isLR} ? "middle" : "start")`, exprAngle = `${isVG} ? (${isL} ? -90 : 90) : 0`, exprBaseline = `${isLR} ? (datum.vgrad ? (${isR} ? "bottom" : "top") : ${baseline$1}) : "top"`;
  function legendTitle(spec, config, userEncode, dataRef) {
    const _ = lookup(spec, config);
    const encode2 = {
      enter: {
        opacity: zero$1
      },
      update: {
        opacity: one,
        x: {
          field: {
            group: "padding"
          }
        },
        y: {
          field: {
            group: "padding"
          }
        }
      },
      exit: {
        opacity: zero$1
      }
    };
    addEncoders(encode2, {
      orient: _("titleOrient"),
      _anchor: _("titleAnchor"),
      anchor: {
        signal: exprAnchor
      },
      angle: {
        signal: exprAngle
      },
      align: {
        signal: exprAlign
      },
      baseline: {
        signal: exprBaseline
      },
      text: spec.title,
      fill: _("titleColor"),
      fillOpacity: _("titleOpacity"),
      font: _("titleFont"),
      fontSize: _("titleFontSize"),
      fontStyle: _("titleFontStyle"),
      fontWeight: _("titleFontWeight"),
      limit: _("titleLimit"),
      lineHeight: _("titleLineHeight")
    }, {
      // require update
      align: _("titleAlign"),
      baseline: _("titleBaseline")
    });
    return guideMark({
      type: TextMark,
      role: LegendTitleRole,
      style: GuideTitleStyle,
      from: dataRef,
      encode: encode2
    }, userEncode);
  }
  function clip(clip2, scope) {
    let expr2;
    if (isObject(clip2)) {
      if (clip2.signal) {
        expr2 = clip2.signal;
      } else if (clip2.path) {
        expr2 = "pathShape(" + param(clip2.path) + ")";
      } else if (clip2.sphere) {
        expr2 = "geoShape(" + param(clip2.sphere) + ', {type: "Sphere"})';
      }
    }
    return expr2 ? scope.signalRef(expr2) : !!clip2;
  }
  function param(value2) {
    return isObject(value2) && value2.signal ? value2.signal : $(value2);
  }
  function getRole(spec) {
    const role = spec.role || "";
    return role.startsWith("axis") || role.startsWith("legend") || role.startsWith("title") ? role : spec.type === GroupMark ? ScopeRole : role || MarkRole;
  }
  function definition(spec) {
    return {
      marktype: spec.type,
      name: spec.name || void 0,
      role: spec.role || getRole(spec),
      zindex: +spec.zindex || void 0,
      aria: spec.aria,
      description: spec.description
    };
  }
  function interactive(spec, scope) {
    return spec && spec.signal ? scope.signalRef(spec.signal) : spec === false ? false : true;
  }
  function parseTransform(spec, scope) {
    const def2 = definition$1(spec.type);
    if (!def2) error$1("Unrecognized transform type: " + $(spec.type));
    const t = entry(def2.type.toLowerCase(), null, parseParameters(def2, spec, scope));
    if (spec.signal) scope.addSignal(spec.signal, scope.proxy(t));
    t.metadata = def2.metadata || {};
    return t;
  }
  function parseParameters(def2, spec, scope) {
    const params2 = {}, n = def2.params.length;
    for (let i = 0; i < n; ++i) {
      const pdef = def2.params[i];
      params2[pdef.name] = parseParameter(pdef, spec, scope);
    }
    return params2;
  }
  function parseParameter(def2, spec, scope) {
    const type2 = def2.type, value2 = spec[def2.name];
    if (type2 === "index") {
      return parseIndexParameter(def2, spec, scope);
    } else if (value2 === void 0) {
      if (def2.required) {
        error$1("Missing required " + $(spec.type) + " parameter: " + $(def2.name));
      }
      return;
    } else if (type2 === "param") {
      return parseSubParameters(def2, spec, scope);
    } else if (type2 === "projection") {
      return scope.projectionRef(spec[def2.name]);
    }
    return def2.array && !isSignal(value2) ? value2.map((v) => parameterValue(def2, v, scope)) : parameterValue(def2, value2, scope);
  }
  function parameterValue(def2, value2, scope) {
    const type2 = def2.type;
    if (isSignal(value2)) {
      return isExpr(type2) ? error$1("Expression references can not be signals.") : isField(type2) ? scope.fieldRef(value2) : isCompare(type2) ? scope.compareRef(value2) : scope.signalRef(value2.signal);
    } else {
      const expr2 = def2.expr || isField(type2);
      return expr2 && outerExpr(value2) ? scope.exprRef(value2.expr, value2.as) : expr2 && outerField(value2) ? fieldRef$1(value2.field, value2.as) : isExpr(type2) ? parser$1(value2, scope) : isData(type2) ? ref(scope.getData(value2).values) : isField(type2) ? fieldRef$1(value2) : isCompare(type2) ? scope.compareRef(value2) : value2;
    }
  }
  function parseIndexParameter(def2, spec, scope) {
    if (!isString(spec.from)) {
      error$1('Lookup "from" parameter must be a string literal.');
    }
    return scope.getData(spec.from).lookupRef(scope, spec.key);
  }
  function parseSubParameters(def2, spec, scope) {
    const value2 = spec[def2.name];
    if (def2.array) {
      if (!isArray(value2)) {
        error$1("Expected an array of sub-parameters. Instead: " + $(value2));
      }
      return value2.map((v) => parseSubParameter(def2, v, scope));
    } else {
      return parseSubParameter(def2, value2, scope);
    }
  }
  function parseSubParameter(def2, value2, scope) {
    const n = def2.params.length;
    let pdef;
    for (let i = 0; i < n; ++i) {
      pdef = def2.params[i];
      for (const k in pdef.key) {
        if (pdef.key[k] !== value2[k]) {
          pdef = null;
          break;
        }
      }
      if (pdef) break;
    }
    if (!pdef) error$1("Unsupported parameter: " + $(value2));
    const params2 = extend$1(parseParameters(pdef, value2, scope), pdef.key);
    return ref(scope.add(Params(params2)));
  }
  const outerExpr = (_) => _ && _.expr;
  const outerField = (_) => _ && _.field;
  const isData = (_) => _ === "data";
  const isExpr = (_) => _ === "expr";
  const isField = (_) => _ === "field";
  const isCompare = (_) => _ === "compare";
  function parseData$1(from, group2, scope) {
    let facet, key2, op, dataRef, parent;
    if (!from) {
      dataRef = ref(scope.add(Collect(null, [{}])));
    } else if (facet = from.facet) {
      if (!group2) error$1("Only group marks can be faceted.");
      if (facet.field != null) {
        dataRef = parent = getDataRef(facet, scope);
      } else {
        if (!from.data) {
          op = parseTransform(extend$1({
            type: "aggregate",
            groupby: array$5(facet.groupby)
          }, facet.aggregate), scope);
          op.params.key = scope.keyRef(facet.groupby);
          op.params.pulse = getDataRef(facet, scope);
          dataRef = parent = ref(scope.add(op));
        } else {
          parent = ref(scope.getData(from.data).aggregate);
        }
        key2 = scope.keyRef(facet.groupby, true);
      }
    }
    if (!dataRef) {
      dataRef = getDataRef(from, scope);
    }
    return {
      key: key2,
      pulse: dataRef,
      parent
    };
  }
  function getDataRef(from, scope) {
    return from.$ref ? from : from.data && from.data.$ref ? from.data : ref(scope.getData(from.data).output);
  }
  function DataScope(scope, input, output2, values2, aggr) {
    this.scope = scope;
    this.input = input;
    this.output = output2;
    this.values = values2;
    this.aggregate = aggr;
    this.index = {};
  }
  DataScope.fromEntries = function(scope, entries2) {
    const n = entries2.length, values2 = entries2[n - 1], output2 = entries2[n - 2];
    let input = entries2[0], aggr = null, i = 1;
    if (input && input.type === "load") {
      input = entries2[1];
    }
    scope.add(entries2[0]);
    for (; i < n; ++i) {
      entries2[i].params.pulse = ref(entries2[i - 1]);
      scope.add(entries2[i]);
      if (entries2[i].type === "aggregate") aggr = entries2[i];
    }
    return new DataScope(scope, input, output2, values2, aggr);
  };
  function fieldKey(field2) {
    return isString(field2) ? field2 : null;
  }
  function addSortField(scope, p, sort2) {
    const as = aggrField(sort2.op, sort2.field);
    let s;
    if (p.ops) {
      for (let i = 0, n = p.as.length; i < n; ++i) {
        if (p.as[i] === as) return;
      }
    } else {
      p.ops = ["count"];
      p.fields = [null];
      p.as = ["count"];
    }
    if (sort2.op) {
      p.ops.push((s = sort2.op.signal) ? scope.signalRef(s) : sort2.op);
      p.fields.push(scope.fieldRef(sort2.field));
      p.as.push(as);
    }
  }
  function cache(scope, ds, name, optype, field2, counts, index2) {
    const cache2 = ds[name] || (ds[name] = {}), sort2 = sortKey(counts);
    let k = fieldKey(field2), v, op;
    if (k != null) {
      scope = ds.scope;
      k = k + (sort2 ? "|" + sort2 : "");
      v = cache2[k];
    }
    if (!v) {
      const params2 = counts ? {
        field: keyFieldRef,
        pulse: ds.countsRef(scope, field2, counts)
      } : {
        field: scope.fieldRef(field2),
        pulse: ref(ds.output)
      };
      if (sort2) params2.sort = scope.sortRef(counts);
      op = scope.add(entry(optype, void 0, params2));
      if (index2) ds.index[field2] = op;
      v = ref(op);
      if (k != null) cache2[k] = v;
    }
    return v;
  }
  DataScope.prototype = {
    countsRef(scope, field2, sort2) {
      const ds = this, cache2 = ds.counts || (ds.counts = {}), k = fieldKey(field2);
      let v, a2, p;
      if (k != null) {
        scope = ds.scope;
        v = cache2[k];
      }
      if (!v) {
        p = {
          groupby: scope.fieldRef(field2, "key"),
          pulse: ref(ds.output)
        };
        if (sort2 && sort2.field) addSortField(scope, p, sort2);
        a2 = scope.add(Aggregate(p));
        v = scope.add(Collect({
          pulse: ref(a2)
        }));
        v = {
          agg: a2,
          ref: ref(v)
        };
        if (k != null) cache2[k] = v;
      } else if (sort2 && sort2.field) {
        addSortField(scope, v.agg.params, sort2);
      }
      return v.ref;
    },
    tuplesRef() {
      return ref(this.values);
    },
    extentRef(scope, field2) {
      return cache(scope, this, "extent", "extent", field2, false);
    },
    domainRef(scope, field2) {
      return cache(scope, this, "domain", "values", field2, false);
    },
    valuesRef(scope, field2, sort2) {
      return cache(scope, this, "vals", "values", field2, sort2 || true);
    },
    lookupRef(scope, field2) {
      return cache(scope, this, "lookup", "tupleindex", field2, false);
    },
    indataRef(scope, field2) {
      return cache(scope, this, "indata", "tupleindex", field2, true, true);
    }
  };
  function parseFacet(spec, scope, group2) {
    const facet = spec.from.facet, name = facet.name, data2 = getDataRef(facet, scope);
    let op;
    if (!facet.name) {
      error$1("Facet must have a name: " + $(facet));
    }
    if (!facet.data) {
      error$1("Facet must reference a data set: " + $(facet));
    }
    if (facet.field) {
      op = scope.add(PreFacet({
        field: scope.fieldRef(facet.field),
        pulse: data2
      }));
    } else if (facet.groupby) {
      op = scope.add(Facet({
        key: scope.keyRef(facet.groupby),
        group: ref(scope.proxy(group2.parent)),
        pulse: data2
      }));
    } else {
      error$1("Facet must specify groupby or field: " + $(facet));
    }
    const subscope = scope.fork(), source2 = subscope.add(Collect()), values2 = subscope.add(Sieve({
      pulse: ref(source2)
    }));
    subscope.addData(name, new DataScope(subscope, source2, source2, values2));
    subscope.addSignal("parent", null);
    op.params.subflow = {
      $subflow: subscope.parse(spec).toRuntime()
    };
  }
  function parseSubflow(spec, scope, input) {
    const op = scope.add(PreFacet({
      pulse: input.pulse
    })), subscope = scope.fork();
    subscope.add(Sieve());
    subscope.addSignal("parent", null);
    op.params.subflow = {
      $subflow: subscope.parse(spec).toRuntime()
    };
  }
  function parseTrigger(spec, scope, name) {
    const remove2 = spec.remove, insert2 = spec.insert, toggle2 = spec.toggle, modify2 = spec.modify, values2 = spec.values, op = scope.add(operator());
    const update2 = "if(" + spec.trigger + ',modify("' + name + '",' + [insert2, remove2, toggle2, modify2, values2].map((_) => _ == null ? "null" : _).join(",") + "),0)";
    const expr2 = parser$1(update2, scope);
    op.update = expr2.$expr;
    op.params = expr2.$params;
  }
  function parseMark(spec, scope) {
    const role = getRole(spec), group2 = spec.type === GroupMark, facet = spec.from && spec.from.facet, overlap = spec.overlap;
    let layout = spec.layout || role === ScopeRole || role === FrameRole, ops2, op, store, enc, name, layoutRef, boundRef;
    const nested = role === MarkRole || layout || facet;
    const input = parseData$1(spec.from, group2, scope);
    op = scope.add(DataJoin({
      key: input.key || (spec.key ? fieldRef$1(spec.key) : void 0),
      pulse: input.pulse,
      clean: !group2
    }));
    const joinRef = ref(op);
    op = store = scope.add(Collect({
      pulse: joinRef
    }));
    op = scope.add(Mark$1({
      markdef: definition(spec),
      interactive: interactive(spec.interactive, scope),
      clip: clip(spec.clip, scope),
      context: {
        $context: true
      },
      groups: scope.lookup(),
      parent: scope.signals.parent ? scope.signalRef("parent") : null,
      index: scope.markpath(),
      pulse: ref(op)
    }));
    const markRef = ref(op);
    op = enc = scope.add(Encode(parseEncode(spec.encode, spec.type, role, spec.style, scope, {
      mod: false,
      pulse: markRef
    })));
    op.params.parent = scope.encode();
    if (spec.transform) {
      spec.transform.forEach((_) => {
        const tx2 = parseTransform(_, scope), md2 = tx2.metadata;
        if (md2.generates || md2.changes) {
          error$1("Mark transforms should not generate new data.");
        }
        if (!md2.nomod) enc.params.mod = true;
        tx2.params.pulse = ref(op);
        scope.add(op = tx2);
      });
    }
    if (spec.sort) {
      op = scope.add(SortItems({
        sort: scope.compareRef(spec.sort),
        pulse: ref(op)
      }));
    }
    const encodeRef = ref(op);
    if (facet || layout) {
      layout = scope.add(ViewLayout({
        layout: scope.objectProperty(spec.layout),
        legends: scope.legends,
        mark: markRef,
        pulse: encodeRef
      }));
      layoutRef = ref(layout);
    }
    const bound2 = scope.add(Bound({
      mark: markRef,
      pulse: layoutRef || encodeRef
    }));
    boundRef = ref(bound2);
    if (group2) {
      if (nested) {
        ops2 = scope.operators;
        ops2.pop();
        if (layout) ops2.pop();
      }
      scope.pushState(encodeRef, layoutRef || boundRef, joinRef);
      facet ? parseFacet(spec, scope, input) : nested ? parseSubflow(spec, scope, input) : scope.parse(spec);
      scope.popState();
      if (nested) {
        if (layout) ops2.push(layout);
        ops2.push(bound2);
      }
    }
    if (overlap) {
      boundRef = parseOverlap(overlap, boundRef, scope);
    }
    const render2 = scope.add(Render({
      pulse: boundRef
    })), sieve = scope.add(Sieve({
      pulse: ref(render2)
    }, void 0, scope.parent()));
    if (spec.name != null) {
      name = spec.name;
      scope.addData(name, new DataScope(scope, store, render2, sieve));
      if (spec.on) spec.on.forEach((on2) => {
        if (on2.insert || on2.remove || on2.toggle) {
          error$1("Marks only support modify triggers.");
        }
        parseTrigger(on2, scope, name);
      });
    }
  }
  function parseOverlap(overlap, source2, scope) {
    const method2 = overlap.method, bound2 = overlap.bound, sep = overlap.separation;
    const params2 = {
      separation: isSignal(sep) ? scope.signalRef(sep.signal) : sep,
      method: isSignal(method2) ? scope.signalRef(method2.signal) : method2,
      pulse: source2
    };
    if (overlap.order) {
      params2.sort = scope.compareRef({
        field: overlap.order
      });
    }
    if (bound2) {
      const tol = bound2.tolerance;
      params2.boundTolerance = isSignal(tol) ? scope.signalRef(tol.signal) : +tol;
      params2.boundScale = scope.scaleRef(bound2.scale);
      params2.boundOrient = bound2.orient;
    }
    return ref(scope.add(Overlap(params2)));
  }
  function parseLegend$1(spec, scope) {
    const config = scope.config.legend, encode2 = spec.encode || {}, _ = lookup(spec, config), legendEncode = encode2.legend || {}, name = legendEncode.name || void 0, interactive2 = legendEncode.interactive, style2 = legendEncode.style, scales2 = {};
    let scale2 = 0, entryLayout, params2, children2;
    LegendScales.forEach((s) => spec[s] ? (scales2[s] = spec[s], scale2 = scale2 || spec[s]) : 0);
    if (!scale2) error$1("Missing valid scale for legend.");
    const type2 = legendType(spec, scope.scaleType(scale2));
    const datum2 = {
      title: spec.title != null,
      scales: scales2,
      type: type2,
      vgrad: type2 !== "symbol" && _.isVertical()
    };
    const dataRef = ref(scope.add(Collect(null, [datum2])));
    const entryEncode = {
      enter: {
        x: {
          value: 0
        },
        y: {
          value: 0
        }
      }
    };
    const entryRef = ref(scope.add(LegendEntries(params2 = {
      type: type2,
      scale: scope.scaleRef(scale2),
      count: scope.objectProperty(_("tickCount")),
      limit: scope.property(_("symbolLimit")),
      values: scope.objectProperty(spec.values),
      minstep: scope.property(spec.tickMinStep),
      formatType: scope.property(spec.formatType),
      formatSpecifier: scope.property(spec.format)
    })));
    if (type2 === Gradient) {
      children2 = [legendGradient(spec, scale2, config, encode2.gradient), legendGradientLabels(spec, config, encode2.labels, entryRef)];
      params2.count = params2.count || scope.signalRef(`max(2,2*floor((${deref(_.gradientLength())})/100))`);
    } else if (type2 === Discrete) {
      children2 = [legendGradientDiscrete(spec, scale2, config, encode2.gradient, entryRef), legendGradientLabels(spec, config, encode2.labels, entryRef)];
    } else {
      entryLayout = legendSymbolLayout(spec, config);
      children2 = [legendSymbolGroups(spec, config, encode2, entryRef, deref(entryLayout.columns))];
      params2.size = sizeExpression(spec, scope, children2[0].marks);
    }
    children2 = [guideGroup({
      role: LegendEntryRole,
      from: dataRef,
      encode: entryEncode,
      marks: children2,
      layout: entryLayout,
      interactive: interactive2
    })];
    if (datum2.title) {
      children2.push(legendTitle(spec, config, encode2.title, dataRef));
    }
    return parseMark(guideGroup({
      role: LegendRole,
      from: dataRef,
      encode: extendEncode(buildLegendEncode(_, spec, config), legendEncode, Skip),
      marks: children2,
      aria: _("aria"),
      description: _("description"),
      zindex: _("zindex"),
      name,
      interactive: interactive2,
      style: style2
    }), scope);
  }
  function legendType(spec, scaleType2) {
    let type2 = spec.type || Symbols;
    if (!spec.type && scaleCount(spec) === 1 && (spec.fill || spec.stroke)) {
      type2 = isContinuous$1(scaleType2) ? Gradient : isDiscretizing$1(scaleType2) ? Discrete : Symbols;
    }
    return type2 !== Gradient ? type2 : isDiscretizing$1(scaleType2) ? Discrete : Gradient;
  }
  function scaleCount(spec) {
    return LegendScales.reduce((count2, type2) => count2 + (spec[type2] ? 1 : 0), 0);
  }
  function buildLegendEncode(_, spec, config) {
    const encode2 = {
      enter: {},
      update: {}
    };
    addEncoders(encode2, {
      orient: _("orient"),
      offset: _("offset"),
      padding: _("padding"),
      titlePadding: _("titlePadding"),
      cornerRadius: _("cornerRadius"),
      fill: _("fillColor"),
      stroke: _("strokeColor"),
      strokeWidth: config.strokeWidth,
      strokeDash: config.strokeDash,
      x: _("legendX"),
      y: _("legendY"),
      // accessibility support
      format: spec.format,
      formatType: spec.formatType
    });
    return encode2;
  }
  function sizeExpression(spec, scope, marks) {
    const size = deref(getChannel("size", spec, marks)), strokeWidth2 = deref(getChannel("strokeWidth", spec, marks)), fontSize2 = deref(getFontSize(marks[1].encode, scope, GuideLabelStyle));
    return parser$1(`max(ceil(sqrt(${size})+${strokeWidth2}),${fontSize2})`, scope);
  }
  function getChannel(name, spec, marks) {
    return spec[name] ? `scale("${spec[name]}",datum)` : getEncoding(name, marks[0].encode);
  }
  function getFontSize(encode2, scope, style2) {
    return getEncoding("fontSize", encode2) || getStyle("fontSize", scope, style2);
  }
  const angleExpr = `item.orient==="${Left}"?-90:item.orient==="${Right}"?90:0`;
  function parseTitle(spec, scope) {
    spec = isString(spec) ? {
      text: spec
    } : spec;
    const _ = lookup(spec, scope.config.title), encode2 = spec.encode || {}, userEncode = encode2.group || {}, name = userEncode.name || void 0, interactive2 = userEncode.interactive, style2 = userEncode.style, children2 = [];
    const datum2 = {}, dataRef = ref(scope.add(Collect(null, [datum2])));
    children2.push(buildTitle(spec, _, titleEncode(spec), dataRef));
    if (spec.subtitle) {
      children2.push(buildSubTitle(spec, _, encode2.subtitle, dataRef));
    }
    return parseMark(guideGroup({
      role: TitleRole,
      from: dataRef,
      encode: groupEncode(_, userEncode),
      marks: children2,
      aria: _("aria"),
      description: _("description"),
      zindex: _("zindex"),
      name,
      interactive: interactive2,
      style: style2
    }), scope);
  }
  function titleEncode(spec) {
    const encode2 = spec.encode;
    return encode2 && encode2.title || extend$1({
      name: spec.name,
      interactive: spec.interactive,
      style: spec.style
    }, encode2);
  }
  function groupEncode(_, userEncode) {
    const encode2 = {
      enter: {},
      update: {}
    };
    addEncoders(encode2, {
      orient: _("orient"),
      anchor: _("anchor"),
      align: {
        signal: alignExpr$1
      },
      angle: {
        signal: angleExpr
      },
      limit: _("limit"),
      frame: _("frame"),
      offset: _("offset") || 0,
      padding: _("subtitlePadding")
    });
    return extendEncode(encode2, userEncode, Skip);
  }
  function buildTitle(spec, _, userEncode, dataRef) {
    const zero2 = {
      value: 0
    }, text2 = spec.text, encode2 = {
      enter: {
        opacity: zero2
      },
      update: {
        opacity: {
          value: 1
        }
      },
      exit: {
        opacity: zero2
      }
    };
    addEncoders(encode2, {
      text: text2,
      align: {
        signal: "item.mark.group.align"
      },
      angle: {
        signal: "item.mark.group.angle"
      },
      limit: {
        signal: "item.mark.group.limit"
      },
      baseline: "top",
      dx: _("dx"),
      dy: _("dy"),
      fill: _("color"),
      font: _("font"),
      fontSize: _("fontSize"),
      fontStyle: _("fontStyle"),
      fontWeight: _("fontWeight"),
      lineHeight: _("lineHeight")
    }, {
      // update
      align: _("align"),
      angle: _("angle"),
      baseline: _("baseline")
    });
    return guideMark({
      type: TextMark,
      role: TitleTextRole,
      style: GroupTitleStyle,
      from: dataRef,
      encode: encode2
    }, userEncode);
  }
  function buildSubTitle(spec, _, userEncode, dataRef) {
    const zero2 = {
      value: 0
    }, text2 = spec.subtitle, encode2 = {
      enter: {
        opacity: zero2
      },
      update: {
        opacity: {
          value: 1
        }
      },
      exit: {
        opacity: zero2
      }
    };
    addEncoders(encode2, {
      text: text2,
      align: {
        signal: "item.mark.group.align"
      },
      angle: {
        signal: "item.mark.group.angle"
      },
      limit: {
        signal: "item.mark.group.limit"
      },
      baseline: "top",
      dx: _("dx"),
      dy: _("dy"),
      fill: _("subtitleColor"),
      font: _("subtitleFont"),
      fontSize: _("subtitleFontSize"),
      fontStyle: _("subtitleFontStyle"),
      fontWeight: _("subtitleFontWeight"),
      lineHeight: _("subtitleLineHeight")
    }, {
      // update
      align: _("align"),
      angle: _("angle"),
      baseline: _("baseline")
    });
    return guideMark({
      type: TextMark,
      role: TitleSubtitleRole,
      style: GroupSubtitleStyle,
      from: dataRef,
      encode: encode2
    }, userEncode);
  }
  function parseData$2(data2, scope) {
    const transforms2 = [];
    if (data2.transform) {
      data2.transform.forEach((tx2) => {
        transforms2.push(parseTransform(tx2, scope));
      });
    }
    if (data2.on) {
      data2.on.forEach((on2) => {
        parseTrigger(on2, scope, data2.name);
      });
    }
    scope.addDataPipeline(data2.name, analyze(data2, scope, transforms2));
  }
  function analyze(data2, scope, ops2) {
    const output2 = [];
    let source2 = null, modify2 = false, generate2 = false, upstream, i, n, t, m2;
    if (data2.values) {
      if (isSignal(data2.values) || hasSignal(data2.format)) {
        output2.push(load(scope, data2));
        output2.push(source2 = collect());
      } else {
        output2.push(source2 = collect({
          $ingest: data2.values,
          $format: data2.format
        }));
      }
    } else if (data2.url) {
      if (hasSignal(data2.url) || hasSignal(data2.format)) {
        output2.push(load(scope, data2));
        output2.push(source2 = collect());
      } else {
        output2.push(source2 = collect({
          $request: data2.url,
          $format: data2.format
        }));
      }
    } else if (data2.source) {
      source2 = upstream = array$5(data2.source).map((d) => ref(scope.getData(d).output));
      output2.push(null);
    }
    for (i = 0, n = ops2.length; i < n; ++i) {
      t = ops2[i];
      m2 = t.metadata;
      if (!source2 && !m2.source) {
        output2.push(source2 = collect());
      }
      output2.push(t);
      if (m2.generates) generate2 = true;
      if (m2.modifies && !generate2) modify2 = true;
      if (m2.source) source2 = t;
      else if (m2.changes) source2 = null;
    }
    if (upstream) {
      n = upstream.length - 1;
      output2[0] = Relay({
        derive: modify2,
        pulse: n ? upstream : upstream[0]
      });
      if (modify2 || n) {
        output2.splice(1, 0, collect());
      }
    }
    if (!source2) output2.push(collect());
    output2.push(Sieve({}));
    return output2;
  }
  function collect(values2) {
    const s = Collect({}, values2);
    s.metadata = {
      source: true
    };
    return s;
  }
  function load(scope, data2) {
    return Load({
      url: data2.url ? scope.property(data2.url) : void 0,
      async: data2.async ? scope.property(data2.async) : void 0,
      values: data2.values ? scope.property(data2.values) : void 0,
      format: scope.objectProperty(data2.format)
    });
  }
  const isX = (orient2) => orient2 === Bottom || orient2 === Top;
  const getSign = (orient2, a2, b2) => isSignal(orient2) ? ifLeftTopExpr(orient2.signal, a2, b2) : orient2 === Left || orient2 === Top ? a2 : b2;
  const ifX = (orient2, a2, b2) => isSignal(orient2) ? ifXEnc(orient2.signal, a2, b2) : isX(orient2) ? a2 : b2;
  const ifY = (orient2, a2, b2) => isSignal(orient2) ? ifYEnc(orient2.signal, a2, b2) : isX(orient2) ? b2 : a2;
  const ifTop = (orient2, a2, b2) => isSignal(orient2) ? ifTopExpr(orient2.signal, a2, b2) : orient2 === Top ? {
    value: a2
  } : {
    value: b2
  };
  const ifRight = (orient2, a2, b2) => isSignal(orient2) ? ifRightExpr(orient2.signal, a2, b2) : orient2 === Right ? {
    value: a2
  } : {
    value: b2
  };
  const ifXEnc = ($orient, a2, b2) => ifEnc(`${$orient} === '${Top}' || ${$orient} === '${Bottom}'`, a2, b2);
  const ifYEnc = ($orient, a2, b2) => ifEnc(`${$orient} !== '${Top}' && ${$orient} !== '${Bottom}'`, a2, b2);
  const ifLeftTopExpr = ($orient, a2, b2) => ifExpr(`${$orient} === '${Left}' || ${$orient} === '${Top}'`, a2, b2);
  const ifTopExpr = ($orient, a2, b2) => ifExpr(`${$orient} === '${Top}'`, a2, b2);
  const ifRightExpr = ($orient, a2, b2) => ifExpr(`${$orient} === '${Right}'`, a2, b2);
  const ifEnc = (test2, a2, b2) => {
    a2 = a2 != null ? encoder(a2) : a2;
    b2 = b2 != null ? encoder(b2) : b2;
    if (isSimple(a2) && isSimple(b2)) {
      a2 = a2 ? a2.signal || $(a2.value) : null;
      b2 = b2 ? b2.signal || $(b2.value) : null;
      return {
        signal: `${test2} ? (${a2}) : (${b2})`
      };
    } else {
      return [extend$1({
        test: test2
      }, a2)].concat(b2 || []);
    }
  };
  const isSimple = (enc) => enc == null || Object.keys(enc).length === 1;
  const ifExpr = (test2, a2, b2) => ({
    signal: `${test2} ? (${toExpr(a2)}) : (${toExpr(b2)})`
  });
  const ifOrient = ($orient, t, b2, l, r) => ({
    signal: (l != null ? `${$orient} === '${Left}' ? (${toExpr(l)}) : ` : "") + (b2 != null ? `${$orient} === '${Bottom}' ? (${toExpr(b2)}) : ` : "") + (r != null ? `${$orient} === '${Right}' ? (${toExpr(r)}) : ` : "") + (t != null ? `${$orient} === '${Top}' ? (${toExpr(t)}) : ` : "") + "(null)"
  });
  const toExpr = (v) => isSignal(v) ? v.signal : v == null ? null : $(v);
  const mult = (sign2, value2) => value2 === 0 ? 0 : isSignal(sign2) ? {
    signal: `(${sign2.signal}) * ${value2}`
  } : {
    value: sign2 * value2
  };
  const patch = (value2, base) => {
    const s = value2.signal;
    return s && s.endsWith("(null)") ? {
      signal: s.slice(0, -6) + base.signal
    } : value2;
  };
  function fallback(prop, config, axisConfig2, style2) {
    let styleProp;
    if (config && has$1(config, prop)) {
      return config[prop];
    } else if (has$1(axisConfig2, prop)) {
      return axisConfig2[prop];
    } else if (prop.startsWith("title")) {
      switch (prop) {
        case "titleColor":
          styleProp = "fill";
          break;
        case "titleFont":
        case "titleFontSize":
        case "titleFontWeight":
          styleProp = prop[5].toLowerCase() + prop.slice(6);
      }
      return style2[GuideTitleStyle][styleProp];
    } else if (prop.startsWith("label")) {
      switch (prop) {
        case "labelColor":
          styleProp = "fill";
          break;
        case "labelFont":
        case "labelFontSize":
          styleProp = prop[5].toLowerCase() + prop.slice(6);
      }
      return style2[GuideLabelStyle][styleProp];
    }
    return null;
  }
  function keys$1(objects) {
    const map2 = {};
    for (const obj of objects) {
      if (!obj) continue;
      for (const key2 in obj) map2[key2] = 1;
    }
    return Object.keys(map2);
  }
  function axisConfig(spec, scope) {
    var config = scope.config, style2 = config.style, axis = config.axis, band2 = scope.scaleType(spec.scale) === "band" && config.axisBand, orient2 = spec.orient, xy, or2, key2;
    if (isSignal(orient2)) {
      const xyKeys = keys$1([config.axisX, config.axisY]), orientKeys = keys$1([config.axisTop, config.axisBottom, config.axisLeft, config.axisRight]);
      xy = {};
      for (key2 of xyKeys) {
        xy[key2] = ifX(orient2, fallback(key2, config.axisX, axis, style2), fallback(key2, config.axisY, axis, style2));
      }
      or2 = {};
      for (key2 of orientKeys) {
        or2[key2] = ifOrient(orient2.signal, fallback(key2, config.axisTop, axis, style2), fallback(key2, config.axisBottom, axis, style2), fallback(key2, config.axisLeft, axis, style2), fallback(key2, config.axisRight, axis, style2));
      }
    } else {
      xy = orient2 === Top || orient2 === Bottom ? config.axisX : config.axisY;
      or2 = config["axis" + orient2[0].toUpperCase() + orient2.slice(1)];
    }
    const result = xy || or2 || band2 ? extend$1({}, axis, xy, or2, band2) : axis;
    return result;
  }
  function axisDomain(spec, config, userEncode, dataRef) {
    const _ = lookup(spec, config), orient2 = spec.orient;
    let enter, update2;
    const encode2 = {
      enter: enter = {
        opacity: zero$1
      },
      update: update2 = {
        opacity: one
      },
      exit: {
        opacity: zero$1
      }
    };
    addEncoders(encode2, {
      stroke: _("domainColor"),
      strokeCap: _("domainCap"),
      strokeDash: _("domainDash"),
      strokeDashOffset: _("domainDashOffset"),
      strokeWidth: _("domainWidth"),
      strokeOpacity: _("domainOpacity")
    });
    const pos0 = position(spec, 0);
    const pos1 = position(spec, 1);
    enter.x = update2.x = ifX(orient2, pos0, zero$1);
    enter.x2 = update2.x2 = ifX(orient2, pos1);
    enter.y = update2.y = ifY(orient2, pos0, zero$1);
    enter.y2 = update2.y2 = ifY(orient2, pos1);
    return guideMark({
      type: RuleMark,
      role: AxisDomainRole,
      from: dataRef,
      encode: encode2
    }, userEncode);
  }
  function position(spec, pos) {
    return {
      scale: spec.scale,
      range: pos
    };
  }
  function axisGrid(spec, config, userEncode, dataRef, band2) {
    const _ = lookup(spec, config), orient2 = spec.orient, vscale = spec.gridScale, sign2 = getSign(orient2, 1, -1), offset2 = offsetValue(spec.offset, sign2);
    let enter, exit, update2;
    const encode2 = {
      enter: enter = {
        opacity: zero$1
      },
      update: update2 = {
        opacity: one
      },
      exit: exit = {
        opacity: zero$1
      }
    };
    addEncoders(encode2, {
      stroke: _("gridColor"),
      strokeCap: _("gridCap"),
      strokeDash: _("gridDash"),
      strokeDashOffset: _("gridDashOffset"),
      strokeOpacity: _("gridOpacity"),
      strokeWidth: _("gridWidth")
    });
    const tickPos = {
      scale: spec.scale,
      field: Value,
      band: band2.band,
      extra: band2.extra,
      offset: band2.offset,
      round: _("tickRound")
    };
    const sz2 = ifX(orient2, {
      signal: "height"
    }, {
      signal: "width"
    });
    const gridStart = vscale ? {
      scale: vscale,
      range: 0,
      mult: sign2,
      offset: offset2
    } : {
      value: 0,
      offset: offset2
    };
    const gridEnd = vscale ? {
      scale: vscale,
      range: 1,
      mult: sign2,
      offset: offset2
    } : extend$1(sz2, {
      mult: sign2,
      offset: offset2
    });
    enter.x = update2.x = ifX(orient2, tickPos, gridStart);
    enter.y = update2.y = ifY(orient2, tickPos, gridStart);
    enter.x2 = update2.x2 = ifY(orient2, gridEnd);
    enter.y2 = update2.y2 = ifX(orient2, gridEnd);
    exit.x = ifX(orient2, tickPos);
    exit.y = ifY(orient2, tickPos);
    return guideMark({
      type: RuleMark,
      role: AxisGridRole,
      key: Value,
      from: dataRef,
      encode: encode2
    }, userEncode);
  }
  function offsetValue(offset2, sign2) {
    if (sign2 === 1) ;
    else if (!isObject(offset2)) {
      offset2 = isSignal(sign2) ? {
        signal: `(${sign2.signal}) * (${offset2 || 0})`
      } : sign2 * (offset2 || 0);
    } else {
      let entry2 = offset2 = extend$1({}, offset2);
      while (entry2.mult != null) {
        if (!isObject(entry2.mult)) {
          entry2.mult = isSignal(sign2) ? {
            signal: `(${entry2.mult}) * (${sign2.signal})`
          } : entry2.mult * sign2;
          return offset2;
        } else {
          entry2 = entry2.mult = extend$1({}, entry2.mult);
        }
      }
      entry2.mult = sign2;
    }
    return offset2;
  }
  function axisTicks(spec, config, userEncode, dataRef, size, band2) {
    const _ = lookup(spec, config), orient2 = spec.orient, sign2 = getSign(orient2, -1, 1);
    let enter, exit, update2;
    const encode2 = {
      enter: enter = {
        opacity: zero$1
      },
      update: update2 = {
        opacity: one
      },
      exit: exit = {
        opacity: zero$1
      }
    };
    addEncoders(encode2, {
      stroke: _("tickColor"),
      strokeCap: _("tickCap"),
      strokeDash: _("tickDash"),
      strokeDashOffset: _("tickDashOffset"),
      strokeOpacity: _("tickOpacity"),
      strokeWidth: _("tickWidth")
    });
    const tickSize = encoder(size);
    tickSize.mult = sign2;
    const tickPos = {
      scale: spec.scale,
      field: Value,
      band: band2.band,
      extra: band2.extra,
      offset: band2.offset,
      round: _("tickRound")
    };
    update2.y = enter.y = ifX(orient2, zero$1, tickPos);
    update2.y2 = enter.y2 = ifX(orient2, tickSize);
    exit.x = ifX(orient2, tickPos);
    update2.x = enter.x = ifY(orient2, zero$1, tickPos);
    update2.x2 = enter.x2 = ifY(orient2, tickSize);
    exit.y = ifY(orient2, tickPos);
    return guideMark({
      type: RuleMark,
      role: AxisTickRole,
      key: Value,
      from: dataRef,
      encode: encode2
    }, userEncode);
  }
  function flushExpr(scale2, threshold2, a2, b2, c2) {
    return {
      signal: 'flush(range("' + scale2 + '"), scale("' + scale2 + '", datum.value), ' + threshold2 + "," + a2 + "," + b2 + "," + c2 + ")"
    };
  }
  function axisLabels(spec, config, userEncode, dataRef, size, band2) {
    const _ = lookup(spec, config), orient2 = spec.orient, scale2 = spec.scale, sign2 = getSign(orient2, -1, 1), flush2 = deref(_("labelFlush")), flushOffset = deref(_("labelFlushOffset")), labelAlign = _("labelAlign"), labelBaseline = _("labelBaseline");
    let flushOn = flush2 === 0 || !!flush2, update2;
    const tickSize = encoder(size);
    tickSize.mult = sign2;
    tickSize.offset = encoder(_("labelPadding") || 0);
    tickSize.offset.mult = sign2;
    const tickPos = {
      scale: scale2,
      field: Value,
      band: 0.5,
      offset: extendOffset(band2.offset, _("labelOffset"))
    };
    const align2 = ifX(orient2, flushOn ? flushExpr(scale2, flush2, '"left"', '"right"', '"center"') : {
      value: "center"
    }, ifRight(orient2, "left", "right"));
    const baseline2 = ifX(orient2, ifTop(orient2, "bottom", "top"), flushOn ? flushExpr(scale2, flush2, '"top"', '"bottom"', '"middle"') : {
      value: "middle"
    });
    const offsetExpr2 = flushExpr(scale2, flush2, `-(${flushOffset})`, flushOffset, 0);
    flushOn = flushOn && flushOffset;
    const enter = {
      opacity: zero$1,
      x: ifX(orient2, tickPos, tickSize),
      y: ifY(orient2, tickPos, tickSize)
    };
    const encode2 = {
      enter,
      update: update2 = {
        opacity: one,
        text: {
          field: Label
        },
        x: enter.x,
        y: enter.y,
        align: align2,
        baseline: baseline2
      },
      exit: {
        opacity: zero$1,
        x: enter.x,
        y: enter.y
      }
    };
    addEncoders(encode2, {
      dx: !labelAlign && flushOn ? ifX(orient2, offsetExpr2) : null,
      dy: !labelBaseline && flushOn ? ifY(orient2, offsetExpr2) : null
    });
    addEncoders(encode2, {
      angle: _("labelAngle"),
      fill: _("labelColor"),
      fillOpacity: _("labelOpacity"),
      font: _("labelFont"),
      fontSize: _("labelFontSize"),
      fontWeight: _("labelFontWeight"),
      fontStyle: _("labelFontStyle"),
      limit: _("labelLimit"),
      lineHeight: _("labelLineHeight")
    }, {
      align: labelAlign,
      baseline: labelBaseline
    });
    const bound2 = _("labelBound");
    let overlap = _("labelOverlap");
    overlap = overlap || bound2 ? {
      separation: _("labelSeparation"),
      method: overlap,
      order: "datum.index",
      bound: bound2 ? {
        scale: scale2,
        orient: orient2,
        tolerance: bound2
      } : null
    } : void 0;
    if (update2.align !== align2) {
      update2.align = patch(update2.align, align2);
    }
    if (update2.baseline !== baseline2) {
      update2.baseline = patch(update2.baseline, baseline2);
    }
    return guideMark({
      type: TextMark,
      role: AxisLabelRole,
      style: GuideLabelStyle,
      key: Value,
      from: dataRef,
      encode: encode2,
      overlap
    }, userEncode);
  }
  function axisTitle(spec, config, userEncode, dataRef) {
    const _ = lookup(spec, config), orient2 = spec.orient, sign2 = getSign(orient2, -1, 1);
    let enter, update2;
    const encode2 = {
      enter: enter = {
        opacity: zero$1,
        anchor: encoder(_("titleAnchor", null)),
        align: {
          signal: alignExpr$1
        }
      },
      update: update2 = extend$1({}, enter, {
        opacity: one,
        text: encoder(spec.title)
      }),
      exit: {
        opacity: zero$1
      }
    };
    const titlePos = {
      signal: `lerp(range("${spec.scale}"), ${anchorExpr(0, 1, 0.5)})`
    };
    update2.x = ifX(orient2, titlePos);
    update2.y = ifY(orient2, titlePos);
    enter.angle = ifX(orient2, zero$1, mult(sign2, 90));
    enter.baseline = ifX(orient2, ifTop(orient2, Bottom, Top), {
      value: Bottom
    });
    update2.angle = enter.angle;
    update2.baseline = enter.baseline;
    addEncoders(encode2, {
      fill: _("titleColor"),
      fillOpacity: _("titleOpacity"),
      font: _("titleFont"),
      fontSize: _("titleFontSize"),
      fontStyle: _("titleFontStyle"),
      fontWeight: _("titleFontWeight"),
      limit: _("titleLimit"),
      lineHeight: _("titleLineHeight")
    }, {
      // require update
      align: _("titleAlign"),
      angle: _("titleAngle"),
      baseline: _("titleBaseline")
    });
    autoLayout(_, orient2, encode2, userEncode);
    encode2.update.align = patch(encode2.update.align, enter.align);
    encode2.update.angle = patch(encode2.update.angle, enter.angle);
    encode2.update.baseline = patch(encode2.update.baseline, enter.baseline);
    return guideMark({
      type: TextMark,
      role: AxisTitleRole,
      style: GuideTitleStyle,
      from: dataRef,
      encode: encode2
    }, userEncode);
  }
  function autoLayout(_, orient2, encode2, userEncode) {
    const auto = (value2, dim) => value2 != null ? (encode2.update[dim] = patch(encoder(value2), encode2.update[dim]), false) : !has(dim, userEncode) ? true : false;
    const autoY = auto(_("titleX"), "x"), autoX = auto(_("titleY"), "y");
    encode2.enter.auto = autoX === autoY ? encoder(autoX) : ifX(orient2, encoder(autoX), encoder(autoY));
  }
  function parseAxis$1(spec, scope) {
    const config = axisConfig(spec, scope), encode2 = spec.encode || {}, axisEncode = encode2.axis || {}, name = axisEncode.name || void 0, interactive2 = axisEncode.interactive, style2 = axisEncode.style, _ = lookup(spec, config), band2 = tickBand(_);
    const datum2 = {
      scale: spec.scale,
      ticks: !!_("ticks"),
      labels: !!_("labels"),
      grid: !!_("grid"),
      domain: !!_("domain"),
      title: spec.title != null
    };
    const dataRef = ref(scope.add(Collect({}, [datum2])));
    const ticksRef = ref(scope.add(AxisTicks({
      scale: scope.scaleRef(spec.scale),
      extra: scope.property(band2.extra),
      count: scope.objectProperty(spec.tickCount),
      values: scope.objectProperty(spec.values),
      minstep: scope.property(spec.tickMinStep),
      formatType: scope.property(spec.formatType),
      formatSpecifier: scope.property(spec.format)
    })));
    const children2 = [];
    let size;
    if (datum2.grid) {
      children2.push(axisGrid(spec, config, encode2.grid, ticksRef, band2));
    }
    if (datum2.ticks) {
      size = _("tickSize");
      children2.push(axisTicks(spec, config, encode2.ticks, ticksRef, size, band2));
    }
    if (datum2.labels) {
      size = datum2.ticks ? size : 0;
      children2.push(axisLabels(spec, config, encode2.labels, ticksRef, size, band2));
    }
    if (datum2.domain) {
      children2.push(axisDomain(spec, config, encode2.domain, dataRef));
    }
    if (datum2.title) {
      children2.push(axisTitle(spec, config, encode2.title, dataRef));
    }
    return parseMark(guideGroup({
      role: AxisRole,
      from: dataRef,
      encode: extendEncode(buildAxisEncode(_, spec), axisEncode, Skip),
      marks: children2,
      aria: _("aria"),
      description: _("description"),
      zindex: _("zindex"),
      name,
      interactive: interactive2,
      style: style2
    }), scope);
  }
  function buildAxisEncode(_, spec) {
    const encode2 = {
      enter: {},
      update: {}
    };
    addEncoders(encode2, {
      orient: _("orient"),
      offset: _("offset") || 0,
      position: value(spec.position, 0),
      titlePadding: _("titlePadding"),
      minExtent: _("minExtent"),
      maxExtent: _("maxExtent"),
      range: {
        signal: `abs(span(range("${spec.scale}")))`
      },
      translate: _("translate"),
      // accessibility support
      format: spec.format,
      formatType: spec.formatType
    });
    return encode2;
  }
  function parseScope(spec, scope, preprocessed) {
    const signals = array$5(spec.signals), scales2 = array$5(spec.scales);
    if (!preprocessed) signals.forEach((_) => parseSignal(_, scope));
    array$5(spec.projections).forEach((_) => parseProjection$1(_, scope));
    scales2.forEach((_) => initScale(_, scope));
    array$5(spec.data).forEach((_) => parseData$2(_, scope));
    scales2.forEach((_) => parseScale(_, scope));
    (preprocessed || signals).forEach((_) => parseSignalUpdates(_, scope));
    array$5(spec.axes).forEach((_) => parseAxis$1(_, scope));
    array$5(spec.marks).forEach((_) => parseMark(_, scope));
    array$5(spec.legends).forEach((_) => parseLegend$1(_, scope));
    if (spec.title) parseTitle(spec.title, scope);
    scope.parseLambdas();
    return scope;
  }
  const rootEncode = (spec) => extendEncode({
    enter: {
      x: {
        value: 0
      },
      y: {
        value: 0
      }
    },
    update: {
      width: {
        signal: "width"
      },
      height: {
        signal: "height"
      }
    }
  }, spec);
  function parseView(spec, scope) {
    const config = scope.config;
    const root = ref(scope.root = scope.add(operator()));
    const signals = collectSignals(spec, config);
    signals.forEach((_) => parseSignal(_, scope));
    scope.description = spec.description || config.description;
    scope.eventConfig = config.events;
    scope.legends = scope.objectProperty(config.legend && config.legend.layout);
    scope.locale = config.locale;
    const input = scope.add(Collect());
    const encode2 = scope.add(Encode(parseEncode(rootEncode(spec.encode), GroupMark, FrameRole, spec.style, scope, {
      pulse: ref(input)
    })));
    const parent = scope.add(ViewLayout({
      layout: scope.objectProperty(spec.layout),
      legends: scope.legends,
      autosize: scope.signalRef("autosize"),
      mark: root,
      pulse: ref(encode2)
    }));
    scope.operators.pop();
    scope.pushState(ref(encode2), ref(parent), null);
    parseScope(spec, scope, signals);
    scope.operators.push(parent);
    let op = scope.add(Bound({
      mark: root,
      pulse: ref(parent)
    }));
    op = scope.add(Render({
      pulse: ref(op)
    }));
    op = scope.add(Sieve({
      pulse: ref(op)
    }));
    scope.addData("root", new DataScope(scope, input, input, op));
    return scope;
  }
  function signalObject(name, value2) {
    return value2 && value2.signal ? {
      name,
      update: value2.signal
    } : {
      name,
      value: value2
    };
  }
  function collectSignals(spec, config) {
    const _ = (name) => value(spec[name], config[name]), signals = [signalObject("background", _("background")), signalObject("autosize", parseAutosize(_("autosize"))), signalObject("padding", parsePadding(_("padding"))), signalObject("width", _("width") || 0), signalObject("height", _("height") || 0)], pre = signals.reduce((p, s) => (p[s.name] = s, p), {}), map2 = {};
    array$5(spec.signals).forEach((s) => {
      if (has$1(pre, s.name)) {
        s = extend$1(pre[s.name], s);
      } else {
        signals.push(s);
      }
      map2[s.name] = s;
    });
    array$5(config.signals).forEach((s) => {
      if (!has$1(map2, s.name) && !has$1(pre, s.name)) {
        signals.push(s);
      }
    });
    return signals;
  }
  function Scope(config, options) {
    this.config = config || {};
    this.options = options || {};
    this.bindings = [];
    this.field = {};
    this.signals = {};
    this.lambdas = {};
    this.scales = {};
    this.events = {};
    this.data = {};
    this.streams = [];
    this.updates = [];
    this.operators = [];
    this.eventConfig = null;
    this.locale = null;
    this._id = 0;
    this._subid = 0;
    this._nextsub = [0];
    this._parent = [];
    this._encode = [];
    this._lookup = [];
    this._markpath = [];
  }
  function Subscope(scope) {
    this.config = scope.config;
    this.options = scope.options;
    this.legends = scope.legends;
    this.field = Object.create(scope.field);
    this.signals = Object.create(scope.signals);
    this.lambdas = Object.create(scope.lambdas);
    this.scales = Object.create(scope.scales);
    this.events = Object.create(scope.events);
    this.data = Object.create(scope.data);
    this.streams = [];
    this.updates = [];
    this.operators = [];
    this._id = 0;
    this._subid = ++scope._nextsub[0];
    this._nextsub = scope._nextsub;
    this._parent = scope._parent.slice();
    this._encode = scope._encode.slice();
    this._lookup = scope._lookup.slice();
    this._markpath = scope._markpath;
  }
  Scope.prototype = Subscope.prototype = {
    parse(spec) {
      return parseScope(spec, this);
    },
    fork() {
      return new Subscope(this);
    },
    isSubscope() {
      return this._subid > 0;
    },
    toRuntime() {
      this.finish();
      return {
        description: this.description,
        operators: this.operators,
        streams: this.streams,
        updates: this.updates,
        bindings: this.bindings,
        eventConfig: this.eventConfig,
        locale: this.locale
      };
    },
    id() {
      return (this._subid ? this._subid + ":" : 0) + this._id++;
    },
    add(op) {
      this.operators.push(op);
      op.id = this.id();
      if (op.refs) {
        op.refs.forEach((ref2) => {
          ref2.$ref = op.id;
        });
        op.refs = null;
      }
      return op;
    },
    proxy(op) {
      const vref = op instanceof Entry ? ref(op) : op;
      return this.add(Proxy2({
        value: vref
      }));
    },
    addStream(stream2) {
      this.streams.push(stream2);
      stream2.id = this.id();
      return stream2;
    },
    addUpdate(update2) {
      this.updates.push(update2);
      return update2;
    },
    // Apply metadata
    finish() {
      let name, ds;
      if (this.root) this.root.root = true;
      for (name in this.signals) {
        this.signals[name].signal = name;
      }
      for (name in this.scales) {
        this.scales[name].scale = name;
      }
      function annotate(op, name2, type2) {
        let data2, list;
        if (op) {
          data2 = op.data || (op.data = {});
          list = data2[name2] || (data2[name2] = []);
          list.push(type2);
        }
      }
      for (name in this.data) {
        ds = this.data[name];
        annotate(ds.input, name, "input");
        annotate(ds.output, name, "output");
        annotate(ds.values, name, "values");
        for (const field2 in ds.index) {
          annotate(ds.index[field2], name, "index:" + field2);
        }
      }
      return this;
    },
    // ----
    pushState(encode2, parent, lookup2) {
      this._encode.push(ref(this.add(Sieve({
        pulse: encode2
      }))));
      this._parent.push(parent);
      this._lookup.push(lookup2 ? ref(this.proxy(lookup2)) : null);
      this._markpath.push(-1);
    },
    popState() {
      this._encode.pop();
      this._parent.pop();
      this._lookup.pop();
      this._markpath.pop();
    },
    parent() {
      return peek$2(this._parent);
    },
    encode() {
      return peek$2(this._encode);
    },
    lookup() {
      return peek$2(this._lookup);
    },
    markpath() {
      const p = this._markpath;
      return ++p[p.length - 1];
    },
    // ----
    fieldRef(field2, name) {
      if (isString(field2)) return fieldRef$1(field2, name);
      if (!field2.signal) {
        error$1("Unsupported field reference: " + $(field2));
      }
      const s = field2.signal;
      let f = this.field[s];
      if (!f) {
        const params2 = {
          name: this.signalRef(s)
        };
        if (name) params2.as = name;
        this.field[s] = f = ref(this.add(Field(params2)));
      }
      return f;
    },
    compareRef(cmp) {
      let signal = false;
      const check = (_) => isSignal(_) ? (signal = true, this.signalRef(_.signal)) : isExpr$1(_) ? (signal = true, this.exprRef(_.expr)) : _;
      const fields = array$5(cmp.field).map(check), orders = array$5(cmp.order).map(check);
      return signal ? ref(this.add(Compare({
        fields,
        orders
      }))) : compareRef(fields, orders);
    },
    keyRef(fields, flat) {
      let signal = false;
      const check = (_) => isSignal(_) ? (signal = true, ref(sig[_.signal])) : _;
      const sig = this.signals;
      fields = array$5(fields).map(check);
      return signal ? ref(this.add(Key({
        fields,
        flat
      }))) : keyRef(fields, flat);
    },
    sortRef(sort2) {
      if (!sort2) return sort2;
      const a2 = aggrField(sort2.op, sort2.field), o = sort2.order || Ascending;
      return o.signal ? ref(this.add(Compare({
        fields: a2,
        orders: this.signalRef(o.signal)
      }))) : compareRef(a2, o);
    },
    // ----
    event(source2, type2) {
      const key2 = source2 + ":" + type2;
      if (!this.events[key2]) {
        const id2 = this.id();
        this.streams.push({
          id: id2,
          source: source2,
          type: type2
        });
        this.events[key2] = id2;
      }
      return this.events[key2];
    },
    // ----
    hasOwnSignal(name) {
      return has$1(this.signals, name);
    },
    addSignal(name, value2) {
      if (this.hasOwnSignal(name)) {
        error$1("Duplicate signal name: " + $(name));
      }
      const op = value2 instanceof Entry ? value2 : this.add(operator(value2));
      return this.signals[name] = op;
    },
    getSignal(name) {
      if (!this.signals[name]) {
        error$1("Unrecognized signal name: " + $(name));
      }
      return this.signals[name];
    },
    signalRef(s) {
      if (this.signals[s]) {
        return ref(this.signals[s]);
      } else if (!has$1(this.lambdas, s)) {
        this.lambdas[s] = this.add(operator(null));
      }
      return ref(this.lambdas[s]);
    },
    parseLambdas() {
      const code = Object.keys(this.lambdas);
      for (let i = 0, n = code.length; i < n; ++i) {
        const s = code[i], e3 = parser$1(s, this), op = this.lambdas[s];
        op.params = e3.$params;
        op.update = e3.$expr;
      }
    },
    property(spec) {
      return spec && spec.signal ? this.signalRef(spec.signal) : spec;
    },
    objectProperty(spec) {
      return !spec || !isObject(spec) ? spec : this.signalRef(spec.signal || propertyLambda(spec));
    },
    exprRef(code, name) {
      const params2 = {
        expr: parser$1(code, this)
      };
      if (name) params2.expr.$name = name;
      return ref(this.add(Expression(params2)));
    },
    addBinding(name, bind2) {
      if (!this.bindings) {
        error$1("Nested signals do not support binding: " + $(name));
      }
      this.bindings.push(extend$1({
        signal: name
      }, bind2));
    },
    // ----
    addScaleProj(name, transform2) {
      if (has$1(this.scales, name)) {
        error$1("Duplicate scale or projection name: " + $(name));
      }
      this.scales[name] = this.add(transform2);
    },
    addScale(name, params2) {
      this.addScaleProj(name, Scale(params2));
    },
    addProjection(name, params2) {
      this.addScaleProj(name, Projection(params2));
    },
    getScale(name) {
      if (!this.scales[name]) {
        error$1("Unrecognized scale name: " + $(name));
      }
      return this.scales[name];
    },
    scaleRef(name) {
      return ref(this.getScale(name));
    },
    scaleType(name) {
      return this.getScale(name).params.type;
    },
    projectionRef(name) {
      return this.scaleRef(name);
    },
    projectionType(name) {
      return this.scaleType(name);
    },
    // ----
    addData(name, dataScope) {
      if (has$1(this.data, name)) {
        error$1("Duplicate data set name: " + $(name));
      }
      return this.data[name] = dataScope;
    },
    getData(name) {
      if (!this.data[name]) {
        error$1("Undefined data set name: " + $(name));
      }
      return this.data[name];
    },
    addDataPipeline(name, entries2) {
      if (has$1(this.data, name)) {
        error$1("Duplicate data set name: " + $(name));
      }
      return this.addData(name, DataScope.fromEntries(this, entries2));
    }
  };
  function propertyLambda(spec) {
    return (isArray(spec) ? arrayLambda : objectLambda)(spec);
  }
  function arrayLambda(array2) {
    const n = array2.length;
    let code = "[";
    for (let i = 0; i < n; ++i) {
      const value2 = array2[i];
      code += (i > 0 ? "," : "") + (isObject(value2) ? value2.signal || propertyLambda(value2) : $(value2));
    }
    return code + "]";
  }
  function objectLambda(obj) {
    let code = "{", i = 0, key2, value2;
    for (key2 in obj) {
      value2 = obj[key2];
      code += (++i > 1 ? "," : "") + $(key2) + ":" + (isObject(value2) ? value2.signal || propertyLambda(value2) : $(value2));
    }
    return code + "}";
  }
  function defaults() {
    const defaultFont2 = "sans-serif", defaultSymbolSize = 30, defaultStrokeWidth = 2, defaultColor = "#4c78a8", black = "#000", gray = "#888", lightGray = "#ddd";
    return {
      // default visualization description
      description: "Vega visualization",
      // default padding around visualization
      padding: 0,
      // default for automatic sizing; options: 'none', 'pad', 'fit'
      // or provide an object (e.g., {'type': 'pad', 'resize': true})
      autosize: "pad",
      // default view background color
      // covers the entire view component
      background: null,
      // default event handling configuration
      // preventDefault for view-sourced event types except 'wheel'
      events: {
        defaults: {
          allow: ["wheel"]
        }
      },
      // defaults for top-level group marks
      // accepts mark properties (fill, stroke, etc)
      // covers the data rectangle within group width/height
      group: null,
      // defaults for basic mark types
      // each subset accepts mark properties (fill, stroke, etc)
      mark: null,
      arc: {
        fill: defaultColor
      },
      area: {
        fill: defaultColor
      },
      image: null,
      line: {
        stroke: defaultColor,
        strokeWidth: defaultStrokeWidth
      },
      path: {
        stroke: defaultColor
      },
      rect: {
        fill: defaultColor
      },
      rule: {
        stroke: black
      },
      shape: {
        stroke: defaultColor
      },
      symbol: {
        fill: defaultColor,
        size: 64
      },
      text: {
        fill: black,
        font: defaultFont2,
        fontSize: 11
      },
      trail: {
        fill: defaultColor,
        size: defaultStrokeWidth
      },
      // style definitions
      style: {
        // axis & legend labels
        "guide-label": {
          fill: black,
          font: defaultFont2,
          fontSize: 10
        },
        // axis & legend titles
        "guide-title": {
          fill: black,
          font: defaultFont2,
          fontSize: 11,
          fontWeight: "bold"
        },
        // headers, including chart title
        "group-title": {
          fill: black,
          font: defaultFont2,
          fontSize: 13,
          fontWeight: "bold"
        },
        // chart subtitle
        "group-subtitle": {
          fill: black,
          font: defaultFont2,
          fontSize: 12
        },
        // defaults for styled point marks in Vega-Lite
        point: {
          size: defaultSymbolSize,
          strokeWidth: defaultStrokeWidth,
          shape: "circle"
        },
        circle: {
          size: defaultSymbolSize,
          strokeWidth: defaultStrokeWidth
        },
        square: {
          size: defaultSymbolSize,
          strokeWidth: defaultStrokeWidth,
          shape: "square"
        },
        // defaults for styled group marks in Vega-Lite
        cell: {
          fill: "transparent",
          stroke: lightGray
        },
        view: {
          fill: "transparent"
        }
      },
      // defaults for title
      title: {
        orient: "top",
        anchor: "middle",
        offset: 4,
        subtitlePadding: 3
      },
      // defaults for axes
      axis: {
        minExtent: 0,
        maxExtent: 200,
        bandPosition: 0.5,
        domain: true,
        domainWidth: 1,
        domainColor: gray,
        grid: false,
        gridWidth: 1,
        gridColor: lightGray,
        labels: true,
        labelAngle: 0,
        labelLimit: 180,
        labelOffset: 0,
        labelPadding: 2,
        ticks: true,
        tickColor: gray,
        tickOffset: 0,
        tickRound: true,
        tickSize: 5,
        tickWidth: 1,
        titlePadding: 4
      },
      // correction for centering bias
      axisBand: {
        tickOffset: -0.5
      },
      // defaults for cartographic projection
      projection: {
        type: "mercator"
      },
      // defaults for legends
      legend: {
        orient: "right",
        padding: 0,
        gridAlign: "each",
        columnPadding: 10,
        rowPadding: 2,
        symbolDirection: "vertical",
        gradientDirection: "vertical",
        gradientLength: 200,
        gradientThickness: 16,
        gradientStrokeColor: lightGray,
        gradientStrokeWidth: 0,
        gradientLabelOffset: 2,
        labelAlign: "left",
        labelBaseline: "middle",
        labelLimit: 160,
        labelOffset: 4,
        labelOverlap: true,
        symbolLimit: 30,
        symbolType: "circle",
        symbolSize: 100,
        symbolOffset: 0,
        symbolStrokeWidth: 1.5,
        symbolBaseFillColor: "transparent",
        symbolBaseStrokeColor: gray,
        titleLimit: 180,
        titleOrient: "top",
        titlePadding: 5,
        layout: {
          offset: 18,
          direction: "horizontal",
          left: {
            direction: "vertical"
          },
          right: {
            direction: "vertical"
          }
        }
      },
      // defaults for scale ranges
      range: {
        category: {
          scheme: "tableau10"
        },
        ordinal: {
          scheme: "blues"
        },
        heatmap: {
          scheme: "yellowgreenblue"
        },
        ramp: {
          scheme: "blues"
        },
        diverging: {
          scheme: "blueorange",
          extent: [1, 0]
        },
        symbol: ["circle", "square", "triangle-up", "cross", "diamond", "triangle-right", "triangle-down", "triangle-left"]
      }
    };
  }
  function parse(spec, config, options) {
    if (!isObject(spec)) {
      error$1("Input Vega specification must be an object.");
    }
    config = mergeConfig(defaults(), config, spec.config);
    return parseView(spec, new Scope(config, options)).toRuntime();
  }
  var version$4 = "5.33.0";
  extend$1(transforms, tx, vtx, encode$1, geo, force, label, tree, reg, voronoi, wordcloud, xf);
  const vegaImport = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
    __proto__: null,
    Bounds,
    CanvasHandler,
    CanvasRenderer,
    DATE,
    DAY,
    DAYOFYEAR,
    Dataflow,
    Debug,
    Error: Error$1,
    EventStream,
    Gradient: Gradient$1,
    GroupItem,
    HOURS,
    Handler: Handler$1,
    HybridHandler,
    HybridRenderer,
    Info,
    Item,
    MILLISECONDS,
    MINUTES,
    MONTH,
    Marks,
    MultiPulse,
    None: None$2,
    Operator,
    Parameters,
    Pulse,
    QUARTER,
    RenderType,
    Renderer,
    ResourceLoader,
    SECONDS,
    SVGHandler,
    SVGRenderer,
    SVGStringRenderer,
    Scenegraph,
    TIME_UNITS,
    Transform,
    View: View$1,
    WEEK,
    Warn,
    YEAR,
    accessor,
    accessorFields,
    accessorName,
    array: array$5,
    ascending: ascending$2,
    bandwidthNRD: estimateBandwidth,
    bin,
    bootstrapCI,
    boundClip,
    boundContext,
    boundItem: boundItem$1,
    boundMark,
    boundStroke,
    changeset,
    clampRange,
    codegenExpression: codegen,
    compare: compare$2,
    constant: constant$5,
    cumulativeLogNormal,
    cumulativeNormal,
    cumulativeUniform,
    dayofyear,
    debounce,
    defaultLocale,
    definition: definition$1,
    densityLogNormal,
    densityNormal,
    densityUniform,
    domChild,
    domClear,
    domCreate,
    domFind,
    dotbin,
    error: error$1,
    expressionFunction,
    extend: extend$1,
    extent,
    extentIndex,
    falsy,
    fastmap,
    field: field$1,
    flush,
    font: font$1,
    fontFamily,
    fontSize,
    format: format$2,
    formatLocale: numberFormatDefaultLocale,
    formats: formats$1,
    hasOwnProperty: has$1,
    id,
    identity: identity$6,
    inferType,
    inferTypes,
    ingest: ingest$1,
    inherits,
    inrange,
    interpolate: interpolate$1,
    interpolateColors,
    interpolateRange: interpolateRange$1,
    intersect: intersect$2,
    intersectBoxLine,
    intersectPath,
    intersectPoint,
    intersectRule,
    isArray,
    isBoolean: isBoolean$2,
    isDate: isDate$1,
    isFunction,
    isIterable,
    isNumber: isNumber$1,
    isObject,
    isRegExp,
    isString,
    isTuple,
    key,
    lerp,
    lineHeight,
    loader,
    locale,
    logger,
    lruCache,
    markup,
    merge: merge$3,
    mergeConfig,
    multiLineOffset,
    one: one$2,
    pad: pad$2,
    panLinear,
    panLog,
    panPow,
    panSymlog,
    parse,
    parseExpression: parser$2,
    parseSelector: eventSelector,
    path: path$3,
    pathCurves: curves,
    pathEqual,
    pathParse: parse$3,
    pathRectangle: vg_rect,
    pathRender,
    pathSymbols: symbols$1,
    pathTrail: vg_trail,
    peek: peek$2,
    point: point$2,
    projection,
    quantileLogNormal,
    quantileNormal,
    quantileUniform,
    quantiles,
    quantizeInterpolator,
    quarter,
    quartiles,
    get random() {
      return random;
    },
    randomInteger: integer,
    randomKDE: kde,
    randomLCG: lcg$2,
    randomLogNormal: lognormal,
    randomMixture: mixture$1,
    randomNormal: gaussian,
    randomUniform: uniform,
    read,
    regressionConstant: constant$4,
    regressionExp: exp$1,
    regressionLinear: linear$2,
    regressionLoess: loess,
    regressionLog: log$3,
    regressionPoly: poly,
    regressionPow: pow$3,
    regressionQuad: quad,
    renderModule,
    repeat,
    resetDefaultLocale,
    resetSVGClipId,
    resetSVGDefIds,
    responseType,
    runtimeContext: context,
    sampleCurve,
    sampleLogNormal,
    sampleNormal,
    sampleUniform,
    scale: scale$4,
    sceneEqual,
    sceneFromJSON,
    scenePickVisit: pickVisit,
    sceneToJSON,
    sceneVisit: visit,
    sceneZOrder: zorder,
    scheme: scheme$1,
    serializeXML,
    setHybridRendererOptions,
    setRandom,
    span,
    splitAccessPath,
    stringValue: $,
    textMetrics,
    timeBin: bin$1,
    timeFloor,
    timeFormatLocale: timeFormatDefaultLocale,
    timeInterval,
    timeOffset,
    timeSequence,
    timeUnitSpecifier,
    timeUnits,
    toBoolean,
    toDate,
    toNumber,
    toSet,
    toString,
    transform: transform$2,
    transforms,
    truncate: truncate$1,
    truthy,
    tupleid,
    typeParsers,
    utcFloor,
    utcInterval,
    utcOffset,
    utcSequence,
    utcdayofyear,
    utcquarter,
    utcweek,
    version: version$4,
    visitArray,
    week,
    writeConfig,
    zero: zero$4,
    zoomLinear,
    zoomLog,
    zoomPow,
    zoomSymlog
  }, Symbol.toStringTag, { value: "Module" }));
  function adjustSpatial(item, encode2, swap2) {
    let t;
    if (encode2.x2) {
      if (encode2.x) {
        if (swap2 && item.x > item.x2) {
          t = item.x;
          item.x = item.x2;
          item.x2 = t;
        }
        item.width = item.x2 - item.x;
      } else {
        item.x = item.x2 - (item.width || 0);
      }
    }
    if (encode2.xc) {
      item.x = item.xc - (item.width || 0) / 2;
    }
    if (encode2.y2) {
      if (encode2.y) {
        if (swap2 && item.y > item.y2) {
          t = item.y;
          item.y = item.y2;
          item.y2 = t;
        }
        item.height = item.y2 - item.y;
      } else {
        item.y = item.y2 - (item.height || 0);
      }
    }
    if (encode2.yc) {
      item.y = item.yc - (item.height || 0) / 2;
    }
  }
  var Constants = {
    NaN: NaN,
    E: Math.E,
    LN2: Math.LN2,
    LN10: Math.LN10,
    LOG2E: Math.LOG2E,
    LOG10E: Math.LOG10E,
    PI: Math.PI,
    SQRT1_2: Math.SQRT1_2,
    SQRT2: Math.SQRT2,
    MIN_VALUE: Number.MIN_VALUE,
    MAX_VALUE: Number.MAX_VALUE
  };
  var Ops = {
    "*": (a2, b2) => a2 * b2,
    "+": (a2, b2) => a2 + b2,
    "-": (a2, b2) => a2 - b2,
    "/": (a2, b2) => a2 / b2,
    "%": (a2, b2) => a2 % b2,
    ">": (a2, b2) => a2 > b2,
    "<": (a2, b2) => a2 < b2,
    "<=": (a2, b2) => a2 <= b2,
    ">=": (a2, b2) => a2 >= b2,
    "==": (a2, b2) => a2 == b2,
    "!=": (a2, b2) => a2 != b2,
    "===": (a2, b2) => a2 === b2,
    "!==": (a2, b2) => a2 !== b2,
    "&": (a2, b2) => a2 & b2,
    "|": (a2, b2) => a2 | b2,
    "^": (a2, b2) => a2 ^ b2,
    "<<": (a2, b2) => a2 << b2,
    ">>": (a2, b2) => a2 >> b2,
    ">>>": (a2, b2) => a2 >>> b2
  };
  var Unary = {
    "+": (a2) => +a2,
    "-": (a2) => -a2,
    "~": (a2) => ~a2,
    "!": (a2) => !a2
  };
  const slice = Array.prototype.slice;
  const apply = (m2, args, cast) => {
    const obj = cast ? cast(args[0]) : args[0];
    return obj[m2].apply(obj, slice.call(args, 1));
  };
  const datetime = (y2, m2, d, H, M2, S, ms) => new Date(y2, m2 || 0, d != null ? d : 1, H || 0, M2 || 0, S || 0, ms || 0);
  var Functions = {
    // math functions
    isNaN: Number.isNaN,
    isFinite: Number.isFinite,
    abs: Math.abs,
    acos: Math.acos,
    asin: Math.asin,
    atan: Math.atan,
    atan2: Math.atan2,
    ceil: Math.ceil,
    cos: Math.cos,
    exp: Math.exp,
    floor: Math.floor,
    log: Math.log,
    max: Math.max,
    min: Math.min,
    pow: Math.pow,
    random: Math.random,
    round: Math.round,
    sin: Math.sin,
    sqrt: Math.sqrt,
    tan: Math.tan,
    clamp: (a2, b2, c2) => Math.max(b2, Math.min(c2, a2)),
    // date functions
    now: Date.now,
    utc: Date.UTC,
    datetime,
    date: (d) => new Date(d).getDate(),
    day: (d) => new Date(d).getDay(),
    year: (d) => new Date(d).getFullYear(),
    month: (d) => new Date(d).getMonth(),
    hours: (d) => new Date(d).getHours(),
    minutes: (d) => new Date(d).getMinutes(),
    seconds: (d) => new Date(d).getSeconds(),
    milliseconds: (d) => new Date(d).getMilliseconds(),
    time: (d) => new Date(d).getTime(),
    timezoneoffset: (d) => new Date(d).getTimezoneOffset(),
    utcdate: (d) => new Date(d).getUTCDate(),
    utcday: (d) => new Date(d).getUTCDay(),
    utcyear: (d) => new Date(d).getUTCFullYear(),
    utcmonth: (d) => new Date(d).getUTCMonth(),
    utchours: (d) => new Date(d).getUTCHours(),
    utcminutes: (d) => new Date(d).getUTCMinutes(),
    utcseconds: (d) => new Date(d).getUTCSeconds(),
    utcmilliseconds: (d) => new Date(d).getUTCMilliseconds(),
    // sequence functions
    length: (x2) => x2.length,
    join: function() {
      return apply("join", arguments);
    },
    indexof: function() {
      return apply("indexOf", arguments);
    },
    lastindexof: function() {
      return apply("lastIndexOf", arguments);
    },
    slice: function() {
      return apply("slice", arguments);
    },
    reverse: (x2) => x2.slice().reverse(),
    sort: (x2) => x2.slice().sort(ascending$2),
    // string functions
    parseFloat,
    parseInt,
    upper: (x2) => String(x2).toUpperCase(),
    lower: (x2) => String(x2).toLowerCase(),
    substring: function() {
      return apply("substring", arguments, String);
    },
    split: function() {
      return apply("split", arguments, String);
    },
    replace: function() {
      return apply("replace", arguments, String);
    },
    trim: (x2) => String(x2).trim(),
    // Base64 encode/decode
    // Convert binary string to base64-encoded ascii
    btoa: (x2) => btoa(x2),
    // Convert base64-encoded ascii to binary string
    atob: (x2) => atob(x2),
    // regexp functions
    regexp: RegExp,
    test: (r, t) => RegExp(r).test(t)
  };
  const EventFunctions = ["view", "item", "group", "xy", "x", "y"];
  const DisallowedMethods = /* @__PURE__ */ new Set([Function, eval, setTimeout, setInterval]);
  if (typeof setImmediate === "function") DisallowedMethods.add(setImmediate);
  const Visitors = {
    Literal: ($2, n) => n.value,
    Identifier: ($2, n) => {
      const id2 = n.name;
      return $2.memberDepth > 0 ? id2 : id2 === "datum" ? $2.datum : id2 === "event" ? $2.event : id2 === "item" ? $2.item : Constants[id2] || $2.params["$" + id2];
    },
    MemberExpression: ($2, n) => {
      const d = !n.computed, o = $2(n.object);
      if (d) $2.memberDepth += 1;
      const p = $2(n.property);
      if (d) $2.memberDepth -= 1;
      if (DisallowedMethods.has(o[p])) {
        console.error(`Prevented interpretation of member "${p}" which could lead to insecure code execution`);
        return;
      }
      return o[p];
    },
    CallExpression: ($2, n) => {
      const args = n.arguments;
      let name = n.callee.name;
      if (name.startsWith("_")) {
        name = name.slice(1);
      }
      return name === "if" ? $2(args[0]) ? $2(args[1]) : $2(args[2]) : ($2.fn[name] || Functions[name]).apply($2.fn, args.map($2));
    },
    ArrayExpression: ($2, n) => n.elements.map($2),
    BinaryExpression: ($2, n) => Ops[n.operator]($2(n.left), $2(n.right)),
    UnaryExpression: ($2, n) => Unary[n.operator]($2(n.argument)),
    ConditionalExpression: ($2, n) => $2(n.test) ? $2(n.consequent) : $2(n.alternate),
    LogicalExpression: ($2, n) => n.operator === "&&" ? $2(n.left) && $2(n.right) : $2(n.left) || $2(n.right),
    ObjectExpression: ($2, n) => n.properties.reduce((o, p) => {
      $2.memberDepth += 1;
      const k = $2(p.key);
      $2.memberDepth -= 1;
      if (DisallowedMethods.has($2(p.value))) {
        console.error(`Prevented interpretation of property "${k}" which could lead to insecure code execution`);
      } else {
        o[k] = $2(p.value);
      }
      return o;
    }, {})
  };
  function interpret(ast, fn, params2, datum2, event2, item) {
    const $2 = (n) => Visitors[n.type]($2, n);
    $2.memberDepth = 0;
    $2.fn = Object.create(fn);
    $2.params = params2;
    $2.datum = datum2;
    $2.event = event2;
    $2.item = item;
    EventFunctions.forEach((f) => $2.fn[f] = function() {
      return event2.vega[f](...arguments);
    });
    return $2(ast);
  }
  var expression$1 = {
    /**
     * Parse an expression used to update an operator value.
     */
    operator(ctx, expr2) {
      const ast = expr2.ast, fn = ctx.functions;
      return (_) => interpret(ast, fn, _);
    },
    /**
     * Parse an expression provided as an operator parameter value.
     */
    parameter(ctx, expr2) {
      const ast = expr2.ast, fn = ctx.functions;
      return (datum2, _) => interpret(ast, fn, _, datum2);
    },
    /**
     * Parse an expression applied to an event stream.
     */
    event(ctx, expr2) {
      const ast = expr2.ast, fn = ctx.functions;
      return (event2) => interpret(ast, fn, void 0, void 0, event2);
    },
    /**
     * Parse an expression used to handle an event-driven operator update.
     */
    handler(ctx, expr2) {
      const ast = expr2.ast, fn = ctx.functions;
      return (_, event2) => {
        const datum2 = event2.item && event2.item.datum;
        return interpret(ast, fn, _, datum2, event2);
      };
    },
    /**
     * Parse an expression that performs visual encoding.
     */
    encode(ctx, encode2) {
      const {
        marktype,
        channels
      } = encode2, fn = ctx.functions, swap2 = marktype === "group" || marktype === "image" || marktype === "rect";
      return (item, _) => {
        const datum2 = item.datum;
        let m2 = 0, v;
        for (const name in channels) {
          v = interpret(channels[name].ast, fn, _, datum2, void 0, item);
          if (item[name] !== v) {
            item[name] = v;
            m2 = 1;
          }
        }
        if (marktype !== "rule") {
          adjustSpatial(item, channels, swap2);
        }
        return m2;
      };
    }
  };
  const version$3 = "5.23.0";
  const pkg$1 = {
    version: version$3
  };
  function isLogicalOr(op) {
    return hasProperty(op, "or");
  }
  function isLogicalAnd(op) {
    return hasProperty(op, "and");
  }
  function isLogicalNot(op) {
    return hasProperty(op, "not");
  }
  function forEachLeaf(op, fn) {
    if (isLogicalNot(op)) {
      forEachLeaf(op.not, fn);
    } else if (isLogicalAnd(op)) {
      for (const subop of op.and) {
        forEachLeaf(subop, fn);
      }
    } else if (isLogicalOr(op)) {
      for (const subop of op.or) {
        forEachLeaf(subop, fn);
      }
    } else {
      fn(op);
    }
  }
  function normalizeLogicalComposition(op, normalizer) {
    if (isLogicalNot(op)) {
      return { not: normalizeLogicalComposition(op.not, normalizer) };
    } else if (isLogicalAnd(op)) {
      return { and: op.and.map((o) => normalizeLogicalComposition(o, normalizer)) };
    } else if (isLogicalOr(op)) {
      return { or: op.or.map((o) => normalizeLogicalComposition(o, normalizer)) };
    } else {
      return normalizer(op);
    }
  }
  const duplicate = structuredClone;
  function never(message) {
    throw new Error(message);
  }
  function pick(obj, props) {
    const copy2 = {};
    for (const prop of props) {
      if (has$1(obj, prop)) {
        copy2[prop] = obj[prop];
      }
    }
    return copy2;
  }
  function omit(obj, props) {
    const copy2 = { ...obj };
    for (const prop of props) {
      delete copy2[prop];
    }
    return copy2;
  }
  Set.prototype["toJSON"] = function() {
    return `Set(${[...this].map((x2) => stringify$1(x2)).join(",")})`;
  };
  function hash(a2) {
    if (isNumber$1(a2)) {
      return a2;
    }
    const str = isString(a2) ? a2 : stringify$1(a2);
    if (str.length < 250) {
      return str;
    }
    let h2 = 0;
    for (let i = 0; i < str.length; i++) {
      const char = str.charCodeAt(i);
      h2 = (h2 << 5) - h2 + char;
      h2 = h2 & h2;
    }
    return h2;
  }
  function isNullOrFalse(x2) {
    return x2 === false || x2 === null;
  }
  function contains(array2, item) {
    return array2.includes(item);
  }
  function some(arr, f) {
    let i = 0;
    for (const [k, a2] of arr.entries()) {
      if (f(a2, k, i++)) {
        return true;
      }
    }
    return false;
  }
  function every(arr, f) {
    let i = 0;
    for (const [k, a2] of arr.entries()) {
      if (!f(a2, k, i++)) {
        return false;
      }
    }
    return true;
  }
  function mergeDeep$1(dest, ...src) {
    for (const s of src) {
      deepMerge_$1(dest, s ?? {});
    }
    return dest;
  }
  function deepMerge_$1(dest, src) {
    for (const property2 of keys(src)) {
      writeConfig(dest, property2, src[property2], true);
    }
  }
  function unique(values2, f) {
    const results = [];
    const u2 = {};
    let v;
    for (const val of values2) {
      v = f(val);
      if (v in u2) {
        continue;
      }
      u2[v] = 1;
      results.push(val);
    }
    return results;
  }
  function isEqual(dict, other) {
    const dictKeys = keys(dict);
    const otherKeys = keys(other);
    if (dictKeys.length !== otherKeys.length) {
      return false;
    }
    for (const key2 of dictKeys) {
      if (dict[key2] !== other[key2]) {
        return false;
      }
    }
    return true;
  }
  function setEqual(a2, b2) {
    if (a2.size !== b2.size) {
      return false;
    }
    for (const e3 of a2) {
      if (!b2.has(e3)) {
        return false;
      }
    }
    return true;
  }
  function hasIntersection(a2, b2) {
    for (const key2 of a2) {
      if (b2.has(key2)) {
        return true;
      }
    }
    return false;
  }
  function prefixGenerator(a2) {
    const prefixes2 = /* @__PURE__ */ new Set();
    for (const x2 of a2) {
      const splitField = splitAccessPath(x2);
      const wrappedWithAccessors = splitField.map((y2, i) => i === 0 ? y2 : `[${y2}]`);
      const computedPrefixes = wrappedWithAccessors.map((_, i) => wrappedWithAccessors.slice(0, i + 1).join(""));
      for (const y2 of computedPrefixes) {
        prefixes2.add(y2);
      }
    }
    return prefixes2;
  }
  function fieldIntersection(a2, b2) {
    if (a2 === void 0 || b2 === void 0) {
      return true;
    }
    return hasIntersection(prefixGenerator(a2), prefixGenerator(b2));
  }
  function isEmpty(obj) {
    return keys(obj).length === 0;
  }
  const keys = Object.keys;
  const vals = Object.values;
  const entries$1 = Object.entries;
  function isBoolean(b2) {
    return b2 === true || b2 === false;
  }
  function varName(s) {
    const alphanumericS = s.replace(/\W/g, "_");
    return (s.match(/^\d+/) ? "_" : "") + alphanumericS;
  }
  function logicalExpr(op, cb) {
    if (isLogicalNot(op)) {
      return `!(${logicalExpr(op.not, cb)})`;
    } else if (isLogicalAnd(op)) {
      return `(${op.and.map((and) => logicalExpr(and, cb)).join(") && (")})`;
    } else if (isLogicalOr(op)) {
      return `(${op.or.map((or2) => logicalExpr(or2, cb)).join(") || (")})`;
    } else {
      return cb(op);
    }
  }
  function deleteNestedProperty(obj, orderedProps) {
    if (orderedProps.length === 0) {
      return true;
    }
    const prop = orderedProps.shift();
    if (prop in obj && deleteNestedProperty(obj[prop], orderedProps)) {
      delete obj[prop];
    }
    return isEmpty(obj);
  }
  function titleCase(s) {
    return s.charAt(0).toUpperCase() + s.substr(1);
  }
  function accessPathWithDatum(path2, datum2 = "datum") {
    const pieces = splitAccessPath(path2);
    const prefixes2 = [];
    for (let i = 1; i <= pieces.length; i++) {
      const prefix = `[${pieces.slice(0, i).map($).join("][")}]`;
      prefixes2.push(`${datum2}${prefix}`);
    }
    return prefixes2.join(" && ");
  }
  function flatAccessWithDatum(path2, datum2 = "datum") {
    return `${datum2}[${$(splitAccessPath(path2).join("."))}]`;
  }
  function accessWithDatumToUnescapedPath(unescapedPath) {
    const singleQuoteEscapedPath = unescapedPath.replaceAll("'", "\\'");
    return `datum['${singleQuoteEscapedPath}']`;
  }
  function escapePathAccess(string2) {
    return string2.replace(/(\[|\]|\.|'|")/g, "\\$1");
  }
  function replacePathInField(path2) {
    return `${splitAccessPath(path2).map(escapePathAccess).join("\\.")}`;
  }
  function replaceAll(string2, find2, replacement) {
    return string2.replace(new RegExp(find2.replace(/[-/\\^$*+?.()|[\]{}]/g, "\\$&"), "g"), replacement);
  }
  function removePathFromField(path2) {
    return `${splitAccessPath(path2).join(".")}`;
  }
  function accessPathDepth(path2) {
    if (!path2) {
      return 0;
    }
    return splitAccessPath(path2).length;
  }
  function getFirstDefined(...args) {
    return args.find((a2) => a2 !== void 0);
  }
  let idCounter$1 = 42;
  function uniqueId(prefix) {
    const id2 = ++idCounter$1;
    return prefix ? String(prefix) + id2 : id2;
  }
  function resetIdCounter() {
    idCounter$1 = 42;
  }
  function internalField(name) {
    return isInternalField(name) ? name : `__${name}`;
  }
  function isInternalField(name) {
    return name.startsWith("__");
  }
  function normalizeAngle(angle2) {
    if (angle2 === void 0) {
      return void 0;
    }
    return (angle2 % 360 + 360) % 360;
  }
  function isNumeric(value2) {
    if (isNumber$1(value2)) {
      return true;
    }
    return !isNaN(value2) && !isNaN(parseFloat(value2));
  }
  const clonedProto = Object.getPrototypeOf(structuredClone({}));
  function deepEqual(a2, b2) {
    if (a2 === b2)
      return true;
    if (a2 && b2 && typeof a2 == "object" && typeof b2 == "object") {
      if (a2.constructor.name !== b2.constructor.name)
        return false;
      let length2;
      let i;
      if (Array.isArray(a2)) {
        length2 = a2.length;
        if (length2 != b2.length)
          return false;
        for (i = length2; i-- !== 0; )
          if (!deepEqual(a2[i], b2[i]))
            return false;
        return true;
      }
      if (a2 instanceof Map && b2 instanceof Map) {
        if (a2.size !== b2.size)
          return false;
        for (const e3 of a2.entries())
          if (!b2.has(e3[0]))
            return false;
        for (const e3 of a2.entries())
          if (!deepEqual(e3[1], b2.get(e3[0])))
            return false;
        return true;
      }
      if (a2 instanceof Set && b2 instanceof Set) {
        if (a2.size !== b2.size)
          return false;
        for (const e3 of a2.entries())
          if (!b2.has(e3[0]))
            return false;
        return true;
      }
      if (ArrayBuffer.isView(a2) && ArrayBuffer.isView(b2)) {
        length2 = a2.length;
        if (length2 != b2.length)
          return false;
        for (i = length2; i-- !== 0; )
          if (a2[i] !== b2[i])
            return false;
        return true;
      }
      if (a2.constructor === RegExp)
        return a2.source === b2.source && a2.flags === b2.flags;
      if (a2.valueOf !== Object.prototype.valueOf && a2.valueOf !== clonedProto.valueOf)
        return a2.valueOf() === b2.valueOf();
      if (a2.toString !== Object.prototype.toString && a2.toString !== clonedProto.toString)
        return a2.toString() === b2.toString();
      const ks = Object.keys(a2);
      length2 = ks.length;
      if (length2 !== Object.keys(b2).length)
        return false;
      for (i = length2; i-- !== 0; )
        if (!Object.prototype.hasOwnProperty.call(b2, ks[i]))
          return false;
      for (i = length2; i-- !== 0; ) {
        const key2 = ks[i];
        if (!deepEqual(a2[key2], b2[key2]))
          return false;
      }
      return true;
    }
    return a2 !== a2 && b2 !== b2;
  }
  function stringify$1(data2) {
    const seen = [];
    return function _stringify(node) {
      if (node && node.toJSON && typeof node.toJSON === "function") {
        node = node.toJSON();
      }
      if (node === void 0)
        return void 0;
      if (typeof node == "number")
        return isFinite(node) ? "" + node : "null";
      if (typeof node !== "object")
        return JSON.stringify(node);
      let i, out;
      if (Array.isArray(node)) {
        out = "[";
        for (i = 0; i < node.length; i++) {
          if (i)
            out += ",";
          out += _stringify(node[i]) || "null";
        }
        return out + "]";
      }
      if (node === null)
        return "null";
      if (seen.includes(node)) {
        throw new TypeError("Converting circular structure to JSON");
      }
      const seenIndex = seen.push(node) - 1;
      const ks = Object.keys(node).sort();
      out = "";
      for (i = 0; i < ks.length; i++) {
        const key2 = ks[i];
        const value2 = _stringify(node[key2]);
        if (!value2)
          continue;
        if (out)
          out += ",";
        out += JSON.stringify(key2) + ":" + value2;
      }
      seen.splice(seenIndex, 1);
      return `{${out}}`;
    }(data2);
  }
  function hasProperty(obj, key2) {
    return isObject(obj) && has$1(obj, key2) && obj[key2] !== void 0;
  }
  const ROW = "row";
  const COLUMN = "column";
  const FACET = "facet";
  const X = "x";
  const Y = "y";
  const X2 = "x2";
  const Y2 = "y2";
  const XOFFSET = "xOffset";
  const YOFFSET = "yOffset";
  const RADIUS = "radius";
  const RADIUS2 = "radius2";
  const THETA = "theta";
  const THETA2 = "theta2";
  const LATITUDE = "latitude";
  const LONGITUDE = "longitude";
  const LATITUDE2 = "latitude2";
  const LONGITUDE2 = "longitude2";
  const TIME = "time";
  const COLOR = "color";
  const FILL = "fill";
  const STROKE = "stroke";
  const SHAPE = "shape";
  const SIZE = "size";
  const ANGLE = "angle";
  const OPACITY = "opacity";
  const FILLOPACITY = "fillOpacity";
  const STROKEOPACITY = "strokeOpacity";
  const STROKEWIDTH = "strokeWidth";
  const STROKEDASH = "strokeDash";
  const TEXT$1 = "text";
  const ORDER = "order";
  const DETAIL = "detail";
  const KEY = "key";
  const TOOLTIP = "tooltip";
  const HREF = "href";
  const URL$1 = "url";
  const DESCRIPTION = "description";
  const POSITION_CHANNEL_INDEX = {
    x: 1,
    y: 1,
    x2: 1,
    y2: 1
  };
  const POLAR_POSITION_CHANNEL_INDEX = {
    theta: 1,
    theta2: 1,
    radius: 1,
    radius2: 1
  };
  function isPolarPositionChannel(c2) {
    return has$1(POLAR_POSITION_CHANNEL_INDEX, c2);
  }
  const GEO_POSIITON_CHANNEL_INDEX = {
    longitude: 1,
    longitude2: 1,
    latitude: 1,
    latitude2: 1
  };
  function getPositionChannelFromLatLong(channel) {
    switch (channel) {
      case LATITUDE:
        return "y";
      case LATITUDE2:
        return "y2";
      case LONGITUDE:
        return "x";
      case LONGITUDE2:
        return "x2";
    }
  }
  function isGeoPositionChannel(c2) {
    return has$1(GEO_POSIITON_CHANNEL_INDEX, c2);
  }
  const GEOPOSITION_CHANNELS = keys(GEO_POSIITON_CHANNEL_INDEX);
  const UNIT_CHANNEL_INDEX = {
    ...POSITION_CHANNEL_INDEX,
    ...POLAR_POSITION_CHANNEL_INDEX,
    ...GEO_POSIITON_CHANNEL_INDEX,
    xOffset: 1,
    yOffset: 1,
    // color
    color: 1,
    fill: 1,
    stroke: 1,
    // time
    time: 1,
    // other non-position with scale
    opacity: 1,
    fillOpacity: 1,
    strokeOpacity: 1,
    strokeWidth: 1,
    strokeDash: 1,
    size: 1,
    angle: 1,
    shape: 1,
    // channels without scales
    order: 1,
    text: 1,
    detail: 1,
    key: 1,
    tooltip: 1,
    href: 1,
    url: 1,
    description: 1
  };
  function isColorChannel(channel) {
    return channel === COLOR || channel === FILL || channel === STROKE;
  }
  const FACET_CHANNEL_INDEX = {
    row: 1,
    column: 1,
    facet: 1
  };
  const FACET_CHANNELS = keys(FACET_CHANNEL_INDEX);
  const CHANNEL_INDEX = {
    ...UNIT_CHANNEL_INDEX,
    ...FACET_CHANNEL_INDEX
  };
  const CHANNELS = keys(CHANNEL_INDEX);
  const { order: _o, detail: _d, tooltip: _tt1, ...SINGLE_DEF_CHANNEL_INDEX } = CHANNEL_INDEX;
  const { row: _r, column: _c, facet: _f, ...SINGLE_DEF_UNIT_CHANNEL_INDEX } = SINGLE_DEF_CHANNEL_INDEX;
  function isSingleDefUnitChannel(str) {
    return has$1(SINGLE_DEF_UNIT_CHANNEL_INDEX, str);
  }
  function isChannel(str) {
    return has$1(CHANNEL_INDEX, str);
  }
  const SECONDARY_RANGE_CHANNEL = [X2, Y2, LATITUDE2, LONGITUDE2, THETA2, RADIUS2];
  function isSecondaryRangeChannel(c2) {
    const main2 = getMainRangeChannel(c2);
    return main2 !== c2;
  }
  function getMainRangeChannel(channel) {
    switch (channel) {
      case X2:
        return X;
      case Y2:
        return Y;
      case LATITUDE2:
        return LATITUDE;
      case LONGITUDE2:
        return LONGITUDE;
      case THETA2:
        return THETA;
      case RADIUS2:
        return RADIUS;
    }
    return channel;
  }
  function getVgPositionChannel(channel) {
    if (isPolarPositionChannel(channel)) {
      switch (channel) {
        case THETA:
          return "startAngle";
        case THETA2:
          return "endAngle";
        case RADIUS:
          return "outerRadius";
        case RADIUS2:
          return "innerRadius";
      }
    }
    return channel;
  }
  function getSecondaryRangeChannel(channel) {
    switch (channel) {
      case X:
        return X2;
      case Y:
        return Y2;
      case LATITUDE:
        return LATITUDE2;
      case LONGITUDE:
        return LONGITUDE2;
      case THETA:
        return THETA2;
      case RADIUS:
        return RADIUS2;
    }
    return void 0;
  }
  function getSizeChannel(channel) {
    switch (channel) {
      case X:
      case X2:
        return "width";
      case Y:
      case Y2:
        return "height";
    }
    return void 0;
  }
  function getOffsetChannel(channel) {
    switch (channel) {
      case X:
        return "xOffset";
      case Y:
        return "yOffset";
      case X2:
        return "x2Offset";
      case Y2:
        return "y2Offset";
      case THETA:
        return "thetaOffset";
      case RADIUS:
        return "radiusOffset";
      case THETA2:
        return "theta2Offset";
      case RADIUS2:
        return "radius2Offset";
    }
    return void 0;
  }
  function getOffsetScaleChannel(channel) {
    switch (channel) {
      case X:
        return "xOffset";
      case Y:
        return "yOffset";
    }
    return void 0;
  }
  function getMainChannelFromOffsetChannel(channel) {
    switch (channel) {
      case "xOffset":
        return "x";
      case "yOffset":
        return "y";
    }
  }
  const UNIT_CHANNELS = keys(UNIT_CHANNEL_INDEX);
  const {
    x: _x,
    y: _y,
    // x2 and y2 share the same scale as x and y
    x2: _x2,
    y2: _y2,
    //
    xOffset: _xo,
    yOffset: _yo,
    latitude: _latitude,
    longitude: _longitude,
    latitude2: _latitude2,
    longitude2: _longitude2,
    theta: _theta,
    theta2: _theta2,
    radius: _radius,
    radius2: _radius2,
    // The rest of unit channels then have scale
    ...NONPOSITION_CHANNEL_INDEX
  } = UNIT_CHANNEL_INDEX;
  const NONPOSITION_CHANNELS = keys(NONPOSITION_CHANNEL_INDEX);
  const POSITION_SCALE_CHANNEL_INDEX = {
    x: 1,
    y: 1
  };
  const POSITION_SCALE_CHANNELS = keys(POSITION_SCALE_CHANNEL_INDEX);
  function isXorY(channel) {
    return has$1(POSITION_SCALE_CHANNEL_INDEX, channel);
  }
  const POLAR_POSITION_SCALE_CHANNEL_INDEX = {
    theta: 1,
    radius: 1
  };
  const POLAR_POSITION_SCALE_CHANNELS = keys(POLAR_POSITION_SCALE_CHANNEL_INDEX);
  function getPositionScaleChannel(sizeType) {
    return sizeType === "width" ? X : Y;
  }
  const OFFSET_SCALE_CHANNEL_INDEX = { xOffset: 1, yOffset: 1 };
  function isXorYOffset(channel) {
    return has$1(OFFSET_SCALE_CHANNEL_INDEX, channel);
  }
  const TIME_SCALE_CHANNEL_INDEX = {
    time: 1
  };
  function isTime(channel) {
    return channel in TIME_SCALE_CHANNEL_INDEX;
  }
  const {
    // x2 and y2 share the same scale as x and y
    // text and tooltip have format instead of scale,
    // href has neither format, nor scale
    text: _t,
    tooltip: _tt,
    href: _hr,
    url: _u,
    description: _al,
    // detail and order have no scale
    detail: _dd,
    key: _k,
    order: _oo,
    ...NONPOSITION_SCALE_CHANNEL_INDEX
  } = NONPOSITION_CHANNEL_INDEX;
  const NONPOSITION_SCALE_CHANNELS = keys(NONPOSITION_SCALE_CHANNEL_INDEX);
  function isNonPositionScaleChannel(channel) {
    return has$1(NONPOSITION_CHANNEL_INDEX, channel);
  }
  function supportLegend(channel) {
    switch (channel) {
      case COLOR:
      case FILL:
      case STROKE:
      case SIZE:
      case SHAPE:
      case OPACITY:
      case STROKEWIDTH:
      case STROKEDASH:
        return true;
      case FILLOPACITY:
      case STROKEOPACITY:
      case ANGLE:
      case TIME:
        return false;
    }
  }
  const SCALE_CHANNEL_INDEX = {
    ...POSITION_SCALE_CHANNEL_INDEX,
    ...POLAR_POSITION_SCALE_CHANNEL_INDEX,
    ...OFFSET_SCALE_CHANNEL_INDEX,
    ...NONPOSITION_SCALE_CHANNEL_INDEX
  };
  const SCALE_CHANNELS = keys(SCALE_CHANNEL_INDEX);
  function isScaleChannel(channel) {
    return has$1(SCALE_CHANNEL_INDEX, channel);
  }
  function supportMark(channel, mark) {
    return getSupportedMark(channel)[mark];
  }
  const ALL_MARKS = {
    // all marks
    arc: "always",
    area: "always",
    bar: "always",
    circle: "always",
    geoshape: "always",
    image: "always",
    line: "always",
    rule: "always",
    point: "always",
    rect: "always",
    square: "always",
    trail: "always",
    text: "always",
    tick: "always"
  };
  const { geoshape: _g, ...ALL_MARKS_EXCEPT_GEOSHAPE } = ALL_MARKS;
  function getSupportedMark(channel) {
    switch (channel) {
      case COLOR:
      case FILL:
      case STROKE:
      case DESCRIPTION:
      case DETAIL:
      case KEY:
      case TOOLTIP:
      case HREF:
      case ORDER:
      case OPACITY:
      case FILLOPACITY:
      case STROKEOPACITY:
      case STROKEWIDTH:
      case FACET:
      case ROW:
      case COLUMN:
        return ALL_MARKS;
      case X:
      case Y:
      case XOFFSET:
      case YOFFSET:
      case LATITUDE:
      case LONGITUDE:
      case TIME:
        return ALL_MARKS_EXCEPT_GEOSHAPE;
      case X2:
      case Y2:
      case LATITUDE2:
      case LONGITUDE2:
        return {
          area: "always",
          bar: "always",
          image: "always",
          rect: "always",
          rule: "always",
          circle: "binned",
          point: "binned",
          square: "binned",
          tick: "binned",
          line: "binned",
          trail: "binned"
        };
      case SIZE:
        return {
          point: "always",
          tick: "always",
          rule: "always",
          circle: "always",
          square: "always",
          bar: "always",
          text: "always",
          line: "always",
          trail: "always"
        };
      case STROKEDASH:
        return {
          line: "always",
          point: "always",
          tick: "always",
          rule: "always",
          circle: "always",
          square: "always",
          bar: "always",
          geoshape: "always"
        };
      case SHAPE:
        return { point: "always", geoshape: "always" };
      case TEXT$1:
        return { text: "always" };
      case ANGLE:
        return { point: "always", square: "always", text: "always" };
      case URL$1:
        return { image: "always" };
      case THETA:
        return { text: "always", arc: "always" };
      case RADIUS:
        return { text: "always", arc: "always" };
      case THETA2:
      case RADIUS2:
        return { arc: "always" };
    }
  }
  function rangeType(channel) {
    switch (channel) {
      case X:
      case Y:
      case THETA:
      case RADIUS:
      case XOFFSET:
      case YOFFSET:
      case SIZE:
      case ANGLE:
      case STROKEWIDTH:
      case OPACITY:
      case FILLOPACITY:
      case STROKEOPACITY:
      case TIME:
      case X2:
      case Y2:
      case THETA2:
      case RADIUS2:
        return void 0;
      case FACET:
      case ROW:
      case COLUMN:
      case SHAPE:
      case STROKEDASH:
      case TEXT$1:
      case TOOLTIP:
      case HREF:
      case URL$1:
      case DESCRIPTION:
        return "discrete";
      case COLOR:
      case FILL:
      case STROKE:
        return "flexible";
      case LATITUDE:
      case LONGITUDE:
      case LATITUDE2:
      case LONGITUDE2:
      case DETAIL:
      case KEY:
      case ORDER:
        return void 0;
    }
  }
  const AGGREGATE_OP_INDEX = {
    argmax: 1,
    argmin: 1,
    average: 1,
    count: 1,
    distinct: 1,
    exponential: 1,
    exponentialb: 1,
    product: 1,
    max: 1,
    mean: 1,
    median: 1,
    min: 1,
    missing: 1,
    q1: 1,
    q3: 1,
    ci0: 1,
    ci1: 1,
    stderr: 1,
    stdev: 1,
    stdevp: 1,
    sum: 1,
    valid: 1,
    values: 1,
    variance: 1,
    variancep: 1
  };
  const MULTIDOMAIN_SORT_OP_INDEX = {
    count: 1,
    min: 1,
    max: 1
  };
  function isArgminDef(a2) {
    return hasProperty(a2, "argmin");
  }
  function isArgmaxDef(a2) {
    return hasProperty(a2, "argmax");
  }
  function isAggregateOp(a2) {
    return isString(a2) && has$1(AGGREGATE_OP_INDEX, a2);
  }
  const COUNTING_OPS = /* @__PURE__ */ new Set([
    "count",
    "valid",
    "missing",
    "distinct"
  ]);
  function isCountingAggregateOp(aggregate) {
    return isString(aggregate) && COUNTING_OPS.has(aggregate);
  }
  function isMinMaxOp(aggregate) {
    return isString(aggregate) && contains(["min", "max"], aggregate);
  }
  const SUM_OPS = /* @__PURE__ */ new Set([
    "count",
    "sum",
    "distinct",
    "valid",
    "missing"
  ]);
  const SHARED_DOMAIN_OPS = /* @__PURE__ */ new Set([
    "mean",
    "average",
    "median",
    "q1",
    "q3",
    "min",
    "max"
  ]);
  function binToString(bin2) {
    if (isBoolean$2(bin2)) {
      bin2 = normalizeBin(bin2, void 0);
    }
    return "bin" + keys(bin2).map((p) => isParameterExtent(bin2[p]) ? varName(`_${p}_${entries$1(bin2[p])}`) : varName(`_${p}_${bin2[p]}`)).join("");
  }
  function isBinning(bin2) {
    return bin2 === true || isBinParams(bin2) && !bin2.binned;
  }
  function isBinned(bin2) {
    return bin2 === "binned" || isBinParams(bin2) && bin2.binned === true;
  }
  function isBinParams(bin2) {
    return isObject(bin2);
  }
  function isParameterExtent(extent2) {
    return hasProperty(extent2, "param");
  }
  function autoMaxBins(channel) {
    switch (channel) {
      case ROW:
      case COLUMN:
      case SIZE:
      case COLOR:
      case FILL:
      case STROKE:
      case STROKEWIDTH:
      case OPACITY:
      case FILLOPACITY:
      case STROKEOPACITY:
      case SHAPE:
        return 6;
      case STROKEDASH:
        return 4;
      default:
        return 10;
    }
  }
  function isExprRef(o) {
    return hasProperty(o, "expr");
  }
  function replaceExprRef(index2, { level } = { level: 0 }) {
    const props = keys(index2 || {});
    const newIndex = {};
    for (const prop of props) {
      newIndex[prop] = level === 0 ? signalRefOrValue(index2[prop]) : replaceExprRef(index2[prop], { level: level - 1 });
    }
    return newIndex;
  }
  function extractTitleConfig(titleConfig) {
    const {
      // These are non-mark title config that need to be hardcoded
      anchor,
      frame: frame2,
      offset: offset2,
      orient: orient2,
      angle: angle2,
      limit,
      // color needs to be redirect to fill
      color: color2,
      // subtitle properties
      subtitleColor,
      subtitleFont,
      subtitleFontSize,
      subtitleFontStyle,
      subtitleFontWeight,
      subtitleLineHeight,
      subtitlePadding,
      // The rest are mark config.
      ...rest
    } = titleConfig;
    const titleMarkConfig = {
      ...rest,
      ...color2 ? { fill: color2 } : {}
    };
    const nonMarkTitleProperties = {
      ...anchor ? { anchor } : {},
      ...frame2 ? { frame: frame2 } : {},
      ...offset2 ? { offset: offset2 } : {},
      ...orient2 ? { orient: orient2 } : {},
      ...angle2 !== void 0 ? { angle: angle2 } : {},
      ...limit !== void 0 ? { limit } : {}
    };
    const subtitle = {
      ...subtitleColor ? { subtitleColor } : {},
      ...subtitleFont ? { subtitleFont } : {},
      ...subtitleFontSize ? { subtitleFontSize } : {},
      ...subtitleFontStyle ? { subtitleFontStyle } : {},
      ...subtitleFontWeight ? { subtitleFontWeight } : {},
      ...subtitleLineHeight ? { subtitleLineHeight } : {},
      ...subtitlePadding ? { subtitlePadding } : {}
    };
    const subtitleMarkConfig = pick(titleConfig, ["align", "baseline", "dx", "dy", "limit"]);
    return { titleMarkConfig, subtitleMarkConfig, nonMarkTitleProperties, subtitle };
  }
  function isText(v) {
    return isString(v) || isArray(v) && isString(v[0]);
  }
  function isSignalRef(o) {
    return hasProperty(o, "signal");
  }
  function isVgRangeStep(range2) {
    return hasProperty(range2, "step");
  }
  function isDataRefUnionedDomain(domain2) {
    if (!isArray(domain2)) {
      return hasProperty(domain2, "fields") && !hasProperty(domain2, "data");
    }
    return false;
  }
  function isFieldRefUnionDomain(domain2) {
    if (!isArray(domain2)) {
      return hasProperty(domain2, "fields") && hasProperty(domain2, "data");
    }
    return false;
  }
  function isDataRefDomain(domain2) {
    if (!isArray(domain2)) {
      return hasProperty(domain2, "field") && hasProperty(domain2, "data");
    }
    return false;
  }
  const VG_MARK_CONFIG_INDEX = {
    aria: 1,
    description: 1,
    ariaRole: 1,
    ariaRoleDescription: 1,
    blend: 1,
    opacity: 1,
    fill: 1,
    fillOpacity: 1,
    stroke: 1,
    strokeCap: 1,
    strokeWidth: 1,
    strokeOpacity: 1,
    strokeDash: 1,
    strokeDashOffset: 1,
    strokeJoin: 1,
    strokeOffset: 1,
    strokeMiterLimit: 1,
    startAngle: 1,
    endAngle: 1,
    padAngle: 1,
    innerRadius: 1,
    outerRadius: 1,
    size: 1,
    shape: 1,
    interpolate: 1,
    tension: 1,
    orient: 1,
    align: 1,
    baseline: 1,
    text: 1,
    dir: 1,
    dx: 1,
    dy: 1,
    ellipsis: 1,
    limit: 1,
    radius: 1,
    theta: 1,
    angle: 1,
    font: 1,
    fontSize: 1,
    fontWeight: 1,
    fontStyle: 1,
    lineBreak: 1,
    lineHeight: 1,
    cursor: 1,
    href: 1,
    tooltip: 1,
    cornerRadius: 1,
    cornerRadiusTopLeft: 1,
    cornerRadiusTopRight: 1,
    cornerRadiusBottomLeft: 1,
    cornerRadiusBottomRight: 1,
    aspect: 1,
    width: 1,
    height: 1,
    url: 1,
    smooth: 1
    // commented below are vg channel that do not have mark config.
    // x: 1,
    // y: 1,
    // x2: 1,
    // y2: 1,
    // xc'|'yc'
    // clip: 1,
    // path: 1,
    // url: 1,
  };
  const VG_MARK_CONFIGS = keys(VG_MARK_CONFIG_INDEX);
  const VG_MARK_INDEX = {
    arc: 1,
    area: 1,
    group: 1,
    image: 1,
    line: 1,
    path: 1,
    rect: 1,
    rule: 1,
    shape: 1,
    symbol: 1,
    text: 1,
    trail: 1
  };
  const VG_CORNERRADIUS_CHANNELS = [
    "cornerRadius",
    "cornerRadiusTopLeft",
    "cornerRadiusTopRight",
    "cornerRadiusBottomLeft",
    "cornerRadiusBottomRight"
  ];
  function signalOrValueRefWithCondition(val) {
    const condition = isArray(val.condition) ? val.condition.map(conditionalSignalRefOrValue) : conditionalSignalRefOrValue(val.condition);
    return {
      ...signalRefOrValue(val),
      condition
    };
  }
  function signalRefOrValue(value2) {
    if (isExprRef(value2)) {
      const { expr: expr2, ...rest } = value2;
      return { signal: expr2, ...rest };
    }
    return value2;
  }
  function conditionalSignalRefOrValue(value2) {
    if (isExprRef(value2)) {
      const { expr: expr2, ...rest } = value2;
      return { signal: expr2, ...rest };
    }
    return value2;
  }
  function signalOrValueRef(value2) {
    if (isExprRef(value2)) {
      const { expr: expr2, ...rest } = value2;
      return { signal: expr2, ...rest };
    }
    if (isSignalRef(value2)) {
      return value2;
    }
    return value2 !== void 0 ? { value: value2 } : void 0;
  }
  function exprFromSignalRefOrValue(ref2) {
    if (isSignalRef(ref2)) {
      return ref2.signal;
    }
    return $(ref2);
  }
  function exprFromValueRefOrSignalRef(ref2) {
    if (isSignalRef(ref2)) {
      return ref2.signal;
    }
    return $(ref2.value);
  }
  function signalOrStringValue(v) {
    if (isSignalRef(v)) {
      return v.signal;
    }
    return v == null ? null : $(v);
  }
  function applyMarkConfig(e3, model, propsList) {
    for (const property2 of propsList) {
      const value2 = getMarkConfig(property2, model.markDef, model.config);
      if (value2 !== void 0) {
        e3[property2] = signalOrValueRef(value2);
      }
    }
    return e3;
  }
  function getStyles(mark) {
    return [].concat(mark.type, mark.style ?? []);
  }
  function getMarkPropOrConfig(channel, mark, config, opt = {}) {
    const { vgChannel, ignoreVgConfig } = opt;
    if (vgChannel && hasProperty(mark, vgChannel)) {
      return mark[vgChannel];
    } else if (mark[channel] !== void 0) {
      return mark[channel];
    } else if (ignoreVgConfig && (!vgChannel || vgChannel === channel)) {
      return void 0;
    }
    return getMarkConfig(channel, mark, config, opt);
  }
  function getMarkConfig(channel, mark, config, { vgChannel } = {}) {
    const cfg = getMarkStyleConfig(channel, mark, config.style);
    return getFirstDefined(
      // style config has highest precedence
      vgChannel ? cfg : void 0,
      cfg,
      // then mark-specific config
      vgChannel ? config[mark.type][vgChannel] : void 0,
      config[mark.type][channel],
      // Need to cast because MarkDef doesn't perfectly match with AnyMarkConfig, but if the type isn't available, we'll get nothing here, which is fine
      // If there is vgChannel, skip vl channel.
      // For example, vl size for text is vg fontSize, but config.mark.size is only for point size.
      vgChannel ? config.mark[vgChannel] : config.mark[channel]
      // Need to cast for the same reason as above
    );
  }
  function getMarkStyleConfig(prop, mark, styleConfigIndex) {
    return getStyleConfig(prop, getStyles(mark), styleConfigIndex);
  }
  function getStyleConfig(p, styles, styleConfigIndex) {
    styles = array$5(styles);
    let value2;
    for (const style2 of styles) {
      const styleConfig = styleConfigIndex[style2];
      if (hasProperty(styleConfig, p)) {
        value2 = styleConfig[p];
      }
    }
    return value2;
  }
  function sortParams(orderDef, fieldRefOption) {
    return array$5(orderDef).reduce((s, orderChannelDef) => {
      s.field.push(vgField(orderChannelDef, fieldRefOption));
      s.order.push(orderChannelDef.sort ?? "ascending");
      return s;
    }, { field: [], order: [] });
  }
  function mergeTitleFieldDefs(f1, f2) {
    const merged = [...f1];
    f2.forEach((fdToMerge) => {
      for (const fieldDef1 of merged) {
        if (deepEqual(fieldDef1, fdToMerge)) {
          return;
        }
      }
      merged.push(fdToMerge);
    });
    return merged;
  }
  function mergeTitle(title1, title2) {
    if (deepEqual(title1, title2) || !title2) {
      return title1;
    } else if (!title1) {
      return title2;
    } else {
      return [...array$5(title1), ...array$5(title2)].join(", ");
    }
  }
  function mergeTitleComponent(v1, v2) {
    const v1Val = v1.value;
    const v2Val = v2.value;
    if (v1Val == null || v2Val === null) {
      return {
        explicit: v1.explicit,
        value: null
      };
    } else if ((isText(v1Val) || isSignalRef(v1Val)) && (isText(v2Val) || isSignalRef(v2Val))) {
      return {
        explicit: v1.explicit,
        value: mergeTitle(v1Val, v2Val)
      };
    } else if (isText(v1Val) || isSignalRef(v1Val)) {
      return {
        explicit: v1.explicit,
        value: v1Val
      };
    } else if (isText(v2Val) || isSignalRef(v2Val)) {
      return {
        explicit: v1.explicit,
        value: v2Val
      };
    } else if (!isText(v1Val) && !isSignalRef(v1Val) && !isText(v2Val) && !isSignalRef(v2Val)) {
      return {
        explicit: v1.explicit,
        value: mergeTitleFieldDefs(v1Val, v2Val)
      };
    }
    throw new Error("It should never reach here");
  }
  function invalidSpec(spec) {
    return `Invalid specification ${stringify$1(spec)}. Make sure the specification includes at least one of the following properties: "mark", "layer", "facet", "hconcat", "vconcat", "concat", or "repeat".`;
  }
  const FIT_NON_SINGLE = 'Autosize "fit" only works for single views and layered views.';
  function containerSizeNonSingle(name) {
    const uName = name == "width" ? "Width" : "Height";
    return `${uName} "container" only works for single views and layered views.`;
  }
  function containerSizeNotCompatibleWithAutosize(name) {
    const uName = name == "width" ? "Width" : "Height";
    const fitDirection = name == "width" ? "x" : "y";
    return `${uName} "container" only works well with autosize "fit" or "fit-${fitDirection}".`;
  }
  function droppingFit(channel) {
    return channel ? `Dropping "fit-${channel}" because spec has discrete ${getSizeChannel(channel)}.` : `Dropping "fit" because spec has discrete size.`;
  }
  function unknownField(channel) {
    return `Unknown field for ${channel}. Cannot calculate view size.`;
  }
  function cannotProjectOnChannelWithoutField(channel) {
    return `Cannot project a selection on encoding channel "${channel}", which has no field.`;
  }
  function cannotProjectAggregate(channel, aggregate) {
    return `Cannot project a selection on encoding channel "${channel}" as it uses an aggregate function ("${aggregate}").`;
  }
  function nearestNotSupportForContinuous(mark) {
    return `The "nearest" transform is not supported for ${mark} marks.`;
  }
  function selectionNotSupported(mark) {
    return `Selection not supported for ${mark} yet.`;
  }
  function selectionNotFound(name) {
    return `Cannot find a selection named "${name}".`;
  }
  const SCALE_BINDINGS_CONTINUOUS = "Scale bindings are currently only supported for scales with unbinned, continuous domains.";
  const SEQUENTIAL_SCALE_DEPRECATED = "Sequntial scales are deprecated. The available quantitative scale type values are linear, log, pow, sqrt, symlog, time and utc";
  const LEGEND_BINDINGS_MUST_HAVE_PROJECTION = "Legend bindings are only supported for selections over an individual field or encoding channel.";
  function cannotLookupVariableParameter(name) {
    return `Lookups can only be performed on selection parameters. "${name}" is a variable parameter.`;
  }
  function noSameUnitLookup(name) {
    return `Cannot define and lookup the "${name}" selection in the same view. Try moving the lookup into a second, layered view?`;
  }
  const NEEDS_SAME_SELECTION = "The same selection must be used to override scale domains in a layered view.";
  const INTERVAL_INITIALIZED_WITH_POS = 'Interval selections should be initialized using "x", "y", "longitude", or "latitude" keys.';
  function noSuchRepeatedValue(field2) {
    return `Unknown repeated value "${field2}".`;
  }
  function columnsNotSupportByRowCol(type2) {
    return `The "columns" property cannot be used when "${type2}" has nested row/column.`;
  }
  const MULTIPLE_TIMER_ANIMATION_SELECTION = "Multiple timer selections in one unit spec are not supported. Ignoring all but the first.";
  const MULTI_VIEW_ANIMATION_UNSUPPORTED = "Animation involving facet, layer, or concat is currently unsupported.";
  function selectionAsScaleDomainWithoutField(field2) {
    return `A "field" or "encoding" must be specified when using a selection as a scale domain. Using "field": ${$(field2)}.`;
  }
  function selectionAsScaleDomainWrongEncodings(encodings, encoding, extent2, field2) {
    return (!encodings.length ? "No " : "Multiple ") + `matching ${$(encoding)} encoding found for selection ${$(extent2.param)}. Using "field": ${$(field2)}.`;
  }
  const CONCAT_CANNOT_SHARE_AXIS = "Axes cannot be shared in concatenated or repeated views yet (https://github.com/vega/vega-lite/issues/2415).";
  function unrecognizedParse(p) {
    return `Unrecognized parse "${p}".`;
  }
  function differentParse(field2, local, ancestor) {
    return `An ancestor parsed field "${field2}" as ${ancestor} but a child wants to parse the field as ${local}.`;
  }
  const ADD_SAME_CHILD_TWICE = "Attempt to add the same child twice.";
  function invalidTransformIgnored(transform2) {
    return `Ignoring an invalid transform: ${stringify$1(transform2)}.`;
  }
  const NO_FIELDS_NEEDS_AS = 'If "from.fields" is not specified, "as" has to be a string that specifies the key to be used for the data from the secondary source.';
  function customFormatTypeNotAllowed(channel) {
    return `Config.customFormatTypes is not true, thus custom format type and format for channel ${channel} are dropped.`;
  }
  function projectionOverridden(opt) {
    const { parentProjection, projection: projection2 } = opt;
    return `Layer's shared projection ${stringify$1(parentProjection)} is overridden by a child projection ${stringify$1(projection2)}.`;
  }
  const REPLACE_ANGLE_WITH_THETA = "Arc marks uses theta channel rather than angle, replacing angle with theta.";
  function offsetNestedInsideContinuousPositionScaleDropped(mainChannel) {
    return `${mainChannel}Offset dropped because ${mainChannel} is continuous`;
  }
  function primitiveChannelDef(channel, type2, value2) {
    return `Channel ${channel} is a ${type2}. Converted to {value: ${stringify$1(value2)}}.`;
  }
  function invalidFieldType(type2) {
    return `Invalid field type "${type2}".`;
  }
  function invalidFieldTypeForCountAggregate(type2, aggregate) {
    return `Invalid field type "${type2}" for aggregate: "${aggregate}", using "quantitative" instead.`;
  }
  function invalidAggregate(aggregate) {
    return `Invalid aggregation operator "${aggregate}".`;
  }
  function droppingColor(type2, opt) {
    const { fill: fill2, stroke: stroke2 } = opt;
    return `Dropping color ${type2} as the plot also has ${fill2 && stroke2 ? "fill and stroke" : fill2 ? "fill" : "stroke"}.`;
  }
  function relativeBandSizeNotSupported(sizeChannel) {
    return `Position range does not support relative band size for ${sizeChannel}.`;
  }
  function emptyFieldDef(fieldDef, channel) {
    return `Dropping ${stringify$1(fieldDef)} from channel "${channel}" since it does not contain any data field, datum, value, or signal.`;
  }
  const LINE_WITH_VARYING_SIZE = "Line marks cannot encode size with a non-groupby field. You may want to use trail marks instead.";
  function incompatibleChannel(channel, markOrFacet, when) {
    return `${channel} dropped as it is incompatible with "${markOrFacet}"${""}.`;
  }
  function invalidEncodingChannel(channel) {
    return `${channel}-encoding is dropped as ${channel} is not a valid encoding channel.`;
  }
  function channelShouldBeDiscrete(channel) {
    return `${channel} encoding should be discrete (ordinal / nominal / binned).`;
  }
  function channelShouldBeDiscreteOrDiscretizing(channel) {
    return `${channel} encoding should be discrete (ordinal / nominal / binned) or use a discretizing scale (e.g. threshold).`;
  }
  function facetChannelDropped(channels) {
    return `Facet encoding dropped as ${channels.join(" and ")} ${channels.length > 1 ? "are" : "is"} also specified.`;
  }
  function discreteChannelCannotEncode(channel, type2) {
    return `Using discrete channel "${channel}" to encode "${type2}" field can be misleading as it does not encode ${type2 === "ordinal" ? "order" : "magnitude"}.`;
  }
  function rangeMarkAlignmentCannotBeExpression(align2) {
    return `The ${align2} for range marks cannot be an expression`;
  }
  function lineWithRange(hasX2, hasY2) {
    const channels = hasX2 && hasY2 ? "x2 and y2" : hasX2 ? "x2" : "y2";
    return `Line mark is for continuous lines and thus cannot be used with ${channels}. We will use the rule mark (line segments) instead.`;
  }
  function orientOverridden(original, actual) {
    return `Specified orient "${original}" overridden with "${actual}".`;
  }
  function cannotUseScalePropertyWithNonColor(prop) {
    return `Cannot use the scale property "${prop}" with non-color channel.`;
  }
  function cannotUseRelativeBandSizeWithNonBandScale(scaleType2) {
    return `Cannot use the relative band size with ${scaleType2} scale.`;
  }
  function unaggregateDomainHasNoEffectForRawField(fieldDef) {
    return `Using unaggregated domain with raw field has no effect (${stringify$1(fieldDef)}).`;
  }
  function unaggregateDomainWithNonSharedDomainOp(aggregate) {
    return `Unaggregated domain not applicable for "${aggregate}" since it produces values outside the origin domain of the source data.`;
  }
  function unaggregatedDomainWithLogScale(fieldDef) {
    return `Unaggregated domain is currently unsupported for log scale (${stringify$1(fieldDef)}).`;
  }
  function cannotApplySizeToNonOrientedMark(mark) {
    return `Cannot apply size to non-oriented mark "${mark}".`;
  }
  function scaleTypeNotWorkWithChannel(channel, scaleType2, defaultScaleType) {
    return `Channel "${channel}" does not work with "${scaleType2}" scale. We are using "${defaultScaleType}" scale instead.`;
  }
  function scaleTypeNotWorkWithFieldDef(scaleType2, defaultScaleType) {
    return `FieldDef does not work with "${scaleType2}" scale. We are using "${defaultScaleType}" scale instead.`;
  }
  function scalePropertyNotWorkWithScaleType(scaleType2, propName, channel) {
    return `${channel}-scale's "${propName}" is dropped as it does not work with ${scaleType2} scale.`;
  }
  function stepDropped(channel) {
    return `The step for "${channel}" is dropped because the ${channel === "width" ? "x" : "y"} is continuous.`;
  }
  function mergeConflictingProperty(property2, propertyOf, v1, v2) {
    return `Conflicting ${propertyOf.toString()} property "${property2.toString()}" (${stringify$1(v1)} and ${stringify$1(v2)}). Using ${stringify$1(v1)}.`;
  }
  function mergeConflictingDomainProperty(property2, propertyOf, v1, v2) {
    return `Conflicting ${propertyOf.toString()} property "${property2.toString()}" (${stringify$1(v1)} and ${stringify$1(v2)}). Using the union of the two domains.`;
  }
  function independentScaleMeansIndependentGuide(channel) {
    return `Setting the scale to be independent for "${channel}" means we also have to set the guide (axis or legend) to be independent.`;
  }
  function domainSortDropped(sort2) {
    return `Dropping sort property ${stringify$1(sort2)} as unioned domains only support boolean or op "count", "min", and "max".`;
  }
  const MORE_THAN_ONE_SORT = "Domains that should be unioned has conflicting sort properties. Sort will be set to true.";
  const FACETED_INDEPENDENT_DIFFERENT_SOURCES = "Detected faceted independent scales that union domain of multiple fields from different data sources. We will use the first field. The result view size may be incorrect.";
  const FACETED_INDEPENDENT_SAME_FIELDS_DIFFERENT_SOURCES = "Detected faceted independent scales that union domain of the same fields from different source. We will assume that this is the same field from a different fork of the same data source. However, if this is not the case, the result view size may be incorrect.";
  const FACETED_INDEPENDENT_SAME_SOURCE = "Detected faceted independent scales that union domain of multiple fields from the same data source. We will use the first field. The result view size may be incorrect.";
  function cannotStackRangedMark(channel) {
    return `Cannot stack "${channel}" if there is already "${channel}2".`;
  }
  function stackNonLinearScale(scaleType2) {
    return `Stack is applied to a non-linear scale (${scaleType2}).`;
  }
  function stackNonSummativeAggregate(aggregate) {
    return `Stacking is applied even though the aggregate function is non-summative ("${aggregate}").`;
  }
  function invalidTimeUnit(unitName2, value2) {
    return `Invalid ${unitName2}: ${stringify$1(value2)}.`;
  }
  function droppedDay(d) {
    return `Dropping day from datetime ${stringify$1(d)} as day cannot be combined with other units.`;
  }
  function errorBarCenterAndExtentAreNotNeeded(center, extent2) {
    return `${extent2 ? "extent " : ""}${extent2 && center ? "and " : ""}${center ? "center " : ""}${extent2 && center ? "are " : "is "}not needed when data are aggregated.`;
  }
  function errorBarCenterIsUsedWithWrongExtent(center, extent2, mark) {
    return `${center} is not usually used with ${extent2} for ${mark}.`;
  }
  function errorBarContinuousAxisHasCustomizedAggregate(aggregate, compositeMark) {
    return `Continuous axis should not have customized aggregation function ${aggregate}; ${compositeMark} already agregates the axis.`;
  }
  function errorBand1DNotSupport(property2) {
    return `1D error band does not support ${property2}.`;
  }
  function channelRequiredForBinned(channel) {
    return `Channel ${channel} is required for "binned" bin.`;
  }
  function channelShouldNotBeUsedForBinned(channel) {
    return `Channel ${channel} should not be used with "binned" bin.`;
  }
  function domainRequiredForThresholdScale(channel) {
    return `Domain for ${channel} is required for threshold scale.`;
  }
  (function(receiver, state, value2, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return kind === "a" ? f.call(receiver, value2) : f ? f.value = value2 : state.set(receiver, value2), value2;
  });
  (function(receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
  });
  const main = logger(Warn);
  let current = main;
  function set(newLogger) {
    current = newLogger;
    return current;
  }
  function reset() {
    current = main;
    return current;
  }
  function error(...args) {
    current.error(...args);
  }
  function warn(...args) {
    current.warn(...args);
  }
  function debug(...args) {
    current.debug(...args);
  }
  function isDateTime(o) {
    if (o && isObject(o)) {
      for (const part of TIMEUNIT_PARTS) {
        if (hasProperty(o, part)) {
          return true;
        }
      }
    }
    return false;
  }
  const MONTHS = [
    "january",
    "february",
    "march",
    "april",
    "may",
    "june",
    "july",
    "august",
    "september",
    "october",
    "november",
    "december"
  ];
  const SHORT_MONTHS = MONTHS.map((m2) => m2.substr(0, 3));
  const DAYS = ["sunday", "monday", "tuesday", "wednesday", "thursday", "friday", "saturday"];
  const SHORT_DAYS = DAYS.map((d) => d.substr(0, 3));
  function normalizeQuarter(q) {
    if (isNumeric(q)) {
      q = +q;
    }
    if (isNumber$1(q)) {
      if (q > 4) {
        warn(invalidTimeUnit("quarter", q));
      }
      return q - 1;
    } else {
      throw new Error(invalidTimeUnit("quarter", q));
    }
  }
  function normalizeMonth(m2) {
    if (isNumeric(m2)) {
      m2 = +m2;
    }
    if (isNumber$1(m2)) {
      return m2 - 1;
    } else {
      const lowerM = m2.toLowerCase();
      const monthIndex = MONTHS.indexOf(lowerM);
      if (monthIndex !== -1) {
        return monthIndex;
      }
      const shortM = lowerM.substr(0, 3);
      const shortMonthIndex = SHORT_MONTHS.indexOf(shortM);
      if (shortMonthIndex !== -1) {
        return shortMonthIndex;
      }
      throw new Error(invalidTimeUnit("month", m2));
    }
  }
  function normalizeDay(d) {
    if (isNumeric(d)) {
      d = +d;
    }
    if (isNumber$1(d)) {
      return d % 7;
    } else {
      const lowerD = d.toLowerCase();
      const dayIndex = DAYS.indexOf(lowerD);
      if (dayIndex !== -1) {
        return dayIndex;
      }
      const shortD = lowerD.substr(0, 3);
      const shortDayIndex = SHORT_DAYS.indexOf(shortD);
      if (shortDayIndex !== -1) {
        return shortDayIndex;
      }
      throw new Error(invalidTimeUnit("day", d));
    }
  }
  function dateTimeParts(d, normalize2) {
    const parts = [];
    if (normalize2 && d.day !== void 0) {
      if (keys(d).length > 1) {
        warn(droppedDay(d));
        d = duplicate(d);
        delete d.day;
      }
    }
    if (d.year !== void 0) {
      parts.push(d.year);
    } else {
      parts.push(2012);
    }
    if (d.month !== void 0) {
      const month = normalize2 ? normalizeMonth(d.month) : d.month;
      parts.push(month);
    } else if (d.quarter !== void 0) {
      const quarter2 = normalize2 ? normalizeQuarter(d.quarter) : d.quarter;
      parts.push(isNumber$1(quarter2) ? quarter2 * 3 : `${quarter2}*3`);
    } else {
      parts.push(0);
    }
    if (d.date !== void 0) {
      parts.push(d.date);
    } else if (d.day !== void 0) {
      const day = normalize2 ? normalizeDay(d.day) : d.day;
      parts.push(isNumber$1(day) ? day + 1 : `${day}+1`);
    } else {
      parts.push(1);
    }
    for (const timeUnit of ["hours", "minutes", "seconds", "milliseconds"]) {
      const unit2 = d[timeUnit];
      parts.push(typeof unit2 === "undefined" ? 0 : unit2);
    }
    return parts;
  }
  function dateTimeToExpr(d) {
    const parts = dateTimeParts(d, true);
    const string2 = parts.join(", ");
    if (d.utc) {
      return `utc(${string2})`;
    } else {
      return `datetime(${string2})`;
    }
  }
  function dateTimeExprToExpr(d) {
    const parts = dateTimeParts(d, false);
    const string2 = parts.join(", ");
    if (d.utc) {
      return `utc(${string2})`;
    } else {
      return `datetime(${string2})`;
    }
  }
  function dateTimeToTimestamp(d) {
    const parts = dateTimeParts(d, true);
    if (d.utc) {
      return +new Date(Date.UTC(...parts));
    } else {
      return +new Date(...parts);
    }
  }
  const LOCAL_SINGLE_TIMEUNIT_INDEX = {
    year: 1,
    quarter: 1,
    month: 1,
    week: 1,
    day: 1,
    dayofyear: 1,
    date: 1,
    hours: 1,
    minutes: 1,
    seconds: 1,
    milliseconds: 1
  };
  const TIMEUNIT_PARTS = keys(LOCAL_SINGLE_TIMEUNIT_INDEX);
  function isLocalSingleTimeUnit(timeUnit) {
    return has$1(LOCAL_SINGLE_TIMEUNIT_INDEX, timeUnit);
  }
  function isBinnedTimeUnit(timeUnit) {
    if (isObject(timeUnit)) {
      return timeUnit.binned;
    }
    return isBinnedTimeUnitString(timeUnit);
  }
  function isBinnedTimeUnitString(timeUnit) {
    return timeUnit && timeUnit.startsWith("binned");
  }
  function isUTCTimeUnit(t) {
    return t.startsWith("utc");
  }
  function getLocalTimeUnitFromUTCTimeUnit(t) {
    return t.substring(3);
  }
  const VEGALITE_TIMEFORMAT = {
    "year-month": "%b %Y ",
    "year-month-date": "%b %d, %Y "
  };
  function getTimeUnitParts(timeUnit) {
    return TIMEUNIT_PARTS.filter((part) => containsTimeUnit(timeUnit, part));
  }
  function getSmallestTimeUnitPart(timeUnit) {
    const parts = getTimeUnitParts(timeUnit);
    return parts[parts.length - 1];
  }
  function containsTimeUnit(fullTimeUnit, timeUnit) {
    const index2 = fullTimeUnit.indexOf(timeUnit);
    if (index2 < 0) {
      return false;
    }
    if (index2 > 0 && timeUnit === "seconds" && fullTimeUnit.charAt(index2 - 1) === "i") {
      return false;
    }
    if (fullTimeUnit.length > index2 + 3 && timeUnit === "day" && fullTimeUnit.charAt(index2 + 3) === "o") {
      return false;
    }
    if (index2 > 0 && timeUnit === "year" && fullTimeUnit.charAt(index2 - 1) === "f") {
      return false;
    }
    return true;
  }
  function fieldExpr(fullTimeUnit, field2, { end } = { end: false }) {
    const fieldRef2 = accessPathWithDatum(field2);
    const utc = isUTCTimeUnit(fullTimeUnit) ? "utc" : "";
    function func(timeUnit) {
      if (timeUnit === "quarter") {
        return `(${utc}quarter(${fieldRef2})-1)`;
      } else {
        return `${utc}${timeUnit}(${fieldRef2})`;
      }
    }
    let lastTimeUnit;
    const dateExpr = {};
    for (const part of TIMEUNIT_PARTS) {
      if (containsTimeUnit(fullTimeUnit, part)) {
        dateExpr[part] = func(part);
        lastTimeUnit = part;
      }
    }
    if (end) {
      dateExpr[lastTimeUnit] += "+1";
    }
    return dateTimeExprToExpr(dateExpr);
  }
  function timeUnitSpecifierExpression(timeUnit) {
    if (!timeUnit) {
      return void 0;
    }
    const timeUnitParts = getTimeUnitParts(timeUnit);
    return `timeUnitSpecifier(${stringify$1(timeUnitParts)}, ${stringify$1(VEGALITE_TIMEFORMAT)})`;
  }
  function formatExpression(timeUnit, field2, isUTCScale) {
    if (!timeUnit) {
      return void 0;
    }
    const expr2 = timeUnitSpecifierExpression(timeUnit);
    const utc = isUTCScale || isUTCTimeUnit(timeUnit);
    return `${utc ? "utc" : "time"}Format(${field2}, ${expr2})`;
  }
  function normalizeTimeUnit(timeUnit) {
    if (!timeUnit) {
      return void 0;
    }
    let params2;
    if (isString(timeUnit)) {
      if (isBinnedTimeUnitString(timeUnit)) {
        params2 = {
          unit: timeUnit.substring(6),
          binned: true
        };
      } else {
        params2 = {
          unit: timeUnit
        };
      }
    } else if (isObject(timeUnit)) {
      params2 = {
        ...timeUnit,
        ...timeUnit.unit ? { unit: timeUnit.unit } : {}
      };
    }
    if (isUTCTimeUnit(params2.unit)) {
      params2.utc = true;
      params2.unit = getLocalTimeUnitFromUTCTimeUnit(params2.unit);
    }
    return params2;
  }
  function timeUnitToString(tu) {
    const { utc, ...rest } = normalizeTimeUnit(tu);
    if (rest.unit) {
      return (utc ? "utc" : "") + keys(rest).map((p) => varName(`${p === "unit" ? "" : `_${p}_`}${rest[p]}`)).join("");
    } else {
      return (utc ? "utc" : "") + "timeunit" + keys(rest).map((p) => varName(`_${p}_${rest[p]}`)).join("");
    }
  }
  function durationExpr(timeUnit, wrap2 = (x2) => x2) {
    const normalizedTimeUnit = normalizeTimeUnit(timeUnit);
    const smallestUnitPart = getSmallestTimeUnitPart(normalizedTimeUnit.unit);
    if (smallestUnitPart && smallestUnitPart !== "day") {
      const startDate = {
        year: 2001,
        // pick a non-leap year
        month: 1,
        date: 1,
        hours: 0,
        minutes: 0,
        seconds: 0,
        milliseconds: 0
      };
      const { step, part } = getDateTimePartAndStep(smallestUnitPart, normalizedTimeUnit.step);
      const endDate = {
        ...startDate,
        [part]: +startDate[part] + step
      };
      return `${wrap2(dateTimeToExpr(endDate))} - ${wrap2(dateTimeToExpr(startDate))}`;
    }
    return void 0;
  }
  const DATE_PARTS = {
    year: 1,
    month: 1,
    date: 1,
    hours: 1,
    minutes: 1,
    seconds: 1,
    milliseconds: 1
  };
  function isDatePart(timeUnit) {
    return has$1(DATE_PARTS, timeUnit);
  }
  function getDateTimePartAndStep(timeUnit, step = 1) {
    if (isDatePart(timeUnit)) {
      return { part: timeUnit, step };
    }
    switch (timeUnit) {
      case "day":
      case "dayofyear":
        return { part: "date", step };
      case "quarter":
        return { part: "month", step: step * 3 };
      case "week":
        return { part: "date", step: step * 7 };
    }
  }
  function isSelectionPredicate(predicate) {
    return hasProperty(predicate, "param");
  }
  function isFieldEqualPredicate(predicate) {
    return !!(predicate == null ? void 0 : predicate.field) && predicate.equal !== void 0;
  }
  function isFieldLTPredicate(predicate) {
    return !!(predicate == null ? void 0 : predicate.field) && predicate.lt !== void 0;
  }
  function isFieldLTEPredicate(predicate) {
    return !!(predicate == null ? void 0 : predicate.field) && predicate.lte !== void 0;
  }
  function isFieldGTPredicate(predicate) {
    return !!(predicate == null ? void 0 : predicate.field) && predicate.gt !== void 0;
  }
  function isFieldGTEPredicate(predicate) {
    return !!(predicate == null ? void 0 : predicate.field) && predicate.gte !== void 0;
  }
  function isFieldRangePredicate(predicate) {
    if (predicate == null ? void 0 : predicate.field) {
      if (isArray(predicate.range) && predicate.range.length === 2) {
        return true;
      } else if (isSignalRef(predicate.range)) {
        return true;
      }
    }
    return false;
  }
  function isFieldOneOfPredicate(predicate) {
    return !!(predicate == null ? void 0 : predicate.field) && (isArray(predicate.oneOf) || isArray(predicate.in));
  }
  function isFieldValidPredicate(predicate) {
    return !!(predicate == null ? void 0 : predicate.field) && predicate.valid !== void 0;
  }
  function isFieldPredicate(predicate) {
    return isFieldOneOfPredicate(predicate) || isFieldEqualPredicate(predicate) || isFieldRangePredicate(predicate) || isFieldLTPredicate(predicate) || isFieldGTPredicate(predicate) || isFieldLTEPredicate(predicate) || isFieldGTEPredicate(predicate);
  }
  function predicateValueExpr(v, timeUnit) {
    return valueExpr(v, { timeUnit, wrapTime: true });
  }
  function predicateValuesExpr(vals2, timeUnit) {
    return vals2.map((v) => predicateValueExpr(v, timeUnit));
  }
  function fieldFilterExpression(predicate, useInRange = true) {
    const { field: field2 } = predicate;
    const normalizedTimeUnit = normalizeTimeUnit(predicate.timeUnit);
    const { unit: unit2, binned } = normalizedTimeUnit || {};
    const rawFieldExpr = vgField(predicate, { expr: "datum" });
    const fieldExpr$1 = unit2 ? (
      // For timeUnit, cast into integer with time() so we can use ===, inrange, indexOf to compare values directly.
      // TODO: We calculate timeUnit on the fly here. Consider if we would like to consolidate this with timeUnit pipeline
      // TODO: support utc
      `time(${!binned ? fieldExpr(unit2, field2) : rawFieldExpr})`
    ) : rawFieldExpr;
    if (isFieldEqualPredicate(predicate)) {
      return `${fieldExpr$1}===${predicateValueExpr(predicate.equal, unit2)}`;
    } else if (isFieldLTPredicate(predicate)) {
      const upper = predicate.lt;
      return `${fieldExpr$1}<${predicateValueExpr(upper, unit2)}`;
    } else if (isFieldGTPredicate(predicate)) {
      const lower = predicate.gt;
      return `${fieldExpr$1}>${predicateValueExpr(lower, unit2)}`;
    } else if (isFieldLTEPredicate(predicate)) {
      const upper = predicate.lte;
      return `${fieldExpr$1}<=${predicateValueExpr(upper, unit2)}`;
    } else if (isFieldGTEPredicate(predicate)) {
      const lower = predicate.gte;
      return `${fieldExpr$1}>=${predicateValueExpr(lower, unit2)}`;
    } else if (isFieldOneOfPredicate(predicate)) {
      return `indexof([${predicateValuesExpr(predicate.oneOf, unit2).join(",")}], ${fieldExpr$1}) !== -1`;
    } else if (isFieldValidPredicate(predicate)) {
      return fieldValidPredicate(fieldExpr$1, predicate.valid);
    } else if (isFieldRangePredicate(predicate)) {
      const { range: range2 } = replaceExprRef(predicate);
      const lower = isSignalRef(range2) ? { signal: `${range2.signal}[0]` } : range2[0];
      const upper = isSignalRef(range2) ? { signal: `${range2.signal}[1]` } : range2[1];
      if (lower !== null && upper !== null && useInRange) {
        return "inrange(" + fieldExpr$1 + ", [" + predicateValueExpr(lower, unit2) + ", " + predicateValueExpr(upper, unit2) + "])";
      }
      const exprs = [];
      if (lower !== null) {
        exprs.push(`${fieldExpr$1} >= ${predicateValueExpr(lower, unit2)}`);
      }
      if (upper !== null) {
        exprs.push(`${fieldExpr$1} <= ${predicateValueExpr(upper, unit2)}`);
      }
      return exprs.length > 0 ? exprs.join(" && ") : "true";
    }
    throw new Error(`Invalid field predicate: ${stringify$1(predicate)}`);
  }
  function fieldValidPredicate(fieldExpr2, valid = true) {
    if (valid) {
      return `isValid(${fieldExpr2}) && isFinite(+${fieldExpr2})`;
    } else {
      return `!isValid(${fieldExpr2}) || !isFinite(+${fieldExpr2})`;
    }
  }
  function normalizePredicate$1(f) {
    if (isFieldPredicate(f) && f.timeUnit) {
      return {
        ...f,
        timeUnit: normalizeTimeUnit(f.timeUnit)
      };
    }
    return f;
  }
  const Type = {
    quantitative: "quantitative",
    ordinal: "ordinal",
    temporal: "temporal",
    nominal: "nominal",
    geojson: "geojson"
  };
  function isContinuous(type2) {
    return type2 === "quantitative" || type2 === "temporal";
  }
  function isDiscrete$1(type2) {
    return type2 === "ordinal" || type2 === "nominal";
  }
  const QUANTITATIVE = Type.quantitative;
  const ORDINAL = Type.ordinal;
  const TEMPORAL = Type.temporal;
  const NOMINAL = Type.nominal;
  const GEOJSON = Type.geojson;
  function getFullName(type2) {
    if (type2) {
      type2 = type2.toLowerCase();
      switch (type2) {
        case "q":
        case QUANTITATIVE:
          return "quantitative";
        case "t":
        case TEMPORAL:
          return "temporal";
        case "o":
        case ORDINAL:
          return "ordinal";
        case "n":
        case NOMINAL:
          return "nominal";
        case GEOJSON:
          return "geojson";
      }
    }
    return void 0;
  }
  const ScaleType = {
    // Continuous - Quantitative
    LINEAR: "linear",
    LOG: "log",
    POW: "pow",
    SQRT: "sqrt",
    // Continuous - Time
    TIME: "time",
    UTC: "utc",
    POINT: "point",
    BAND: "band"
  };
  const SCALE_CATEGORY_INDEX = {
    linear: "numeric",
    log: "numeric",
    pow: "numeric",
    sqrt: "numeric",
    symlog: "numeric",
    identity: "numeric",
    sequential: "numeric",
    time: "time",
    utc: "time",
    ordinal: "ordinal",
    "bin-ordinal": "bin-ordinal",
    // TODO: should bin-ordinal support merging with other
    point: "ordinal-position",
    band: "ordinal-position",
    quantile: "discretizing",
    quantize: "discretizing",
    threshold: "discretizing"
  };
  function scaleCompatible(scaleType1, scaleType2) {
    const scaleCategory1 = SCALE_CATEGORY_INDEX[scaleType1];
    const scaleCategory2 = SCALE_CATEGORY_INDEX[scaleType2];
    return scaleCategory1 === scaleCategory2 || scaleCategory1 === "ordinal-position" && scaleCategory2 === "time" || scaleCategory2 === "ordinal-position" && scaleCategory1 === "time";
  }
  const SCALE_PRECEDENCE_INDEX = {
    // numeric
    linear: 0,
    log: 1,
    pow: 1,
    sqrt: 1,
    symlog: 1,
    identity: 1,
    sequential: 1,
    // time
    time: 0,
    utc: 0,
    // ordinal-position -- these have higher precedence than continuous scales as they support more types of data
    point: 10,
    band: 11,
    // band has higher precedence as it is better for interaction
    // non grouped types
    ordinal: 0,
    "bin-ordinal": 0,
    quantile: 0,
    quantize: 0,
    threshold: 0
  };
  function scaleTypePrecedence(scaleType2) {
    return SCALE_PRECEDENCE_INDEX[scaleType2];
  }
  const QUANTITATIVE_SCALES = /* @__PURE__ */ new Set([
    "linear",
    "log",
    "pow",
    "sqrt",
    "symlog"
  ]);
  const CONTINUOUS_TO_CONTINUOUS_SCALES = /* @__PURE__ */ new Set([
    ...QUANTITATIVE_SCALES,
    "time",
    "utc"
  ]);
  function isQuantitative(type2) {
    return QUANTITATIVE_SCALES.has(type2);
  }
  const CONTINUOUS_TO_DISCRETE_SCALES = /* @__PURE__ */ new Set([
    "quantile",
    "quantize",
    "threshold"
  ]);
  const CONTINUOUS_DOMAIN_SCALES = /* @__PURE__ */ new Set([
    ...CONTINUOUS_TO_CONTINUOUS_SCALES,
    ...CONTINUOUS_TO_DISCRETE_SCALES,
    "sequential",
    "identity"
  ]);
  const DISCRETE_DOMAIN_SCALES = /* @__PURE__ */ new Set([
    "ordinal",
    "bin-ordinal",
    "point",
    "band"
  ]);
  function hasDiscreteDomain(type2) {
    return DISCRETE_DOMAIN_SCALES.has(type2);
  }
  function hasContinuousDomain(type2) {
    return CONTINUOUS_DOMAIN_SCALES.has(type2);
  }
  function isContinuousToContinuous(type2) {
    return CONTINUOUS_TO_CONTINUOUS_SCALES.has(type2);
  }
  function isContinuousToDiscrete(type2) {
    return CONTINUOUS_TO_DISCRETE_SCALES.has(type2);
  }
  const defaultScaleConfig = {
    pointPadding: 0.5,
    barBandPaddingInner: 0.1,
    rectBandPaddingInner: 0,
    tickBandPaddingInner: 0.25,
    bandWithNestedOffsetPaddingInner: 0.2,
    bandWithNestedOffsetPaddingOuter: 0.2,
    minBandSize: 2,
    minFontSize: 8,
    maxFontSize: 40,
    minOpacity: 0.3,
    maxOpacity: 0.8,
    // FIXME: revise if these *can* become ratios of width/height step
    minSize: 4,
    // Point size is area. For square point, 9 = 3 pixel ^ 2, not too small!
    minStrokeWidth: 1,
    maxStrokeWidth: 4,
    quantileCount: 4,
    quantizeCount: 4,
    zero: true,
    framesPerSecond: 2,
    animationDuration: 5
  };
  function isExtendedScheme(scheme2) {
    return !isString(scheme2) && hasProperty(scheme2, "name");
  }
  function isParameterDomain(domain2) {
    return hasProperty(domain2, "param");
  }
  function isDomainUnionWith(domain2) {
    return hasProperty(domain2, "unionWith");
  }
  function isFieldRange(range2) {
    return isObject(range2) && "field" in range2;
  }
  const SCALE_PROPERTY_INDEX = {
    type: 1,
    domain: 1,
    domainMax: 1,
    domainMin: 1,
    domainMid: 1,
    domainRaw: 1,
    align: 1,
    range: 1,
    rangeMax: 1,
    rangeMin: 1,
    scheme: 1,
    bins: 1,
    // Other properties
    reverse: 1,
    round: 1,
    // quantitative / time
    clamp: 1,
    nice: 1,
    // quantitative
    base: 1,
    exponent: 1,
    constant: 1,
    interpolate: 1,
    zero: 1,
    // zero depends on domain
    // band/point
    padding: 1,
    paddingInner: 1,
    paddingOuter: 1
  };
  const { type, domain: domain$1, range: range$1, rangeMax, rangeMin, scheme, ...NON_TYPE_DOMAIN_RANGE_VEGA_SCALE_PROPERTY_INDEX } = SCALE_PROPERTY_INDEX;
  const NON_TYPE_DOMAIN_RANGE_VEGA_SCALE_PROPERTIES = keys(NON_TYPE_DOMAIN_RANGE_VEGA_SCALE_PROPERTY_INDEX);
  function scaleTypeSupportProperty(scaleType2, propName) {
    switch (propName) {
      case "type":
      case "domain":
      case "reverse":
      case "range":
        return true;
      case "scheme":
      case "interpolate":
        return !["point", "band", "identity"].includes(scaleType2);
      case "bins":
        return !["point", "band", "identity", "ordinal"].includes(scaleType2);
      case "round":
        return isContinuousToContinuous(scaleType2) || scaleType2 === "band" || scaleType2 === "point";
      case "padding":
      case "rangeMin":
      case "rangeMax":
        return isContinuousToContinuous(scaleType2) || ["point", "band"].includes(scaleType2);
      case "paddingOuter":
      case "align":
        return ["point", "band"].includes(scaleType2);
      case "paddingInner":
        return scaleType2 === "band";
      case "domainMax":
      case "domainMid":
      case "domainMin":
      case "domainRaw":
      case "clamp":
        return isContinuousToContinuous(scaleType2);
      case "nice":
        return isContinuousToContinuous(scaleType2) || scaleType2 === "quantize" || scaleType2 === "threshold";
      case "exponent":
        return scaleType2 === "pow";
      case "base":
        return scaleType2 === "log";
      case "constant":
        return scaleType2 === "symlog";
      case "zero":
        return hasContinuousDomain(scaleType2) && !contains([
          "log",
          // log scale cannot have zero value
          "time",
          "utc",
          // zero is not meaningful for time
          "threshold",
          // threshold requires custom domain so zero does not matter
          "quantile"
          // quantile depends on distribution so zero does not matter
        ], scaleType2);
    }
  }
  function channelScalePropertyIncompatability(channel, propName) {
    switch (propName) {
      case "interpolate":
      case "scheme":
      case "domainMid":
        if (!isColorChannel(channel)) {
          return cannotUseScalePropertyWithNonColor(propName);
        }
        return void 0;
      case "align":
      case "type":
      case "bins":
      case "domain":
      case "domainMax":
      case "domainMin":
      case "domainRaw":
      case "range":
      case "base":
      case "exponent":
      case "constant":
      case "nice":
      case "padding":
      case "paddingInner":
      case "paddingOuter":
      case "rangeMax":
      case "rangeMin":
      case "reverse":
      case "round":
      case "clamp":
      case "zero":
        return void 0;
    }
  }
  function scaleTypeSupportDataType(specifiedType, fieldDefType) {
    if (contains([ORDINAL, NOMINAL], fieldDefType)) {
      return specifiedType === void 0 || hasDiscreteDomain(specifiedType);
    } else if (fieldDefType === TEMPORAL) {
      return contains([ScaleType.TIME, ScaleType.UTC, void 0], specifiedType);
    } else if (fieldDefType === QUANTITATIVE) {
      return isQuantitative(specifiedType) || isContinuousToDiscrete(specifiedType) || specifiedType === void 0;
    }
    return true;
  }
  function channelSupportScaleType(channel, scaleType2, hasNestedOffsetScale = false) {
    if (!isScaleChannel(channel)) {
      return false;
    }
    switch (channel) {
      case X:
      case Y:
      case XOFFSET:
      case YOFFSET:
      case THETA:
      case RADIUS:
        if (isContinuousToContinuous(scaleType2)) {
          return true;
        } else if (scaleType2 === "band") {
          return true;
        } else if (scaleType2 === "point") {
          return !hasNestedOffsetScale;
        }
        return false;
      case TIME:
        return contains(["linear", "band"], scaleType2);
      case SIZE:
      case STROKEWIDTH:
      case OPACITY:
      case FILLOPACITY:
      case STROKEOPACITY:
      case ANGLE:
        return isContinuousToContinuous(scaleType2) || isContinuousToDiscrete(scaleType2) || contains(["band", "point", "ordinal"], scaleType2);
      case COLOR:
      case FILL:
      case STROKE:
        return scaleType2 !== "band";
      case STROKEDASH:
      case SHAPE:
        return scaleType2 === "ordinal" || isContinuousToDiscrete(scaleType2);
    }
  }
  function isScaleInvalidDataIncludeAsValue(invalidDataMode) {
    return isObject(invalidDataMode) && "value" in invalidDataMode;
  }
  const Mark = {
    arc: "arc",
    area: "area",
    bar: "bar",
    image: "image",
    line: "line",
    point: "point",
    rect: "rect",
    rule: "rule",
    text: "text",
    tick: "tick",
    trail: "trail",
    circle: "circle",
    square: "square",
    geoshape: "geoshape"
  };
  const ARC = Mark.arc;
  const AREA = Mark.area;
  const BAR = Mark.bar;
  const IMAGE = Mark.image;
  const LINE = Mark.line;
  const POINT = Mark.point;
  const RECT = Mark.rect;
  const RULE = Mark.rule;
  const TEXT = Mark.text;
  const TICK = Mark.tick;
  const TRAIL = Mark.trail;
  const CIRCLE = Mark.circle;
  const SQUARE = Mark.square;
  const GEOSHAPE = Mark.geoshape;
  function isPathMark(m2) {
    return ["line", "area", "trail"].includes(m2);
  }
  function isRectBasedMark(m2) {
    return [
      "rect",
      "bar",
      "image",
      "arc",
      "tick"
      /* arc is rect/interval in polar coordinate */
    ].includes(m2);
  }
  const PRIMITIVE_MARKS = new Set(keys(Mark));
  function isMarkDef(mark) {
    return hasProperty(mark, "type");
  }
  const STROKE_CONFIG = [
    "stroke",
    "strokeWidth",
    "strokeDash",
    "strokeDashOffset",
    "strokeOpacity",
    "strokeJoin",
    "strokeMiterLimit"
  ];
  const FILL_CONFIG = ["fill", "fillOpacity"];
  const FILL_STROKE_CONFIG = [...STROKE_CONFIG, ...FILL_CONFIG];
  const VL_ONLY_MARK_CONFIG_INDEX = {
    color: 1,
    filled: 1,
    invalid: 1,
    order: 1,
    radius2: 1,
    theta2: 1,
    timeUnitBandSize: 1,
    timeUnitBandPosition: 1
  };
  const VL_ONLY_MARK_CONFIG_PROPERTIES = keys(VL_ONLY_MARK_CONFIG_INDEX);
  const VL_ONLY_RECT_CONFIG = [
    "binSpacing",
    "continuousBandSize",
    "discreteBandSize",
    "minBandSize"
  ];
  const VL_ONLY_MARK_SPECIFIC_CONFIG_PROPERTY_INDEX = {
    area: ["line", "point"],
    bar: VL_ONLY_RECT_CONFIG,
    rect: VL_ONLY_RECT_CONFIG,
    line: ["point"],
    tick: ["bandSize", "thickness", ...VL_ONLY_RECT_CONFIG]
  };
  const defaultMarkConfig = {
    color: "#4c78a8",
    invalid: "break-paths-show-path-domains",
    timeUnitBandSize: 1
  };
  const MARK_CONFIG_INDEX = {
    mark: 1,
    arc: 1,
    area: 1,
    bar: 1,
    circle: 1,
    image: 1,
    line: 1,
    point: 1,
    rect: 1,
    rule: 1,
    square: 1,
    text: 1,
    tick: 1,
    trail: 1,
    geoshape: 1
  };
  const MARK_CONFIGS = keys(MARK_CONFIG_INDEX);
  function isRelativeBandSize(o) {
    return hasProperty(o, "band");
  }
  const BAR_CORNER_RADIUS_INDEX = {
    horizontal: ["cornerRadiusTopRight", "cornerRadiusBottomRight"],
    vertical: ["cornerRadiusTopLeft", "cornerRadiusTopRight"]
  };
  const DEFAULT_RECT_BAND_SIZE = 5;
  const defaultRectConfig = {
    binSpacing: 0,
    continuousBandSize: DEFAULT_RECT_BAND_SIZE,
    minBandSize: 0.25,
    timeUnitBandPosition: 0.5
  };
  const defaultBarConfig = {
    ...defaultRectConfig,
    binSpacing: 1
  };
  const defaultTickConfig = {
    ...defaultRectConfig,
    thickness: 1
  };
  function getMarkType(m2) {
    return isMarkDef(m2) ? m2.type : m2;
  }
  function normalizeInvalidDataMode(mode2, { isPath }) {
    if (mode2 === void 0 || mode2 === "break-paths-show-path-domains") {
      return isPath ? "break-paths-show-domains" : "filter";
    } else if (mode2 === null) {
      return "show";
    }
    return mode2;
  }
  function getScaleInvalidDataMode({ markDef, config, scaleChannel, scaleType: scaleType2, isCountAggregate }) {
    var _a2, _b2;
    if (!scaleType2 || !hasContinuousDomain(scaleType2) || isCountAggregate) {
      return "always-valid";
    }
    const invalidMode = normalizeInvalidDataMode(getMarkPropOrConfig("invalid", markDef, config), {
      isPath: isPathMark(markDef.type)
    });
    const scaleOutputForInvalid = (_b2 = (_a2 = config.scale) == null ? void 0 : _a2.invalid) == null ? void 0 : _b2[scaleChannel];
    if (scaleOutputForInvalid !== void 0) {
      return "show";
    }
    return invalidMode;
  }
  function shouldBreakPath(mode2) {
    return mode2 === "break-paths-filter-domains" || mode2 === "break-paths-show-domains";
  }
  function scaledZeroOrMinOrMax({ scaleName, scale: scale2, mode: mode2 }) {
    const domain2 = `domain('${scaleName}')`;
    if (!scale2 || !scaleName) {
      return void 0;
    }
    const min2 = `${domain2}[0]`;
    const max2 = `peek(${domain2})`;
    const domainHasZero = scale2.domainHasZero();
    if (domainHasZero === "definitely") {
      return {
        scale: scaleName,
        value: 0
      };
    } else if (domainHasZero === "maybe") {
      const nonZeroValue = mode2 === "zeroOrMin" ? min2 : max2;
      return { signal: `scale('${scaleName}', inrange(0, ${domain2}) ? 0 : ${nonZeroValue})` };
    } else {
      return { signal: `scale('${scaleName}', ${mode2 === "zeroOrMin" ? min2 : max2})` };
    }
  }
  function getConditionalValueRefForIncludingInvalidValue({ scaleChannel, channelDef, scale: scale2, scaleName, markDef, config }) {
    var _a2;
    const scaleType2 = scale2 == null ? void 0 : scale2.get("type");
    const fieldDef = getFieldDef(channelDef);
    const isCountAggregate = isCountingAggregateOp(fieldDef == null ? void 0 : fieldDef.aggregate);
    const invalidDataMode = getScaleInvalidDataMode({
      scaleChannel,
      markDef,
      config,
      scaleType: scaleType2,
      isCountAggregate
    });
    if (fieldDef && invalidDataMode === "show") {
      const includeAs = ((_a2 = config.scale.invalid) == null ? void 0 : _a2[scaleChannel]) ?? "zero-or-min";
      return {
        test: fieldValidPredicate(vgField(fieldDef, { expr: "datum" }), false),
        ...refForInvalidValues(includeAs, scale2, scaleName)
      };
    }
    return void 0;
  }
  function refForInvalidValues(includeAs, scale2, scaleName) {
    if (isScaleInvalidDataIncludeAsValue(includeAs)) {
      const { value: value2 } = includeAs;
      return isSignalRef(value2) ? { signal: value2.signal } : { value: value2 };
    }
    return scaledZeroOrMinOrMax({
      scale: scale2,
      scaleName,
      mode: "zeroOrMin"
    });
  }
  function midPointRefWithPositionInvalidTest(params2) {
    const { channel, channelDef, markDef, scale: scale2, scaleName, config } = params2;
    const scaleChannel = getMainRangeChannel(channel);
    const mainRef = midPoint(params2);
    const valueRefForIncludingInvalid = getConditionalValueRefForIncludingInvalidValue({
      scaleChannel,
      channelDef,
      scale: scale2,
      scaleName,
      markDef,
      config
    });
    return valueRefForIncludingInvalid !== void 0 ? [valueRefForIncludingInvalid, mainRef] : mainRef;
  }
  function datumDefToExpr(datumDef) {
    const { datum: datum2 } = datumDef;
    if (isDateTime(datum2)) {
      return dateTimeToExpr(datum2);
    }
    return `${stringify$1(datum2)}`;
  }
  function valueRefForFieldOrDatumDef(fieldDef, scaleName, opt, encode2) {
    const ref2 = {};
    if (scaleName) {
      ref2.scale = scaleName;
    }
    if (isDatumDef(fieldDef)) {
      const { datum: datum2 } = fieldDef;
      if (isDateTime(datum2)) {
        ref2.signal = dateTimeToExpr(datum2);
      } else if (isSignalRef(datum2)) {
        ref2.signal = datum2.signal;
      } else if (isExprRef(datum2)) {
        ref2.signal = datum2.expr;
      } else {
        ref2.value = datum2;
      }
    } else {
      ref2.field = vgField(fieldDef, opt);
    }
    if (encode2) {
      const { offset: offset2, band: band2 } = encode2;
      if (offset2) {
        ref2.offset = offset2;
      }
      if (band2) {
        ref2.band = band2;
      }
    }
    return ref2;
  }
  function interpolatedSignalRef({ scaleName, fieldOrDatumDef, fieldOrDatumDef2, offset: offset2, startSuffix, endSuffix = "end", bandPosition = 0.5 }) {
    const expr2 = !isSignalRef(bandPosition) && 0 < bandPosition && bandPosition < 1 ? "datum" : void 0;
    const start = vgField(fieldOrDatumDef, { expr: expr2, suffix: startSuffix });
    const end = fieldOrDatumDef2 !== void 0 ? vgField(fieldOrDatumDef2, { expr: expr2 }) : vgField(fieldOrDatumDef, { suffix: endSuffix, expr: expr2 });
    const ref2 = {};
    if (bandPosition === 0 || bandPosition === 1) {
      ref2.scale = scaleName;
      const field2 = bandPosition === 0 ? start : end;
      ref2.field = field2;
    } else {
      const datum2 = isSignalRef(bandPosition) ? `(1-${bandPosition.signal}) * ${start} + ${bandPosition.signal} * ${end}` : `${1 - bandPosition} * ${start} + ${bandPosition} * ${end}`;
      ref2.signal = `scale("${scaleName}", ${datum2})`;
    }
    if (offset2) {
      ref2.offset = offset2;
    }
    return ref2;
  }
  function binSizeExpr({ scaleName, fieldDef }) {
    const start = vgField(fieldDef, { expr: "datum" });
    const end = vgField(fieldDef, { expr: "datum", suffix: "end" });
    return `abs(scale("${scaleName}", ${end}) - scale("${scaleName}", ${start}))`;
  }
  function midPoint({ channel, channelDef, channel2Def, markDef, config, scaleName, scale: scale2, stack: stack2, offset: offset2, defaultRef, bandPosition }) {
    if (channelDef) {
      if (isFieldOrDatumDef(channelDef)) {
        const scaleType2 = scale2 == null ? void 0 : scale2.get("type");
        if (isTypedFieldDef(channelDef)) {
          bandPosition ?? (bandPosition = getBandPosition({
            fieldDef: channelDef,
            fieldDef2: channel2Def,
            markDef,
            config
          }));
          const { bin: bin2, timeUnit, type: type2 } = channelDef;
          if (isBinning(bin2) || bandPosition && timeUnit && type2 === TEMPORAL) {
            if (stack2 == null ? void 0 : stack2.impute) {
              return valueRefForFieldOrDatumDef(channelDef, scaleName, { binSuffix: "mid" }, { offset: offset2 });
            }
            if (bandPosition && !hasDiscreteDomain(scaleType2)) {
              return interpolatedSignalRef({ scaleName, fieldOrDatumDef: channelDef, bandPosition, offset: offset2 });
            }
            return valueRefForFieldOrDatumDef(channelDef, scaleName, binRequiresRange(channelDef, channel) ? { binSuffix: "range" } : {}, {
              offset: offset2
            });
          } else if (isBinned(bin2)) {
            if (isFieldDef(channel2Def)) {
              return interpolatedSignalRef({
                scaleName,
                fieldOrDatumDef: channelDef,
                fieldOrDatumDef2: channel2Def,
                bandPosition,
                offset: offset2
              });
            } else {
              const channel2 = channel === X ? X2 : Y2;
              warn(channelRequiredForBinned(channel2));
            }
          }
        }
        return valueRefForFieldOrDatumDef(
          channelDef,
          scaleName,
          hasDiscreteDomain(scaleType2) ? { binSuffix: "range" } : {},
          // no need for bin suffix if there is no scale
          {
            offset: offset2,
            // For band, to get mid point, need to offset by half of the band
            band: scaleType2 === "band" ? bandPosition ?? channelDef.bandPosition ?? 0.5 : void 0
          }
        );
      } else if (isValueDef(channelDef)) {
        const value2 = channelDef.value;
        const offsetMixins = offset2 ? { offset: offset2 } : {};
        return { ...widthHeightValueOrSignalRef(channel, value2), ...offsetMixins };
      }
    }
    if (isFunction(defaultRef)) {
      defaultRef = defaultRef();
    }
    if (defaultRef) {
      return {
        ...defaultRef,
        // only include offset when it is non-zero (zero = no offset)
        ...offset2 ? { offset: offset2 } : {}
      };
    }
    return defaultRef;
  }
  function widthHeightValueOrSignalRef(channel, value2) {
    if (contains(["x", "x2"], channel) && value2 === "width") {
      return { field: { group: "width" } };
    } else if (contains(["y", "y2"], channel) && value2 === "height") {
      return { field: { group: "height" } };
    }
    return signalOrValueRef(value2);
  }
  function isCustomFormatType(formatType) {
    return formatType && formatType !== "number" && formatType !== "time";
  }
  function customFormatExpr(formatType, field2, format2) {
    return `${formatType}(${field2}${format2 ? `, ${stringify$1(format2)}` : ""})`;
  }
  const BIN_RANGE_DELIMITER = " – ";
  function formatSignalRef({ fieldOrDatumDef, format: format2, formatType, expr: expr2, normalizeStack, config }) {
    var _a2, _b2;
    if (isCustomFormatType(formatType)) {
      return formatCustomType({
        fieldOrDatumDef,
        format: format2,
        formatType,
        expr: expr2,
        config
      });
    }
    const field2 = fieldToFormat(fieldOrDatumDef, expr2, normalizeStack);
    const type2 = channelDefType(fieldOrDatumDef);
    if (format2 === void 0 && formatType === void 0 && config.customFormatTypes) {
      if (type2 === "quantitative") {
        if (normalizeStack && config.normalizedNumberFormatType)
          return formatCustomType({
            fieldOrDatumDef,
            format: config.normalizedNumberFormat,
            formatType: config.normalizedNumberFormatType,
            expr: expr2,
            config
          });
        if (config.numberFormatType) {
          return formatCustomType({
            fieldOrDatumDef,
            format: config.numberFormat,
            formatType: config.numberFormatType,
            expr: expr2,
            config
          });
        }
      }
      if (type2 === "temporal" && config.timeFormatType && isFieldDef(fieldOrDatumDef) && fieldOrDatumDef.timeUnit === void 0) {
        return formatCustomType({
          fieldOrDatumDef,
          format: config.timeFormat,
          formatType: config.timeFormatType,
          expr: expr2,
          config
        });
      }
    }
    if (isFieldOrDatumDefForTimeFormat(fieldOrDatumDef)) {
      const signal = timeFormatExpression({
        field: field2,
        timeUnit: isFieldDef(fieldOrDatumDef) ? (_a2 = normalizeTimeUnit(fieldOrDatumDef.timeUnit)) == null ? void 0 : _a2.unit : void 0,
        format: format2,
        formatType: config.timeFormatType,
        rawTimeFormat: config.timeFormat,
        isUTCScale: isScaleFieldDef(fieldOrDatumDef) && ((_b2 = fieldOrDatumDef.scale) == null ? void 0 : _b2.type) === ScaleType.UTC
      });
      return signal ? { signal } : void 0;
    }
    format2 = numberFormat({ type: type2, specifiedFormat: format2, config, normalizeStack });
    if (isFieldDef(fieldOrDatumDef) && isBinning(fieldOrDatumDef.bin)) {
      const endField = vgField(fieldOrDatumDef, { expr: expr2, binSuffix: "end" });
      return {
        signal: binFormatExpression(field2, endField, format2, formatType, config)
      };
    } else if (format2 || channelDefType(fieldOrDatumDef) === "quantitative") {
      return {
        signal: `${formatExpr(field2, format2)}`
      };
    } else {
      return { signal: `isValid(${field2}) ? ${field2} : ""+${field2}` };
    }
  }
  function fieldToFormat(fieldOrDatumDef, expr2, normalizeStack) {
    if (isFieldDef(fieldOrDatumDef)) {
      if (normalizeStack) {
        return `${vgField(fieldOrDatumDef, { expr: expr2, suffix: "end" })}-${vgField(fieldOrDatumDef, {
          expr: expr2,
          suffix: "start"
        })}`;
      } else {
        return vgField(fieldOrDatumDef, { expr: expr2 });
      }
    } else {
      return datumDefToExpr(fieldOrDatumDef);
    }
  }
  function formatCustomType({ fieldOrDatumDef, format: format2, formatType, expr: expr2, normalizeStack, config, field: field2 }) {
    field2 ?? (field2 = fieldToFormat(fieldOrDatumDef, expr2, normalizeStack));
    if (field2 !== "datum.value" && // For axis/legend, we can't correctly know the end of the bin from `datum`
    isFieldDef(fieldOrDatumDef) && isBinning(fieldOrDatumDef.bin)) {
      const endField = vgField(fieldOrDatumDef, { expr: expr2, binSuffix: "end" });
      return {
        signal: binFormatExpression(field2, endField, format2, formatType, config)
      };
    }
    return { signal: customFormatExpr(formatType, field2, format2) };
  }
  function guideFormat(fieldOrDatumDef, type2, format2, formatType, config, omitTimeFormatConfig) {
    var _a2;
    if (isString(formatType) && isCustomFormatType(formatType)) {
      return void 0;
    } else if (format2 === void 0 && formatType === void 0 && config.customFormatTypes) {
      if (channelDefType(fieldOrDatumDef) === "quantitative") {
        if (config.normalizedNumberFormatType && isPositionFieldOrDatumDef(fieldOrDatumDef) && fieldOrDatumDef.stack === "normalize") {
          return void 0;
        }
        if (config.numberFormatType) {
          return void 0;
        }
      }
    }
    if (isPositionFieldOrDatumDef(fieldOrDatumDef) && fieldOrDatumDef.stack === "normalize" && config.normalizedNumberFormat) {
      return numberFormat({
        type: "quantitative",
        config,
        normalizeStack: true
      });
    }
    if (isFieldOrDatumDefForTimeFormat(fieldOrDatumDef)) {
      const timeUnit = isFieldDef(fieldOrDatumDef) ? (_a2 = normalizeTimeUnit(fieldOrDatumDef.timeUnit)) == null ? void 0 : _a2.unit : void 0;
      if (timeUnit === void 0 && config.customFormatTypes && config.timeFormatType) {
        return void 0;
      }
      return timeFormat({ specifiedFormat: format2, timeUnit, config, omitTimeFormatConfig });
    }
    return numberFormat({ type: type2, specifiedFormat: format2, config });
  }
  function guideFormatType(formatType, fieldOrDatumDef, scaleType2) {
    var _a2;
    if (formatType && (isSignalRef(formatType) || formatType === "number" || formatType === "time")) {
      return formatType;
    }
    if (isFieldOrDatumDefForTimeFormat(fieldOrDatumDef) && scaleType2 !== "time" && scaleType2 !== "utc") {
      return isFieldDef(fieldOrDatumDef) && ((_a2 = normalizeTimeUnit(fieldOrDatumDef == null ? void 0 : fieldOrDatumDef.timeUnit)) == null ? void 0 : _a2.utc) ? "utc" : "time";
    }
    return void 0;
  }
  function numberFormat({ type: type2, specifiedFormat, config, normalizeStack }) {
    if (isString(specifiedFormat)) {
      return specifiedFormat;
    }
    if (type2 === QUANTITATIVE) {
      return normalizeStack ? config.normalizedNumberFormat : config.numberFormat;
    }
    return void 0;
  }
  function timeFormat({ specifiedFormat, timeUnit, config, omitTimeFormatConfig }) {
    if (specifiedFormat) {
      return specifiedFormat;
    }
    if (timeUnit) {
      return {
        signal: timeUnitSpecifierExpression(timeUnit)
      };
    }
    return omitTimeFormatConfig ? void 0 : config.timeFormat;
  }
  function formatExpr(field2, format2) {
    return `format(${field2}, "${format2 || ""}")`;
  }
  function binNumberFormatExpr(field2, format2, formatType, config) {
    if (isCustomFormatType(formatType)) {
      return customFormatExpr(formatType, field2, format2);
    }
    return formatExpr(field2, (isString(format2) ? format2 : void 0) ?? config.numberFormat);
  }
  function binFormatExpression(startField, endField, format2, formatType, config) {
    if (format2 === void 0 && formatType === void 0 && config.customFormatTypes && config.numberFormatType) {
      return binFormatExpression(startField, endField, config.numberFormat, config.numberFormatType, config);
    }
    const start = binNumberFormatExpr(startField, format2, formatType, config);
    const end = binNumberFormatExpr(endField, format2, formatType, config);
    return `${fieldValidPredicate(startField, false)} ? "null" : ${start} + "${BIN_RANGE_DELIMITER}" + ${end}`;
  }
  function timeFormatExpression({ field: field2, timeUnit, format: format2, formatType, rawTimeFormat, isUTCScale }) {
    if (!timeUnit || format2) {
      if (!timeUnit && formatType) {
        return `${formatType}(${field2}, '${format2}')`;
      }
      format2 = isString(format2) ? format2 : rawTimeFormat;
      return `${isUTCScale ? "utc" : "time"}Format(${field2}, '${format2}')`;
    } else {
      return formatExpression(timeUnit, field2, isUTCScale);
    }
  }
  const DEFAULT_SORT_OP = "min";
  const SORT_BY_CHANNEL_INDEX = {
    x: 1,
    y: 1,
    color: 1,
    fill: 1,
    stroke: 1,
    strokeWidth: 1,
    size: 1,
    shape: 1,
    fillOpacity: 1,
    strokeOpacity: 1,
    opacity: 1,
    text: 1
  };
  function isSortByChannel(c2) {
    return has$1(SORT_BY_CHANNEL_INDEX, c2);
  }
  function isSortByEncoding(sort2) {
    return hasProperty(sort2, "encoding");
  }
  function isSortField(sort2) {
    return sort2 && (sort2.op === "count" || hasProperty(sort2, "field"));
  }
  function isSortArray(sort2) {
    return sort2 && isArray(sort2);
  }
  function isFacetMapping(f) {
    return hasProperty(f, "row") || hasProperty(f, "column");
  }
  function isFacetFieldDef(channelDef) {
    return hasProperty(channelDef, "header");
  }
  function isFacetSpec(spec) {
    return hasProperty(spec, "facet");
  }
  function isConditionalParameter(c2) {
    return hasProperty(c2, "param");
  }
  function isRepeatRef(field2) {
    return !isString(field2) && hasProperty(field2, "repeat");
  }
  function toFieldDefBase(fieldDef) {
    const { field: field2, timeUnit, bin: bin2, aggregate } = fieldDef;
    return {
      ...timeUnit ? { timeUnit } : {},
      ...bin2 ? { bin: bin2 } : {},
      ...aggregate ? { aggregate } : {},
      field: field2
    };
  }
  function isSortableFieldDef(fieldDef) {
    return hasProperty(fieldDef, "sort");
  }
  function getBandPosition({ fieldDef, fieldDef2, markDef: mark, config }) {
    if (isFieldOrDatumDef(fieldDef) && fieldDef.bandPosition !== void 0) {
      return fieldDef.bandPosition;
    }
    if (isFieldDef(fieldDef)) {
      const { timeUnit, bin: bin2 } = fieldDef;
      if (timeUnit && !fieldDef2) {
        return getMarkConfig("timeUnitBandPosition", mark, config);
      } else if (isBinning(bin2)) {
        return 0.5;
      }
    }
    return void 0;
  }
  function getBandSize({ channel, fieldDef, fieldDef2, markDef: mark, config, scaleType: scaleType2, useVlSizeChannel }) {
    var _a2, _b2, _c2;
    const sizeChannel = getSizeChannel(channel);
    const size = getMarkPropOrConfig(useVlSizeChannel ? "size" : sizeChannel, mark, config, {
      vgChannel: sizeChannel
    });
    if (size !== void 0) {
      return size;
    }
    if (isFieldDef(fieldDef)) {
      const { timeUnit, bin: bin2 } = fieldDef;
      if (timeUnit && !fieldDef2) {
        return { band: getMarkConfig("timeUnitBandSize", mark, config) };
      } else if (isBinning(bin2) && !hasDiscreteDomain(scaleType2)) {
        return { band: 1 };
      }
    }
    if (isRectBasedMark(mark.type)) {
      if (scaleType2) {
        if (hasDiscreteDomain(scaleType2)) {
          return ((_a2 = config[mark.type]) == null ? void 0 : _a2.discreteBandSize) || { band: 1 };
        } else {
          return (_b2 = config[mark.type]) == null ? void 0 : _b2.continuousBandSize;
        }
      }
      return (_c2 = config[mark.type]) == null ? void 0 : _c2.discreteBandSize;
    }
    return void 0;
  }
  function hasBandEnd(fieldDef, fieldDef2, markDef, config) {
    if (isBinning(fieldDef.bin) || fieldDef.timeUnit && isTypedFieldDef(fieldDef) && fieldDef.type === "temporal") {
      return getBandPosition({ fieldDef, fieldDef2, markDef, config }) !== void 0;
    }
    return false;
  }
  function isOrderOnlyDef(orderDef) {
    return hasProperty(orderDef, "sort") && !hasProperty(orderDef, "field");
  }
  function isConditionalDef(channelDef) {
    return hasProperty(channelDef, "condition");
  }
  function hasConditionalFieldDef(channelDef) {
    const condition = channelDef == null ? void 0 : channelDef["condition"];
    return !!condition && !isArray(condition) && isFieldDef(condition);
  }
  function hasConditionalFieldOrDatumDef(channelDef) {
    const condition = channelDef == null ? void 0 : channelDef["condition"];
    return !!condition && !isArray(condition) && isFieldOrDatumDef(condition);
  }
  function hasConditionalValueDef(channelDef) {
    const condition = channelDef == null ? void 0 : channelDef["condition"];
    return !!condition && (isArray(condition) || isValueDef(condition));
  }
  function isFieldDef(channelDef) {
    return hasProperty(channelDef, "field") || (channelDef == null ? void 0 : channelDef.aggregate) === "count";
  }
  function channelDefType(channelDef) {
    return channelDef == null ? void 0 : channelDef["type"];
  }
  function isDatumDef(channelDef) {
    return hasProperty(channelDef, "datum");
  }
  function isContinuousFieldOrDatumDef(cd) {
    return isTypedFieldDef(cd) && !isDiscrete(cd) || isNumericDataDef(cd);
  }
  function isUnbinnedQuantitativeFieldOrDatumDef(cd) {
    return isTypedFieldDef(cd) && cd.type === "quantitative" && !cd.bin || isNumericDataDef(cd);
  }
  function isNumericDataDef(cd) {
    return isDatumDef(cd) && isNumber$1(cd.datum);
  }
  function isFieldOrDatumDef(channelDef) {
    return isFieldDef(channelDef) || isDatumDef(channelDef);
  }
  function isTypedFieldDef(channelDef) {
    return channelDef && (hasProperty(channelDef, "field") || channelDef["aggregate"] === "count") && hasProperty(channelDef, "type");
  }
  function isValueDef(channelDef) {
    return hasProperty(channelDef, "value");
  }
  function isScaleFieldDef(channelDef) {
    return hasProperty(channelDef, "scale") || hasProperty(channelDef, "sort");
  }
  function isPositionFieldOrDatumDef(channelDef) {
    return hasProperty(channelDef, "axis") || hasProperty(channelDef, "stack") || hasProperty(channelDef, "impute");
  }
  function isMarkPropFieldOrDatumDef(channelDef) {
    return hasProperty(channelDef, "legend");
  }
  function isStringFieldOrDatumDef(channelDef) {
    return hasProperty(channelDef, "format") || hasProperty(channelDef, "formatType");
  }
  function toStringFieldDef(fieldDef) {
    return omit(fieldDef, ["legend", "axis", "header", "scale"]);
  }
  function isOpFieldDef(fieldDef) {
    return hasProperty(fieldDef, "op");
  }
  function vgField(fieldDef, opt = {}) {
    let field2 = fieldDef.field;
    const prefix = opt.prefix;
    let suffix = opt.suffix;
    let argAccessor = "";
    if (isCount(fieldDef)) {
      field2 = internalField("count");
    } else {
      let fn;
      if (!opt.nofn) {
        if (isOpFieldDef(fieldDef)) {
          fn = fieldDef.op;
        } else {
          const { bin: bin2, aggregate, timeUnit } = fieldDef;
          if (isBinning(bin2)) {
            fn = binToString(bin2);
            suffix = (opt.binSuffix ?? "") + (opt.suffix ?? "");
          } else if (aggregate) {
            if (isArgmaxDef(aggregate)) {
              argAccessor = `["${field2}"]`;
              field2 = `argmax_${aggregate.argmax}`;
            } else if (isArgminDef(aggregate)) {
              argAccessor = `["${field2}"]`;
              field2 = `argmin_${aggregate.argmin}`;
            } else {
              fn = String(aggregate);
            }
          } else if (timeUnit && !isBinnedTimeUnit(timeUnit)) {
            fn = timeUnitToString(timeUnit);
            suffix = (!["range", "mid"].includes(opt.binSuffix) && opt.binSuffix || "") + (opt.suffix ?? "");
          }
        }
      }
      if (fn) {
        field2 = field2 ? `${fn}_${field2}` : fn;
      }
    }
    if (suffix) {
      field2 = `${field2}_${suffix}`;
    }
    if (prefix) {
      field2 = `${prefix}_${field2}`;
    }
    if (opt.forAs) {
      return removePathFromField(field2);
    } else if (opt.expr) {
      return flatAccessWithDatum(field2, opt.expr) + argAccessor;
    } else {
      return replacePathInField(field2) + argAccessor;
    }
  }
  function isDiscrete(def2) {
    switch (def2.type) {
      case "nominal":
      case "ordinal":
      case "geojson":
        return true;
      case "quantitative":
        return isFieldDef(def2) && !!def2.bin;
      case "temporal":
        return false;
    }
    throw new Error(invalidFieldType(def2.type));
  }
  function isDiscretizing(def2) {
    var _a2;
    return isScaleFieldDef(def2) && isContinuousToDiscrete((_a2 = def2.scale) == null ? void 0 : _a2.type);
  }
  function isCount(fieldDef) {
    return fieldDef.aggregate === "count";
  }
  function verbalTitleFormatter(fieldDef, config) {
    var _a2;
    const { field: field2, bin: bin2, timeUnit, aggregate } = fieldDef;
    if (aggregate === "count") {
      return config.countTitle;
    } else if (isBinning(bin2)) {
      return `${field2} (binned)`;
    } else if (timeUnit && !isBinnedTimeUnit(timeUnit)) {
      const unit2 = (_a2 = normalizeTimeUnit(timeUnit)) == null ? void 0 : _a2.unit;
      if (unit2) {
        return `${field2} (${getTimeUnitParts(unit2).join("-")})`;
      }
    } else if (aggregate) {
      if (isArgmaxDef(aggregate)) {
        return `${field2} for max ${aggregate.argmax}`;
      } else if (isArgminDef(aggregate)) {
        return `${field2} for min ${aggregate.argmin}`;
      } else {
        return `${titleCase(aggregate)} of ${field2}`;
      }
    }
    return field2;
  }
  function functionalTitleFormatter(fieldDef) {
    const { aggregate, bin: bin2, timeUnit, field: field2 } = fieldDef;
    if (isArgmaxDef(aggregate)) {
      return `${field2} for argmax(${aggregate.argmax})`;
    } else if (isArgminDef(aggregate)) {
      return `${field2} for argmin(${aggregate.argmin})`;
    }
    const timeUnitParams = timeUnit && !isBinnedTimeUnit(timeUnit) ? normalizeTimeUnit(timeUnit) : void 0;
    const fn = aggregate || (timeUnitParams == null ? void 0 : timeUnitParams.unit) || (timeUnitParams == null ? void 0 : timeUnitParams.maxbins) && "timeunit" || isBinning(bin2) && "bin";
    return fn ? `${fn.toUpperCase()}(${field2})` : field2;
  }
  const defaultTitleFormatter = (fieldDef, config) => {
    switch (config.fieldTitle) {
      case "plain":
        return fieldDef.field;
      case "functional":
        return functionalTitleFormatter(fieldDef);
      default:
        return verbalTitleFormatter(fieldDef, config);
    }
  };
  let titleFormatter = defaultTitleFormatter;
  function setTitleFormatter(formatter) {
    titleFormatter = formatter;
  }
  function resetTitleFormatter() {
    setTitleFormatter(defaultTitleFormatter);
  }
  function title(fieldOrDatumDef, config, { allowDisabling, includeDefault = true }) {
    var _a2;
    const guideTitle = (_a2 = getGuide(fieldOrDatumDef)) == null ? void 0 : _a2.title;
    if (!isFieldDef(fieldOrDatumDef)) {
      return guideTitle ?? fieldOrDatumDef.title;
    }
    const fieldDef = fieldOrDatumDef;
    const def2 = includeDefault ? defaultTitle(fieldDef, config) : void 0;
    if (allowDisabling) {
      return getFirstDefined(guideTitle, fieldDef.title, def2);
    } else {
      return guideTitle ?? fieldDef.title ?? def2;
    }
  }
  function getGuide(fieldDef) {
    if (isPositionFieldOrDatumDef(fieldDef) && fieldDef.axis) {
      return fieldDef.axis;
    } else if (isMarkPropFieldOrDatumDef(fieldDef) && fieldDef.legend) {
      return fieldDef.legend;
    } else if (isFacetFieldDef(fieldDef) && fieldDef.header) {
      return fieldDef.header;
    }
    return void 0;
  }
  function defaultTitle(fieldDef, config) {
    return titleFormatter(fieldDef, config);
  }
  function getFormatMixins(fieldDef) {
    if (isStringFieldOrDatumDef(fieldDef)) {
      const { format: format2, formatType } = fieldDef;
      return { format: format2, formatType };
    } else {
      const guide = getGuide(fieldDef) ?? {};
      const { format: format2, formatType } = guide;
      return { format: format2, formatType };
    }
  }
  function defaultType$2(fieldDef, channel) {
    var _a2;
    switch (channel) {
      case "latitude":
      case "longitude":
        return "quantitative";
      case "row":
      case "column":
      case "facet":
      case "shape":
      case "strokeDash":
        return "nominal";
      case "order":
        return "ordinal";
    }
    if (isSortableFieldDef(fieldDef) && isArray(fieldDef.sort)) {
      return "ordinal";
    }
    const { aggregate, bin: bin2, timeUnit } = fieldDef;
    if (timeUnit) {
      return "temporal";
    }
    if (bin2 || aggregate && !isArgmaxDef(aggregate) && !isArgminDef(aggregate)) {
      return "quantitative";
    }
    if (isScaleFieldDef(fieldDef) && ((_a2 = fieldDef.scale) == null ? void 0 : _a2.type)) {
      switch (SCALE_CATEGORY_INDEX[fieldDef.scale.type]) {
        case "numeric":
        case "discretizing":
          return "quantitative";
        case "time":
          return "temporal";
      }
    }
    return "nominal";
  }
  function getFieldDef(channelDef) {
    if (isFieldDef(channelDef)) {
      return channelDef;
    } else if (hasConditionalFieldDef(channelDef)) {
      return channelDef.condition;
    }
    return void 0;
  }
  function getFieldOrDatumDef(channelDef) {
    if (isFieldOrDatumDef(channelDef)) {
      return channelDef;
    } else if (hasConditionalFieldOrDatumDef(channelDef)) {
      return channelDef.condition;
    }
    return void 0;
  }
  function initChannelDef(channelDef, channel, config, opt = {}) {
    if (isString(channelDef) || isNumber$1(channelDef) || isBoolean$2(channelDef)) {
      const primitiveType = isString(channelDef) ? "string" : isNumber$1(channelDef) ? "number" : "boolean";
      warn(primitiveChannelDef(channel, primitiveType, channelDef));
      return { value: channelDef };
    }
    if (isFieldOrDatumDef(channelDef)) {
      return initFieldOrDatumDef(channelDef, channel, config, opt);
    } else if (hasConditionalFieldOrDatumDef(channelDef)) {
      return {
        ...channelDef,
        // Need to cast as normalizeFieldDef normally return FieldDef, but here we know that it is definitely Condition<FieldDef>
        condition: initFieldOrDatumDef(channelDef.condition, channel, config, opt)
      };
    }
    return channelDef;
  }
  function initFieldOrDatumDef(fd, channel, config, opt) {
    if (isStringFieldOrDatumDef(fd)) {
      const { format: format2, formatType, ...rest } = fd;
      if (isCustomFormatType(formatType) && !config.customFormatTypes) {
        warn(customFormatTypeNotAllowed(channel));
        return initFieldOrDatumDef(rest, channel, config, opt);
      }
    } else {
      const guideType = isPositionFieldOrDatumDef(fd) ? "axis" : isMarkPropFieldOrDatumDef(fd) ? "legend" : isFacetFieldDef(fd) ? "header" : null;
      if (guideType && fd[guideType]) {
        const { format: format2, formatType, ...newGuide } = fd[guideType];
        if (isCustomFormatType(formatType) && !config.customFormatTypes) {
          warn(customFormatTypeNotAllowed(channel));
          return initFieldOrDatumDef({ ...fd, [guideType]: newGuide }, channel, config, opt);
        }
      }
    }
    if (isFieldDef(fd)) {
      return initFieldDef(fd, channel, opt);
    }
    return initDatumDef(fd);
  }
  function initDatumDef(datumDef) {
    let type2 = datumDef["type"];
    if (type2) {
      return datumDef;
    }
    const { datum: datum2 } = datumDef;
    type2 = isNumber$1(datum2) ? "quantitative" : isString(datum2) ? "nominal" : isDateTime(datum2) ? "temporal" : void 0;
    return { ...datumDef, type: type2 };
  }
  function initFieldDef(fd, channel, { compositeMark = false } = {}) {
    const { aggregate, timeUnit, bin: bin2, field: field2 } = fd;
    const fieldDef = { ...fd };
    if (!compositeMark && aggregate && !isAggregateOp(aggregate) && !isArgmaxDef(aggregate) && !isArgminDef(aggregate)) {
      warn(invalidAggregate(aggregate));
      delete fieldDef.aggregate;
    }
    if (timeUnit) {
      fieldDef.timeUnit = normalizeTimeUnit(timeUnit);
    }
    if (field2) {
      fieldDef.field = `${field2}`;
    }
    if (isBinning(bin2)) {
      fieldDef.bin = normalizeBin(bin2, channel);
    }
    if (isBinned(bin2) && !isXorY(channel)) {
      warn(channelShouldNotBeUsedForBinned(channel));
    }
    if (isTypedFieldDef(fieldDef)) {
      const { type: type2 } = fieldDef;
      const fullType = getFullName(type2);
      if (type2 !== fullType) {
        fieldDef.type = fullType;
      }
      if (type2 !== "quantitative") {
        if (isCountingAggregateOp(aggregate)) {
          warn(invalidFieldTypeForCountAggregate(type2, aggregate));
          fieldDef.type = "quantitative";
        }
      }
    } else if (!isSecondaryRangeChannel(channel)) {
      const newType = defaultType$2(fieldDef, channel);
      fieldDef["type"] = newType;
    }
    if (isTypedFieldDef(fieldDef)) {
      const { compatible, warning } = channelCompatibility(fieldDef, channel) || {};
      if (compatible === false) {
        warn(warning);
      }
    }
    if (isSortableFieldDef(fieldDef) && isString(fieldDef.sort)) {
      const { sort: sort2 } = fieldDef;
      if (isSortByChannel(sort2)) {
        return {
          ...fieldDef,
          sort: { encoding: sort2 }
        };
      }
      const sub = sort2.substring(1);
      if (sort2.charAt(0) === "-" && isSortByChannel(sub)) {
        return {
          ...fieldDef,
          sort: { encoding: sub, order: "descending" }
        };
      }
    }
    if (isFacetFieldDef(fieldDef)) {
      const { header } = fieldDef;
      if (header) {
        const { orient: orient2, ...rest } = header;
        if (orient2) {
          return {
            ...fieldDef,
            header: {
              ...rest,
              labelOrient: header.labelOrient || orient2,
              titleOrient: header.titleOrient || orient2
            }
          };
        }
      }
    }
    return fieldDef;
  }
  function normalizeBin(bin2, channel) {
    if (isBoolean$2(bin2)) {
      return { maxbins: autoMaxBins(channel) };
    } else if (bin2 === "binned") {
      return {
        binned: true
      };
    } else if (!bin2.maxbins && !bin2.step) {
      return { ...bin2, maxbins: autoMaxBins(channel) };
    } else {
      return bin2;
    }
  }
  const COMPATIBLE = { compatible: true };
  function channelCompatibility(fieldDef, channel) {
    const type2 = fieldDef.type;
    if (type2 === "geojson" && channel !== "shape") {
      return {
        compatible: false,
        warning: `Channel ${channel} should not be used with a geojson data.`
      };
    }
    switch (channel) {
      case ROW:
      case COLUMN:
      case FACET:
        if (!isDiscrete(fieldDef)) {
          return {
            compatible: false,
            warning: channelShouldBeDiscrete(channel)
          };
        }
        return COMPATIBLE;
      case X:
      case Y:
      case XOFFSET:
      case YOFFSET:
      case COLOR:
      case FILL:
      case STROKE:
      case TEXT$1:
      case DETAIL:
      case KEY:
      case TOOLTIP:
      case HREF:
      case URL$1:
      case ANGLE:
      case THETA:
      case RADIUS:
      case DESCRIPTION:
        return COMPATIBLE;
      case LONGITUDE:
      case LONGITUDE2:
      case LATITUDE:
      case LATITUDE2:
        if (type2 !== QUANTITATIVE) {
          return {
            compatible: false,
            warning: `Channel ${channel} should be used with a quantitative field only, not ${fieldDef.type} field.`
          };
        }
        return COMPATIBLE;
      case OPACITY:
      case FILLOPACITY:
      case STROKEOPACITY:
      case STROKEWIDTH:
      case SIZE:
      case THETA2:
      case RADIUS2:
      case X2:
      case Y2:
      case TIME:
        if (type2 === "nominal" && !fieldDef["sort"]) {
          return {
            compatible: false,
            warning: `Channel ${channel} should not be used with an unsorted discrete field.`
          };
        }
        return COMPATIBLE;
      case SHAPE:
      case STROKEDASH:
        if (!isDiscrete(fieldDef) && !isDiscretizing(fieldDef)) {
          return {
            compatible: false,
            warning: channelShouldBeDiscreteOrDiscretizing(channel)
          };
        }
        return COMPATIBLE;
      case ORDER:
        if (fieldDef.type === "nominal" && !("sort" in fieldDef)) {
          return {
            compatible: false,
            warning: `Channel order is inappropriate for nominal field, which has no inherent order.`
          };
        }
        return COMPATIBLE;
    }
  }
  function isFieldOrDatumDefForTimeFormat(fieldOrDatumDef) {
    const { formatType } = getFormatMixins(fieldOrDatumDef);
    return formatType === "time" || !formatType && isTemporalFieldDef(fieldOrDatumDef);
  }
  function isTemporalFieldDef(def2) {
    return def2 && (def2["type"] === "temporal" || isFieldDef(def2) && !!def2.timeUnit);
  }
  function valueExpr(v, { timeUnit, type: type2, wrapTime, undefinedIfExprNotRequired }) {
    var _a2;
    const unit2 = timeUnit && ((_a2 = normalizeTimeUnit(timeUnit)) == null ? void 0 : _a2.unit);
    let isTime2 = unit2 || type2 === "temporal";
    let expr2;
    if (isExprRef(v)) {
      expr2 = v.expr;
    } else if (isSignalRef(v)) {
      expr2 = v.signal;
    } else if (isDateTime(v)) {
      isTime2 = true;
      expr2 = dateTimeToExpr(v);
    } else if (isString(v) || isNumber$1(v)) {
      if (isTime2) {
        expr2 = `datetime(${stringify$1(v)})`;
        if (isLocalSingleTimeUnit(unit2)) {
          if (isNumber$1(v) && v < 1e4 || isString(v) && isNaN(Date.parse(v))) {
            expr2 = dateTimeToExpr({ [unit2]: v });
          }
        }
      }
    }
    if (expr2) {
      return wrapTime && isTime2 ? `time(${expr2})` : expr2;
    }
    return undefinedIfExprNotRequired ? void 0 : stringify$1(v);
  }
  function valueArray(fieldOrDatumDef, values2) {
    const { type: type2 } = fieldOrDatumDef;
    return values2.map((v) => {
      const timeUnit = isFieldDef(fieldOrDatumDef) && !isBinnedTimeUnit(fieldOrDatumDef.timeUnit) ? fieldOrDatumDef.timeUnit : void 0;
      const expr2 = valueExpr(v, {
        timeUnit,
        type: type2,
        undefinedIfExprNotRequired: true
      });
      if (expr2 !== void 0) {
        return { signal: expr2 };
      }
      return v;
    });
  }
  function binRequiresRange(fieldDef, channel) {
    if (!isBinning(fieldDef.bin)) {
      console.warn("Only call this method for binned field defs.");
      return false;
    }
    return isScaleChannel(channel) && ["ordinal", "nominal"].includes(fieldDef.type);
  }
  const CONDITIONAL_AXIS_PROP_INDEX = {
    labelAlign: {
      part: "labels",
      vgProp: "align"
    },
    labelBaseline: {
      part: "labels",
      vgProp: "baseline"
    },
    labelColor: {
      part: "labels",
      vgProp: "fill"
    },
    labelFont: {
      part: "labels",
      vgProp: "font"
    },
    labelFontSize: {
      part: "labels",
      vgProp: "fontSize"
    },
    labelFontStyle: {
      part: "labels",
      vgProp: "fontStyle"
    },
    labelFontWeight: {
      part: "labels",
      vgProp: "fontWeight"
    },
    labelOpacity: {
      part: "labels",
      vgProp: "opacity"
    },
    labelOffset: null,
    labelPadding: null,
    // There is no fixed vgProp for tickSize, need to use signal.
    gridColor: {
      part: "grid",
      vgProp: "stroke"
    },
    gridDash: {
      part: "grid",
      vgProp: "strokeDash"
    },
    gridDashOffset: {
      part: "grid",
      vgProp: "strokeDashOffset"
    },
    gridOpacity: {
      part: "grid",
      vgProp: "opacity"
    },
    gridWidth: {
      part: "grid",
      vgProp: "strokeWidth"
    },
    tickColor: {
      part: "ticks",
      vgProp: "stroke"
    },
    tickDash: {
      part: "ticks",
      vgProp: "strokeDash"
    },
    tickDashOffset: {
      part: "ticks",
      vgProp: "strokeDashOffset"
    },
    tickOpacity: {
      part: "ticks",
      vgProp: "opacity"
    },
    tickSize: null,
    // There is no fixed vgProp for tickSize, need to use signal.
    tickWidth: {
      part: "ticks",
      vgProp: "strokeWidth"
    }
  };
  function isConditionalAxisValue(v) {
    return v == null ? void 0 : v.condition;
  }
  const AXIS_PARTS = ["domain", "grid", "labels", "ticks", "title"];
  const AXIS_PROPERTY_TYPE = {
    grid: "grid",
    gridCap: "grid",
    gridColor: "grid",
    gridDash: "grid",
    gridDashOffset: "grid",
    gridOpacity: "grid",
    gridScale: "grid",
    gridWidth: "grid",
    orient: "main",
    bandPosition: "both",
    // Need to be applied to grid axis too, so the grid will align with ticks.
    aria: "main",
    description: "main",
    domain: "main",
    domainCap: "main",
    domainColor: "main",
    domainDash: "main",
    domainDashOffset: "main",
    domainOpacity: "main",
    domainWidth: "main",
    format: "main",
    formatType: "main",
    labelAlign: "main",
    labelAngle: "main",
    labelBaseline: "main",
    labelBound: "main",
    labelColor: "main",
    labelFlush: "main",
    labelFlushOffset: "main",
    labelFont: "main",
    labelFontSize: "main",
    labelFontStyle: "main",
    labelFontWeight: "main",
    labelLimit: "main",
    labelLineHeight: "main",
    labelOffset: "main",
    labelOpacity: "main",
    labelOverlap: "main",
    labelPadding: "main",
    labels: "main",
    labelSeparation: "main",
    maxExtent: "main",
    minExtent: "main",
    offset: "both",
    position: "main",
    tickCap: "main",
    tickColor: "main",
    tickDash: "main",
    tickDashOffset: "main",
    tickMinStep: "both",
    tickOffset: "both",
    // Need to be applied to grid axis too, so the grid will align with ticks.
    tickOpacity: "main",
    tickRound: "both",
    // Apply rounding to grid and ticks so they are aligned.
    ticks: "main",
    tickSize: "main",
    tickWidth: "both",
    title: "main",
    titleAlign: "main",
    titleAnchor: "main",
    titleAngle: "main",
    titleBaseline: "main",
    titleColor: "main",
    titleFont: "main",
    titleFontSize: "main",
    titleFontStyle: "main",
    titleFontWeight: "main",
    titleLimit: "main",
    titleLineHeight: "main",
    titleOpacity: "main",
    titlePadding: "main",
    titleX: "main",
    titleY: "main",
    encode: "both",
    // we hide this in Vega-Lite
    scale: "both",
    tickBand: "both",
    tickCount: "both",
    tickExtra: "both",
    translate: "both",
    values: "both",
    zindex: "both"
    // this is actually set afterward, so it doesn't matter
  };
  const COMMON_AXIS_PROPERTIES_INDEX = {
    orient: 1,
    // other things can depend on orient
    aria: 1,
    bandPosition: 1,
    description: 1,
    domain: 1,
    domainCap: 1,
    domainColor: 1,
    domainDash: 1,
    domainDashOffset: 1,
    domainOpacity: 1,
    domainWidth: 1,
    format: 1,
    formatType: 1,
    grid: 1,
    gridCap: 1,
    gridColor: 1,
    gridDash: 1,
    gridDashOffset: 1,
    gridOpacity: 1,
    gridWidth: 1,
    labelAlign: 1,
    labelAngle: 1,
    labelBaseline: 1,
    labelBound: 1,
    labelColor: 1,
    labelFlush: 1,
    labelFlushOffset: 1,
    labelFont: 1,
    labelFontSize: 1,
    labelFontStyle: 1,
    labelFontWeight: 1,
    labelLimit: 1,
    labelLineHeight: 1,
    labelOffset: 1,
    labelOpacity: 1,
    labelOverlap: 1,
    labelPadding: 1,
    labels: 1,
    labelSeparation: 1,
    maxExtent: 1,
    minExtent: 1,
    offset: 1,
    position: 1,
    tickBand: 1,
    tickCap: 1,
    tickColor: 1,
    tickCount: 1,
    tickDash: 1,
    tickDashOffset: 1,
    tickExtra: 1,
    tickMinStep: 1,
    tickOffset: 1,
    tickOpacity: 1,
    tickRound: 1,
    ticks: 1,
    tickSize: 1,
    tickWidth: 1,
    title: 1,
    titleAlign: 1,
    titleAnchor: 1,
    titleAngle: 1,
    titleBaseline: 1,
    titleColor: 1,
    titleFont: 1,
    titleFontSize: 1,
    titleFontStyle: 1,
    titleFontWeight: 1,
    titleLimit: 1,
    titleLineHeight: 1,
    titleOpacity: 1,
    titlePadding: 1,
    titleX: 1,
    titleY: 1,
    translate: 1,
    values: 1,
    zindex: 1
  };
  const AXIS_PROPERTIES_INDEX = {
    ...COMMON_AXIS_PROPERTIES_INDEX,
    style: 1,
    labelExpr: 1,
    encoding: 1
  };
  function isAxisProperty(prop) {
    return has$1(AXIS_PROPERTIES_INDEX, prop);
  }
  const AXIS_CONFIGS_INDEX = {
    axis: 1,
    axisBand: 1,
    axisBottom: 1,
    axisDiscrete: 1,
    axisLeft: 1,
    axisPoint: 1,
    axisQuantitative: 1,
    axisRight: 1,
    axisTemporal: 1,
    axisTop: 1,
    axisX: 1,
    axisXBand: 1,
    axisXDiscrete: 1,
    axisXPoint: 1,
    axisXQuantitative: 1,
    axisXTemporal: 1,
    axisY: 1,
    axisYBand: 1,
    axisYDiscrete: 1,
    axisYPoint: 1,
    axisYQuantitative: 1,
    axisYTemporal: 1
  };
  const AXIS_CONFIGS = keys(AXIS_CONFIGS_INDEX);
  function isUnitSpec(spec) {
    return hasProperty(spec, "mark");
  }
  class CompositeMarkNormalizer {
    constructor(name, run2) {
      this.name = name;
      this.run = run2;
    }
    hasMatchingType(spec) {
      if (isUnitSpec(spec)) {
        return getMarkType(spec.mark) === this.name;
      }
      return false;
    }
  }
  function channelHasField(encoding, channel) {
    const channelDef = encoding && encoding[channel];
    if (channelDef) {
      if (isArray(channelDef)) {
        return some(channelDef, (fieldDef) => !!fieldDef.field);
      } else {
        return isFieldDef(channelDef) || hasConditionalFieldDef(channelDef);
      }
    }
    return false;
  }
  function channelHasFieldOrDatum(encoding, channel) {
    const channelDef = encoding && encoding[channel];
    if (channelDef) {
      if (isArray(channelDef)) {
        return some(channelDef, (fieldDef) => !!fieldDef.field);
      } else {
        return isFieldDef(channelDef) || isDatumDef(channelDef) || hasConditionalFieldOrDatumDef(channelDef);
      }
    }
    return false;
  }
  function channelHasNestedOffsetScale(encoding, channel) {
    if (isXorY(channel)) {
      const fieldDef = encoding[channel];
      if ((isFieldDef(fieldDef) || isDatumDef(fieldDef)) && (isDiscrete$1(fieldDef.type) || isFieldDef(fieldDef) && fieldDef.timeUnit)) {
        const offsetChannel = getOffsetScaleChannel(channel);
        return channelHasFieldOrDatum(encoding, offsetChannel);
      }
    }
    return false;
  }
  function isAggregate$1(encoding) {
    return some(CHANNELS, (channel) => {
      if (channelHasField(encoding, channel)) {
        const channelDef = encoding[channel];
        if (isArray(channelDef)) {
          return some(channelDef, (fieldDef) => !!fieldDef.aggregate);
        } else {
          const fieldDef = getFieldDef(channelDef);
          return fieldDef && !!fieldDef.aggregate;
        }
      }
      return false;
    });
  }
  function extractTransformsFromEncoding(oldEncoding, config) {
    const groupby = [];
    const bins2 = [];
    const timeUnits2 = [];
    const aggregate = [];
    const encoding = {};
    forEach(oldEncoding, (channelDef, channel) => {
      if (isFieldDef(channelDef)) {
        const { field: field2, aggregate: aggOp, bin: bin2, timeUnit, ...remaining } = channelDef;
        if (aggOp || timeUnit || bin2) {
          const guide = getGuide(channelDef);
          const isTitleDefined = guide == null ? void 0 : guide.title;
          let newField = vgField(channelDef, { forAs: true });
          const newFieldDef = {
            // Only add title if it doesn't exist
            ...isTitleDefined ? [] : { title: title(channelDef, config, { allowDisabling: true }) },
            ...remaining,
            // Always overwrite field
            field: newField
          };
          if (aggOp) {
            let op;
            if (isArgmaxDef(aggOp)) {
              op = "argmax";
              newField = vgField({ op: "argmax", field: aggOp.argmax }, { forAs: true });
              newFieldDef.field = `${newField}.${field2}`;
            } else if (isArgminDef(aggOp)) {
              op = "argmin";
              newField = vgField({ op: "argmin", field: aggOp.argmin }, { forAs: true });
              newFieldDef.field = `${newField}.${field2}`;
            } else if (aggOp !== "boxplot" && aggOp !== "errorbar" && aggOp !== "errorband") {
              op = aggOp;
            }
            if (op) {
              const aggregateEntry = {
                op,
                as: newField
              };
              if (field2) {
                aggregateEntry.field = field2;
              }
              aggregate.push(aggregateEntry);
            }
          } else {
            groupby.push(newField);
            if (isTypedFieldDef(channelDef) && isBinning(bin2)) {
              bins2.push({ bin: bin2, field: field2, as: newField });
              groupby.push(vgField(channelDef, { binSuffix: "end" }));
              if (binRequiresRange(channelDef, channel)) {
                groupby.push(vgField(channelDef, { binSuffix: "range" }));
              }
              if (isXorY(channel)) {
                const secondaryChannel = {
                  field: `${newField}_end`
                };
                encoding[`${channel}2`] = secondaryChannel;
              }
              newFieldDef.bin = "binned";
              if (!isSecondaryRangeChannel(channel)) {
                newFieldDef["type"] = QUANTITATIVE;
              }
            } else if (timeUnit && !isBinnedTimeUnit(timeUnit)) {
              timeUnits2.push({
                timeUnit,
                field: field2,
                as: newField
              });
              const formatType = isTypedFieldDef(channelDef) && channelDef.type !== TEMPORAL && "time";
              if (formatType) {
                if (channel === TEXT$1 || channel === TOOLTIP) {
                  newFieldDef["formatType"] = formatType;
                } else if (isNonPositionScaleChannel(channel)) {
                  newFieldDef["legend"] = {
                    formatType,
                    ...newFieldDef["legend"]
                  };
                } else if (isXorY(channel)) {
                  newFieldDef["axis"] = {
                    formatType,
                    ...newFieldDef["axis"]
                  };
                }
              }
            }
          }
          encoding[channel] = newFieldDef;
        } else {
          groupby.push(field2);
          encoding[channel] = oldEncoding[channel];
        }
      } else {
        encoding[channel] = oldEncoding[channel];
      }
    });
    return {
      bins: bins2,
      timeUnits: timeUnits2,
      aggregate,
      groupby,
      encoding
    };
  }
  function markChannelCompatible(encoding, channel, mark) {
    const markSupported = supportMark(channel, mark);
    if (!markSupported) {
      return false;
    } else if (markSupported === "binned") {
      const primaryFieldDef = encoding[channel === X2 ? X : Y];
      if (isFieldDef(primaryFieldDef) && isFieldDef(encoding[channel]) && isBinned(primaryFieldDef.bin)) {
        return true;
      } else {
        return false;
      }
    }
    return true;
  }
  function initEncoding(encoding, mark, filled, config) {
    const normalizedEncoding = {};
    for (const key2 of keys(encoding)) {
      if (!isChannel(key2)) {
        warn(invalidEncodingChannel(key2));
      }
    }
    for (let channel of UNIT_CHANNELS) {
      if (!encoding[channel]) {
        continue;
      }
      const channelDef = encoding[channel];
      if (isXorYOffset(channel)) {
        const mainChannel = getMainChannelFromOffsetChannel(channel);
        const positionDef = normalizedEncoding[mainChannel];
        if (isFieldDef(positionDef)) {
          if (isContinuous(positionDef.type)) {
            if (isFieldDef(channelDef) && !positionDef.timeUnit) {
              warn(offsetNestedInsideContinuousPositionScaleDropped(mainChannel));
              continue;
            }
          }
        }
      }
      if (channel === "angle" && mark === "arc" && !encoding.theta) {
        warn(REPLACE_ANGLE_WITH_THETA);
        channel = THETA;
      }
      if (!markChannelCompatible(encoding, channel, mark)) {
        warn(incompatibleChannel(channel, mark));
        continue;
      }
      if (channel === SIZE && mark === "line") {
        const fieldDef = getFieldDef(encoding[channel]);
        if (fieldDef == null ? void 0 : fieldDef.aggregate) {
          warn(LINE_WITH_VARYING_SIZE);
          continue;
        }
      }
      if (channel === COLOR && (filled ? "fill" in encoding : "stroke" in encoding)) {
        warn(droppingColor("encoding", { fill: "fill" in encoding, stroke: "stroke" in encoding }));
        continue;
      }
      if (channel === DETAIL || channel === ORDER && !isArray(channelDef) && !isValueDef(channelDef) || channel === TOOLTIP && isArray(channelDef)) {
        if (channelDef) {
          if (channel === ORDER) {
            const def2 = encoding[channel];
            if (isOrderOnlyDef(def2)) {
              normalizedEncoding[channel] = def2;
              continue;
            }
          }
          normalizedEncoding[channel] = array$5(channelDef).reduce((defs, fieldDef) => {
            if (!isFieldDef(fieldDef)) {
              warn(emptyFieldDef(fieldDef, channel));
            } else {
              defs.push(initFieldDef(fieldDef, channel));
            }
            return defs;
          }, []);
        }
      } else {
        if (channel === TOOLTIP && channelDef === null) {
          normalizedEncoding[channel] = null;
        } else if (!isFieldDef(channelDef) && !isDatumDef(channelDef) && !isValueDef(channelDef) && !isConditionalDef(channelDef) && !isSignalRef(channelDef)) {
          warn(emptyFieldDef(channelDef, channel));
          continue;
        }
        normalizedEncoding[channel] = initChannelDef(channelDef, channel, config);
      }
    }
    return normalizedEncoding;
  }
  function normalizeEncoding(encoding, config) {
    const normalizedEncoding = {};
    for (const channel of keys(encoding)) {
      const newChannelDef = initChannelDef(encoding[channel], channel, config, { compositeMark: true });
      normalizedEncoding[channel] = newChannelDef;
    }
    return normalizedEncoding;
  }
  function fieldDefs(encoding) {
    const arr = [];
    for (const channel of keys(encoding)) {
      if (channelHasField(encoding, channel)) {
        const channelDef = encoding[channel];
        const channelDefArray = array$5(channelDef);
        for (const def2 of channelDefArray) {
          if (isFieldDef(def2)) {
            arr.push(def2);
          } else if (hasConditionalFieldDef(def2)) {
            arr.push(def2.condition);
          }
        }
      }
    }
    return arr;
  }
  function forEach(mapping, f, thisArg) {
    if (!mapping) {
      return;
    }
    for (const channel of keys(mapping)) {
      const el = mapping[channel];
      if (isArray(el)) {
        for (const channelDef of el) {
          f.call(thisArg, channelDef, channel);
        }
      } else {
        f.call(thisArg, el, channel);
      }
    }
  }
  function reduce(mapping, f, init2, thisArg) {
    if (!mapping) {
      return init2;
    }
    return keys(mapping).reduce((r, channel) => {
      const map2 = mapping[channel];
      if (isArray(map2)) {
        return map2.reduce((r1, channelDef) => {
          return f.call(thisArg, r1, channelDef, channel);
        }, r);
      } else {
        return f.call(thisArg, r, map2, channel);
      }
    }, init2);
  }
  function pathGroupingFields(mark, encoding) {
    return keys(encoding).reduce((details, channel) => {
      switch (channel) {
        case X:
        case Y:
        case HREF:
        case DESCRIPTION:
        case URL$1:
        case X2:
        case Y2:
        case XOFFSET:
        case YOFFSET:
        case THETA:
        case THETA2:
        case RADIUS:
        case RADIUS2:
        case TIME:
        case LATITUDE:
        case LONGITUDE:
        case LATITUDE2:
        case LONGITUDE2:
        case TEXT$1:
        case SHAPE:
        case ANGLE:
        case TOOLTIP:
          return details;
        case ORDER:
          if (mark === "line" || mark === "trail") {
            return details;
          }
        case DETAIL:
        case KEY: {
          const channelDef = encoding[channel];
          if (isArray(channelDef) || isFieldDef(channelDef)) {
            for (const fieldDef of array$5(channelDef)) {
              if (!fieldDef.aggregate) {
                details.push(vgField(fieldDef, {}));
              }
            }
          }
          return details;
        }
        case SIZE:
          if (mark === "trail") {
            return details;
          }
        case COLOR:
        case FILL:
        case STROKE:
        case OPACITY:
        case FILLOPACITY:
        case STROKEOPACITY:
        case STROKEDASH:
        case STROKEWIDTH: {
          const fieldDef = getFieldDef(encoding[channel]);
          if (fieldDef && !fieldDef.aggregate) {
            details.push(vgField(fieldDef, {}));
          }
          return details;
        }
      }
    }, []);
  }
  function filterTooltipWithAggregatedField(oldEncoding) {
    const { tooltip: tooltip2, ...filteredEncoding } = oldEncoding;
    if (!tooltip2) {
      return { filteredEncoding };
    }
    let customTooltipWithAggregatedField;
    let customTooltipWithoutAggregatedField;
    if (isArray(tooltip2)) {
      for (const t of tooltip2) {
        if (t.aggregate) {
          if (!customTooltipWithAggregatedField) {
            customTooltipWithAggregatedField = [];
          }
          customTooltipWithAggregatedField.push(t);
        } else {
          if (!customTooltipWithoutAggregatedField) {
            customTooltipWithoutAggregatedField = [];
          }
          customTooltipWithoutAggregatedField.push(t);
        }
      }
      if (customTooltipWithAggregatedField) {
        filteredEncoding.tooltip = customTooltipWithAggregatedField;
      }
    } else {
      if (tooltip2.aggregate) {
        filteredEncoding.tooltip = tooltip2;
      } else {
        customTooltipWithoutAggregatedField = tooltip2;
      }
    }
    if (isArray(customTooltipWithoutAggregatedField) && customTooltipWithoutAggregatedField.length === 1) {
      customTooltipWithoutAggregatedField = customTooltipWithoutAggregatedField[0];
    }
    return { customTooltipWithoutAggregatedField, filteredEncoding };
  }
  function getCompositeMarkTooltip(tooltipSummary, continuousAxisChannelDef, encodingWithoutContinuousAxis, withFieldName = true) {
    if ("tooltip" in encodingWithoutContinuousAxis) {
      return { tooltip: encodingWithoutContinuousAxis.tooltip };
    }
    const fiveSummaryTooltip = tooltipSummary.map(({ fieldPrefix, titlePrefix }) => {
      const mainTitle = withFieldName ? ` of ${getTitle(continuousAxisChannelDef)}` : "";
      return {
        field: fieldPrefix + continuousAxisChannelDef.field,
        type: continuousAxisChannelDef.type,
        title: isSignalRef(titlePrefix) ? { signal: `${titlePrefix}"${escape(mainTitle)}"` } : titlePrefix + mainTitle
      };
    });
    const tooltipFieldDefs = fieldDefs(encodingWithoutContinuousAxis).map(toStringFieldDef);
    return {
      tooltip: [
        ...fiveSummaryTooltip,
        // need to cast because TextFieldDef supports fewer types of bin
        ...unique(tooltipFieldDefs, hash)
      ]
    };
  }
  function getTitle(continuousAxisChannelDef) {
    const { title: title2, field: field2 } = continuousAxisChannelDef;
    return getFirstDefined(title2, field2);
  }
  function makeCompositeAggregatePartFactory(compositeMarkDef, continuousAxis, continuousAxisChannelDef, sharedEncoding, compositeMarkConfig) {
    const { scale: scale2, axis } = continuousAxisChannelDef;
    return ({ partName, mark, positionPrefix, endPositionPrefix = void 0, extraEncoding = {} }) => {
      const title2 = getTitle(continuousAxisChannelDef);
      return partLayerMixins(compositeMarkDef, partName, compositeMarkConfig, {
        mark,
        // TODO better remove this method and just have mark as a parameter of the method
        encoding: {
          [continuousAxis]: {
            field: `${positionPrefix}_${continuousAxisChannelDef.field}`,
            type: continuousAxisChannelDef.type,
            ...title2 !== void 0 ? { title: title2 } : {},
            ...scale2 !== void 0 ? { scale: scale2 } : {},
            ...axis !== void 0 ? { axis } : {}
          },
          ...isString(endPositionPrefix) ? {
            [`${continuousAxis}2`]: {
              field: `${endPositionPrefix}_${continuousAxisChannelDef.field}`
            }
          } : {},
          ...sharedEncoding,
          ...extraEncoding
        }
      });
    };
  }
  function partLayerMixins(markDef, part, compositeMarkConfig, partBaseSpec) {
    const { clip: clip2, color: color2, opacity: opacity2 } = markDef;
    const mark = markDef.type;
    if (markDef[part] || markDef[part] === void 0 && compositeMarkConfig[part]) {
      return [
        {
          ...partBaseSpec,
          mark: {
            ...compositeMarkConfig[part],
            ...clip2 ? { clip: clip2 } : {},
            ...color2 ? { color: color2 } : {},
            ...opacity2 ? { opacity: opacity2 } : {},
            ...isMarkDef(partBaseSpec.mark) ? partBaseSpec.mark : { type: partBaseSpec.mark },
            style: `${mark}-${String(part)}`,
            ...isBoolean$2(markDef[part]) ? {} : markDef[part]
          }
        }
      ];
    }
    return [];
  }
  function compositeMarkContinuousAxis(spec, orient2, compositeMark) {
    const { encoding } = spec;
    const continuousAxis = orient2 === "vertical" ? "y" : "x";
    const continuousAxisChannelDef = encoding[continuousAxis];
    const continuousAxisChannelDef2 = encoding[`${continuousAxis}2`];
    const continuousAxisChannelDefError = encoding[`${continuousAxis}Error`];
    const continuousAxisChannelDefError2 = encoding[`${continuousAxis}Error2`];
    return {
      continuousAxisChannelDef: filterAggregateFromChannelDef(continuousAxisChannelDef, compositeMark),
      continuousAxisChannelDef2: filterAggregateFromChannelDef(continuousAxisChannelDef2, compositeMark),
      continuousAxisChannelDefError: filterAggregateFromChannelDef(continuousAxisChannelDefError, compositeMark),
      continuousAxisChannelDefError2: filterAggregateFromChannelDef(continuousAxisChannelDefError2, compositeMark),
      continuousAxis
    };
  }
  function filterAggregateFromChannelDef(continuousAxisChannelDef, compositeMark) {
    if (continuousAxisChannelDef == null ? void 0 : continuousAxisChannelDef.aggregate) {
      const { aggregate, ...continuousAxisWithoutAggregate } = continuousAxisChannelDef;
      if (aggregate !== compositeMark) {
        warn(errorBarContinuousAxisHasCustomizedAggregate(aggregate, compositeMark));
      }
      return continuousAxisWithoutAggregate;
    } else {
      return continuousAxisChannelDef;
    }
  }
  function compositeMarkOrient(spec, compositeMark) {
    const { mark, encoding } = spec;
    const { x: x2, y: y2 } = encoding;
    if (isMarkDef(mark) && mark.orient) {
      return mark.orient;
    }
    if (isContinuousFieldOrDatumDef(x2)) {
      if (isContinuousFieldOrDatumDef(y2)) {
        const xAggregate = isFieldDef(x2) && x2.aggregate;
        const yAggregate = isFieldDef(y2) && y2.aggregate;
        if (!xAggregate && yAggregate === compositeMark) {
          return "vertical";
        } else if (!yAggregate && xAggregate === compositeMark) {
          return "horizontal";
        } else if (xAggregate === compositeMark && yAggregate === compositeMark) {
          throw new Error("Both x and y cannot have aggregate");
        } else {
          if (isFieldOrDatumDefForTimeFormat(y2) && !isFieldOrDatumDefForTimeFormat(x2)) {
            return "horizontal";
          }
          return "vertical";
        }
      }
      return "horizontal";
    } else if (isContinuousFieldOrDatumDef(y2)) {
      return "vertical";
    } else {
      throw new Error(`Need a valid continuous axis for ${compositeMark}s`);
    }
  }
  const BOXPLOT = "boxplot";
  const BOXPLOT_PARTS = ["box", "median", "outliers", "rule", "ticks"];
  const boxPlotNormalizer = new CompositeMarkNormalizer(BOXPLOT, normalizeBoxPlot);
  function getBoxPlotType(extent2) {
    if (isNumber$1(extent2)) {
      return "tukey";
    }
    return extent2;
  }
  function normalizeBoxPlot(spec, { config }) {
    spec = {
      ...spec,
      encoding: normalizeEncoding(spec.encoding, config)
    };
    const { mark, encoding: _encoding, params: params2, projection: _p, ...outerSpec } = spec;
    const markDef = isMarkDef(mark) ? mark : { type: mark };
    if (params2) {
      warn(selectionNotSupported("boxplot"));
    }
    const extent2 = markDef.extent ?? config.boxplot.extent;
    const sizeValue = getMarkPropOrConfig(
      "size",
      markDef,
      // TODO: https://github.com/vega/vega-lite/issues/6245
      config
    );
    const invalid = markDef.invalid;
    const boxPlotType = getBoxPlotType(extent2);
    const { bins: bins2, timeUnits: timeUnits2, transform: transform2, continuousAxisChannelDef, continuousAxis, groupby, aggregate, encodingWithoutContinuousAxis, ticksOrient, boxOrient, customTooltipWithoutAggregatedField } = boxParams(spec, extent2, config);
    const aliasedFieldName = removePathFromField(continuousAxisChannelDef.field);
    const { color: color2, size, ...encodingWithoutSizeColorAndContinuousAxis } = encodingWithoutContinuousAxis;
    const makeBoxPlotPart = (sharedEncoding) => {
      return makeCompositeAggregatePartFactory(markDef, continuousAxis, continuousAxisChannelDef, sharedEncoding, config.boxplot);
    };
    const makeBoxPlotExtent = makeBoxPlotPart(encodingWithoutSizeColorAndContinuousAxis);
    const makeBoxPlotBox = makeBoxPlotPart(encodingWithoutContinuousAxis);
    const defaultBoxColor = (isObject(config.boxplot.box) ? config.boxplot.box.color : config.mark.color) || "#4c78a8";
    const makeBoxPlotMidTick = makeBoxPlotPart({
      ...encodingWithoutSizeColorAndContinuousAxis,
      ...size ? { size } : {},
      color: {
        condition: {
          test: `${accessWithDatumToUnescapedPath(`lower_box_${continuousAxisChannelDef.field}`)} >= ${accessWithDatumToUnescapedPath(`upper_box_${continuousAxisChannelDef.field}`)}`,
          ...color2 || { value: defaultBoxColor }
        }
      }
    });
    const fiveSummaryTooltipEncoding = getCompositeMarkTooltip([
      { fieldPrefix: boxPlotType === "min-max" ? "upper_whisker_" : "max_", titlePrefix: "Max" },
      { fieldPrefix: "upper_box_", titlePrefix: "Q3" },
      { fieldPrefix: "mid_box_", titlePrefix: "Median" },
      { fieldPrefix: "lower_box_", titlePrefix: "Q1" },
      { fieldPrefix: boxPlotType === "min-max" ? "lower_whisker_" : "min_", titlePrefix: "Min" }
    ], continuousAxisChannelDef, encodingWithoutContinuousAxis);
    const endTick = { type: "tick", color: "black", opacity: 1, orient: ticksOrient, invalid, aria: false };
    const whiskerTooltipEncoding = boxPlotType === "min-max" ? fiveSummaryTooltipEncoding : (
      // for tukey / k-IQR, just show upper/lower-whisker
      getCompositeMarkTooltip([
        { fieldPrefix: "upper_whisker_", titlePrefix: "Upper Whisker" },
        { fieldPrefix: "lower_whisker_", titlePrefix: "Lower Whisker" }
      ], continuousAxisChannelDef, encodingWithoutContinuousAxis)
    );
    const whiskerLayers = [
      ...makeBoxPlotExtent({
        partName: "rule",
        mark: { type: "rule", invalid, aria: false },
        positionPrefix: "lower_whisker",
        endPositionPrefix: "lower_box",
        extraEncoding: whiskerTooltipEncoding
      }),
      ...makeBoxPlotExtent({
        partName: "rule",
        mark: { type: "rule", invalid, aria: false },
        positionPrefix: "upper_box",
        endPositionPrefix: "upper_whisker",
        extraEncoding: whiskerTooltipEncoding
      }),
      ...makeBoxPlotExtent({
        partName: "ticks",
        mark: endTick,
        positionPrefix: "lower_whisker",
        extraEncoding: whiskerTooltipEncoding
      }),
      ...makeBoxPlotExtent({
        partName: "ticks",
        mark: endTick,
        positionPrefix: "upper_whisker",
        extraEncoding: whiskerTooltipEncoding
      })
    ];
    const boxLayers = [
      ...boxPlotType !== "tukey" ? whiskerLayers : [],
      ...makeBoxPlotBox({
        partName: "box",
        mark: {
          type: "bar",
          ...sizeValue ? { size: sizeValue } : {},
          orient: boxOrient,
          invalid,
          ariaRoleDescription: "box"
        },
        positionPrefix: "lower_box",
        endPositionPrefix: "upper_box",
        extraEncoding: fiveSummaryTooltipEncoding
      }),
      ...makeBoxPlotMidTick({
        partName: "median",
        mark: {
          type: "tick",
          invalid,
          ...isObject(config.boxplot.median) && config.boxplot.median.color ? { color: config.boxplot.median.color } : {},
          ...sizeValue ? { size: sizeValue } : {},
          orient: ticksOrient,
          aria: false
        },
        positionPrefix: "mid_box",
        extraEncoding: fiveSummaryTooltipEncoding
      })
    ];
    if (boxPlotType === "min-max") {
      return {
        ...outerSpec,
        transform: (outerSpec.transform ?? []).concat(transform2),
        layer: boxLayers
      };
    }
    const lowerBoxExpr = accessWithDatumToUnescapedPath(`lower_box_${continuousAxisChannelDef.field}`);
    const upperBoxExpr = accessWithDatumToUnescapedPath(`upper_box_${continuousAxisChannelDef.field}`);
    const iqrExpr = `(${upperBoxExpr} - ${lowerBoxExpr})`;
    const lowerWhiskerExpr = `${lowerBoxExpr} - ${extent2} * ${iqrExpr}`;
    const upperWhiskerExpr = `${upperBoxExpr} + ${extent2} * ${iqrExpr}`;
    const fieldExpr2 = accessWithDatumToUnescapedPath(continuousAxisChannelDef.field);
    const joinaggregateTransform = {
      joinaggregate: boxParamsQuartiles(continuousAxisChannelDef.field),
      groupby
    };
    const filteredWhiskerSpec = {
      transform: [
        {
          filter: `(${lowerWhiskerExpr} <= ${fieldExpr2}) && (${fieldExpr2} <= ${upperWhiskerExpr})`
        },
        {
          aggregate: [
            {
              op: "min",
              field: continuousAxisChannelDef.field,
              as: `lower_whisker_${aliasedFieldName}`
            },
            {
              op: "max",
              field: continuousAxisChannelDef.field,
              as: `upper_whisker_${aliasedFieldName}`
            },
            // preserve lower_box / upper_box
            {
              op: "min",
              field: `lower_box_${continuousAxisChannelDef.field}`,
              as: `lower_box_${aliasedFieldName}`
            },
            {
              op: "max",
              field: `upper_box_${continuousAxisChannelDef.field}`,
              as: `upper_box_${aliasedFieldName}`
            },
            ...aggregate
          ],
          groupby
        }
      ],
      layer: whiskerLayers
    };
    const { tooltip: tooltip2, ...encodingWithoutSizeColorContinuousAxisAndTooltip } = encodingWithoutSizeColorAndContinuousAxis;
    const { scale: scale2, axis } = continuousAxisChannelDef;
    const title2 = getTitle(continuousAxisChannelDef);
    const axisWithoutTitle = omit(axis, ["title"]);
    const outlierLayersMixins = partLayerMixins(markDef, "outliers", config.boxplot, {
      transform: [{ filter: `(${fieldExpr2} < ${lowerWhiskerExpr}) || (${fieldExpr2} > ${upperWhiskerExpr})` }],
      mark: "point",
      encoding: {
        [continuousAxis]: {
          field: continuousAxisChannelDef.field,
          type: continuousAxisChannelDef.type,
          ...title2 !== void 0 ? { title: title2 } : {},
          ...scale2 !== void 0 ? { scale: scale2 } : {},
          // add axis without title since we already added the title above
          ...isEmpty(axisWithoutTitle) ? {} : { axis: axisWithoutTitle }
        },
        ...encodingWithoutSizeColorContinuousAxisAndTooltip,
        ...color2 ? { color: color2 } : {},
        ...customTooltipWithoutAggregatedField ? { tooltip: customTooltipWithoutAggregatedField } : {}
      }
    })[0];
    let filteredLayersMixins;
    const filteredLayersMixinsTransforms = [...bins2, ...timeUnits2, joinaggregateTransform];
    if (outlierLayersMixins) {
      filteredLayersMixins = {
        transform: filteredLayersMixinsTransforms,
        layer: [outlierLayersMixins, filteredWhiskerSpec]
      };
    } else {
      filteredLayersMixins = filteredWhiskerSpec;
      filteredLayersMixins.transform.unshift(...filteredLayersMixinsTransforms);
    }
    return {
      ...outerSpec,
      layer: [
        filteredLayersMixins,
        {
          // boxplot
          transform: transform2,
          layer: boxLayers
        }
      ]
    };
  }
  function boxParamsQuartiles(continousAxisField) {
    const aliasedFieldName = removePathFromField(continousAxisField);
    return [
      {
        op: "q1",
        field: continousAxisField,
        as: `lower_box_${aliasedFieldName}`
      },
      {
        op: "q3",
        field: continousAxisField,
        as: `upper_box_${aliasedFieldName}`
      }
    ];
  }
  function boxParams(spec, extent2, config) {
    const orient2 = compositeMarkOrient(spec, BOXPLOT);
    const { continuousAxisChannelDef, continuousAxis } = compositeMarkContinuousAxis(spec, orient2, BOXPLOT);
    const continuousFieldName = continuousAxisChannelDef.field;
    const aliasedFieldName = removePathFromField(continuousFieldName);
    const boxPlotType = getBoxPlotType(extent2);
    const boxplotSpecificAggregate = [
      ...boxParamsQuartiles(continuousFieldName),
      {
        op: "median",
        field: continuousFieldName,
        as: `mid_box_${aliasedFieldName}`
      },
      {
        op: "min",
        field: continuousFieldName,
        as: (boxPlotType === "min-max" ? "lower_whisker_" : "min_") + aliasedFieldName
      },
      {
        op: "max",
        field: continuousFieldName,
        as: (boxPlotType === "min-max" ? "upper_whisker_" : "max_") + aliasedFieldName
      }
    ];
    const postAggregateCalculates = boxPlotType === "min-max" || boxPlotType === "tukey" ? [] : [
      // This is for the  original k-IQR, which we do not expose
      {
        calculate: `${accessWithDatumToUnescapedPath(`upper_box_${aliasedFieldName}`)} - ${accessWithDatumToUnescapedPath(`lower_box_${aliasedFieldName}`)}`,
        as: `iqr_${aliasedFieldName}`
      },
      {
        calculate: `min(${accessWithDatumToUnescapedPath(`upper_box_${aliasedFieldName}`)} + ${accessWithDatumToUnescapedPath(`iqr_${aliasedFieldName}`)} * ${extent2}, ${accessWithDatumToUnescapedPath(`max_${aliasedFieldName}`)})`,
        as: `upper_whisker_${aliasedFieldName}`
      },
      {
        calculate: `max(${accessWithDatumToUnescapedPath(`lower_box_${aliasedFieldName}`)} - ${accessWithDatumToUnescapedPath(`iqr_${aliasedFieldName}`)} * ${extent2}, ${accessWithDatumToUnescapedPath(`min_${aliasedFieldName}`)})`,
        as: `lower_whisker_${aliasedFieldName}`
      }
    ];
    const { [continuousAxis]: oldContinuousAxisChannelDef, ...oldEncodingWithoutContinuousAxis } = spec.encoding;
    const { customTooltipWithoutAggregatedField, filteredEncoding } = filterTooltipWithAggregatedField(oldEncodingWithoutContinuousAxis);
    const { bins: bins2, timeUnits: timeUnits2, aggregate, groupby, encoding: encodingWithoutContinuousAxis } = extractTransformsFromEncoding(filteredEncoding, config);
    const ticksOrient = orient2 === "vertical" ? "horizontal" : "vertical";
    const boxOrient = orient2;
    const transform2 = [
      ...bins2,
      ...timeUnits2,
      {
        aggregate: [...aggregate, ...boxplotSpecificAggregate],
        groupby
      },
      ...postAggregateCalculates
    ];
    return {
      bins: bins2,
      timeUnits: timeUnits2,
      transform: transform2,
      groupby,
      aggregate,
      continuousAxisChannelDef,
      continuousAxis,
      encodingWithoutContinuousAxis,
      ticksOrient,
      boxOrient,
      customTooltipWithoutAggregatedField
    };
  }
  const ERRORBAR = "errorbar";
  const ERRORBAR_PARTS = ["ticks", "rule"];
  const errorBarNormalizer = new CompositeMarkNormalizer(ERRORBAR, normalizeErrorBar);
  function normalizeErrorBar(spec, { config }) {
    spec = {
      ...spec,
      encoding: normalizeEncoding(spec.encoding, config)
    };
    const { transform: transform2, continuousAxisChannelDef, continuousAxis, encodingWithoutContinuousAxis, ticksOrient, markDef, outerSpec, tooltipEncoding } = errorBarParams(spec, ERRORBAR, config);
    delete encodingWithoutContinuousAxis.size;
    const makeErrorBarPart = makeCompositeAggregatePartFactory(markDef, continuousAxis, continuousAxisChannelDef, encodingWithoutContinuousAxis, config.errorbar);
    const thickness = markDef.thickness;
    const size = markDef.size;
    const tick2 = {
      type: "tick",
      orient: ticksOrient,
      aria: false,
      ...thickness !== void 0 ? { thickness } : {},
      ...size !== void 0 ? { size } : {}
    };
    const layer = [
      ...makeErrorBarPart({
        partName: "ticks",
        mark: tick2,
        positionPrefix: "lower",
        extraEncoding: tooltipEncoding
      }),
      ...makeErrorBarPart({
        partName: "ticks",
        mark: tick2,
        positionPrefix: "upper",
        extraEncoding: tooltipEncoding
      }),
      ...makeErrorBarPart({
        partName: "rule",
        mark: {
          type: "rule",
          ariaRoleDescription: "errorbar",
          ...thickness !== void 0 ? { size: thickness } : {}
        },
        positionPrefix: "lower",
        endPositionPrefix: "upper",
        extraEncoding: tooltipEncoding
      })
    ];
    return {
      ...outerSpec,
      transform: transform2,
      ...layer.length > 1 ? { layer } : { ...layer[0] }
    };
  }
  function errorBarOrientAndInputType(spec, compositeMark) {
    const { encoding } = spec;
    if (errorBarIsInputTypeRaw(encoding)) {
      return {
        orient: compositeMarkOrient(spec, compositeMark),
        inputType: "raw"
      };
    }
    const isTypeAggregatedUpperLower = errorBarIsInputTypeAggregatedUpperLower(encoding);
    const isTypeAggregatedError = errorBarIsInputTypeAggregatedError(encoding);
    const x2 = encoding.x;
    const y2 = encoding.y;
    if (isTypeAggregatedUpperLower) {
      if (isTypeAggregatedError) {
        throw new Error(`${compositeMark} cannot be both type aggregated-upper-lower and aggregated-error`);
      }
      const x22 = encoding.x2;
      const y22 = encoding.y2;
      if (isFieldOrDatumDef(x22) && isFieldOrDatumDef(y22)) {
        throw new Error(`${compositeMark} cannot have both x2 and y2`);
      } else if (isFieldOrDatumDef(x22)) {
        if (isContinuousFieldOrDatumDef(x2)) {
          return { orient: "horizontal", inputType: "aggregated-upper-lower" };
        } else {
          throw new Error(`Both x and x2 have to be quantitative in ${compositeMark}`);
        }
      } else if (isFieldOrDatumDef(y22)) {
        if (isContinuousFieldOrDatumDef(y2)) {
          return { orient: "vertical", inputType: "aggregated-upper-lower" };
        } else {
          throw new Error(`Both y and y2 have to be quantitative in ${compositeMark}`);
        }
      }
      throw new Error("No ranged axis");
    } else {
      const xError = encoding.xError;
      const xError2 = encoding.xError2;
      const yError = encoding.yError;
      const yError2 = encoding.yError2;
      if (isFieldOrDatumDef(xError2) && !isFieldOrDatumDef(xError)) {
        throw new Error(`${compositeMark} cannot have xError2 without xError`);
      }
      if (isFieldOrDatumDef(yError2) && !isFieldOrDatumDef(yError)) {
        throw new Error(`${compositeMark} cannot have yError2 without yError`);
      }
      if (isFieldOrDatumDef(xError) && isFieldOrDatumDef(yError)) {
        throw new Error(`${compositeMark} cannot have both xError and yError with both are quantiative`);
      } else if (isFieldOrDatumDef(xError)) {
        if (isContinuousFieldOrDatumDef(x2)) {
          return { orient: "horizontal", inputType: "aggregated-error" };
        } else {
          throw new Error("All x, xError, and xError2 (if exist) have to be quantitative");
        }
      } else if (isFieldOrDatumDef(yError)) {
        if (isContinuousFieldOrDatumDef(y2)) {
          return { orient: "vertical", inputType: "aggregated-error" };
        } else {
          throw new Error("All y, yError, and yError2 (if exist) have to be quantitative");
        }
      }
      throw new Error("No ranged axis");
    }
  }
  function errorBarIsInputTypeRaw(encoding) {
    return (isFieldOrDatumDef(encoding.x) || isFieldOrDatumDef(encoding.y)) && !isFieldOrDatumDef(encoding.x2) && !isFieldOrDatumDef(encoding.y2) && !isFieldOrDatumDef(encoding.xError) && !isFieldOrDatumDef(encoding.xError2) && !isFieldOrDatumDef(encoding.yError) && !isFieldOrDatumDef(encoding.yError2);
  }
  function errorBarIsInputTypeAggregatedUpperLower(encoding) {
    return isFieldOrDatumDef(encoding.x2) || isFieldOrDatumDef(encoding.y2);
  }
  function errorBarIsInputTypeAggregatedError(encoding) {
    return isFieldOrDatumDef(encoding.xError) || isFieldOrDatumDef(encoding.xError2) || isFieldOrDatumDef(encoding.yError) || isFieldOrDatumDef(encoding.yError2);
  }
  function errorBarParams(spec, compositeMark, config) {
    const { mark, encoding, params: params2, projection: _p, ...outerSpec } = spec;
    const markDef = isMarkDef(mark) ? mark : { type: mark };
    if (params2) {
      warn(selectionNotSupported(compositeMark));
    }
    const { orient: orient2, inputType } = errorBarOrientAndInputType(spec, compositeMark);
    const { continuousAxisChannelDef, continuousAxisChannelDef2, continuousAxisChannelDefError, continuousAxisChannelDefError2, continuousAxis } = compositeMarkContinuousAxis(spec, orient2, compositeMark);
    const { errorBarSpecificAggregate, postAggregateCalculates, tooltipSummary, tooltipTitleWithFieldName } = errorBarAggregationAndCalculation(markDef, continuousAxisChannelDef, continuousAxisChannelDef2, continuousAxisChannelDefError, continuousAxisChannelDefError2, inputType, compositeMark, config);
    const { [continuousAxis]: oldContinuousAxisChannelDef, [continuousAxis === "x" ? "x2" : "y2"]: oldContinuousAxisChannelDef2, [continuousAxis === "x" ? "xError" : "yError"]: oldContinuousAxisChannelDefError, [continuousAxis === "x" ? "xError2" : "yError2"]: oldContinuousAxisChannelDefError2, ...oldEncodingWithoutContinuousAxis } = encoding;
    const { bins: bins2, timeUnits: timeUnits2, aggregate: oldAggregate, groupby: oldGroupBy, encoding: encodingWithoutContinuousAxis } = extractTransformsFromEncoding(oldEncodingWithoutContinuousAxis, config);
    const aggregate = [...oldAggregate, ...errorBarSpecificAggregate];
    const groupby = inputType !== "raw" ? [] : oldGroupBy;
    const tooltipEncoding = getCompositeMarkTooltip(tooltipSummary, continuousAxisChannelDef, encodingWithoutContinuousAxis, tooltipTitleWithFieldName);
    return {
      transform: [
        ...outerSpec.transform ?? [],
        ...bins2,
        ...timeUnits2,
        ...aggregate.length === 0 ? [] : [{ aggregate, groupby }],
        ...postAggregateCalculates
      ],
      groupby,
      continuousAxisChannelDef,
      continuousAxis,
      encodingWithoutContinuousAxis,
      ticksOrient: orient2 === "vertical" ? "horizontal" : "vertical",
      markDef,
      outerSpec,
      tooltipEncoding
    };
  }
  function errorBarAggregationAndCalculation(markDef, continuousAxisChannelDef, continuousAxisChannelDef2, continuousAxisChannelDefError, continuousAxisChannelDefError2, inputType, compositeMark, config) {
    let errorBarSpecificAggregate = [];
    let postAggregateCalculates = [];
    const continuousFieldName = continuousAxisChannelDef.field;
    let tooltipSummary;
    let tooltipTitleWithFieldName = false;
    if (inputType === "raw") {
      const center = markDef.center ? markDef.center : markDef.extent ? markDef.extent === "iqr" ? "median" : "mean" : config.errorbar.center;
      const extent2 = markDef.extent ? markDef.extent : center === "mean" ? "stderr" : "iqr";
      if (center === "median" !== (extent2 === "iqr")) {
        warn(errorBarCenterIsUsedWithWrongExtent(center, extent2, compositeMark));
      }
      if (extent2 === "stderr" || extent2 === "stdev") {
        errorBarSpecificAggregate = [
          { op: extent2, field: continuousFieldName, as: `extent_${continuousFieldName}` },
          { op: center, field: continuousFieldName, as: `center_${continuousFieldName}` }
        ];
        postAggregateCalculates = [
          {
            calculate: `${accessWithDatumToUnescapedPath(`center_${continuousFieldName}`)} + ${accessWithDatumToUnescapedPath(`extent_${continuousFieldName}`)}`,
            as: `upper_${continuousFieldName}`
          },
          {
            calculate: `${accessWithDatumToUnescapedPath(`center_${continuousFieldName}`)} - ${accessWithDatumToUnescapedPath(`extent_${continuousFieldName}`)}`,
            as: `lower_${continuousFieldName}`
          }
        ];
        tooltipSummary = [
          { fieldPrefix: "center_", titlePrefix: titleCase(center) },
          { fieldPrefix: "upper_", titlePrefix: getTitlePrefix(center, extent2, "+") },
          { fieldPrefix: "lower_", titlePrefix: getTitlePrefix(center, extent2, "-") }
        ];
        tooltipTitleWithFieldName = true;
      } else {
        let centerOp;
        let lowerExtentOp;
        let upperExtentOp;
        if (extent2 === "ci") {
          centerOp = "mean";
          lowerExtentOp = "ci0";
          upperExtentOp = "ci1";
        } else {
          centerOp = "median";
          lowerExtentOp = "q1";
          upperExtentOp = "q3";
        }
        errorBarSpecificAggregate = [
          { op: lowerExtentOp, field: continuousFieldName, as: `lower_${continuousFieldName}` },
          { op: upperExtentOp, field: continuousFieldName, as: `upper_${continuousFieldName}` },
          { op: centerOp, field: continuousFieldName, as: `center_${continuousFieldName}` }
        ];
        tooltipSummary = [
          {
            fieldPrefix: "upper_",
            titlePrefix: title({ field: continuousFieldName, aggregate: upperExtentOp, type: "quantitative" }, config, {
              allowDisabling: false
            })
          },
          {
            fieldPrefix: "lower_",
            titlePrefix: title({ field: continuousFieldName, aggregate: lowerExtentOp, type: "quantitative" }, config, {
              allowDisabling: false
            })
          },
          {
            fieldPrefix: "center_",
            titlePrefix: title({ field: continuousFieldName, aggregate: centerOp, type: "quantitative" }, config, {
              allowDisabling: false
            })
          }
        ];
      }
    } else {
      if (markDef.center || markDef.extent) {
        warn(errorBarCenterAndExtentAreNotNeeded(markDef.center, markDef.extent));
      }
      if (inputType === "aggregated-upper-lower") {
        tooltipSummary = [];
        postAggregateCalculates = [
          {
            calculate: accessWithDatumToUnescapedPath(continuousAxisChannelDef2.field),
            as: `upper_${continuousFieldName}`
          },
          { calculate: accessWithDatumToUnescapedPath(continuousFieldName), as: `lower_${continuousFieldName}` }
        ];
      } else if (inputType === "aggregated-error") {
        tooltipSummary = [{ fieldPrefix: "", titlePrefix: continuousFieldName }];
        postAggregateCalculates = [
          {
            calculate: `${accessWithDatumToUnescapedPath(continuousFieldName)} + ${accessWithDatumToUnescapedPath(continuousAxisChannelDefError.field)}`,
            as: `upper_${continuousFieldName}`
          }
        ];
        if (continuousAxisChannelDefError2) {
          postAggregateCalculates.push({
            calculate: `${accessWithDatumToUnescapedPath(continuousFieldName)} + ${accessWithDatumToUnescapedPath(continuousAxisChannelDefError2.field)}`,
            as: `lower_${continuousFieldName}`
          });
        } else {
          postAggregateCalculates.push({
            calculate: `${accessWithDatumToUnescapedPath(continuousFieldName)} - ${accessWithDatumToUnescapedPath(continuousAxisChannelDefError.field)}`,
            as: `lower_${continuousFieldName}`
          });
        }
      }
      for (const postAggregateCalculate of postAggregateCalculates) {
        tooltipSummary.push({
          fieldPrefix: postAggregateCalculate.as.substring(0, 6),
          titlePrefix: replaceAll(replaceAll(postAggregateCalculate.calculate, "datum['", ""), "']", "")
        });
      }
    }
    return { postAggregateCalculates, errorBarSpecificAggregate, tooltipSummary, tooltipTitleWithFieldName };
  }
  function getTitlePrefix(center, extent2, operation) {
    return `${titleCase(center)} ${operation} ${extent2}`;
  }
  const ERRORBAND = "errorband";
  const ERRORBAND_PARTS = ["band", "borders"];
  const errorBandNormalizer = new CompositeMarkNormalizer(ERRORBAND, normalizeErrorBand);
  function normalizeErrorBand(spec, { config }) {
    spec = {
      ...spec,
      encoding: normalizeEncoding(spec.encoding, config)
    };
    const { transform: transform2, continuousAxisChannelDef, continuousAxis, encodingWithoutContinuousAxis, markDef, outerSpec, tooltipEncoding } = errorBarParams(spec, ERRORBAND, config);
    const errorBandDef = markDef;
    const makeErrorBandPart = makeCompositeAggregatePartFactory(errorBandDef, continuousAxis, continuousAxisChannelDef, encodingWithoutContinuousAxis, config.errorband);
    const is2D = spec.encoding.x !== void 0 && spec.encoding.y !== void 0;
    let bandMark = { type: is2D ? "area" : "rect" };
    let bordersMark = { type: is2D ? "line" : "rule" };
    const interpolate2 = {
      ...errorBandDef.interpolate ? { interpolate: errorBandDef.interpolate } : {},
      ...errorBandDef.tension && errorBandDef.interpolate ? { tension: errorBandDef.tension } : {}
    };
    if (is2D) {
      bandMark = {
        ...bandMark,
        ...interpolate2,
        ariaRoleDescription: "errorband"
      };
      bordersMark = {
        ...bordersMark,
        ...interpolate2,
        aria: false
      };
    } else if (errorBandDef.interpolate) {
      warn(errorBand1DNotSupport("interpolate"));
    } else if (errorBandDef.tension) {
      warn(errorBand1DNotSupport("tension"));
    }
    return {
      ...outerSpec,
      transform: transform2,
      layer: [
        ...makeErrorBandPart({
          partName: "band",
          mark: bandMark,
          positionPrefix: "lower",
          endPositionPrefix: "upper",
          extraEncoding: tooltipEncoding
        }),
        ...makeErrorBandPart({
          partName: "borders",
          mark: bordersMark,
          positionPrefix: "lower",
          extraEncoding: tooltipEncoding
        }),
        ...makeErrorBandPart({
          partName: "borders",
          mark: bordersMark,
          positionPrefix: "upper",
          extraEncoding: tooltipEncoding
        })
      ]
    };
  }
  const compositeMarkRegistry = {};
  function add(mark, run2, parts) {
    const normalizer = new CompositeMarkNormalizer(mark, run2);
    compositeMarkRegistry[mark] = { normalizer, parts };
  }
  function getAllCompositeMarks() {
    return keys(compositeMarkRegistry);
  }
  add(BOXPLOT, normalizeBoxPlot, BOXPLOT_PARTS);
  add(ERRORBAR, normalizeErrorBar, ERRORBAR_PARTS);
  add(ERRORBAND, normalizeErrorBand, ERRORBAND_PARTS);
  const VL_ONLY_LEGEND_CONFIG = [
    "gradientHorizontalMaxLength",
    "gradientHorizontalMinLength",
    "gradientVerticalMaxLength",
    "gradientVerticalMinLength",
    "unselectedOpacity"
  ];
  const HEADER_TITLE_PROPERTIES_MAP = {
    titleAlign: "align",
    titleAnchor: "anchor",
    titleAngle: "angle",
    titleBaseline: "baseline",
    titleColor: "color",
    titleFont: "font",
    titleFontSize: "fontSize",
    titleFontStyle: "fontStyle",
    titleFontWeight: "fontWeight",
    titleLimit: "limit",
    titleLineHeight: "lineHeight",
    titleOrient: "orient",
    titlePadding: "offset"
  };
  const HEADER_LABEL_PROPERTIES_MAP = {
    labelAlign: "align",
    labelAnchor: "anchor",
    labelAngle: "angle",
    labelBaseline: "baseline",
    labelColor: "color",
    labelFont: "font",
    labelFontSize: "fontSize",
    labelFontStyle: "fontStyle",
    labelFontWeight: "fontWeight",
    labelLimit: "limit",
    labelLineHeight: "lineHeight",
    labelOrient: "orient",
    labelPadding: "offset"
  };
  const HEADER_TITLE_PROPERTIES = keys(HEADER_TITLE_PROPERTIES_MAP);
  const HEADER_LABEL_PROPERTIES = keys(HEADER_LABEL_PROPERTIES_MAP);
  const HEADER_CONFIGS_INDEX = {
    header: 1,
    headerRow: 1,
    headerColumn: 1,
    headerFacet: 1
  };
  const HEADER_CONFIGS = keys(HEADER_CONFIGS_INDEX);
  const LEGEND_SCALE_CHANNELS = [
    "size",
    "shape",
    "fill",
    "stroke",
    "strokeDash",
    "strokeWidth",
    "opacity"
  ];
  const defaultLegendConfig = {
    gradientHorizontalMaxLength: 200,
    gradientHorizontalMinLength: 100,
    gradientVerticalMaxLength: 200,
    gradientVerticalMinLength: 64,
    // This is Vega's minimum.
    unselectedOpacity: 0.35
  };
  const COMMON_LEGEND_PROPERTY_INDEX = {
    aria: 1,
    clipHeight: 1,
    columnPadding: 1,
    columns: 1,
    cornerRadius: 1,
    description: 1,
    direction: 1,
    fillColor: 1,
    format: 1,
    formatType: 1,
    gradientLength: 1,
    gradientOpacity: 1,
    gradientStrokeColor: 1,
    gradientStrokeWidth: 1,
    gradientThickness: 1,
    gridAlign: 1,
    labelAlign: 1,
    labelBaseline: 1,
    labelColor: 1,
    labelFont: 1,
    labelFontSize: 1,
    labelFontStyle: 1,
    labelFontWeight: 1,
    labelLimit: 1,
    labelOffset: 1,
    labelOpacity: 1,
    labelOverlap: 1,
    labelPadding: 1,
    labelSeparation: 1,
    legendX: 1,
    legendY: 1,
    offset: 1,
    orient: 1,
    padding: 1,
    rowPadding: 1,
    strokeColor: 1,
    symbolDash: 1,
    symbolDashOffset: 1,
    symbolFillColor: 1,
    symbolLimit: 1,
    symbolOffset: 1,
    symbolOpacity: 1,
    symbolSize: 1,
    symbolStrokeColor: 1,
    symbolStrokeWidth: 1,
    symbolType: 1,
    tickCount: 1,
    tickMinStep: 1,
    title: 1,
    titleAlign: 1,
    titleAnchor: 1,
    titleBaseline: 1,
    titleColor: 1,
    titleFont: 1,
    titleFontSize: 1,
    titleFontStyle: 1,
    titleFontWeight: 1,
    titleLimit: 1,
    titleLineHeight: 1,
    titleOpacity: 1,
    titleOrient: 1,
    titlePadding: 1,
    type: 1,
    values: 1,
    zindex: 1
  };
  const SELECTION_ID = "_vgsid_";
  const defaultConfig$2 = {
    point: {
      on: "click",
      fields: [SELECTION_ID],
      toggle: "event.shiftKey",
      resolve: "global",
      clear: "dblclick"
    },
    interval: {
      on: "[pointerdown, window:pointerup] > window:pointermove!",
      encodings: ["x", "y"],
      translate: "[pointerdown, window:pointerup] > window:pointermove!",
      zoom: "wheel!",
      mark: { fill: "#333", fillOpacity: 0.125, stroke: "white" },
      resolve: "global",
      clear: "dblclick"
    }
  };
  function isLegendBinding(bind2) {
    return bind2 === "legend" || !!(bind2 == null ? void 0 : bind2.legend);
  }
  function isLegendStreamBinding(bind2) {
    return isLegendBinding(bind2) && isObject(bind2);
  }
  function isSelectionParameter(param2) {
    return !!(param2 == null ? void 0 : param2["select"]);
  }
  function assembleParameterSignals(params2) {
    const signals = [];
    for (const param2 of params2 || []) {
      if (isSelectionParameter(param2))
        continue;
      const { expr: expr2, bind: bind2, ...rest } = param2;
      if (bind2 && expr2) {
        const signal = {
          ...rest,
          bind: bind2,
          init: expr2
        };
        signals.push(signal);
      } else {
        const signal = {
          ...rest,
          ...expr2 ? { update: expr2 } : {},
          ...bind2 ? { bind: bind2 } : {}
        };
        signals.push(signal);
      }
    }
    return signals;
  }
  function isAnyConcatSpec(spec) {
    return isVConcatSpec(spec) || isHConcatSpec(spec) || isConcatSpec(spec);
  }
  function isConcatSpec(spec) {
    return hasProperty(spec, "concat");
  }
  function isVConcatSpec(spec) {
    return hasProperty(spec, "vconcat");
  }
  function isHConcatSpec(spec) {
    return hasProperty(spec, "hconcat");
  }
  function getStepFor({ step, offsetIsDiscrete }) {
    if (offsetIsDiscrete) {
      return step.for ?? "offset";
    } else {
      return "position";
    }
  }
  function isStep(size) {
    return hasProperty(size, "step");
  }
  function isFrameMixins(o) {
    return hasProperty(o, "view") || hasProperty(o, "width") || hasProperty(o, "height");
  }
  const DEFAULT_SPACING = 20;
  const COMPOSITION_LAYOUT_INDEX = {
    align: 1,
    bounds: 1,
    center: 1,
    columns: 1,
    spacing: 1
  };
  const COMPOSITION_LAYOUT_PROPERTIES = keys(COMPOSITION_LAYOUT_INDEX);
  function extractCompositionLayout(spec, specType, config) {
    const compositionConfig = config[specType];
    const layout = {};
    const { spacing: spacingConfig, columns } = compositionConfig;
    if (spacingConfig !== void 0) {
      layout.spacing = spacingConfig;
    }
    if (columns !== void 0) {
      if (isFacetSpec(spec) && !isFacetMapping(spec.facet) || isConcatSpec(spec)) {
        layout.columns = columns;
      }
    }
    if (isVConcatSpec(spec)) {
      layout.columns = 1;
    }
    for (const prop of COMPOSITION_LAYOUT_PROPERTIES) {
      if (spec[prop] !== void 0) {
        if (prop === "spacing") {
          const spacing = spec[prop];
          layout[prop] = isNumber$1(spacing) ? spacing : {
            row: spacing.row ?? spacingConfig,
            column: spacing.column ?? spacingConfig
          };
        } else {
          layout[prop] = spec[prop];
        }
      }
    }
    return layout;
  }
  function getViewConfigContinuousSize(viewConfig, channel) {
    return viewConfig[channel] ?? viewConfig[channel === "width" ? "continuousWidth" : "continuousHeight"];
  }
  function getViewConfigDiscreteStep(viewConfig, channel) {
    const size = getViewConfigDiscreteSize(viewConfig, channel);
    return isStep(size) ? size.step : DEFAULT_STEP;
  }
  function getViewConfigDiscreteSize(viewConfig, channel) {
    const size = viewConfig[channel] ?? viewConfig[channel === "width" ? "discreteWidth" : "discreteHeight"];
    return getFirstDefined(size, { step: viewConfig.step });
  }
  const DEFAULT_STEP = 20;
  const defaultViewConfig = {
    continuousWidth: 200,
    continuousHeight: 200,
    step: DEFAULT_STEP
  };
  const defaultConfig$1 = {
    background: "white",
    padding: 5,
    timeFormat: "%b %d, %Y",
    countTitle: "Count of Records",
    view: defaultViewConfig,
    mark: defaultMarkConfig,
    arc: {},
    area: {},
    bar: defaultBarConfig,
    circle: {},
    geoshape: {},
    image: {},
    line: {},
    point: {},
    rect: defaultRectConfig,
    rule: { color: "black" },
    // Need this to override default color in mark config
    square: {},
    text: { color: "black" },
    // Need this to override default color in mark config
    tick: defaultTickConfig,
    trail: {},
    boxplot: {
      size: 14,
      extent: 1.5,
      box: {},
      median: { color: "white" },
      outliers: {},
      rule: {},
      ticks: null
    },
    errorbar: {
      center: "mean",
      rule: true,
      ticks: false
    },
    errorband: {
      band: {
        opacity: 0.3
      },
      borders: false
    },
    scale: defaultScaleConfig,
    projection: {},
    legend: defaultLegendConfig,
    header: { titlePadding: 10, labelPadding: 10 },
    headerColumn: {},
    headerRow: {},
    headerFacet: {},
    selection: defaultConfig$2,
    style: {},
    title: {},
    facet: { spacing: DEFAULT_SPACING },
    concat: { spacing: DEFAULT_SPACING },
    normalizedNumberFormat: ".0%"
  };
  const tab10 = [
    "#4c78a8",
    "#f58518",
    "#e45756",
    "#72b7b2",
    "#54a24b",
    "#eeca3b",
    "#b279a2",
    "#ff9da6",
    "#9d755d",
    "#bab0ac"
  ];
  const DEFAULT_FONT_SIZE = {
    text: 11,
    guideLabel: 10,
    guideTitle: 11,
    groupTitle: 13,
    groupSubtitle: 12
  };
  const DEFAULT_COLOR = {
    blue: tab10[0],
    orange: tab10[1],
    red: tab10[2],
    teal: tab10[3],
    green: tab10[4],
    yellow: tab10[5],
    purple: tab10[6],
    pink: tab10[7],
    brown: tab10[8],
    gray0: "#000",
    gray1: "#111",
    gray2: "#222",
    gray3: "#333",
    gray4: "#444",
    gray5: "#555",
    gray6: "#666",
    gray7: "#777",
    gray8: "#888",
    gray9: "#999",
    gray10: "#aaa",
    gray11: "#bbb",
    gray12: "#ccc",
    gray13: "#ddd",
    gray14: "#eee",
    gray15: "#fff"
  };
  function colorSignalConfig(color2 = {}) {
    return {
      signals: [
        {
          name: "color",
          value: isObject(color2) ? { ...DEFAULT_COLOR, ...color2 } : DEFAULT_COLOR
        }
      ],
      mark: { color: { signal: "color.blue" } },
      rule: { color: { signal: "color.gray0" } },
      text: {
        color: { signal: "color.gray0" }
      },
      style: {
        "guide-label": {
          fill: { signal: "color.gray0" }
        },
        "guide-title": {
          fill: { signal: "color.gray0" }
        },
        "group-title": {
          fill: { signal: "color.gray0" }
        },
        "group-subtitle": {
          fill: { signal: "color.gray0" }
        },
        cell: {
          stroke: { signal: "color.gray8" }
        }
      },
      axis: {
        domainColor: { signal: "color.gray13" },
        gridColor: { signal: "color.gray8" },
        tickColor: { signal: "color.gray13" }
      },
      range: {
        category: [
          { signal: "color.blue" },
          { signal: "color.orange" },
          { signal: "color.red" },
          { signal: "color.teal" },
          { signal: "color.green" },
          { signal: "color.yellow" },
          { signal: "color.purple" },
          { signal: "color.pink" },
          { signal: "color.brown" },
          { signal: "color.grey8" }
        ]
      }
    };
  }
  function fontSizeSignalConfig(fontSize2) {
    return {
      signals: [
        {
          name: "fontSize",
          value: isObject(fontSize2) ? { ...DEFAULT_FONT_SIZE, ...fontSize2 } : DEFAULT_FONT_SIZE
        }
      ],
      text: {
        fontSize: { signal: "fontSize.text" }
      },
      style: {
        "guide-label": {
          fontSize: { signal: "fontSize.guideLabel" }
        },
        "guide-title": {
          fontSize: { signal: "fontSize.guideTitle" }
        },
        "group-title": {
          fontSize: { signal: "fontSize.groupTitle" }
        },
        "group-subtitle": {
          fontSize: { signal: "fontSize.groupSubtitle" }
        }
      }
    };
  }
  function fontConfig(font2) {
    return {
      text: { font: font2 },
      style: {
        "guide-label": { font: font2 },
        "guide-title": { font: font2 },
        "group-title": { font: font2 },
        "group-subtitle": { font: font2 }
      }
    };
  }
  function getAxisConfigInternal(axisConfig2) {
    const props = keys(axisConfig2 || {});
    const axisConfigInternal = {};
    for (const prop of props) {
      const val = axisConfig2[prop];
      axisConfigInternal[prop] = isConditionalAxisValue(val) ? signalOrValueRefWithCondition(val) : signalRefOrValue(val);
    }
    return axisConfigInternal;
  }
  function getStyleConfigInternal(styleConfig) {
    const props = keys(styleConfig);
    const styleConfigInternal = {};
    for (const prop of props) {
      styleConfigInternal[prop] = getAxisConfigInternal(styleConfig[prop]);
    }
    return styleConfigInternal;
  }
  const configPropsWithExpr = [
    ...MARK_CONFIGS,
    ...AXIS_CONFIGS,
    ...HEADER_CONFIGS,
    "background",
    "padding",
    "legend",
    "lineBreak",
    "scale",
    "style",
    "title",
    "view"
  ];
  function initConfig(specifiedConfig = {}) {
    const { color: color2, font: font2, fontSize: fontSize2, selection, ...restConfig } = specifiedConfig;
    const mergedConfig = mergeConfig({}, duplicate(defaultConfig$1), font2 ? fontConfig(font2) : {}, color2 ? colorSignalConfig(color2) : {}, fontSize2 ? fontSizeSignalConfig(fontSize2) : {}, restConfig || {});
    if (selection) {
      writeConfig(mergedConfig, "selection", selection, true);
    }
    const outputConfig = omit(mergedConfig, configPropsWithExpr);
    for (const prop of ["background", "lineBreak", "padding"]) {
      if (mergedConfig[prop]) {
        outputConfig[prop] = signalRefOrValue(mergedConfig[prop]);
      }
    }
    for (const markConfigType of MARK_CONFIGS) {
      if (mergedConfig[markConfigType]) {
        outputConfig[markConfigType] = replaceExprRef(mergedConfig[markConfigType]);
      }
    }
    for (const axisConfigType of AXIS_CONFIGS) {
      if (mergedConfig[axisConfigType]) {
        outputConfig[axisConfigType] = getAxisConfigInternal(mergedConfig[axisConfigType]);
      }
    }
    for (const headerConfigType of HEADER_CONFIGS) {
      if (mergedConfig[headerConfigType]) {
        outputConfig[headerConfigType] = replaceExprRef(mergedConfig[headerConfigType]);
      }
    }
    if (mergedConfig.legend) {
      outputConfig.legend = replaceExprRef(mergedConfig.legend);
    }
    if (mergedConfig.scale) {
      const { invalid, ...otherScaleConfig } = mergedConfig.scale;
      const newScaleInvalid = replaceExprRef(invalid, { level: 1 });
      outputConfig.scale = {
        ...replaceExprRef(otherScaleConfig),
        ...keys(newScaleInvalid).length > 0 ? { invalid: newScaleInvalid } : {}
      };
    }
    if (mergedConfig.style) {
      outputConfig.style = getStyleConfigInternal(mergedConfig.style);
    }
    if (mergedConfig.title) {
      outputConfig.title = replaceExprRef(mergedConfig.title);
    }
    if (mergedConfig.view) {
      outputConfig.view = replaceExprRef(mergedConfig.view);
    }
    return outputConfig;
  }
  const MARK_STYLES = /* @__PURE__ */ new Set(["view", ...PRIMITIVE_MARKS]);
  const VL_ONLY_CONFIG_PROPERTIES = [
    "color",
    "fontSize",
    "background",
    // We apply background to the spec directly.
    "padding",
    "facet",
    "concat",
    "numberFormat",
    "numberFormatType",
    "normalizedNumberFormat",
    "normalizedNumberFormatType",
    "timeFormat",
    "countTitle",
    "header",
    "axisQuantitative",
    "axisTemporal",
    "axisDiscrete",
    "axisPoint",
    "axisXBand",
    "axisXPoint",
    "axisXDiscrete",
    "axisXQuantitative",
    "axisXTemporal",
    "axisYBand",
    "axisYPoint",
    "axisYDiscrete",
    "axisYQuantitative",
    "axisYTemporal",
    "scale",
    "selection",
    "overlay"
    // FIXME: Redesign and unhide this
  ];
  const VL_ONLY_ALL_MARK_SPECIFIC_CONFIG_PROPERTY_INDEX = {
    view: ["continuousWidth", "continuousHeight", "discreteWidth", "discreteHeight", "step"],
    ...VL_ONLY_MARK_SPECIFIC_CONFIG_PROPERTY_INDEX
  };
  function stripAndRedirectConfig(config) {
    config = duplicate(config);
    for (const prop of VL_ONLY_CONFIG_PROPERTIES) {
      delete config[prop];
    }
    if (config.axis) {
      for (const prop in config.axis) {
        if (isConditionalAxisValue(config.axis[prop])) {
          delete config.axis[prop];
        }
      }
    }
    if (config.legend) {
      for (const prop of VL_ONLY_LEGEND_CONFIG) {
        delete config.legend[prop];
      }
    }
    if (config.mark) {
      for (const prop of VL_ONLY_MARK_CONFIG_PROPERTIES) {
        delete config.mark[prop];
      }
      if (config.mark.tooltip && isObject(config.mark.tooltip)) {
        delete config.mark.tooltip;
      }
    }
    if (config.params) {
      config.signals = (config.signals || []).concat(assembleParameterSignals(config.params));
      delete config.params;
    }
    for (const markType2 of MARK_STYLES) {
      for (const prop of VL_ONLY_MARK_CONFIG_PROPERTIES) {
        delete config[markType2][prop];
      }
      const vlOnlyMarkSpecificConfigs = VL_ONLY_ALL_MARK_SPECIFIC_CONFIG_PROPERTY_INDEX[markType2];
      if (vlOnlyMarkSpecificConfigs) {
        for (const prop of vlOnlyMarkSpecificConfigs) {
          delete config[markType2][prop];
        }
      }
      redirectConfigToStyleConfig(config, markType2);
    }
    for (const m2 of getAllCompositeMarks()) {
      delete config[m2];
    }
    redirectTitleConfig(config);
    for (const prop in config) {
      if (isObject(config[prop]) && isEmpty(config[prop])) {
        delete config[prop];
      }
    }
    return isEmpty(config) ? void 0 : config;
  }
  function redirectTitleConfig(config) {
    const { titleMarkConfig, subtitleMarkConfig, subtitle } = extractTitleConfig(config.title);
    if (!isEmpty(titleMarkConfig)) {
      config.style["group-title"] = {
        ...config.style["group-title"],
        ...titleMarkConfig
        // config.title has higher precedence than config.style.group-title in Vega
      };
    }
    if (!isEmpty(subtitleMarkConfig)) {
      config.style["group-subtitle"] = {
        ...config.style["group-subtitle"],
        ...subtitleMarkConfig
      };
    }
    if (!isEmpty(subtitle)) {
      config.title = subtitle;
    } else {
      delete config.title;
    }
  }
  function redirectConfigToStyleConfig(config, prop, toProp, compositeMarkPart) {
    const propConfig = config[prop];
    if (prop === "view") {
      toProp = "cell";
    }
    const style2 = {
      ...propConfig,
      ...config.style[toProp ?? prop]
    };
    if (!isEmpty(style2)) {
      config.style[toProp ?? prop] = style2;
    }
    {
      delete config[prop];
    }
  }
  function isLayerSpec(spec) {
    return hasProperty(spec, "layer");
  }
  function isRepeatSpec(spec) {
    return hasProperty(spec, "repeat");
  }
  function isLayerRepeatSpec(spec) {
    return !isArray(spec.repeat) && hasProperty(spec.repeat, "layer");
  }
  class SpecMapper {
    map(spec, params2) {
      if (isFacetSpec(spec)) {
        return this.mapFacet(spec, params2);
      } else if (isRepeatSpec(spec)) {
        return this.mapRepeat(spec, params2);
      } else if (isHConcatSpec(spec)) {
        return this.mapHConcat(spec, params2);
      } else if (isVConcatSpec(spec)) {
        return this.mapVConcat(spec, params2);
      } else if (isConcatSpec(spec)) {
        return this.mapConcat(spec, params2);
      } else {
        return this.mapLayerOrUnit(spec, params2);
      }
    }
    mapLayerOrUnit(spec, params2) {
      if (isLayerSpec(spec)) {
        return this.mapLayer(spec, params2);
      } else if (isUnitSpec(spec)) {
        return this.mapUnit(spec, params2);
      }
      throw new Error(invalidSpec(spec));
    }
    mapLayer(spec, params2) {
      return {
        ...spec,
        layer: spec.layer.map((subspec) => this.mapLayerOrUnit(subspec, params2))
      };
    }
    mapHConcat(spec, params2) {
      return {
        ...spec,
        hconcat: spec.hconcat.map((subspec) => this.map(subspec, params2))
      };
    }
    mapVConcat(spec, params2) {
      return {
        ...spec,
        vconcat: spec.vconcat.map((subspec) => this.map(subspec, params2))
      };
    }
    mapConcat(spec, params2) {
      const { concat, ...rest } = spec;
      return {
        ...rest,
        concat: concat.map((subspec) => this.map(subspec, params2))
      };
    }
    mapFacet(spec, params2) {
      return {
        // as any is required here since TS cannot infer that FO may only be FieldName or Field, but not RepeatRef
        ...spec,
        // TODO: remove "any" once we support all facet listed in https://github.com/vega/vega-lite/issues/2760
        spec: this.map(spec.spec, params2)
      };
    }
    mapRepeat(spec, params2) {
      return {
        ...spec,
        // as any is required here since TS cannot infer that the output type satisfies the input type
        spec: this.map(spec.spec, params2)
      };
    }
  }
  const STACK_OFFSET_INDEX = {
    zero: 1,
    center: 1,
    normalize: 1
  };
  function isStackOffset(s) {
    return has$1(STACK_OFFSET_INDEX, s);
  }
  const STACKABLE_MARKS = /* @__PURE__ */ new Set([ARC, BAR, AREA, RULE, POINT, CIRCLE, SQUARE, LINE, TEXT, TICK]);
  const STACK_BY_DEFAULT_MARKS = /* @__PURE__ */ new Set([BAR, AREA, ARC]);
  function isUnbinnedQuantitative(channelDef) {
    return isFieldDef(channelDef) && channelDefType(channelDef) === "quantitative" && !channelDef.bin;
  }
  function potentialStackedChannel(encoding, x2, { orient: orient2, type: mark }) {
    const y2 = x2 === "x" ? "y" : "radius";
    const isCartesianBarOrArea = x2 === "x" && ["bar", "area"].includes(mark);
    const xDef = encoding[x2];
    const yDef = encoding[y2];
    if (isFieldDef(xDef) && isFieldDef(yDef)) {
      if (isUnbinnedQuantitative(xDef) && isUnbinnedQuantitative(yDef)) {
        if (xDef.stack) {
          return x2;
        } else if (yDef.stack) {
          return y2;
        }
        const xAggregate = isFieldDef(xDef) && !!xDef.aggregate;
        const yAggregate = isFieldDef(yDef) && !!yDef.aggregate;
        if (xAggregate !== yAggregate) {
          return xAggregate ? x2 : y2;
        }
        if (isCartesianBarOrArea) {
          if (orient2 === "vertical") {
            return y2;
          } else if (orient2 === "horizontal") {
            return x2;
          }
        }
      } else if (isUnbinnedQuantitative(xDef)) {
        return x2;
      } else if (isUnbinnedQuantitative(yDef)) {
        return y2;
      }
    } else if (isUnbinnedQuantitative(xDef)) {
      if (isCartesianBarOrArea && orient2 === "vertical") {
        return void 0;
      }
      return x2;
    } else if (isUnbinnedQuantitative(yDef)) {
      if (isCartesianBarOrArea && orient2 === "horizontal") {
        return void 0;
      }
      return y2;
    }
    return void 0;
  }
  function getDimensionChannel(channel) {
    switch (channel) {
      case "x":
        return "y";
      case "y":
        return "x";
      case "theta":
        return "radius";
      case "radius":
        return "theta";
    }
  }
  function stack(m2, encoding) {
    var _a2, _b2;
    const markDef = isMarkDef(m2) ? m2 : { type: m2 };
    const mark = markDef.type;
    if (!STACKABLE_MARKS.has(mark)) {
      return null;
    }
    const fieldChannel = potentialStackedChannel(encoding, "x", markDef) || potentialStackedChannel(encoding, "theta", markDef);
    if (!fieldChannel) {
      return null;
    }
    const stackedFieldDef = encoding[fieldChannel];
    const stackedField = isFieldDef(stackedFieldDef) ? vgField(stackedFieldDef, {}) : void 0;
    const dimensionChannel = getDimensionChannel(fieldChannel);
    const groupbyChannels = [];
    const groupbyFields = /* @__PURE__ */ new Set();
    if (encoding[dimensionChannel]) {
      const dimensionDef = encoding[dimensionChannel];
      const dimensionField = isFieldDef(dimensionDef) ? vgField(dimensionDef, {}) : void 0;
      if (dimensionField && dimensionField !== stackedField) {
        groupbyChannels.push(dimensionChannel);
        groupbyFields.add(dimensionField);
      }
    }
    const dimensionOffsetChannel = dimensionChannel === "x" ? "xOffset" : "yOffset";
    const dimensionOffsetDef = encoding[dimensionOffsetChannel];
    const dimensionOffsetField = isFieldDef(dimensionOffsetDef) ? vgField(dimensionOffsetDef, {}) : void 0;
    if (dimensionOffsetField && dimensionOffsetField !== stackedField) {
      groupbyChannels.push(dimensionOffsetChannel);
      groupbyFields.add(dimensionOffsetField);
    }
    const stackBy = NONPOSITION_CHANNELS.reduce((sc, channel) => {
      if (channel !== "tooltip" && channelHasField(encoding, channel)) {
        const channelDef = encoding[channel];
        for (const cDef of array$5(channelDef)) {
          const fieldDef = getFieldDef(cDef);
          if (fieldDef.aggregate) {
            continue;
          }
          const f = vgField(fieldDef, {});
          if (
            // if fielddef is a repeat, just include it in the stack by
            !f || // otherwise, the field must be different from the groupBy fields.
            !groupbyFields.has(f)
          ) {
            sc.push({ channel, fieldDef });
          }
        }
      }
      return sc;
    }, []);
    let offset2;
    if (stackedFieldDef.stack !== void 0) {
      if (isBoolean$2(stackedFieldDef.stack)) {
        offset2 = stackedFieldDef.stack ? "zero" : null;
      } else {
        offset2 = stackedFieldDef.stack;
      }
    } else if (STACK_BY_DEFAULT_MARKS.has(mark)) {
      offset2 = "zero";
    }
    if (!offset2 || !isStackOffset(offset2)) {
      return null;
    }
    if (isAggregate$1(encoding) && stackBy.length === 0) {
      return null;
    }
    if (((_a2 = stackedFieldDef == null ? void 0 : stackedFieldDef.scale) == null ? void 0 : _a2.type) && ((_b2 = stackedFieldDef == null ? void 0 : stackedFieldDef.scale) == null ? void 0 : _b2.type) !== ScaleType.LINEAR) {
      if (stackedFieldDef == null ? void 0 : stackedFieldDef.stack) {
        warn(stackNonLinearScale(stackedFieldDef.scale.type));
      }
    }
    if (isFieldOrDatumDef(encoding[getSecondaryRangeChannel(fieldChannel)])) {
      if (stackedFieldDef.stack !== void 0) {
        warn(cannotStackRangedMark(fieldChannel));
      }
      return null;
    }
    if (isFieldDef(stackedFieldDef) && stackedFieldDef.aggregate && !SUM_OPS.has(stackedFieldDef.aggregate)) {
      warn(stackNonSummativeAggregate(stackedFieldDef.aggregate));
    }
    return {
      groupbyChannels,
      groupbyFields,
      fieldChannel,
      impute: stackedFieldDef.impute === null ? false : isPathMark(mark),
      stackBy,
      offset: offset2
    };
  }
  function initMarkdef(originalMarkDef, encoding, config) {
    const markDef = replaceExprRef(originalMarkDef);
    const specifiedOrient = getMarkPropOrConfig("orient", markDef, config);
    markDef.orient = orient(markDef.type, encoding, specifiedOrient);
    if (specifiedOrient !== void 0 && specifiedOrient !== markDef.orient) {
      warn(orientOverridden(markDef.orient, specifiedOrient));
    }
    if (markDef.type === "bar" && markDef.orient) {
      const cornerRadiusEnd = getMarkPropOrConfig("cornerRadiusEnd", markDef, config);
      if (cornerRadiusEnd !== void 0) {
        const newProps = markDef.orient === "horizontal" && encoding.x2 || markDef.orient === "vertical" && encoding.y2 ? ["cornerRadius"] : BAR_CORNER_RADIUS_INDEX[markDef.orient];
        for (const newProp of newProps) {
          markDef[newProp] = cornerRadiusEnd;
        }
        if (markDef.cornerRadiusEnd !== void 0) {
          delete markDef.cornerRadiusEnd;
        }
      }
    }
    const specifiedOpacity = getMarkPropOrConfig("opacity", markDef, config);
    const specifiedfillOpacity = getMarkPropOrConfig("fillOpacity", markDef, config);
    if (specifiedOpacity === void 0 && specifiedfillOpacity === void 0) {
      markDef.opacity = opacity(markDef.type, encoding);
    }
    const specifiedCursor = getMarkPropOrConfig("cursor", markDef, config);
    if (specifiedCursor === void 0) {
      markDef.cursor = cursor(markDef, encoding, config);
    }
    return markDef;
  }
  function cursor(markDef, encoding, config) {
    if (encoding.href || markDef.href || getMarkPropOrConfig("href", markDef, config)) {
      return "pointer";
    }
    return markDef.cursor;
  }
  function opacity(mark, encoding) {
    if (contains([POINT, TICK, CIRCLE, SQUARE], mark)) {
      if (!isAggregate$1(encoding)) {
        return 0.7;
      }
    }
    return void 0;
  }
  function defaultFilled(markDef, config, { graticule: graticule2 }) {
    if (graticule2) {
      return false;
    }
    const filledConfig = getMarkConfig("filled", markDef, config);
    const mark = markDef.type;
    return getFirstDefined(filledConfig, mark !== POINT && mark !== LINE && mark !== RULE);
  }
  function orient(mark, encoding, specifiedOrient) {
    switch (mark) {
      case POINT:
      case CIRCLE:
      case SQUARE:
      case TEXT:
      case RECT:
      case IMAGE:
        return void 0;
    }
    const { x: x2, y: y2, x2: x22, y2: y22 } = encoding;
    switch (mark) {
      case BAR:
        if (isFieldDef(x2) && (isBinned(x2.bin) || isFieldDef(y2) && y2.aggregate && !x2.aggregate)) {
          return "vertical";
        }
        if (isFieldDef(y2) && (isBinned(y2.bin) || isFieldDef(x2) && x2.aggregate && !y2.aggregate)) {
          return "horizontal";
        }
        if (y22 || x22) {
          if (specifiedOrient) {
            return specifiedOrient;
          }
          if (!x22) {
            if (isFieldDef(x2) && x2.type === QUANTITATIVE && !isBinning(x2.bin) || isNumericDataDef(x2)) {
              if (isFieldDef(y2) && isBinned(y2.bin)) {
                return "horizontal";
              }
            }
            return "vertical";
          }
          if (!y22) {
            if (isFieldDef(y2) && y2.type === QUANTITATIVE && !isBinning(y2.bin) || isNumericDataDef(y2)) {
              if (isFieldDef(x2) && isBinned(x2.bin)) {
                return "vertical";
              }
            }
            return "horizontal";
          }
        }
      case RULE:
        if (x22 && !(isFieldDef(x2) && isBinned(x2.bin)) && y22 && !(isFieldDef(y2) && isBinned(y2.bin))) {
          return void 0;
        }
      case AREA:
        if (y22) {
          if (isFieldDef(y2) && isBinned(y2.bin)) {
            return "horizontal";
          } else {
            return "vertical";
          }
        } else if (x22) {
          if (isFieldDef(x2) && isBinned(x2.bin)) {
            return "vertical";
          } else {
            return "horizontal";
          }
        } else if (mark === RULE) {
          if (x2 && !y2) {
            return "vertical";
          } else if (y2 && !x2) {
            return "horizontal";
          }
        }
      case LINE:
      case TICK: {
        const xIsMeasure = isUnbinnedQuantitativeFieldOrDatumDef(x2);
        const yIsMeasure = isUnbinnedQuantitativeFieldOrDatumDef(y2);
        if (specifiedOrient) {
          return specifiedOrient;
        } else if (xIsMeasure && !yIsMeasure) {
          return mark !== "tick" ? "horizontal" : "vertical";
        } else if (!xIsMeasure && yIsMeasure) {
          return mark !== "tick" ? "vertical" : "horizontal";
        } else if (xIsMeasure && yIsMeasure) {
          return "vertical";
        } else {
          const xIsTemporal = isTypedFieldDef(x2) && x2.type === TEMPORAL;
          const yIsTemporal = isTypedFieldDef(y2) && y2.type === TEMPORAL;
          if (xIsTemporal && !yIsTemporal) {
            return "vertical";
          } else if (!xIsTemporal && yIsTemporal) {
            return "horizontal";
          }
        }
        return void 0;
      }
    }
    return "vertical";
  }
  function dropLineAndPoint(markDef) {
    const { point: _point, line: _line, ...mark } = markDef;
    return keys(mark).length > 1 ? mark : mark.type;
  }
  function dropLineAndPointFromConfig(config) {
    for (const mark of ["line", "area", "rule", "trail"]) {
      if (config[mark]) {
        config = {
          ...config,
          // TODO: remove as any
          [mark]: omit(config[mark], ["point", "line"])
        };
      }
    }
    return config;
  }
  function getPointOverlay(markDef, markConfig = {}, encoding) {
    if (markDef.point === "transparent") {
      return { opacity: 0 };
    } else if (markDef.point) {
      return isObject(markDef.point) ? markDef.point : {};
    } else if (markDef.point !== void 0) {
      return null;
    } else {
      if (markConfig.point || encoding.shape) {
        return isObject(markConfig.point) ? markConfig.point : {};
      }
      return void 0;
    }
  }
  function getLineOverlay(markDef, markConfig = {}) {
    if (markDef.line) {
      return markDef.line === true ? {} : markDef.line;
    } else if (markDef.line !== void 0) {
      return null;
    } else {
      if (markConfig.line) {
        return markConfig.line === true ? {} : markConfig.line;
      }
      return void 0;
    }
  }
  class PathOverlayNormalizer {
    constructor() {
      this.name = "path-overlay";
    }
    hasMatchingType(spec, config) {
      if (isUnitSpec(spec)) {
        const { mark, encoding } = spec;
        const markDef = isMarkDef(mark) ? mark : { type: mark };
        switch (markDef.type) {
          case "line":
          case "rule":
          case "trail":
            return !!getPointOverlay(markDef, config[markDef.type], encoding);
          case "area":
            return (
              // false / null are also included as we want to remove the properties
              !!getPointOverlay(markDef, config[markDef.type], encoding) || !!getLineOverlay(markDef, config[markDef.type])
            );
        }
      }
      return false;
    }
    run(spec, normParams, normalize2) {
      const { config } = normParams;
      const { params: params2, projection: projection2, mark, name, encoding: e3, ...outerSpec } = spec;
      const encoding = normalizeEncoding(e3, config);
      const markDef = isMarkDef(mark) ? mark : { type: mark };
      const pointOverlay = getPointOverlay(markDef, config[markDef.type], encoding);
      const lineOverlay = markDef.type === "area" && getLineOverlay(markDef, config[markDef.type]);
      const layer = [
        {
          name,
          ...params2 ? { params: params2 } : {},
          mark: dropLineAndPoint({
            // TODO: extract this 0.7 to be shared with default opacity for point/tick/...
            ...markDef.type === "area" && markDef.opacity === void 0 && markDef.fillOpacity === void 0 ? { opacity: 0.7 } : {},
            ...markDef
          }),
          // drop shape from encoding as this might be used to trigger point overlay
          encoding: omit(encoding, ["shape"])
        }
      ];
      const stackProps = stack(initMarkdef(markDef, encoding, config), encoding);
      let overlayEncoding = encoding;
      if (stackProps) {
        const { fieldChannel: stackFieldChannel, offset: offset2 } = stackProps;
        overlayEncoding = {
          ...encoding,
          [stackFieldChannel]: {
            ...encoding[stackFieldChannel],
            ...offset2 ? { stack: offset2 } : {}
          }
        };
      }
      overlayEncoding = omit(overlayEncoding, ["y2", "x2"]);
      if (lineOverlay) {
        layer.push({
          ...projection2 ? { projection: projection2 } : {},
          mark: {
            type: "line",
            ...pick(markDef, ["clip", "interpolate", "tension", "tooltip"]),
            ...lineOverlay
          },
          encoding: overlayEncoding
        });
      }
      if (pointOverlay) {
        layer.push({
          ...projection2 ? { projection: projection2 } : {},
          mark: {
            type: "point",
            opacity: 1,
            filled: true,
            ...pick(markDef, ["clip", "tooltip"]),
            ...pointOverlay
          },
          encoding: overlayEncoding
        });
      }
      return normalize2({
        ...outerSpec,
        layer
      }, {
        ...normParams,
        config: dropLineAndPointFromConfig(config)
      });
    }
  }
  function replaceRepeaterInFacet(facet, repeater) {
    if (!repeater) {
      return facet;
    }
    if (isFacetMapping(facet)) {
      return replaceRepeaterInMapping(facet, repeater);
    }
    return replaceRepeaterInFieldDef(facet, repeater);
  }
  function replaceRepeaterInEncoding(encoding, repeater) {
    if (!repeater) {
      return encoding;
    }
    return replaceRepeaterInMapping(encoding, repeater);
  }
  function replaceRepeatInProp(prop, o, repeater) {
    const val = o[prop];
    if (isRepeatRef(val)) {
      if (val.repeat in repeater) {
        return { ...o, [prop]: repeater[val.repeat] };
      } else {
        warn(noSuchRepeatedValue(val.repeat));
        return void 0;
      }
    }
    return o;
  }
  function replaceRepeaterInFieldDef(fieldDef, repeater) {
    fieldDef = replaceRepeatInProp("field", fieldDef, repeater);
    if (fieldDef === void 0) {
      return void 0;
    } else if (fieldDef === null) {
      return null;
    }
    if (isSortableFieldDef(fieldDef) && isSortField(fieldDef.sort)) {
      const sort2 = replaceRepeatInProp("field", fieldDef.sort, repeater);
      fieldDef = {
        ...fieldDef,
        ...sort2 ? { sort: sort2 } : {}
      };
    }
    return fieldDef;
  }
  function replaceRepeaterInFieldOrDatumDef(def2, repeater) {
    if (isFieldDef(def2)) {
      return replaceRepeaterInFieldDef(def2, repeater);
    } else {
      const datumDef = replaceRepeatInProp("datum", def2, repeater);
      if (datumDef !== def2 && !datumDef.type) {
        datumDef.type = "nominal";
      }
      return datumDef;
    }
  }
  function replaceRepeaterInChannelDef(channelDef, repeater) {
    if (isFieldOrDatumDef(channelDef)) {
      const fd = replaceRepeaterInFieldOrDatumDef(channelDef, repeater);
      if (fd) {
        return fd;
      } else if (isConditionalDef(channelDef)) {
        return { condition: channelDef.condition };
      }
    } else {
      if (hasConditionalFieldOrDatumDef(channelDef)) {
        const fd = replaceRepeaterInFieldOrDatumDef(channelDef.condition, repeater);
        if (fd) {
          return {
            ...channelDef,
            condition: fd
          };
        } else {
          const { condition, ...channelDefWithoutCondition } = channelDef;
          return channelDefWithoutCondition;
        }
      }
      return channelDef;
    }
    return void 0;
  }
  function replaceRepeaterInMapping(mapping, repeater) {
    const out = {};
    for (const channel in mapping) {
      if (hasProperty(mapping, channel)) {
        const channelDef = mapping[channel];
        if (isArray(channelDef)) {
          out[channel] = channelDef.map((cd) => replaceRepeaterInChannelDef(cd, repeater)).filter((cd) => cd);
        } else {
          const cd = replaceRepeaterInChannelDef(channelDef, repeater);
          if (cd !== void 0) {
            out[channel] = cd;
          }
        }
      }
    }
    return out;
  }
  class RuleForRangedLineNormalizer {
    constructor() {
      this.name = "RuleForRangedLine";
    }
    hasMatchingType(spec) {
      if (isUnitSpec(spec)) {
        const { encoding, mark } = spec;
        if (mark === "line" || isMarkDef(mark) && mark.type === "line") {
          for (const channel of SECONDARY_RANGE_CHANNEL) {
            const mainChannel = getMainRangeChannel(channel);
            const mainChannelDef = encoding[mainChannel];
            if (encoding[channel]) {
              if (isFieldDef(mainChannelDef) && !isBinned(mainChannelDef.bin) || isDatumDef(mainChannelDef)) {
                return true;
              }
            }
          }
        }
      }
      return false;
    }
    run(spec, params2, normalize2) {
      const { encoding, mark } = spec;
      warn(lineWithRange(!!encoding.x2, !!encoding.y2));
      return normalize2({
        ...spec,
        mark: isObject(mark) ? { ...mark, type: "rule" } : "rule"
      }, params2);
    }
  }
  class CoreNormalizer extends SpecMapper {
    constructor() {
      super(...arguments);
      this.nonFacetUnitNormalizers = [
        boxPlotNormalizer,
        errorBarNormalizer,
        errorBandNormalizer,
        new PathOverlayNormalizer(),
        new RuleForRangedLineNormalizer()
      ];
    }
    map(spec, params2) {
      if (isUnitSpec(spec)) {
        const hasRow = channelHasField(spec.encoding, ROW);
        const hasColumn = channelHasField(spec.encoding, COLUMN);
        const hasFacet = channelHasField(spec.encoding, FACET);
        if (hasRow || hasColumn || hasFacet) {
          return this.mapFacetedUnit(spec, params2);
        }
      }
      return super.map(spec, params2);
    }
    // This is for normalizing non-facet unit
    mapUnit(spec, params2) {
      const { parentEncoding, parentProjection } = params2;
      const encoding = replaceRepeaterInEncoding(spec.encoding, params2.repeater);
      const specWithReplacedEncoding = {
        ...spec,
        ...spec.name ? { name: [params2.repeaterPrefix, spec.name].filter((n) => n).join("_") } : {},
        ...encoding ? { encoding } : {}
      };
      if (parentEncoding || parentProjection) {
        return this.mapUnitWithParentEncodingOrProjection(specWithReplacedEncoding, params2);
      }
      const normalizeLayerOrUnit = this.mapLayerOrUnit.bind(this);
      for (const unitNormalizer of this.nonFacetUnitNormalizers) {
        if (unitNormalizer.hasMatchingType(specWithReplacedEncoding, params2.config)) {
          return unitNormalizer.run(specWithReplacedEncoding, params2, normalizeLayerOrUnit);
        }
      }
      return specWithReplacedEncoding;
    }
    mapRepeat(spec, params2) {
      if (isLayerRepeatSpec(spec)) {
        return this.mapLayerRepeat(spec, params2);
      } else {
        return this.mapNonLayerRepeat(spec, params2);
      }
    }
    mapLayerRepeat(spec, params2) {
      const { repeat: repeat2, spec: childSpec, ...rest } = spec;
      const { row, column, layer } = repeat2;
      const { repeater = {}, repeaterPrefix = "" } = params2;
      if (row || column) {
        return this.mapRepeat({
          ...spec,
          repeat: {
            ...row ? { row } : {},
            ...column ? { column } : {}
          },
          spec: {
            repeat: { layer },
            spec: childSpec
          }
        }, params2);
      } else {
        return {
          ...rest,
          layer: layer.map((layerValue) => {
            const childRepeater = {
              ...repeater,
              layer: layerValue
            };
            const childName = `${(childSpec.name ? `${childSpec.name}_` : "") + repeaterPrefix}child__layer_${varName(layerValue)}`;
            const child = this.mapLayerOrUnit(childSpec, { ...params2, repeater: childRepeater, repeaterPrefix: childName });
            child.name = childName;
            return child;
          })
        };
      }
    }
    mapNonLayerRepeat(spec, params2) {
      const { repeat: repeat2, spec: childSpec, data: data2, ...remainingProperties } = spec;
      if (!isArray(repeat2) && spec.columns) {
        spec = omit(spec, ["columns"]);
        warn(columnsNotSupportByRowCol("repeat"));
      }
      const concat = [];
      const { repeater = {}, repeaterPrefix = "" } = params2;
      const row = !isArray(repeat2) && repeat2.row || [repeater ? repeater.row : null];
      const column = !isArray(repeat2) && repeat2.column || [repeater ? repeater.column : null];
      const repeatValues = isArray(repeat2) && repeat2 || [repeater ? repeater.repeat : null];
      for (const repeatValue of repeatValues) {
        for (const rowValue of row) {
          for (const columnValue of column) {
            const childRepeater = {
              repeat: repeatValue,
              row: rowValue,
              column: columnValue,
              layer: repeater.layer
            };
            const childName = (childSpec.name ? `${childSpec.name}_` : "") + repeaterPrefix + "child__" + (isArray(repeat2) ? `${varName(repeatValue)}` : (repeat2.row ? `row_${varName(rowValue)}` : "") + (repeat2.column ? `column_${varName(columnValue)}` : ""));
            const child = this.map(childSpec, { ...params2, repeater: childRepeater, repeaterPrefix: childName });
            child.name = childName;
            concat.push(omit(child, ["data"]));
          }
        }
      }
      const columns = isArray(repeat2) ? spec.columns : repeat2.column ? repeat2.column.length : 1;
      return {
        data: childSpec.data ?? data2,
        // data from child spec should have precedence
        align: "all",
        ...remainingProperties,
        columns,
        concat
      };
    }
    mapFacet(spec, params2) {
      const { facet } = spec;
      if (isFacetMapping(facet) && spec.columns) {
        spec = omit(spec, ["columns"]);
        warn(columnsNotSupportByRowCol("facet"));
      }
      return super.mapFacet(spec, params2);
    }
    mapUnitWithParentEncodingOrProjection(spec, params2) {
      const { encoding, projection: projection2 } = spec;
      const { parentEncoding, parentProjection, config } = params2;
      const mergedProjection = mergeProjection({ parentProjection, projection: projection2 });
      const mergedEncoding = mergeEncoding({
        parentEncoding,
        encoding: replaceRepeaterInEncoding(encoding, params2.repeater)
      });
      return this.mapUnit({
        ...spec,
        ...mergedProjection ? { projection: mergedProjection } : {},
        ...mergedEncoding ? { encoding: mergedEncoding } : {}
      }, { config });
    }
    mapFacetedUnit(spec, normParams) {
      const { row, column, facet, ...encoding } = spec.encoding;
      const { mark, width: width2, projection: projection2, height: height2, view, params: params2, encoding: _, ...outerSpec } = spec;
      const { facetMapping, layout } = this.getFacetMappingAndLayout({ row, column, facet }, normParams);
      const newEncoding = replaceRepeaterInEncoding(encoding, normParams.repeater);
      return this.mapFacet({
        ...outerSpec,
        ...layout,
        // row / column has higher precedence than facet
        facet: facetMapping,
        spec: {
          ...width2 ? { width: width2 } : {},
          ...height2 ? { height: height2 } : {},
          ...view ? { view } : {},
          ...projection2 ? { projection: projection2 } : {},
          mark,
          encoding: newEncoding,
          ...params2 ? { params: params2 } : {}
        }
      }, normParams);
    }
    getFacetMappingAndLayout(facets, params2) {
      const { row, column, facet } = facets;
      if (row || column) {
        if (facet) {
          warn(facetChannelDropped([...row ? [ROW] : [], ...column ? [COLUMN] : []]));
        }
        const facetMapping = {};
        const layout = {};
        for (const channel of [ROW, COLUMN]) {
          const def2 = facets[channel];
          if (def2) {
            const { align: align2, center, spacing, columns, ...defWithoutLayout } = def2;
            facetMapping[channel] = defWithoutLayout;
            for (const prop of ["align", "center", "spacing"]) {
              if (def2[prop] !== void 0) {
                layout[prop] ?? (layout[prop] = {});
                layout[prop][channel] = def2[prop];
              }
            }
          }
        }
        return { facetMapping, layout };
      } else {
        const { align: align2, center, spacing, columns, ...facetMapping } = facet;
        return {
          facetMapping: replaceRepeaterInFacet(facetMapping, params2.repeater),
          layout: {
            ...align2 ? { align: align2 } : {},
            ...center ? { center } : {},
            ...spacing ? { spacing } : {},
            ...columns ? { columns } : {}
          }
        };
      }
    }
    mapLayer(spec, { parentEncoding, parentProjection, ...otherParams }) {
      const { encoding, projection: projection2, ...rest } = spec;
      const params2 = {
        ...otherParams,
        parentEncoding: mergeEncoding({ parentEncoding, encoding, layer: true }),
        parentProjection: mergeProjection({ parentProjection, projection: projection2 })
      };
      return super.mapLayer({
        ...rest,
        ...spec.name ? { name: [params2.repeaterPrefix, spec.name].filter((n) => n).join("_") } : {}
      }, params2);
    }
  }
  function mergeEncoding({ parentEncoding, encoding = {}, layer }) {
    let merged = {};
    if (parentEncoding) {
      const channels = /* @__PURE__ */ new Set([...keys(parentEncoding), ...keys(encoding)]);
      for (const channel of channels) {
        const channelDef = encoding[channel];
        const parentChannelDef = parentEncoding[channel];
        if (isFieldOrDatumDef(channelDef)) {
          const mergedChannelDef = {
            ...parentChannelDef,
            ...channelDef
          };
          merged[channel] = mergedChannelDef;
        } else if (hasConditionalFieldOrDatumDef(channelDef)) {
          merged[channel] = {
            ...channelDef,
            condition: {
              ...parentChannelDef,
              ...channelDef.condition
            }
          };
        } else if (channelDef || channelDef === null) {
          merged[channel] = channelDef;
        } else if (layer || isValueDef(parentChannelDef) || isSignalRef(parentChannelDef) || isFieldOrDatumDef(parentChannelDef) || isArray(parentChannelDef)) {
          merged[channel] = parentChannelDef;
        }
      }
    } else {
      merged = encoding;
    }
    return !merged || isEmpty(merged) ? void 0 : merged;
  }
  function mergeProjection(opt) {
    const { parentProjection, projection: projection2 } = opt;
    if (parentProjection && projection2) {
      warn(projectionOverridden({ parentProjection, projection: projection2 }));
    }
    return projection2 ?? parentProjection;
  }
  function isFilter(t) {
    return hasProperty(t, "filter");
  }
  function isImputeSequence(t) {
    return hasProperty(t, "stop");
  }
  function isLookup(t) {
    return hasProperty(t, "lookup");
  }
  function isLookupData(from) {
    return hasProperty(from, "data");
  }
  function isLookupSelection(from) {
    return hasProperty(from, "param");
  }
  function isPivot(t) {
    return hasProperty(t, "pivot");
  }
  function isDensity(t) {
    return hasProperty(t, "density");
  }
  function isQuantile(t) {
    return hasProperty(t, "quantile");
  }
  function isRegression(t) {
    return hasProperty(t, "regression");
  }
  function isLoess(t) {
    return hasProperty(t, "loess");
  }
  function isSample(t) {
    return hasProperty(t, "sample");
  }
  function isWindow(t) {
    return hasProperty(t, "window");
  }
  function isJoinAggregate(t) {
    return hasProperty(t, "joinaggregate");
  }
  function isFlatten(t) {
    return hasProperty(t, "flatten");
  }
  function isCalculate(t) {
    return hasProperty(t, "calculate");
  }
  function isBin(t) {
    return hasProperty(t, "bin");
  }
  function isImpute(t) {
    return hasProperty(t, "impute");
  }
  function isTimeUnit(t) {
    return hasProperty(t, "timeUnit");
  }
  function isAggregate(t) {
    return hasProperty(t, "aggregate");
  }
  function isStack(t) {
    return hasProperty(t, "stack");
  }
  function isFold(t) {
    return hasProperty(t, "fold");
  }
  function isExtent(t) {
    return hasProperty(t, "extent") && !hasProperty(t, "density") && !hasProperty(t, "regression");
  }
  function normalizeTransform(transform2) {
    return transform2.map((t) => {
      if (isFilter(t)) {
        return {
          filter: normalizeLogicalComposition(t.filter, normalizePredicate$1)
        };
      }
      return t;
    });
  }
  class SelectionCompatibilityNormalizer extends SpecMapper {
    map(spec, normParams) {
      normParams.emptySelections ?? (normParams.emptySelections = {});
      normParams.selectionPredicates ?? (normParams.selectionPredicates = {});
      spec = normalizeTransforms(spec, normParams);
      return super.map(spec, normParams);
    }
    mapLayerOrUnit(spec, normParams) {
      spec = normalizeTransforms(spec, normParams);
      if (spec.encoding) {
        const encoding = {};
        for (const [channel, enc] of entries$1(spec.encoding)) {
          encoding[channel] = normalizeChannelDef(enc, normParams);
        }
        spec = { ...spec, encoding };
      }
      return super.mapLayerOrUnit(spec, normParams);
    }
    mapUnit(spec, normParams) {
      const { selection, ...rest } = spec;
      if (selection) {
        return {
          ...rest,
          params: entries$1(selection).map(([name, selDef]) => {
            const { init: value2, bind: bind2, empty: empty2, ...select2 } = selDef;
            if (select2.type === "single") {
              select2.type = "point";
              select2.toggle = false;
            } else if (select2.type === "multi") {
              select2.type = "point";
            }
            normParams.emptySelections[name] = empty2 !== "none";
            for (const pred of vals(normParams.selectionPredicates[name] ?? {})) {
              pred.empty = empty2 !== "none";
            }
            return { name, value: value2, select: select2, bind: bind2 };
          })
        };
      }
      return spec;
    }
  }
  function normalizeTransforms(spec, normParams) {
    const { transform: tx2, ...rest } = spec;
    if (tx2) {
      const transform2 = tx2.map((t) => {
        if (isFilter(t)) {
          return { filter: normalizePredicate(t, normParams) };
        } else if (isBin(t) && isBinParams(t.bin)) {
          return {
            ...t,
            bin: normalizeBinExtent(t.bin)
          };
        } else if (isLookup(t)) {
          const { selection: param2, ...from } = t.from;
          return param2 ? {
            ...t,
            from: { param: param2, ...from }
          } : t;
        }
        return t;
      });
      return { ...rest, transform: transform2 };
    }
    return spec;
  }
  function normalizeChannelDef(obj, normParams) {
    var _a2, _b2;
    const enc = duplicate(obj);
    if (isFieldDef(enc) && isBinParams(enc.bin)) {
      enc.bin = normalizeBinExtent(enc.bin);
    }
    if (isScaleFieldDef(enc) && ((_b2 = (_a2 = enc.scale) == null ? void 0 : _a2.domain) == null ? void 0 : _b2.selection)) {
      const { selection: param2, ...domain2 } = enc.scale.domain;
      enc.scale.domain = { ...domain2, ...param2 ? { param: param2 } : {} };
    }
    if (isConditionalDef(enc)) {
      if (isArray(enc.condition)) {
        enc.condition = enc.condition.map((c2) => {
          const { selection, param: param2, test: test2, ...cond } = c2;
          return param2 ? c2 : { ...cond, test: normalizePredicate(c2, normParams) };
        });
      } else {
        const { selection, param: param2, test: test2, ...cond } = normalizeChannelDef(enc.condition, normParams);
        enc.condition = param2 ? enc.condition : {
          ...cond,
          test: normalizePredicate(enc.condition, normParams)
        };
      }
    }
    return enc;
  }
  function normalizeBinExtent(bin2) {
    const ext = bin2.extent;
    if (ext == null ? void 0 : ext.selection) {
      const { selection: param2, ...rest } = ext;
      return { ...bin2, extent: { ...rest, param: param2 } };
    }
    return bin2;
  }
  function normalizePredicate(op, normParams) {
    const normalizeSelectionComposition = (o) => {
      return normalizeLogicalComposition(o, (param2) => {
        var _a2;
        const empty2 = normParams.emptySelections[param2] ?? true;
        const pred = { param: param2, empty: empty2 };
        (_a2 = normParams.selectionPredicates)[param2] ?? (_a2[param2] = []);
        normParams.selectionPredicates[param2].push(pred);
        return pred;
      });
    };
    return op.selection ? normalizeSelectionComposition(op.selection) : normalizeLogicalComposition(op.test || op.filter, (o) => o.selection ? normalizeSelectionComposition(o.selection) : o);
  }
  class TopLevelSelectionsNormalizer extends SpecMapper {
    map(spec, normParams) {
      const selections = normParams.selections ?? [];
      if (spec.params && !isUnitSpec(spec)) {
        const params2 = [];
        for (const param2 of spec.params) {
          if (isSelectionParameter(param2)) {
            selections.push(param2);
          } else {
            params2.push(param2);
          }
        }
        spec.params = params2;
      }
      normParams.selections = selections;
      return super.map(spec, normParams);
    }
    mapUnit(spec, normParams) {
      const selections = normParams.selections;
      if (!selections || !selections.length)
        return spec;
      const path2 = (normParams.path ?? []).concat(spec.name);
      const params2 = [];
      for (const selection of selections) {
        if (!selection.views || !selection.views.length) {
          params2.push(selection);
        } else {
          for (const view of selection.views) {
            if (isString(view) && (view === spec.name || path2.includes(view)) || isArray(view) && // logic for backwards compatibility with view paths before we had unique names
            // @ts-ignore
            view.map((v) => path2.indexOf(v)).every((v, i, arr) => v !== -1 && (i === 0 || v > arr[i - 1]))) {
              params2.push(selection);
            }
          }
        }
      }
      if (params2.length)
        spec.params = params2;
      return spec;
    }
  }
  for (const method2 of ["mapFacet", "mapRepeat", "mapHConcat", "mapVConcat", "mapLayer"]) {
    const proto = TopLevelSelectionsNormalizer.prototype[method2];
    TopLevelSelectionsNormalizer.prototype[method2] = function(spec, params2) {
      return proto.call(this, spec, addSpecNameToParams(spec, params2));
    };
  }
  function addSpecNameToParams(spec, params2) {
    return spec.name ? {
      ...params2,
      path: (params2.path ?? []).concat(spec.name)
    } : params2;
  }
  function normalize(spec, config) {
    if (config === void 0) {
      config = initConfig(spec.config);
    }
    const normalizedSpec = normalizeGenericSpec(spec, config);
    const { width: width2, height: height2 } = spec;
    const autosize = normalizeAutoSize(normalizedSpec, { width: width2, height: height2, autosize: spec.autosize }, config);
    return {
      ...normalizedSpec,
      ...autosize ? { autosize } : {}
    };
  }
  const coreNormalizer = new CoreNormalizer();
  const selectionCompatNormalizer = new SelectionCompatibilityNormalizer();
  const topLevelSelectionNormalizer = new TopLevelSelectionsNormalizer();
  function normalizeGenericSpec(spec, config = {}) {
    const normParams = { config };
    return topLevelSelectionNormalizer.map(coreNormalizer.map(selectionCompatNormalizer.map(spec, normParams), normParams), normParams);
  }
  function _normalizeAutoSize(autosize) {
    return isString(autosize) ? { type: autosize } : autosize ?? {};
  }
  function normalizeAutoSize(spec, sizeInfo, config) {
    let { width: width2, height: height2 } = sizeInfo;
    const isFitCompatible = isUnitSpec(spec) || isLayerSpec(spec);
    const autosizeDefault = {};
    if (!isFitCompatible) {
      if (width2 == "container") {
        warn(containerSizeNonSingle("width"));
        width2 = void 0;
      }
      if (height2 == "container") {
        warn(containerSizeNonSingle("height"));
        height2 = void 0;
      }
    } else {
      if (width2 == "container" && height2 == "container") {
        autosizeDefault.type = "fit";
        autosizeDefault.contains = "padding";
      } else if (width2 == "container") {
        autosizeDefault.type = "fit-x";
        autosizeDefault.contains = "padding";
      } else if (height2 == "container") {
        autosizeDefault.type = "fit-y";
        autosizeDefault.contains = "padding";
      }
    }
    const autosize = {
      type: "pad",
      ...autosizeDefault,
      ...config ? _normalizeAutoSize(config.autosize) : {},
      ..._normalizeAutoSize(spec.autosize)
    };
    if (autosize.type === "fit" && !isFitCompatible) {
      warn(FIT_NON_SINGLE);
      autosize.type = "pad";
    }
    if (width2 == "container" && !(autosize.type == "fit" || autosize.type == "fit-x")) {
      warn(containerSizeNotCompatibleWithAutosize("width"));
    }
    if (height2 == "container" && !(autosize.type == "fit" || autosize.type == "fit-y")) {
      warn(containerSizeNotCompatibleWithAutosize("height"));
    }
    if (deepEqual(autosize, { type: "pad" })) {
      return void 0;
    }
    return autosize;
  }
  function isFitType(autoSizeType) {
    return ["fit", "fit-x", "fit-y"].includes(autoSizeType);
  }
  function getFitType(sizeType) {
    return sizeType ? `fit-${getPositionScaleChannel(sizeType)}` : "fit";
  }
  const TOP_LEVEL_PROPERTIES = [
    "background",
    "padding"
    // We do not include "autosize" here as it is supported by only unit and layer specs and thus need to be normalized
  ];
  function extractTopLevelProperties(t, includeParams) {
    const o = {};
    for (const p of TOP_LEVEL_PROPERTIES) {
      if (t && t[p] !== void 0) {
        o[p] = signalRefOrValue(t[p]);
      }
    }
    if (includeParams) {
      o.params = t.params;
    }
    return o;
  }
  class Split {
    constructor(explicit = {}, implicit2 = {}) {
      this.explicit = explicit;
      this.implicit = implicit2;
    }
    clone() {
      return new Split(duplicate(this.explicit), duplicate(this.implicit));
    }
    combine() {
      return {
        ...this.explicit,
        // Explicit properties comes first
        ...this.implicit
      };
    }
    get(key2) {
      return getFirstDefined(this.explicit[key2], this.implicit[key2]);
    }
    getWithExplicit(key2) {
      if (this.explicit[key2] !== void 0) {
        return { explicit: true, value: this.explicit[key2] };
      } else if (this.implicit[key2] !== void 0) {
        return { explicit: false, value: this.implicit[key2] };
      }
      return { explicit: false, value: void 0 };
    }
    setWithExplicit(key2, { value: value2, explicit }) {
      if (value2 !== void 0) {
        this.set(key2, value2, explicit);
      }
    }
    set(key2, value2, explicit) {
      delete this[explicit ? "implicit" : "explicit"][key2];
      this[explicit ? "explicit" : "implicit"][key2] = value2;
      return this;
    }
    copyKeyFromSplit(key2, { explicit, implicit: implicit2 }) {
      if (explicit[key2] !== void 0) {
        this.set(key2, explicit[key2], true);
      } else if (implicit2[key2] !== void 0) {
        this.set(key2, implicit2[key2], false);
      }
    }
    copyKeyFromObject(key2, s) {
      if (s[key2] !== void 0) {
        this.set(key2, s[key2], true);
      }
    }
    /**
     * Merge split object into this split object. Properties from the other split
     * overwrite properties from this split.
     */
    copyAll(other) {
      for (const key2 of keys(other.combine())) {
        const val = other.getWithExplicit(key2);
        this.setWithExplicit(key2, val);
      }
    }
  }
  function makeExplicit(value2) {
    return {
      explicit: true,
      value: value2
    };
  }
  function makeImplicit(value2) {
    return {
      explicit: false,
      value: value2
    };
  }
  function tieBreakByComparing(compare2) {
    return (v1, v2, property2, propertyOf) => {
      const diff = compare2(v1.value, v2.value);
      if (diff > 0) {
        return v1;
      } else if (diff < 0) {
        return v2;
      }
      return defaultTieBreaker(v1, v2, property2, propertyOf);
    };
  }
  function defaultTieBreaker(v1, v2, property2, propertyOf) {
    if (v1.explicit && v2.explicit) {
      warn(mergeConflictingProperty(property2, propertyOf, v1.value, v2.value));
    }
    return v1;
  }
  function mergeValuesWithExplicit(v1, v2, property2, propertyOf, tieBreaker = defaultTieBreaker) {
    if (v1 === void 0 || v1.value === void 0) {
      return v2;
    }
    if (v1.explicit && !v2.explicit) {
      return v1;
    } else if (v2.explicit && !v1.explicit) {
      return v2;
    } else if (deepEqual(v1.value, v2.value)) {
      return v1;
    } else {
      return tieBreaker(v1, v2, property2, propertyOf);
    }
  }
  class AncestorParse extends Split {
    constructor(explicit = {}, implicit2 = {}, parseNothing = false) {
      super(explicit, implicit2);
      this.explicit = explicit;
      this.implicit = implicit2;
      this.parseNothing = parseNothing;
    }
    clone() {
      const clone = super.clone();
      clone.parseNothing = this.parseNothing;
      return clone;
    }
  }
  function isUrlData(data2) {
    return hasProperty(data2, "url");
  }
  function isInlineData(data2) {
    return hasProperty(data2, "values");
  }
  function isNamedData(data2) {
    return hasProperty(data2, "name") && !isUrlData(data2) && !isInlineData(data2) && !isGenerator(data2);
  }
  function isGenerator(data2) {
    return data2 && (isSequenceGenerator(data2) || isSphereGenerator(data2) || isGraticuleGenerator(data2));
  }
  function isSequenceGenerator(data2) {
    return hasProperty(data2, "sequence");
  }
  function isSphereGenerator(data2) {
    return hasProperty(data2, "sphere");
  }
  function isGraticuleGenerator(data2) {
    return hasProperty(data2, "graticule");
  }
  var DataSourceType;
  (function(DataSourceType2) {
    DataSourceType2[DataSourceType2["Raw"] = 0] = "Raw";
    DataSourceType2[DataSourceType2["Main"] = 1] = "Main";
    DataSourceType2[DataSourceType2["Row"] = 2] = "Row";
    DataSourceType2[DataSourceType2["Column"] = 3] = "Column";
    DataSourceType2[DataSourceType2["Lookup"] = 4] = "Lookup";
    DataSourceType2[DataSourceType2["PreFilterInvalid"] = 5] = "PreFilterInvalid";
    DataSourceType2[DataSourceType2["PostFilterInvalid"] = 6] = "PostFilterInvalid";
  })(DataSourceType || (DataSourceType = {}));
  function getDataSourcesForHandlingInvalidValues({ invalid, isPath }) {
    const normalizedInvalid = normalizeInvalidDataMode(invalid, { isPath });
    switch (normalizedInvalid) {
      case "filter":
        return {
          marks: "exclude-invalid-values",
          scales: "exclude-invalid-values"
        };
      case "break-paths-show-domains":
        return {
          // Path-based marks use pre-filter data so we know to skip these invalid points in the path.
          // For non-path based marks, we skip by not showing them at all.
          marks: isPath ? "include-invalid-values" : "exclude-invalid-values",
          scales: "include-invalid-values"
        };
      case "break-paths-filter-domains":
        return {
          marks: isPath ? "include-invalid-values" : "exclude-invalid-values",
          // Unlike 'break-paths-show-domains', 'break-paths-filter-domains' uses post-filter data to feed scale.
          scales: "exclude-invalid-values"
        };
      case "show":
        return {
          marks: "include-invalid-values",
          scales: "include-invalid-values"
        };
    }
  }
  function getScaleDataSourceForHandlingInvalidValues(props) {
    const { marks, scales: scales2 } = getDataSourcesForHandlingInvalidValues(props);
    if (marks === scales2) {
      return DataSourceType.Main;
    }
    return scales2 === "include-invalid-values" ? DataSourceType.PreFilterInvalid : DataSourceType.PostFilterInvalid;
  }
  class DataFlowNode {
    constructor(parent, debugName) {
      this.debugName = debugName;
      this._children = [];
      this._parent = null;
      if (parent) {
        this.parent = parent;
      }
    }
    /**
     * Clone this node with a deep copy but don't clone links to children or parents.
     */
    clone() {
      throw new Error("Cannot clone node");
    }
    get parent() {
      return this._parent;
    }
    /**
     * Set the parent of the node and also add this node to the parent's children.
     */
    set parent(parent) {
      this._parent = parent;
      if (parent) {
        parent.addChild(this);
      }
    }
    get children() {
      return this._children;
    }
    numChildren() {
      return this._children.length;
    }
    addChild(child, loc) {
      if (this._children.includes(child)) {
        warn(ADD_SAME_CHILD_TWICE);
        return;
      }
      if (loc !== void 0) {
        this._children.splice(loc, 0, child);
      } else {
        this._children.push(child);
      }
    }
    removeChild(oldChild) {
      const loc = this._children.indexOf(oldChild);
      this._children.splice(loc, 1);
      return loc;
    }
    /**
     * Remove node from the dataflow.
     */
    remove() {
      let loc = this._parent.removeChild(this);
      for (const child of this._children) {
        child._parent = this._parent;
        this._parent.addChild(child, loc++);
      }
    }
    /**
     * Insert another node as a parent of this node.
     */
    insertAsParentOf(other) {
      const parent = other.parent;
      parent.removeChild(this);
      this.parent = parent;
      other.parent = this;
    }
    swapWithParent() {
      const parent = this._parent;
      const newParent = parent.parent;
      for (const child of this._children) {
        child.parent = parent;
      }
      this._children = [];
      parent.removeChild(this);
      const loc = parent.parent.removeChild(parent);
      this._parent = newParent;
      newParent.addChild(this, loc);
      parent.parent = this;
    }
  }
  class OutputNode extends DataFlowNode {
    clone() {
      const cloneObj = new this.constructor();
      cloneObj.debugName = `clone_${this.debugName}`;
      cloneObj._source = this._source;
      cloneObj._name = `clone_${this._name}`;
      cloneObj.type = this.type;
      cloneObj.refCounts = this.refCounts;
      cloneObj.refCounts[cloneObj._name] = 0;
      return cloneObj;
    }
    /**
     * @param source The name of the source. Will change in assemble.
     * @param type The type of the output node.
     * @param refCounts A global ref counter map.
     */
    constructor(parent, source2, type2, refCounts) {
      super(parent, source2);
      this.type = type2;
      this.refCounts = refCounts;
      this._source = this._name = source2;
      if (this.refCounts && !(this._name in this.refCounts)) {
        this.refCounts[this._name] = 0;
      }
    }
    dependentFields() {
      return /* @__PURE__ */ new Set();
    }
    producedFields() {
      return /* @__PURE__ */ new Set();
    }
    hash() {
      if (this._hash === void 0) {
        this._hash = `Output ${uniqueId()}`;
      }
      return this._hash;
    }
    /**
     * Request the datasource name and increase the ref counter.
     *
     * During the parsing phase, this will return the simple name such as 'main' or 'raw'.
     * It is crucial to request the name from an output node to mark it as a required node.
     * If nobody ever requests the name, this datasource will not be instantiated in the assemble phase.
     *
     * In the assemble phase, this will return the correct name.
     */
    getSource() {
      this.refCounts[this._name]++;
      return this._source;
    }
    isRequired() {
      return !!this.refCounts[this._name];
    }
    setSource(source2) {
      this._source = source2;
    }
  }
  function isTimeUnitTransformComponent(timeUnitComponent) {
    return timeUnitComponent.as !== void 0;
  }
  function offsetAs(field2) {
    return `${field2}_end`;
  }
  class TimeUnitNode extends DataFlowNode {
    clone() {
      return new TimeUnitNode(null, duplicate(this.timeUnits));
    }
    constructor(parent, timeUnits2) {
      super(parent);
      this.timeUnits = timeUnits2;
    }
    static makeFromEncoding(parent, model) {
      const formula = model.reduceFieldDef((timeUnitComponent, fieldDef, channel) => {
        const { field: field2, timeUnit } = fieldDef;
        if (timeUnit) {
          let component;
          if (isBinnedTimeUnit(timeUnit)) {
            if (isUnitModel(model)) {
              const { mark, markDef, config } = model;
              const bandPosition = getBandPosition({ fieldDef, markDef, config });
              if (isRectBasedMark(mark) || !!bandPosition) {
                component = {
                  timeUnit: normalizeTimeUnit(timeUnit),
                  field: field2
                };
              }
            }
          } else {
            component = {
              as: vgField(fieldDef, { forAs: true }),
              field: field2,
              timeUnit
            };
          }
          if (isUnitModel(model)) {
            const { mark, markDef, config } = model;
            const bandPosition = getBandPosition({ fieldDef, markDef, config });
            if (isRectBasedMark(mark) && isXorY(channel) && bandPosition !== 0.5) {
              component.rectBandPosition = bandPosition;
            }
          }
          if (component) {
            timeUnitComponent[hash(component)] = component;
          }
        }
        return timeUnitComponent;
      }, {});
      if (isEmpty(formula)) {
        return null;
      }
      return new TimeUnitNode(parent, formula);
    }
    static makeFromTransform(parent, t) {
      const { timeUnit, ...other } = { ...t };
      const normalizedTimeUnit = normalizeTimeUnit(timeUnit);
      const component = {
        ...other,
        timeUnit: normalizedTimeUnit
      };
      return new TimeUnitNode(parent, {
        [hash(component)]: component
      });
    }
    /**
     * Merge together TimeUnitNodes assigning the children of `other` to `this`
     * and removing `other`.
     */
    merge(other) {
      this.timeUnits = { ...this.timeUnits };
      for (const key2 in other.timeUnits) {
        if (!this.timeUnits[key2]) {
          this.timeUnits[key2] = other.timeUnits[key2];
        }
      }
      for (const child of other.children) {
        other.removeChild(child);
        child.parent = this;
      }
      other.remove();
    }
    /**
     * Remove time units coming from the other node.
     */
    removeFormulas(fields) {
      const newFormula = {};
      for (const [key2, timeUnitComponent] of entries$1(this.timeUnits)) {
        const fieldAs = isTimeUnitTransformComponent(timeUnitComponent) ? timeUnitComponent.as : `${timeUnitComponent.field}_end`;
        if (!fields.has(fieldAs)) {
          newFormula[key2] = timeUnitComponent;
        }
      }
      this.timeUnits = newFormula;
    }
    producedFields() {
      return new Set(vals(this.timeUnits).map((f) => {
        return isTimeUnitTransformComponent(f) ? f.as : offsetAs(f.field);
      }));
    }
    dependentFields() {
      return new Set(vals(this.timeUnits).map((f) => f.field));
    }
    hash() {
      return `TimeUnit ${hash(this.timeUnits)}`;
    }
    assemble() {
      const transforms2 = [];
      for (const f of vals(this.timeUnits)) {
        const { rectBandPosition } = f;
        const normalizedTimeUnit = normalizeTimeUnit(f.timeUnit);
        if (isTimeUnitTransformComponent(f)) {
          const { field: field2, as } = f;
          const { unit: unit2, utc, ...params2 } = normalizedTimeUnit;
          const startEnd = [as, `${as}_end`];
          transforms2.push({
            field: replacePathInField(field2),
            type: "timeunit",
            ...unit2 ? { units: getTimeUnitParts(unit2) } : {},
            ...utc ? { timezone: "utc" } : {},
            ...params2,
            as: startEnd
          });
          transforms2.push(...offsetedRectFormulas(startEnd, rectBandPosition, normalizedTimeUnit));
        } else if (f) {
          const { field: escapedField } = f;
          const field2 = escapedField.replaceAll("\\.", ".");
          const expr2 = offsetExpr({ timeUnit: normalizedTimeUnit, field: field2 });
          const endAs = offsetAs(field2);
          transforms2.push({
            type: "formula",
            expr: expr2,
            as: endAs
          });
          transforms2.push(...offsetedRectFormulas([field2, endAs], rectBandPosition, normalizedTimeUnit));
        }
      }
      return transforms2;
    }
  }
  const OFFSETTED_RECT_START_SUFFIX = "offsetted_rect_start";
  const OFFSETTED_RECT_END_SUFFIX = "offsetted_rect_end";
  function offsetExpr({ timeUnit, field: field2, reverse: reverse2 }) {
    const { unit: unit2, utc } = timeUnit;
    const smallestUnit = getSmallestTimeUnitPart(unit2);
    const { part, step } = getDateTimePartAndStep(smallestUnit, timeUnit.step);
    const offsetFn = utc ? "utcOffset" : "timeOffset";
    const expr2 = `${offsetFn}('${part}', ${accessWithDatumToUnescapedPath(field2)}, ${reverse2 ? -step : step})`;
    return expr2;
  }
  function offsetedRectFormulas([startField, endField], rectBandPosition, timeUnit) {
    if (rectBandPosition !== void 0 && rectBandPosition !== 0.5) {
      const startExpr = accessWithDatumToUnescapedPath(startField);
      const endExpr = accessWithDatumToUnescapedPath(endField);
      return [
        {
          type: "formula",
          expr: interpolateExpr([
            offsetExpr({
              timeUnit,
              field: startField,
              reverse: true
            }),
            startExpr
          ], rectBandPosition + 0.5),
          as: `${startField}_${OFFSETTED_RECT_START_SUFFIX}`
        },
        {
          type: "formula",
          expr: interpolateExpr([startExpr, endExpr], rectBandPosition + 0.5),
          as: `${startField}_${OFFSETTED_RECT_END_SUFFIX}`
        }
      ];
    }
    return [];
  }
  function interpolateExpr([start, end], fraction) {
    return `${1 - fraction} * ${start} + ${fraction} * ${end}`;
  }
  const TUPLE_FIELDS = "_tuple_fields";
  class SelectionProjectionComponent {
    constructor(...items) {
      this.items = items;
      this.hasChannel = {};
      this.hasField = {};
      this.hasSelectionId = false;
    }
  }
  const project = {
    defined: () => {
      return true;
    },
    parse: (model, selCmpt, selDef) => {
      const name = selCmpt.name;
      const proj = selCmpt.project ?? (selCmpt.project = new SelectionProjectionComponent());
      const parsed = {};
      const timeUnits2 = {};
      const signals = /* @__PURE__ */ new Set();
      const signalName = (p, range2) => {
        const suffix = range2 === "visual" ? p.channel : p.field;
        let sg = varName(`${name}_${suffix}`);
        for (let counter2 = 1; signals.has(sg); counter2++) {
          sg = varName(`${name}_${suffix}_${counter2}`);
        }
        signals.add(sg);
        return { [range2]: sg };
      };
      const type2 = selCmpt.type;
      const cfg = model.config.selection[type2];
      const init2 = selDef.value !== void 0 ? array$5(selDef.value) : null;
      let { fields, encodings } = isObject(selDef.select) ? selDef.select : {};
      if (!fields && !encodings && init2) {
        for (const initVal of init2) {
          if (!isObject(initVal)) {
            continue;
          }
          for (const key2 of keys(initVal)) {
            if (isSingleDefUnitChannel(key2)) {
              (encodings || (encodings = [])).push(key2);
            } else {
              if (type2 === "interval") {
                warn(INTERVAL_INITIALIZED_WITH_POS);
                encodings = cfg.encodings;
              } else {
                (fields ?? (fields = [])).push(key2);
              }
            }
          }
        }
      }
      if (!fields && !encodings) {
        encodings = cfg.encodings;
        if ("fields" in cfg) {
          fields = cfg.fields;
        }
      }
      for (const channel of encodings ?? []) {
        const fieldDef = model.fieldDef(channel);
        if (fieldDef) {
          let field2 = fieldDef.field;
          if (fieldDef.aggregate) {
            warn(cannotProjectAggregate(channel, fieldDef.aggregate));
            continue;
          } else if (!field2) {
            warn(cannotProjectOnChannelWithoutField(channel));
            continue;
          }
          if (fieldDef.timeUnit && !isBinnedTimeUnit(fieldDef.timeUnit)) {
            field2 = model.vgField(channel);
            const component = {
              timeUnit: fieldDef.timeUnit,
              as: field2,
              field: fieldDef.field
            };
            timeUnits2[hash(component)] = component;
          }
          if (!parsed[field2]) {
            const tplType = type2 === "interval" && isScaleChannel(channel) && hasContinuousDomain(model.getScaleComponent(channel).get("type")) ? "R" : fieldDef.bin ? "R-RE" : "E";
            const p = { field: field2, channel, type: tplType, index: proj.items.length };
            p.signals = { ...signalName(p, "data"), ...signalName(p, "visual") };
            proj.items.push(parsed[field2] = p);
            proj.hasField[field2] = parsed[field2];
            proj.hasSelectionId = proj.hasSelectionId || field2 === SELECTION_ID;
            if (isGeoPositionChannel(channel)) {
              p.geoChannel = channel;
              p.channel = getPositionChannelFromLatLong(channel);
              proj.hasChannel[p.channel] = parsed[field2];
            } else {
              proj.hasChannel[channel] = parsed[field2];
            }
          }
        } else {
          warn(cannotProjectOnChannelWithoutField(channel));
        }
      }
      for (const field2 of fields ?? []) {
        if (proj.hasField[field2])
          continue;
        const p = { type: "E", field: field2, index: proj.items.length };
        p.signals = { ...signalName(p, "data") };
        proj.items.push(p);
        proj.hasField[field2] = p;
        proj.hasSelectionId = proj.hasSelectionId || field2 === SELECTION_ID;
      }
      if (init2) {
        selCmpt.init = init2.map((v) => {
          return proj.items.map((p) => isObject(v) ? v[p.geoChannel || p.channel] !== void 0 ? v[p.geoChannel || p.channel] : v[p.field] : v);
        });
      }
      if (!isEmpty(timeUnits2)) {
        proj.timeUnit = new TimeUnitNode(null, timeUnits2);
      }
    },
    signals: (model, selCmpt, allSignals) => {
      const name = selCmpt.name + TUPLE_FIELDS;
      const hasSignal2 = allSignals.filter((s) => s.name === name);
      return hasSignal2.length > 0 || selCmpt.project.hasSelectionId ? allSignals : allSignals.concat({
        name,
        value: selCmpt.project.items.map(assembleProjection)
      });
    }
  };
  const CURR = "_curr";
  const ANIM_VALUE = "anim_value";
  const ANIM_CLOCK = "anim_clock";
  const EASED_ANIM_CLOCK = "eased_anim_clock";
  const MIN_EXTENT = "min_extent";
  const MAX_RANGE_EXTENT = "max_range_extent";
  const LAST_TICK = "last_tick_at";
  const IS_PLAYING = "is_playing";
  const THROTTLE = 1 / 60 * 1e3;
  const animationSignals = (selectionName, scaleName) => {
    return [
      // timer signals
      {
        name: EASED_ANIM_CLOCK,
        // update: 'easeLinear(anim_clock / max_range_extent) * max_range_extent'
        update: ANIM_CLOCK
        // TODO: replace with above once easing functions are implemented in vega-functions
      },
      // scale signals
      // TODO(jzong): uncomment commented signals below when implementing interpolation
      { name: `${selectionName}_domain`, init: `domain('${scaleName}')` },
      { name: MIN_EXTENT, init: `extent(${selectionName}_domain)[0]` },
      // {name: 'max_extent', init: `extent(${selectionName}_domain)[1]`},
      { name: MAX_RANGE_EXTENT, init: `extent(range('${scaleName}'))[1]` },
      // {name: 't_index', update: `indexof(${selectionName}_domain, anim_value)`},
      { name: ANIM_VALUE, update: `invert('${scaleName}', ${EASED_ANIM_CLOCK})` }
    ];
  };
  const point$1 = {
    defined: (selCmpt) => selCmpt.type === "point",
    topLevelSignals: (model, selCmpt, signals) => {
      if (isTimerSelection(selCmpt)) {
        signals = signals.concat([
          {
            name: ANIM_CLOCK,
            init: "0",
            on: [
              {
                events: { type: "timer", throttle: THROTTLE },
                update: `${IS_PLAYING} ? (${ANIM_CLOCK} + (now() - ${LAST_TICK}) > ${MAX_RANGE_EXTENT} ? 0 : ${ANIM_CLOCK} + (now() - ${LAST_TICK})) : ${ANIM_CLOCK}`
              }
            ]
          },
          {
            name: LAST_TICK,
            init: "now()",
            on: [{ events: [{ signal: ANIM_CLOCK }, { signal: IS_PLAYING }], update: "now()" }]
          },
          {
            name: IS_PLAYING,
            init: "true"
          }
        ]);
      }
      return signals;
    },
    signals: (model, selCmpt, signals) => {
      const name = selCmpt.name;
      const fieldsSg = name + TUPLE_FIELDS;
      const project2 = selCmpt.project;
      const datum2 = "(item().isVoronoi ? datum.datum : datum)";
      const brushes = vals(model.component.selection ?? {}).reduce((acc, cmpt) => {
        return cmpt.type === "interval" ? acc.concat(cmpt.name + BRUSH) : acc;
      }, []).map((b2) => `indexof(item().mark.name, '${b2}') < 0`).join(" && ");
      const test2 = `datum && item().mark.marktype !== 'group' && indexof(item().mark.role, 'legend') < 0${brushes ? ` && ${brushes}` : ""}`;
      let update2 = `unit: ${unitName(model)}, `;
      if (selCmpt.project.hasSelectionId) {
        update2 += `${SELECTION_ID}: ${datum2}[${$(SELECTION_ID)}]`;
      } else if (isTimerSelection(selCmpt)) {
        update2 += `fields: ${fieldsSg}, values: [${ANIM_VALUE} ? ${ANIM_VALUE} : ${MIN_EXTENT}]`;
      } else {
        const values2 = project2.items.map((p) => {
          const fieldDef = model.fieldDef(p.channel);
          return (fieldDef == null ? void 0 : fieldDef.bin) ? `[${datum2}[${$(model.vgField(p.channel, {}))}], ${datum2}[${$(model.vgField(p.channel, { binSuffix: "end" }))}]]` : `${datum2}[${$(p.field)}]`;
        }).join(", ");
        update2 += `fields: ${fieldsSg}, values: [${values2}]`;
      }
      if (isTimerSelection(selCmpt)) {
        return signals.concat(animationSignals(selCmpt.name, model.scaleName(TIME)), [
          {
            name: name + TUPLE,
            on: [
              {
                events: [{ signal: EASED_ANIM_CLOCK }, { signal: ANIM_VALUE }],
                update: `{${update2}}`,
                force: true
              }
            ]
          }
        ]);
      } else {
        const events2 = selCmpt.events;
        return signals.concat([
          {
            name: name + TUPLE,
            on: events2 ? [
              {
                events: events2,
                update: `${test2} ? {${update2}} : null`,
                force: true
              }
            ] : []
          }
        ]);
      }
    }
  };
  function assembleProjection(proj) {
    const { signals, hasLegend, index: index2, ...rest } = proj;
    rest.field = replacePathInField(rest.field);
    return rest;
  }
  function assembleInit(init2, isExpr2 = true, wrap2 = identity$6) {
    if (isArray(init2)) {
      const assembled = init2.map((v) => assembleInit(v, isExpr2, wrap2));
      return isExpr2 ? `[${assembled.join(", ")}]` : assembled;
    } else if (isDateTime(init2)) {
      if (isExpr2) {
        return wrap2(dateTimeToExpr(init2));
      } else {
        return wrap2(dateTimeToTimestamp(init2));
      }
    }
    return isExpr2 ? wrap2(stringify$1(init2)) : init2;
  }
  function assembleUnitSelectionSignals(model, signals) {
    for (const selCmpt of vals(model.component.selection ?? {})) {
      const name = selCmpt.name;
      let modifyExpr = `${name}${TUPLE}, ${selCmpt.resolve === "global" ? "true" : `{unit: ${unitName(model)}}`}`;
      for (const c2 of selectionCompilers) {
        if (!c2.defined(selCmpt))
          continue;
        if (c2.signals)
          signals = c2.signals(model, selCmpt, signals);
        if (c2.modifyExpr)
          modifyExpr = c2.modifyExpr(model, selCmpt, modifyExpr);
      }
      signals.push({
        name: name + MODIFY,
        on: [
          {
            events: { signal: selCmpt.name + TUPLE },
            update: `modify(${$(selCmpt.name + STORE)}, ${modifyExpr})`
          }
        ]
      });
    }
    return cleanupEmptyOnArray(signals);
  }
  function assembleFacetSignals(model, signals) {
    if (model.component.selection && keys(model.component.selection).length) {
      const name = $(model.getName("cell"));
      signals.unshift({
        name: "facet",
        value: {},
        on: [
          {
            events: eventSelector("pointermove", "scope"),
            update: `isTuple(facet) ? facet : group(${name}).datum`
          }
        ]
      });
    }
    return cleanupEmptyOnArray(signals);
  }
  function assembleTopLevelSignals(model, signals) {
    let hasSelections = false;
    for (const selCmpt of vals(model.component.selection ?? {})) {
      const name = selCmpt.name;
      const store = $(name + STORE);
      const hasSg = signals.filter((s) => s.name === name);
      if (hasSg.length === 0) {
        const resolve2 = selCmpt.resolve === "global" ? "union" : selCmpt.resolve;
        const isPoint2 = selCmpt.type === "point" ? ", true, true)" : ")";
        signals.push({
          name: selCmpt.name,
          update: `${VL_SELECTION_RESOLVE}(${store}, ${$(resolve2)}${isPoint2}`
        });
      }
      hasSelections = true;
      for (const c2 of selectionCompilers) {
        if (c2.defined(selCmpt) && c2.topLevelSignals) {
          signals = c2.topLevelSignals(model, selCmpt, signals);
        }
      }
    }
    if (hasSelections) {
      const hasUnit = signals.filter((s) => s.name === "unit");
      if (hasUnit.length === 0) {
        signals.unshift({
          name: "unit",
          value: {},
          on: [{ events: "pointermove", update: "isTuple(group()) ? group() : unit" }]
        });
      }
    }
    return cleanupEmptyOnArray(signals);
  }
  function assembleUnitSelectionData(model, data2) {
    const selectionData = [];
    const animationData = [];
    const unit2 = unitName(model, { escape: false });
    for (const selCmpt of vals(model.component.selection ?? {})) {
      const store = { name: selCmpt.name + STORE };
      if (selCmpt.project.hasSelectionId) {
        store.transform = [{ type: "collect", sort: { field: SELECTION_ID } }];
      }
      if (selCmpt.init) {
        const fields = selCmpt.project.items.map(assembleProjection);
        store.values = selCmpt.project.hasSelectionId ? selCmpt.init.map((i) => ({ unit: unit2, [SELECTION_ID]: assembleInit(i, false)[0] })) : selCmpt.init.map((i) => ({ unit: unit2, fields, values: assembleInit(i, false) }));
      }
      const contains2 = [...selectionData, ...data2].filter((d) => d.name === selCmpt.name + STORE);
      if (!contains2.length) {
        selectionData.push(store);
      }
      if (isTimerSelection(selCmpt) && data2.length) {
        const sourceName = model.lookupDataSource(model.getDataName(DataSourceType.Main));
        const sourceData = data2.find((d) => d.name === sourceName);
        const sourceDataFilter = sourceData.transform.find((t) => t.type === "filter" && t.expr.includes("vlSelectionTest"));
        if (sourceDataFilter) {
          sourceData.transform = sourceData.transform.filter((t) => t !== sourceDataFilter);
          const currentFrame = {
            name: sourceData.name + CURR,
            source: sourceData.name,
            transform: [sourceDataFilter]
            // add the selection filter to the animation dataset
          };
          animationData.push(currentFrame);
        }
      }
    }
    return selectionData.concat(data2, animationData);
  }
  function assembleUnitSelectionMarks(model, marks) {
    for (const selCmpt of vals(model.component.selection ?? {})) {
      for (const c2 of selectionCompilers) {
        if (c2.defined(selCmpt) && c2.marks) {
          marks = c2.marks(model, selCmpt, marks);
        }
      }
    }
    return marks;
  }
  function assembleLayerSelectionMarks(model, marks) {
    for (const child of model.children) {
      if (isUnitModel(child)) {
        marks = assembleUnitSelectionMarks(child, marks);
      }
    }
    return marks;
  }
  function assembleSelectionScaleDomain(model, extent2, scaleCmpt, domain2) {
    const parsedExtent = parseSelectionExtent(model, extent2.param, extent2);
    return {
      signal: hasContinuousDomain(scaleCmpt.get("type")) && isArray(domain2) && domain2[0] > domain2[1] ? `isValid(${parsedExtent}) && reverse(${parsedExtent})` : parsedExtent
    };
  }
  function cleanupEmptyOnArray(signals) {
    return signals.map((s) => {
      if (s.on && !s.on.length)
        delete s.on;
      return s;
    });
  }
  const scaleBindings = {
    defined: (selCmpt) => {
      return selCmpt.type === "interval" && selCmpt.resolve === "global" && selCmpt.bind && selCmpt.bind === "scales";
    },
    parse: (model, selCmpt) => {
      const bound2 = selCmpt.scales = [];
      for (const proj of selCmpt.project.items) {
        const channel = proj.channel;
        if (!isScaleChannel(channel)) {
          continue;
        }
        const scale2 = model.getScaleComponent(channel);
        const scaleType2 = scale2 ? scale2.get("type") : void 0;
        if (scaleType2 == "sequential") {
          warn(SEQUENTIAL_SCALE_DEPRECATED);
        }
        if (!scale2 || !hasContinuousDomain(scaleType2)) {
          warn(SCALE_BINDINGS_CONTINUOUS);
          continue;
        }
        scale2.set("selectionExtent", { param: selCmpt.name, field: proj.field }, true);
        bound2.push(proj);
      }
    },
    topLevelSignals: (model, selCmpt, signals) => {
      const bound2 = selCmpt.scales.filter((proj) => signals.filter((s) => s.name === proj.signals.data).length === 0);
      if (!model.parent || isTopLevelLayer(model) || bound2.length === 0) {
        return signals;
      }
      const namedSg = signals.find((s) => s.name === selCmpt.name);
      let update2 = namedSg.update;
      if (update2.includes(VL_SELECTION_RESOLVE)) {
        namedSg.update = `{${bound2.map((proj) => `${$(replacePathInField(proj.field))}: ${proj.signals.data}`).join(", ")}}`;
      } else {
        for (const proj of bound2) {
          const mapping = `${$(replacePathInField(proj.field))}: ${proj.signals.data}`;
          if (!update2.includes(mapping)) {
            update2 = `${update2.substring(0, update2.length - 1)}, ${mapping}}`;
          }
        }
        namedSg.update = update2;
      }
      return signals.concat(bound2.map((proj) => ({ name: proj.signals.data })));
    },
    signals: (model, selCmpt, signals) => {
      if (model.parent && !isTopLevelLayer(model)) {
        for (const proj of selCmpt.scales) {
          const signal = signals.find((s) => s.name === proj.signals.data);
          signal.push = "outer";
          delete signal.value;
          delete signal.update;
        }
      }
      return signals;
    }
  };
  function domain(model, channel) {
    const scale2 = $(model.scaleName(channel));
    return `domain(${scale2})`;
  }
  function isTopLevelLayer(model) {
    return model.parent && isLayerModel(model.parent) && (!model.parent.parent || isTopLevelLayer(model.parent.parent));
  }
  const BRUSH = "_brush";
  const SCALE_TRIGGER = "_scale_trigger";
  const GEO_INIT_TICK = "geo_interval_init_tick";
  const INIT = "_init";
  const CENTER = "_center";
  const interval = {
    defined: (selCmpt) => selCmpt.type === "interval",
    parse: (model, selCmpt, selDef) => {
      var _a2;
      if (model.hasProjection) {
        const def2 = { ...isObject(selDef.select) ? selDef.select : {} };
        def2.fields = [SELECTION_ID];
        if (!def2.encodings) {
          def2.encodings = selDef.value ? keys(selDef.value) : [LONGITUDE, LATITUDE];
        }
        selDef.select = { type: "interval", ...def2 };
      }
      if (selCmpt.translate && !scaleBindings.defined(selCmpt)) {
        const filterExpr = `!event.item || event.item.mark.name !== ${$(selCmpt.name + BRUSH)}`;
        for (const evt of selCmpt.events) {
          if (!evt.between) {
            warn(`${evt} is not an ordered event stream for interval selections.`);
            continue;
          }
          const filters2 = array$5((_a2 = evt.between[0]).filter ?? (_a2.filter = []));
          if (!filters2.includes(filterExpr)) {
            filters2.push(filterExpr);
          }
        }
      }
    },
    signals: (model, selCmpt, signals) => {
      const name = selCmpt.name;
      const tupleSg = name + TUPLE;
      const channels = vals(selCmpt.project.hasChannel).filter((p) => p.channel === X || p.channel === Y);
      const init2 = selCmpt.init ? selCmpt.init[0] : null;
      signals.push(...channels.reduce((arr, proj) => arr.concat(channelSignals(model, selCmpt, proj, init2 && init2[proj.index])), []));
      if (!model.hasProjection) {
        if (!scaleBindings.defined(selCmpt)) {
          const triggerSg = name + SCALE_TRIGGER;
          const scaleTriggers = channels.map((proj) => {
            const channel = proj.channel;
            const { data: dname, visual: vname } = proj.signals;
            const scaleName = $(model.scaleName(channel));
            const scaleType2 = model.getScaleComponent(channel).get("type");
            const toNum = hasContinuousDomain(scaleType2) ? "+" : "";
            return `(!isArray(${dname}) || (${toNum}invert(${scaleName}, ${vname})[0] === ${toNum}${dname}[0] && ${toNum}invert(${scaleName}, ${vname})[1] === ${toNum}${dname}[1]))`;
          });
          if (scaleTriggers.length) {
            signals.push({
              name: triggerSg,
              value: {},
              on: [
                {
                  events: channels.map((proj) => ({ scale: model.scaleName(proj.channel) })),
                  update: scaleTriggers.join(" && ") + ` ? ${triggerSg} : {}`
                }
              ]
            });
          }
        }
        const dataSignals = channels.map((proj) => proj.signals.data);
        const update2 = `unit: ${unitName(model)}, fields: ${name + TUPLE_FIELDS}, values`;
        return signals.concat({
          name: tupleSg,
          ...init2 ? { init: `{${update2}: ${assembleInit(init2)}}` } : {},
          ...dataSignals.length ? {
            on: [
              {
                events: [{ signal: dataSignals.join(" || ") }],
                // Prevents double invocation, see https://github.com/vega/vega/issues/1672.
                update: `${dataSignals.join(" && ")} ? {${update2}: [${dataSignals}]} : null`
              }
            ]
          } : {}
        });
      } else {
        const projection2 = $(model.projectionName());
        const centerSg = model.projectionName() + CENTER;
        const { x: x2, y: y2 } = selCmpt.project.hasChannel;
        const xvname = x2 && x2.signals.visual;
        const yvname = y2 && y2.signals.visual;
        const xinit = x2 ? init2 && init2[x2.index] : `${centerSg}[0]`;
        const yinit = y2 ? init2 && init2[y2.index] : `${centerSg}[1]`;
        const sizeSg = (layout) => model.getSizeSignalRef(layout).signal;
        const bbox = `[[${xvname ? xvname + "[0]" : "0"}, ${yvname ? yvname + "[0]" : "0"}],[${xvname ? xvname + "[1]" : sizeSg("width")}, ${yvname ? yvname + "[1]" : sizeSg("height")}]]`;
        if (init2) {
          signals.unshift({
            name: name + INIT,
            init: `[scale(${projection2}, [${x2 ? xinit[0] : xinit}, ${y2 ? yinit[0] : yinit}]), scale(${projection2}, [${x2 ? xinit[1] : xinit}, ${y2 ? yinit[1] : yinit}])]`
          });
          if (!x2 || !y2) {
            const hasCenterSg = signals.find((s) => s.name === centerSg);
            if (!hasCenterSg) {
              signals.unshift({
                name: centerSg,
                update: `invert(${projection2}, [${sizeSg("width")}/2, ${sizeSg("height")}/2])`
              });
            }
          }
        }
        const intersect2 = `intersect(${bbox}, {markname: ${$(model.getName("marks"))}}, unit.mark)`;
        const base = `{unit: ${unitName(model)}}`;
        const update2 = `vlSelectionTuples(${intersect2}, ${base})`;
        const visualSignals = channels.map((proj) => proj.signals.visual);
        return signals.concat({
          name: tupleSg,
          on: [
            {
              events: [
                ...visualSignals.length ? [{ signal: visualSignals.join(" || ") }] : [],
                ...init2 ? [{ signal: GEO_INIT_TICK }] : []
              ],
              update: update2
            }
          ]
        });
      }
    },
    topLevelSignals: (model, selCmpt, signals) => {
      if (isUnitModel(model) && model.hasProjection && selCmpt.init) {
        const hasTick = signals.filter((s) => s.name === GEO_INIT_TICK);
        if (!hasTick.length) {
          signals.unshift({
            name: GEO_INIT_TICK,
            value: null,
            on: [
              {
                events: "timer{1}",
                update: `${GEO_INIT_TICK} === null ? {} : ${GEO_INIT_TICK}`
              }
            ]
          });
        }
      }
      return signals;
    },
    marks: (model, selCmpt, marks) => {
      const name = selCmpt.name;
      const { x: x2, y: y2 } = selCmpt.project.hasChannel;
      const xvname = x2 == null ? void 0 : x2.signals.visual;
      const yvname = y2 == null ? void 0 : y2.signals.visual;
      const store = `data(${$(selCmpt.name + STORE)})`;
      if (scaleBindings.defined(selCmpt) || !x2 && !y2) {
        return marks;
      }
      const update2 = {
        x: x2 !== void 0 ? { signal: `${xvname}[0]` } : { value: 0 },
        y: y2 !== void 0 ? { signal: `${yvname}[0]` } : { value: 0 },
        x2: x2 !== void 0 ? { signal: `${xvname}[1]` } : { field: { group: "width" } },
        y2: y2 !== void 0 ? { signal: `${yvname}[1]` } : { field: { group: "height" } }
      };
      if (selCmpt.resolve === "global") {
        for (const key2 of keys(update2)) {
          update2[key2] = [
            {
              test: `${store}.length && ${store}[0].unit === ${unitName(model)}`,
              ...update2[key2]
            },
            { value: 0 }
          ];
        }
      }
      const { fill: fill2, fillOpacity, cursor: cursor2, ...stroke2 } = selCmpt.mark;
      const vgStroke = keys(stroke2).reduce((def2, k) => {
        def2[k] = [
          {
            test: [
              x2 !== void 0 && `${xvname}[0] !== ${xvname}[1]`,
              y2 !== void 0 && `${yvname}[0] !== ${yvname}[1]`
            ].filter((t) => t).join(" && "),
            value: stroke2[k]
          },
          { value: null }
        ];
        return def2;
      }, {});
      const vgCursor = cursor2 ?? (selCmpt.translate ? "move" : null);
      return [
        {
          name: `${name + BRUSH}_bg`,
          type: "rect",
          clip: true,
          encode: {
            enter: {
              fill: { value: fill2 },
              fillOpacity: { value: fillOpacity }
            },
            update: update2
          }
        },
        ...marks,
        {
          name: name + BRUSH,
          type: "rect",
          clip: true,
          encode: {
            enter: {
              ...vgCursor ? { cursor: { value: vgCursor } } : {},
              fill: { value: "transparent" }
            },
            update: { ...update2, ...vgStroke }
          }
        }
      ];
    }
  };
  function channelSignals(model, selCmpt, proj, init2) {
    const scaledInterval = !model.hasProjection;
    const channel = proj.channel;
    const vname = proj.signals.visual;
    const scaleName = $(scaledInterval ? model.scaleName(channel) : model.projectionName());
    const scaled = (str) => `scale(${scaleName}, ${str})`;
    const size = model.getSizeSignalRef(channel === X ? "width" : "height").signal;
    const coord = `${channel}(unit)`;
    const von = selCmpt.events.reduce((def2, evt) => {
      return [
        ...def2,
        { events: evt.between[0], update: `[${coord}, ${coord}]` },
        // Brush Start
        { events: evt, update: `[${vname}[0], clamp(${coord}, 0, ${size})]` }
        // Brush End
      ];
    }, []);
    if (scaledInterval) {
      const dname = proj.signals.data;
      const hasScales = scaleBindings.defined(selCmpt);
      const scale2 = model.getScaleComponent(channel);
      const scaleType2 = scale2 ? scale2.get("type") : void 0;
      const vinit = init2 ? { init: assembleInit(init2, true, scaled) } : { value: [] };
      von.push({
        events: { signal: selCmpt.name + SCALE_TRIGGER },
        update: hasContinuousDomain(scaleType2) ? `[${scaled(`${dname}[0]`)}, ${scaled(`${dname}[1]`)}]` : `[0, 0]`
      });
      return hasScales ? [{ name: dname, on: [] }] : [
        { name: vname, ...vinit, on: von },
        {
          name: dname,
          ...init2 ? { init: assembleInit(init2) } : {},
          // Cannot be `value` as `init` may require datetime exprs.
          on: [
            {
              events: { signal: vname },
              update: `${vname}[0] === ${vname}[1] ? null : invert(${scaleName}, ${vname})`
            }
          ]
        }
      ];
    } else {
      const initIdx = channel === X ? 0 : 1;
      const initSg = selCmpt.name + INIT;
      const vinit = init2 ? { init: `[${initSg}[0][${initIdx}], ${initSg}[1][${initIdx}]]` } : { value: [] };
      return [{ name: vname, ...vinit, on: von }];
    }
  }
  function wrapCondition({ model, channelDef, vgChannel, invalidValueRef, mainRefFn }) {
    const condition = isConditionalDef(channelDef) && channelDef.condition;
    let valueRefs = [];
    if (condition) {
      const conditions = array$5(condition);
      valueRefs = conditions.map((c2) => {
        const conditionValueRef = mainRefFn(c2);
        if (isConditionalParameter(c2)) {
          const { param: param2, empty: empty2 } = c2;
          const test2 = parseSelectionPredicate(model, { param: param2, empty: empty2 });
          return { test: test2, ...conditionValueRef };
        } else {
          const test2 = expression(model, c2.test);
          return { test: test2, ...conditionValueRef };
        }
      });
    }
    if (invalidValueRef !== void 0) {
      valueRefs.push(invalidValueRef);
    }
    const mainValueRef = mainRefFn(channelDef);
    if (mainValueRef !== void 0) {
      valueRefs.push(mainValueRef);
    }
    if (valueRefs.length > 1 || valueRefs.length === 1 && Boolean(valueRefs[0].test)) {
      return { [vgChannel]: valueRefs };
    } else if (valueRefs.length === 1) {
      return { [vgChannel]: valueRefs[0] };
    }
    return {};
  }
  function text$1(model, channel = "text") {
    const channelDef = model.encoding[channel];
    return wrapCondition({
      model,
      channelDef,
      vgChannel: channel,
      mainRefFn: (cDef) => textRef(cDef, model.config),
      invalidValueRef: void 0
      // text encoding doesn't have continuous scales and thus can't have invalid values
    });
  }
  function textRef(channelDef, config, expr2 = "datum") {
    if (channelDef) {
      if (isValueDef(channelDef)) {
        return signalOrValueRef(channelDef.value);
      }
      if (isFieldOrDatumDef(channelDef)) {
        const { format: format2, formatType } = getFormatMixins(channelDef);
        return formatSignalRef({ fieldOrDatumDef: channelDef, format: format2, formatType, expr: expr2, config });
      }
    }
    return void 0;
  }
  function tooltip(model, opt = {}) {
    const { encoding, markDef, config, stack: stack2 } = model;
    const channelDef = encoding.tooltip;
    if (isArray(channelDef)) {
      return { tooltip: tooltipRefForEncoding({ tooltip: channelDef }, stack2, config, opt) };
    } else {
      const datum2 = opt.reactiveGeom ? "datum.datum" : "datum";
      const mainRefFn = (cDef) => {
        const tooltipRefFromChannelDef = textRef(cDef, config, datum2);
        if (tooltipRefFromChannelDef) {
          return tooltipRefFromChannelDef;
        }
        if (cDef === null) {
          return void 0;
        }
        let markTooltip = getMarkPropOrConfig("tooltip", markDef, config);
        if (markTooltip === true) {
          markTooltip = { content: "encoding" };
        }
        if (isString(markTooltip)) {
          return { value: markTooltip };
        } else if (isObject(markTooltip)) {
          if (isSignalRef(markTooltip)) {
            return markTooltip;
          } else if (markTooltip.content === "encoding") {
            return tooltipRefForEncoding(encoding, stack2, config, opt);
          } else {
            return { signal: datum2 };
          }
        }
        return void 0;
      };
      return wrapCondition({
        model,
        channelDef,
        vgChannel: "tooltip",
        mainRefFn,
        invalidValueRef: void 0
        // tooltip encoding doesn't have continuous scales and thus can't have invalid values
      });
    }
  }
  function tooltipData(encoding, stack2, config, { reactiveGeom } = {}) {
    const formatConfig = { ...config, ...config.tooltipFormat };
    const toSkip = /* @__PURE__ */ new Set();
    const expr2 = reactiveGeom ? "datum.datum" : "datum";
    const tuples = [];
    function add2(fDef, channel) {
      const mainChannel = getMainRangeChannel(channel);
      const fieldDef = isTypedFieldDef(fDef) ? fDef : {
        ...fDef,
        type: encoding[mainChannel].type
        // for secondary field def, copy type from main channel
      };
      const title2 = fieldDef.title || defaultTitle(fieldDef, formatConfig);
      const key2 = array$5(title2).join(", ").replaceAll(/"/g, '\\"');
      let value2;
      if (isXorY(channel)) {
        const channel2 = channel === "x" ? "x2" : "y2";
        const fieldDef2 = getFieldDef(encoding[channel2]);
        if (isBinned(fieldDef.bin) && fieldDef2) {
          const startField = vgField(fieldDef, { expr: expr2 });
          const endField = vgField(fieldDef2, { expr: expr2 });
          const { format: format2, formatType } = getFormatMixins(fieldDef);
          value2 = binFormatExpression(startField, endField, format2, formatType, formatConfig);
          toSkip.add(channel2);
        }
      }
      if ((isXorY(channel) || channel === THETA || channel === RADIUS) && stack2 && stack2.fieldChannel === channel && stack2.offset === "normalize") {
        const { format: format2, formatType } = getFormatMixins(fieldDef);
        value2 = formatSignalRef({
          fieldOrDatumDef: fieldDef,
          format: format2,
          formatType,
          expr: expr2,
          config: formatConfig,
          normalizeStack: true
        }).signal;
      }
      value2 ?? (value2 = textRef(fieldDef, formatConfig, expr2).signal);
      tuples.push({ channel, key: key2, value: value2 });
    }
    forEach(encoding, (channelDef, channel) => {
      if (isFieldDef(channelDef)) {
        add2(channelDef, channel);
      } else if (hasConditionalFieldDef(channelDef)) {
        add2(channelDef.condition, channel);
      }
    });
    const out = {};
    for (const { channel, key: key2, value: value2 } of tuples) {
      if (!toSkip.has(channel) && !out[key2]) {
        out[key2] = value2;
      }
    }
    return out;
  }
  function tooltipRefForEncoding(encoding, stack2, config, { reactiveGeom } = {}) {
    const data2 = tooltipData(encoding, stack2, config, { reactiveGeom });
    const keyValues = entries$1(data2).map(([key2, value2]) => `"${key2}": ${value2}`);
    return keyValues.length > 0 ? { signal: `{${keyValues.join(", ")}}` } : void 0;
  }
  function aria(model) {
    const { markDef, config } = model;
    const enableAria = getMarkPropOrConfig("aria", markDef, config);
    if (enableAria === false) {
      return {};
    }
    return {
      ...enableAria ? { aria: enableAria } : {},
      ...ariaRoleDescription(model),
      ...description(model)
    };
  }
  function ariaRoleDescription(model) {
    const { mark, markDef, config } = model;
    if (config.aria === false) {
      return {};
    }
    const ariaRoleDesc = getMarkPropOrConfig("ariaRoleDescription", markDef, config);
    if (ariaRoleDesc != null) {
      return { ariaRoleDescription: { value: ariaRoleDesc } };
    }
    return has$1(VG_MARK_INDEX, mark) ? {} : { ariaRoleDescription: { value: mark } };
  }
  function description(model) {
    const { encoding, markDef, config, stack: stack2 } = model;
    const channelDef = encoding.description;
    if (channelDef) {
      return wrapCondition({
        model,
        channelDef,
        vgChannel: "description",
        mainRefFn: (cDef) => textRef(cDef, model.config),
        invalidValueRef: void 0
        // aria encoding doesn't have continuous scales and thus can't have invalid values
      });
    }
    const descriptionValue = getMarkPropOrConfig("description", markDef, config);
    if (descriptionValue != null) {
      return {
        description: signalOrValueRef(descriptionValue)
      };
    }
    if (config.aria === false) {
      return {};
    }
    const data2 = tooltipData(encoding, stack2, config);
    if (isEmpty(data2)) {
      return void 0;
    }
    return {
      description: {
        signal: entries$1(data2).map(([key2, value2], index2) => `"${index2 > 0 ? "; " : ""}${key2}: " + (${value2})`).join(" + ")
      }
    };
  }
  function nonPosition(channel, model, opt = {}) {
    const { markDef, encoding, config } = model;
    const { vgChannel } = opt;
    let { defaultRef, defaultValue } = opt;
    const channelDef = encoding[channel];
    if (defaultRef === void 0) {
      defaultValue ?? (defaultValue = getMarkPropOrConfig(channel, markDef, config, {
        vgChannel,
        // If there is no conditonal def, we ignore vgConfig so the output spec is concise.
        // However, if there is a conditional def, we must include vgConfig so the default is respected.
        ignoreVgConfig: !isConditionalDef(channelDef)
      }));
      if (defaultValue !== void 0) {
        defaultRef = signalOrValueRef(defaultValue);
      }
    }
    const commonProps2 = {
      markDef,
      config,
      scaleName: model.scaleName(channel),
      scale: model.getScaleComponent(channel)
    };
    const invalidValueRef = getConditionalValueRefForIncludingInvalidValue({
      ...commonProps2,
      scaleChannel: channel,
      channelDef
    });
    const mainRefFn = (cDef) => {
      return midPoint({
        ...commonProps2,
        channel,
        channelDef: cDef,
        stack: null,
        // No need to provide stack for non-position as it does not affect mid point
        defaultRef
      });
    };
    return wrapCondition({
      model,
      channelDef,
      vgChannel: vgChannel ?? channel,
      invalidValueRef,
      mainRefFn
    });
  }
  function color(model, opt = { filled: void 0 }) {
    const { markDef, encoding, config } = model;
    const { type: markType2 } = markDef;
    const filled = opt.filled ?? getMarkPropOrConfig("filled", markDef, config);
    const transparentIfNeeded = contains(["bar", "point", "circle", "square", "geoshape"], markType2) ? "transparent" : void 0;
    const defaultFill = getMarkPropOrConfig(filled === true ? "color" : void 0, markDef, config, { vgChannel: "fill" }) ?? // need to add this manually as getMarkConfig normally drops config.mark[channel] if vgChannel is specified
    config.mark[filled === true && "color"] ?? // If there is no fill, always fill symbols, bar, geoshape
    // with transparent fills https://github.com/vega/vega-lite/issues/1316
    transparentIfNeeded;
    const defaultStroke = getMarkPropOrConfig(filled === false ? "color" : void 0, markDef, config, { vgChannel: "stroke" }) ?? // need to add this manually as getMarkConfig normally drops config.mark[channel] if vgChannel is specified
    config.mark[filled === false && "color"];
    const colorVgChannel = filled ? "fill" : "stroke";
    const fillStrokeMarkDefAndConfig = {
      ...defaultFill ? { fill: signalOrValueRef(defaultFill) } : {},
      ...defaultStroke ? { stroke: signalOrValueRef(defaultStroke) } : {}
    };
    if (markDef.color && (filled ? markDef.fill : markDef.stroke)) {
      warn(droppingColor("property", { fill: "fill" in markDef, stroke: "stroke" in markDef }));
    }
    return {
      ...fillStrokeMarkDefAndConfig,
      ...nonPosition("color", model, {
        vgChannel: colorVgChannel,
        defaultValue: filled ? defaultFill : defaultStroke
      }),
      ...nonPosition("fill", model, {
        // if there is encoding.fill, include default fill just in case we have conditional-only fill encoding
        defaultValue: encoding.fill ? defaultFill : void 0
      }),
      ...nonPosition("stroke", model, {
        // if there is encoding.stroke, include default fill just in case we have conditional-only stroke encoding
        defaultValue: encoding.stroke ? defaultStroke : void 0
      })
    };
  }
  function zindex(model) {
    const { encoding, mark } = model;
    const order = encoding.order;
    if (!isPathMark(mark) && isValueDef(order)) {
      return wrapCondition({
        model,
        channelDef: order,
        vgChannel: "zindex",
        mainRefFn: (cd) => signalOrValueRef(cd.value),
        invalidValueRef: void 0
        // zindex encoding doesn't have continuous scales and thus can't have invalid values
      });
    }
    return {};
  }
  function positionOffset({ channel: baseChannel, markDef, encoding = {}, model, bandPosition }) {
    const channel = `${baseChannel}Offset`;
    const defaultValue = markDef[channel];
    const channelDef = encoding[channel];
    if ((channel === "xOffset" || channel === "yOffset") && channelDef) {
      const ref2 = midPoint({
        channel,
        channelDef,
        markDef,
        config: model == null ? void 0 : model.config,
        scaleName: model.scaleName(channel),
        scale: model.getScaleComponent(channel),
        stack: null,
        defaultRef: signalOrValueRef(defaultValue),
        bandPosition
      });
      return { offsetType: "encoding", offset: ref2 };
    }
    const markDefOffsetValue = markDef[channel];
    if (markDefOffsetValue) {
      return { offsetType: "visual", offset: markDefOffsetValue };
    }
    return {};
  }
  function pointPosition(channel, model, { defaultPos, vgChannel }) {
    const { encoding, markDef, config, stack: stack2 } = model;
    const channelDef = encoding[channel];
    const channel2Def = encoding[getSecondaryRangeChannel(channel)];
    const scaleName = model.scaleName(channel);
    const scale2 = model.getScaleComponent(channel);
    const { offset: offset2, offsetType } = positionOffset({
      channel,
      markDef,
      encoding,
      model,
      bandPosition: 0.5
    });
    const defaultRef = pointPositionDefaultRef({
      model,
      defaultPos,
      channel,
      scaleName,
      scale: scale2
    });
    const valueRef = !channelDef && isXorY(channel) && (encoding.latitude || encoding.longitude) ? (
      // use geopoint output if there are lat/long and there is no point position overriding lat/long.
      { field: model.getName(channel) }
    ) : positionRef({
      channel,
      channelDef,
      channel2Def,
      markDef,
      config,
      scaleName,
      scale: scale2,
      stack: stack2,
      offset: offset2,
      defaultRef,
      bandPosition: offsetType === "encoding" ? 0 : void 0
    });
    return valueRef ? { [vgChannel || channel]: valueRef } : void 0;
  }
  function positionRef(params2) {
    const { channel, channelDef, scaleName, stack: stack2, offset: offset2, markDef } = params2;
    if (isFieldOrDatumDef(channelDef) && stack2 && channel === stack2.fieldChannel) {
      if (isFieldDef(channelDef)) {
        let bandPosition = channelDef.bandPosition;
        if (bandPosition === void 0 && markDef.type === "text" && (channel === "radius" || channel === "theta")) {
          bandPosition = 0.5;
        }
        if (bandPosition !== void 0) {
          return interpolatedSignalRef({
            scaleName,
            fieldOrDatumDef: channelDef,
            // positionRef always have type
            startSuffix: "start",
            bandPosition,
            offset: offset2
          });
        }
      }
      return valueRefForFieldOrDatumDef(channelDef, scaleName, { suffix: "end" }, { offset: offset2 });
    }
    return midPointRefWithPositionInvalidTest(params2);
  }
  function pointPositionDefaultRef({ model, defaultPos, channel, scaleName, scale: scale2 }) {
    const { markDef, config } = model;
    return () => {
      const mainChannel = getMainRangeChannel(channel);
      const vgChannel = getVgPositionChannel(channel);
      const definedValueOrConfig = getMarkPropOrConfig(channel, markDef, config, { vgChannel });
      if (definedValueOrConfig !== void 0) {
        return widthHeightValueOrSignalRef(channel, definedValueOrConfig);
      }
      switch (defaultPos) {
        case "zeroOrMin":
          return zeroOrMinOrMaxPosition({ scaleName, scale: scale2, mode: "zeroOrMin", mainChannel, config });
        case "zeroOrMax":
          return zeroOrMinOrMaxPosition({
            scaleName,
            scale: scale2,
            mode: { zeroOrMax: { widthSignal: model.width.signal, heightSignal: model.height.signal } },
            mainChannel,
            config
          });
        case "mid": {
          const sizeRef = model[getSizeChannel(channel)];
          return { ...sizeRef, mult: 0.5 };
        }
      }
      return void 0;
    };
  }
  function zeroOrMinOrMaxPosition({ mainChannel, config, ...otherProps }) {
    const scaledValueRef = scaledZeroOrMinOrMax(otherProps);
    const { mode: mode2 } = otherProps;
    if (scaledValueRef) {
      return scaledValueRef;
    }
    switch (mainChannel) {
      case "radius": {
        if (mode2 === "zeroOrMin") {
          return { value: 0 };
        }
        const { widthSignal, heightSignal } = mode2.zeroOrMax;
        return {
          signal: `min(${widthSignal},${heightSignal})/2`
        };
      }
      case "theta":
        return mode2 === "zeroOrMin" ? { value: 0 } : { signal: "2*PI" };
      case "x":
        return mode2 === "zeroOrMin" ? { value: 0 } : { field: { group: "width" } };
      case "y":
        return mode2 === "zeroOrMin" ? { field: { group: "height" } } : { value: 0 };
    }
  }
  const ALIGNED_X_CHANNEL = {
    left: "x",
    center: "xc",
    right: "x2"
  };
  const BASELINED_Y_CHANNEL = {
    top: "y",
    middle: "yc",
    bottom: "y2"
  };
  function vgAlignedPositionChannel(channel, markDef, config, defaultAlign = "middle") {
    if (channel === "radius" || channel === "theta") {
      return getVgPositionChannel(channel);
    }
    const alignChannel = channel === "x" ? "align" : "baseline";
    const align2 = getMarkPropOrConfig(alignChannel, markDef, config);
    let alignExcludingSignal;
    if (isSignalRef(align2)) {
      warn(rangeMarkAlignmentCannotBeExpression(alignChannel));
      alignExcludingSignal = void 0;
    } else {
      alignExcludingSignal = align2;
    }
    if (channel === "x") {
      return ALIGNED_X_CHANNEL[alignExcludingSignal || (defaultAlign === "top" ? "left" : "center")];
    } else {
      return BASELINED_Y_CHANNEL[alignExcludingSignal || defaultAlign];
    }
  }
  function pointOrRangePosition(channel, model, { defaultPos, defaultPos2, range: range2 }) {
    if (range2) {
      return rangePosition(channel, model, { defaultPos, defaultPos2 });
    }
    return pointPosition(channel, model, { defaultPos });
  }
  function rangePosition(channel, model, { defaultPos, defaultPos2 }) {
    const { markDef, config } = model;
    const channel2 = getSecondaryRangeChannel(channel);
    const sizeChannel = getSizeChannel(channel);
    const pos2Mixins = pointPosition2OrSize(model, defaultPos2, channel2);
    const vgChannel = pos2Mixins[sizeChannel] ? (
      // If there is width/height, we need to position the marks based on the alignment.
      vgAlignedPositionChannel(channel, markDef, config)
    ) : (
      // Otherwise, make sure to apply to the right Vg Channel (for arc mark)
      getVgPositionChannel(channel)
    );
    return {
      ...pointPosition(channel, model, { defaultPos, vgChannel }),
      ...pos2Mixins
    };
  }
  function pointPosition2OrSize(model, defaultPos, channel) {
    const { encoding, mark, markDef, stack: stack2, config } = model;
    const baseChannel = getMainRangeChannel(channel);
    const sizeChannel = getSizeChannel(channel);
    const vgChannel = getVgPositionChannel(channel);
    const channelDef = encoding[baseChannel];
    const scaleName = model.scaleName(baseChannel);
    const scale2 = model.getScaleComponent(baseChannel);
    const { offset: offset2 } = channel in encoding || channel in markDef ? positionOffset({ channel, markDef, encoding, model }) : positionOffset({ channel: baseChannel, markDef, encoding, model });
    if (!channelDef && (channel === "x2" || channel === "y2") && (encoding.latitude || encoding.longitude)) {
      const vgSizeChannel = getSizeChannel(channel);
      const size = model.markDef[vgSizeChannel];
      if (size != null) {
        return {
          [vgSizeChannel]: { value: size }
        };
      } else {
        return {
          [vgChannel]: { field: model.getName(channel) }
        };
      }
    }
    const valueRef = position2Ref({
      channel,
      channelDef,
      channel2Def: encoding[channel],
      markDef,
      config,
      scaleName,
      scale: scale2,
      stack: stack2,
      offset: offset2,
      defaultRef: void 0
    });
    if (valueRef !== void 0) {
      return { [vgChannel]: valueRef };
    }
    return position2orSize(channel, markDef) || position2orSize(channel, {
      [channel]: getMarkStyleConfig(channel, markDef, config.style),
      [sizeChannel]: getMarkStyleConfig(sizeChannel, markDef, config.style)
    }) || position2orSize(channel, config[mark]) || position2orSize(channel, config.mark) || {
      [vgChannel]: pointPositionDefaultRef({
        model,
        defaultPos,
        channel,
        scaleName,
        scale: scale2
      })()
    };
  }
  function position2Ref({ channel, channelDef, channel2Def, markDef, config, scaleName, scale: scale2, stack: stack2, offset: offset2, defaultRef }) {
    if (isFieldOrDatumDef(channelDef) && stack2 && // If fieldChannel is X and channel is X2 (or Y and Y2)
    channel.charAt(0) === stack2.fieldChannel.charAt(0)) {
      return valueRefForFieldOrDatumDef(channelDef, scaleName, { suffix: "start" }, { offset: offset2 });
    }
    return midPointRefWithPositionInvalidTest({
      channel,
      channelDef: channel2Def,
      scaleName,
      scale: scale2,
      stack: stack2,
      markDef,
      config,
      offset: offset2,
      defaultRef
    });
  }
  function position2orSize(channel, markDef) {
    const sizeChannel = getSizeChannel(channel);
    const vgChannel = getVgPositionChannel(channel);
    if (markDef[vgChannel] !== void 0) {
      return { [vgChannel]: widthHeightValueOrSignalRef(channel, markDef[vgChannel]) };
    } else if (markDef[channel] !== void 0) {
      return { [vgChannel]: widthHeightValueOrSignalRef(channel, markDef[channel]) };
    } else if (markDef[sizeChannel]) {
      const dimensionSize = markDef[sizeChannel];
      if (isRelativeBandSize(dimensionSize)) {
        warn(relativeBandSizeNotSupported(sizeChannel));
      } else {
        return { [sizeChannel]: widthHeightValueOrSignalRef(channel, dimensionSize) };
      }
    }
    return void 0;
  }
  function rectPosition(model, channel) {
    const { config, encoding, markDef } = model;
    const mark = markDef.type;
    const channel2 = getSecondaryRangeChannel(channel);
    const sizeChannel = getSizeChannel(channel);
    const channelDef = encoding[channel];
    const channelDef2 = encoding[channel2];
    const scale2 = model.getScaleComponent(channel);
    const scaleType2 = scale2 ? scale2.get("type") : void 0;
    const orient2 = markDef.orient;
    const hasSizeDef = encoding[sizeChannel] ?? encoding.size ?? getMarkPropOrConfig("size", markDef, config, { vgChannel: sizeChannel });
    const offsetScaleChannel = getOffsetChannel(channel);
    const isBarOrTickBand = mark === "bar" && (channel === "x" ? orient2 === "vertical" : orient2 === "horizontal") || mark === "tick" && (channel === "y" ? orient2 === "vertical" : orient2 === "horizontal");
    if (isFieldDef(channelDef) && (isBinning(channelDef.bin) || isBinned(channelDef.bin) || channelDef.timeUnit && !channelDef2) && !(hasSizeDef && !isRelativeBandSize(hasSizeDef)) && !encoding[offsetScaleChannel] && !hasDiscreteDomain(scaleType2)) {
      return rectBinPosition({
        fieldDef: channelDef,
        fieldDef2: channelDef2,
        channel,
        model
      });
    } else if ((isFieldOrDatumDef(channelDef) && hasDiscreteDomain(scaleType2) || isBarOrTickBand) && !channelDef2) {
      return positionAndSize(channelDef, channel, model);
    } else {
      return rangePosition(channel, model, { defaultPos: "zeroOrMax", defaultPos2: "zeroOrMin" });
    }
  }
  function defaultSizeRef(sizeChannel, scaleName, scale2, config, bandSize, hasFieldDef, mark) {
    if (isRelativeBandSize(bandSize)) {
      if (scale2) {
        const scaleType2 = scale2.get("type");
        if (scaleType2 === "band") {
          let bandWidth = `bandwidth('${scaleName}')`;
          if (bandSize.band !== 1) {
            bandWidth = `${bandSize.band} * ${bandWidth}`;
          }
          const minBandSize = getMarkConfig("minBandSize", { type: mark }, config);
          return { signal: minBandSize ? `max(${signalOrStringValue(minBandSize)}, ${bandWidth})` : bandWidth };
        } else if (bandSize.band !== 1) {
          warn(cannotUseRelativeBandSizeWithNonBandScale(scaleType2));
          bandSize = void 0;
        }
      } else {
        return {
          mult: bandSize.band,
          field: { group: sizeChannel }
        };
      }
    } else if (isSignalRef(bandSize)) {
      return bandSize;
    } else if (bandSize) {
      return { value: bandSize };
    }
    if (scale2) {
      const scaleRange = scale2.get("range");
      if (isVgRangeStep(scaleRange) && isNumber$1(scaleRange.step)) {
        return { value: scaleRange.step - 2 };
      }
    }
    if (!hasFieldDef) {
      const { bandPaddingInner, barBandPaddingInner, rectBandPaddingInner, tickBandPaddingInner } = config.scale;
      const padding2 = getFirstDefined(bandPaddingInner, mark === "tick" ? tickBandPaddingInner : mark === "bar" ? barBandPaddingInner : rectBandPaddingInner);
      if (isSignalRef(padding2)) {
        return { signal: `(1 - (${padding2.signal})) * ${sizeChannel}` };
      } else if (isNumber$1(padding2)) {
        return { signal: `${1 - padding2} * ${sizeChannel}` };
      }
    }
    const defaultStep = getViewConfigDiscreteStep(config.view, sizeChannel);
    return { value: defaultStep - 2 };
  }
  function positionAndSize(fieldDef, channel, model) {
    var _a2, _b2;
    const { markDef, encoding, config, stack: stack2 } = model;
    const orient2 = markDef.orient;
    const scaleName = model.scaleName(channel);
    const scale2 = model.getScaleComponent(channel);
    const vgSizeChannel = getSizeChannel(channel);
    const channel2 = getSecondaryRangeChannel(channel);
    const offsetScaleChannel = getOffsetChannel(channel);
    const offsetScaleName = model.scaleName(offsetScaleChannel);
    const offsetScale = model.getScaleComponent(getOffsetScaleChannel(channel));
    const useVlSizeChannel = (
      // Always uses size channel for ticks, because tick only calls rectPosition() for the size channel
      markDef.type === "tick" || // use "size" channel for bars, if there is orient and the channel matches the right orientation
      orient2 === "horizontal" && channel === "y" || orient2 === "vertical" && channel === "x"
    );
    let sizeMixins;
    if (encoding.size || markDef.size) {
      if (useVlSizeChannel) {
        sizeMixins = nonPosition("size", model, {
          vgChannel: vgSizeChannel,
          defaultRef: signalOrValueRef(markDef.size)
        });
      } else {
        warn(cannotApplySizeToNonOrientedMark(markDef.type));
      }
    }
    const hasSizeFromMarkOrEncoding = !!sizeMixins;
    const bandSize = getBandSize({
      channel,
      fieldDef,
      markDef,
      config,
      scaleType: (_a2 = scale2 || offsetScale) == null ? void 0 : _a2.get("type"),
      useVlSizeChannel
    });
    sizeMixins = sizeMixins || {
      [vgSizeChannel]: defaultSizeRef(vgSizeChannel, offsetScaleName || scaleName, offsetScale || scale2, config, bandSize, !!fieldDef, markDef.type)
    };
    const defaultBandAlign = ((_b2 = scale2 || offsetScale) == null ? void 0 : _b2.get("type")) === "band" && isRelativeBandSize(bandSize) && !hasSizeFromMarkOrEncoding ? "top" : "middle";
    const vgChannel = vgAlignedPositionChannel(channel, markDef, config, defaultBandAlign);
    const center = vgChannel === "xc" || vgChannel === "yc";
    const { offset: offset2, offsetType } = positionOffset({ channel, markDef, encoding, model, bandPosition: center ? 0.5 : 0 });
    const posRef = midPointRefWithPositionInvalidTest({
      channel,
      channelDef: fieldDef,
      markDef,
      config,
      scaleName,
      scale: scale2,
      stack: stack2,
      offset: offset2,
      defaultRef: pointPositionDefaultRef({ model, defaultPos: "mid", channel, scaleName, scale: scale2 }),
      bandPosition: center ? offsetType === "encoding" ? 0 : 0.5 : isSignalRef(bandSize) ? { signal: `(1-${bandSize})/2` } : isRelativeBandSize(bandSize) ? (1 - bandSize.band) / 2 : 0
    });
    if (vgSizeChannel) {
      return { [vgChannel]: posRef, ...sizeMixins };
    } else {
      const vgChannel2 = getVgPositionChannel(channel2);
      const sizeRef = sizeMixins[vgSizeChannel];
      const sizeOffset = offset2 ? { ...sizeRef, offset: offset2 } : sizeRef;
      return {
        [vgChannel]: posRef,
        // posRef might be an array that wraps position invalid test
        [vgChannel2]: isArray(posRef) ? [posRef[0], { ...posRef[1], offset: sizeOffset }] : {
          ...posRef,
          offset: sizeOffset
        }
      };
    }
  }
  function getBinSpacing(channel, spacing, reverse2, axisTranslate, offset2, minBandSize, bandSizeExpr) {
    if (isPolarPositionChannel(channel)) {
      return 0;
    }
    const isEnd = channel === "x" || channel === "y2";
    const spacingOffset = isEnd ? -spacing / 2 : spacing / 2;
    if (isSignalRef(reverse2) || isSignalRef(offset2) || isSignalRef(axisTranslate) || minBandSize) {
      const reverseExpr = signalOrStringValue(reverse2);
      const offsetExpr2 = signalOrStringValue(offset2);
      const axisTranslateExpr = signalOrStringValue(axisTranslate);
      const minBandSizeExpr = signalOrStringValue(minBandSize);
      const sign2 = isEnd ? "" : "-";
      const spacingAndSizeOffset = minBandSize ? `(${bandSizeExpr} < ${minBandSizeExpr} ? ${sign2}0.5 * (${minBandSizeExpr} - (${bandSizeExpr})) : ${spacingOffset})` : spacingOffset;
      const t = axisTranslateExpr ? `${axisTranslateExpr} + ` : "";
      const r = reverseExpr ? `(${reverseExpr} ? -1 : 1) * ` : "";
      const o = offsetExpr2 ? `(${offsetExpr2} + ${spacingAndSizeOffset})` : spacingAndSizeOffset;
      return {
        signal: t + r + o
      };
    } else {
      offset2 = offset2 || 0;
      return axisTranslate + (reverse2 ? -offset2 - spacingOffset : +offset2 + spacingOffset);
    }
  }
  function rectBinPosition({ fieldDef, fieldDef2, channel, model }) {
    var _a2;
    const { config, markDef, encoding } = model;
    const scale2 = model.getScaleComponent(channel);
    const scaleName = model.scaleName(channel);
    const scaleType2 = scale2 ? scale2.get("type") : void 0;
    const reverse2 = scale2.get("reverse");
    const bandSize = getBandSize({ channel, fieldDef, markDef, config, scaleType: scaleType2 });
    const axis = (_a2 = model.component.axes[channel]) == null ? void 0 : _a2[0];
    const axisTranslate = (axis == null ? void 0 : axis.get("translate")) ?? 0.5;
    const spacing = isXorY(channel) ? getMarkPropOrConfig("binSpacing", markDef, config) ?? 0 : 0;
    const channel2 = getSecondaryRangeChannel(channel);
    const vgChannel = getVgPositionChannel(channel);
    const vgChannel2 = getVgPositionChannel(channel2);
    const minBandSize = getMarkConfig("minBandSize", markDef, config);
    const { offset: offset2 } = positionOffset({ channel, markDef, encoding, model, bandPosition: 0 });
    const { offset: offset22 } = positionOffset({ channel: channel2, markDef, encoding, model, bandPosition: 0 });
    const bandSizeExpr = binSizeExpr({ fieldDef, scaleName });
    const binSpacingOffset = getBinSpacing(channel, spacing, reverse2, axisTranslate, offset2, minBandSize, bandSizeExpr);
    const binSpacingOffset2 = getBinSpacing(channel2, spacing, reverse2, axisTranslate, offset22 ?? offset2, minBandSize, bandSizeExpr);
    const bandPositionForBandSize = isSignalRef(bandSize) ? { signal: `(1-${bandSize.signal})/2` } : isRelativeBandSize(bandSize) ? (1 - bandSize.band) / 2 : 0.5;
    const bandPosition = getBandPosition({ fieldDef, fieldDef2, markDef, config });
    if (isBinning(fieldDef.bin) || fieldDef.timeUnit) {
      const useRectOffsetField = fieldDef.timeUnit && bandPosition !== 0.5;
      return {
        [vgChannel2]: rectBinRef({
          fieldDef,
          scaleName,
          bandPosition: bandPositionForBandSize,
          offset: binSpacingOffset2,
          useRectOffsetField
        }),
        [vgChannel]: rectBinRef({
          fieldDef,
          scaleName,
          bandPosition: isSignalRef(bandPositionForBandSize) ? { signal: `1-${bandPositionForBandSize.signal}` } : 1 - bandPositionForBandSize,
          offset: binSpacingOffset,
          useRectOffsetField
        })
      };
    } else if (isBinned(fieldDef.bin)) {
      const startRef = valueRefForFieldOrDatumDef(fieldDef, scaleName, {}, { offset: binSpacingOffset2 });
      if (isFieldDef(fieldDef2)) {
        return {
          [vgChannel2]: startRef,
          [vgChannel]: valueRefForFieldOrDatumDef(fieldDef2, scaleName, {}, { offset: binSpacingOffset })
        };
      } else if (isBinParams(fieldDef.bin) && fieldDef.bin.step) {
        return {
          [vgChannel2]: startRef,
          [vgChannel]: {
            signal: `scale("${scaleName}", ${vgField(fieldDef, { expr: "datum" })} + ${fieldDef.bin.step})`,
            offset: binSpacingOffset
          }
        };
      }
    }
    warn(channelRequiredForBinned(channel2));
    return void 0;
  }
  function rectBinRef({ fieldDef, scaleName, bandPosition, offset: offset2, useRectOffsetField }) {
    return interpolatedSignalRef({
      scaleName,
      fieldOrDatumDef: fieldDef,
      bandPosition,
      offset: offset2,
      ...useRectOffsetField ? {
        startSuffix: OFFSETTED_RECT_START_SUFFIX,
        endSuffix: OFFSETTED_RECT_END_SUFFIX
      } : {}
    });
  }
  const ALWAYS_IGNORE = /* @__PURE__ */ new Set(["aria", "width", "height"]);
  function baseEncodeEntry(model, ignore) {
    const { fill: fill2 = void 0, stroke: stroke2 = void 0 } = ignore.color === "include" ? color(model) : {};
    return {
      ...markDefProperties(model.markDef, ignore),
      ...colorRef("fill", fill2),
      ...colorRef("stroke", stroke2),
      ...nonPosition("opacity", model),
      ...nonPosition("fillOpacity", model),
      ...nonPosition("strokeOpacity", model),
      ...nonPosition("strokeWidth", model),
      ...nonPosition("strokeDash", model),
      ...zindex(model),
      ...tooltip(model),
      ...text$1(model, "href"),
      ...aria(model)
    };
  }
  function colorRef(channel, valueRef) {
    return valueRef ? { [channel]: valueRef } : {};
  }
  function markDefProperties(mark, ignore) {
    return VG_MARK_CONFIGS.reduce((m2, prop) => {
      if (!ALWAYS_IGNORE.has(prop) && hasProperty(mark, prop) && ignore[prop] !== "ignore") {
        m2[prop] = signalOrValueRef(mark[prop]);
      }
      return m2;
    }, {});
  }
  function defined(model) {
    const { config, markDef } = model;
    const fieldsToBreakPath = /* @__PURE__ */ new Set();
    model.forEachFieldDef((fieldDef, channel) => {
      var _a2;
      let scaleType2;
      if (!isScaleChannel(channel) || !(scaleType2 = model.getScaleType(channel))) {
        return;
      }
      const isCountAggregate = isCountingAggregateOp(fieldDef.aggregate);
      const invalidDataMode = getScaleInvalidDataMode({
        scaleChannel: channel,
        markDef,
        config,
        scaleType: scaleType2,
        isCountAggregate
      });
      if (shouldBreakPath(invalidDataMode)) {
        const field2 = model.vgField(channel, { expr: "datum", binSuffix: ((_a2 = model.stack) == null ? void 0 : _a2.impute) ? "mid" : void 0 });
        if (field2) {
          fieldsToBreakPath.add(field2);
        }
      }
    });
    if (fieldsToBreakPath.size > 0) {
      const signal = [...fieldsToBreakPath].map((field2) => fieldValidPredicate(field2, true)).join(" && ");
      return { defined: { signal } };
    }
    return void 0;
  }
  function valueIfDefined(prop, value2) {
    if (value2 !== void 0) {
      return { [prop]: signalOrValueRef(value2) };
    }
    return void 0;
  }
  const VORONOI = "voronoi";
  const nearest = {
    defined: (selCmpt) => {
      return selCmpt.type === "point" && selCmpt.nearest;
    },
    parse: (model, selCmpt) => {
      if (selCmpt.events) {
        for (const s of selCmpt.events) {
          s.markname = model.getName(VORONOI);
        }
      }
    },
    marks: (model, selCmpt, marks) => {
      const { x: x2, y: y2 } = selCmpt.project.hasChannel;
      const markType2 = model.mark;
      if (isPathMark(markType2)) {
        warn(nearestNotSupportForContinuous(markType2));
        return marks;
      }
      const cellDef = {
        name: model.getName(VORONOI),
        type: "path",
        interactive: true,
        from: { data: model.getName("marks") },
        encode: {
          update: {
            fill: { value: "transparent" },
            strokeWidth: { value: 0.35 },
            stroke: { value: "transparent" },
            isVoronoi: { value: true },
            ...tooltip(model, { reactiveGeom: true })
          }
        },
        transform: [
          {
            type: "voronoi",
            x: { expr: x2 || !y2 ? "datum.datum.x || 0" : "0" },
            y: { expr: y2 || !x2 ? "datum.datum.y || 0" : "0" },
            size: [model.getSizeSignalRef("width"), model.getSizeSignalRef("height")]
          }
        ]
      };
      let index2 = 0;
      let exists = false;
      marks.forEach((mark, i) => {
        const name = mark.name ?? "";
        if (name === model.component.mark[0].name) {
          index2 = i;
        } else if (name.includes(VORONOI)) {
          exists = true;
        }
      });
      if (!exists) {
        marks.splice(index2 + 1, 0, cellDef);
      }
      return marks;
    }
  };
  const inputBindings = {
    defined: (selCmpt) => {
      return selCmpt.type === "point" && selCmpt.resolve === "global" && selCmpt.bind && selCmpt.bind !== "scales" && !isLegendBinding(selCmpt.bind);
    },
    parse: (model, selCmpt, selDef) => disableDirectManipulation(selCmpt, selDef),
    topLevelSignals: (model, selCmpt, signals) => {
      const name = selCmpt.name;
      const proj = selCmpt.project;
      const bind2 = selCmpt.bind;
      const init2 = selCmpt.init && selCmpt.init[0];
      const datum2 = nearest.defined(selCmpt) ? "(item().isVoronoi ? datum.datum : datum)" : "datum";
      proj.items.forEach((p, i) => {
        const sgname = varName(`${name}_${p.field}`);
        const hasSignal2 = signals.filter((s) => s.name === sgname);
        if (!hasSignal2.length) {
          signals.unshift({
            name: sgname,
            ...init2 ? { init: assembleInit(init2[i]) } : { value: null },
            on: selCmpt.events ? [
              {
                events: selCmpt.events,
                update: `datum && item().mark.marktype !== 'group' ? ${datum2}[${$(p.field)}] : null`
              }
            ] : [],
            bind: bind2[p.field] ?? bind2[p.channel] ?? bind2
          });
        }
      });
      return signals;
    },
    signals: (model, selCmpt, signals) => {
      const name = selCmpt.name;
      const proj = selCmpt.project;
      const signal = signals.find((s) => s.name === name + TUPLE);
      const fields = name + TUPLE_FIELDS;
      const values2 = proj.items.map((p) => varName(`${name}_${p.field}`));
      const valid = values2.map((v) => `${v} !== null`).join(" && ");
      if (values2.length) {
        signal.update = `${valid} ? {fields: ${fields}, values: [${values2.join(", ")}]} : null`;
      }
      delete signal.value;
      delete signal.on;
      return signals;
    }
  };
  const TOGGLE = "_toggle";
  const toggle = {
    defined: (selCmpt) => {
      return selCmpt.type === "point" && !isTimerSelection(selCmpt) && !!selCmpt.toggle;
    },
    signals: (model, selCmpt, signals) => {
      return signals.concat({
        name: selCmpt.name + TOGGLE,
        value: false,
        on: [{ events: selCmpt.events, update: selCmpt.toggle }]
      });
    },
    modifyExpr: (model, selCmpt) => {
      const tpl = selCmpt.name + TUPLE;
      const signal = selCmpt.name + TOGGLE;
      return `${signal} ? null : ${tpl}, ` + (selCmpt.resolve === "global" ? `${signal} ? null : true, ` : `${signal} ? null : {unit: ${unitName(model)}}, `) + `${signal} ? ${tpl} : null`;
    }
  };
  const clear = {
    defined: (selCmpt) => {
      return selCmpt.clear !== void 0 && selCmpt.clear !== false && !isTimerSelection(selCmpt);
    },
    parse: (model, selCmpt) => {
      if (selCmpt.clear) {
        selCmpt.clear = isString(selCmpt.clear) ? eventSelector(selCmpt.clear, "view") : selCmpt.clear;
      }
    },
    topLevelSignals: (model, selCmpt, signals) => {
      if (inputBindings.defined(selCmpt)) {
        for (const proj of selCmpt.project.items) {
          const idx = signals.findIndex((n) => n.name === varName(`${selCmpt.name}_${proj.field}`));
          if (idx !== -1) {
            signals[idx].on.push({ events: selCmpt.clear, update: "null" });
          }
        }
      }
      return signals;
    },
    signals: (model, selCmpt, signals) => {
      function addClear(idx, update2) {
        if (idx !== -1 && signals[idx].on) {
          signals[idx].on.push({ events: selCmpt.clear, update: update2 });
        }
      }
      if (selCmpt.type === "interval") {
        for (const proj of selCmpt.project.items) {
          const vIdx = signals.findIndex((n) => n.name === proj.signals.visual);
          addClear(vIdx, "[0, 0]");
          if (vIdx === -1) {
            const dIdx = signals.findIndex((n) => n.name === proj.signals.data);
            addClear(dIdx, "null");
          }
        }
      } else {
        let tIdx = signals.findIndex((n) => n.name === selCmpt.name + TUPLE);
        addClear(tIdx, "null");
        if (toggle.defined(selCmpt)) {
          tIdx = signals.findIndex((n) => n.name === selCmpt.name + TOGGLE);
          addClear(tIdx, "false");
        }
      }
      return signals;
    }
  };
  const legendBindings = {
    defined: (selCmpt) => {
      const spec = selCmpt.resolve === "global" && selCmpt.bind && isLegendBinding(selCmpt.bind);
      const projLen = selCmpt.project.items.length === 1 && selCmpt.project.items[0].field !== SELECTION_ID;
      if (spec && !projLen) {
        warn(LEGEND_BINDINGS_MUST_HAVE_PROJECTION);
      }
      return spec && projLen;
    },
    parse: (model, selCmpt, selDef) => {
      const selDef_ = duplicate(selDef);
      selDef_.select = isString(selDef_.select) ? { type: selDef_.select, toggle: selCmpt.toggle } : { ...selDef_.select, toggle: selCmpt.toggle };
      disableDirectManipulation(selCmpt, selDef_);
      if (isObject(selDef.select) && (selDef.select.on || selDef.select.clear)) {
        const legendFilter = 'event.item && indexof(event.item.mark.role, "legend") < 0';
        for (const evt2 of selCmpt.events) {
          evt2.filter = array$5(evt2.filter ?? []);
          if (!evt2.filter.includes(legendFilter)) {
            evt2.filter.push(legendFilter);
          }
        }
      }
      const evt = isLegendStreamBinding(selCmpt.bind) ? selCmpt.bind.legend : "click";
      const stream2 = isString(evt) ? eventSelector(evt, "view") : array$5(evt);
      selCmpt.bind = { legend: { merge: stream2 } };
    },
    topLevelSignals: (model, selCmpt, signals) => {
      const selName = selCmpt.name;
      const stream2 = isLegendStreamBinding(selCmpt.bind) && selCmpt.bind.legend;
      const markName = (name) => (s) => {
        const ds = duplicate(s);
        ds.markname = name;
        return ds;
      };
      for (const proj of selCmpt.project.items) {
        if (!proj.hasLegend)
          continue;
        const prefix = `${varName(proj.field)}_legend`;
        const sgName = `${selName}_${prefix}`;
        const hasSignal2 = signals.filter((s) => s.name === sgName);
        if (hasSignal2.length === 0) {
          const events2 = stream2.merge.map(markName(`${prefix}_symbols`)).concat(stream2.merge.map(markName(`${prefix}_labels`))).concat(stream2.merge.map(markName(`${prefix}_entries`)));
          signals.unshift({
            name: sgName,
            ...!selCmpt.init ? { value: null } : {},
            on: [
              // Legend entries do not store values, so we need to walk the scenegraph to the symbol datum.
              {
                events: events2,
                update: "isDefined(datum.value) ? datum.value : item().items[0].items[0].datum.value",
                force: true
              },
              { events: stream2.merge, update: `!event.item || !datum ? null : ${sgName}`, force: true }
            ]
          });
        }
      }
      return signals;
    },
    signals: (model, selCmpt, signals) => {
      const name = selCmpt.name;
      const proj = selCmpt.project;
      const tuple = signals.find((s) => s.name === name + TUPLE);
      const fields = name + TUPLE_FIELDS;
      const values2 = proj.items.filter((p) => p.hasLegend).map((p) => varName(`${name}_${varName(p.field)}_legend`));
      const valid = values2.map((v) => `${v} !== null`).join(" && ");
      const update2 = `${valid} ? {fields: ${fields}, values: [${values2.join(", ")}]} : null`;
      if (selCmpt.events && values2.length > 0) {
        tuple.on.push({
          events: values2.map((signal) => ({ signal })),
          update: update2
        });
      } else if (values2.length > 0) {
        tuple.update = update2;
        delete tuple.value;
        delete tuple.on;
      }
      const toggle2 = signals.find((s) => s.name === name + TOGGLE);
      const events2 = isLegendStreamBinding(selCmpt.bind) && selCmpt.bind.legend;
      if (toggle2) {
        if (!selCmpt.events)
          toggle2.on[0].events = events2;
        else
          toggle2.on.push({ ...toggle2.on[0], events: events2 });
      }
      return signals;
    }
  };
  function parseInteractiveLegend(model, channel, legendCmpt) {
    var _a2;
    const field2 = (_a2 = model.fieldDef(channel)) == null ? void 0 : _a2.field;
    for (const selCmpt of vals(model.component.selection ?? {})) {
      const proj = selCmpt.project.hasField[field2] ?? selCmpt.project.hasChannel[channel];
      if (proj && legendBindings.defined(selCmpt)) {
        const legendSelections = legendCmpt.get("selections") ?? [];
        legendSelections.push(selCmpt.name);
        legendCmpt.set("selections", legendSelections, false);
        proj.hasLegend = true;
      }
    }
  }
  const ANCHOR$1 = "_translate_anchor";
  const DELTA$1 = "_translate_delta";
  const translate = {
    defined: (selCmpt) => {
      return selCmpt.type === "interval" && selCmpt.translate;
    },
    signals: (model, selCmpt, signals) => {
      const name = selCmpt.name;
      const boundScales = scaleBindings.defined(selCmpt);
      const anchor = name + ANCHOR$1;
      const { x: x2, y: y2 } = selCmpt.project.hasChannel;
      let events2 = eventSelector(selCmpt.translate, "scope");
      if (!boundScales) {
        events2 = events2.map((e3) => (e3.between[0].markname = name + BRUSH, e3));
      }
      signals.push({
        name: anchor,
        value: {},
        on: [
          {
            events: events2.map((e3) => e3.between[0]),
            update: "{x: x(unit), y: y(unit)" + (x2 !== void 0 ? `, extent_x: ${boundScales ? domain(model, X) : `slice(${x2.signals.visual})`}` : "") + (y2 !== void 0 ? `, extent_y: ${boundScales ? domain(model, Y) : `slice(${y2.signals.visual})`}` : "") + "}"
          }
        ]
      }, {
        name: name + DELTA$1,
        value: {},
        on: [
          {
            events: events2,
            update: `{x: ${anchor}.x - x(unit), y: ${anchor}.y - y(unit)}`
          }
        ]
      });
      if (x2 !== void 0) {
        onDelta$1(model, selCmpt, x2, "width", signals);
      }
      if (y2 !== void 0) {
        onDelta$1(model, selCmpt, y2, "height", signals);
      }
      return signals;
    }
  };
  function onDelta$1(model, selCmpt, proj, size, signals) {
    const name = selCmpt.name;
    const anchor = name + ANCHOR$1;
    const delta = name + DELTA$1;
    const channel = proj.channel;
    const boundScales = scaleBindings.defined(selCmpt);
    const signal = signals.find((s) => s.name === proj.signals[boundScales ? "data" : "visual"]);
    const sizeSg = model.getSizeSignalRef(size).signal;
    const scaleCmpt = model.getScaleComponent(channel);
    const scaleType2 = scaleCmpt && scaleCmpt.get("type");
    const reversed = scaleCmpt && scaleCmpt.get("reverse");
    const sign2 = !boundScales ? "" : channel === X ? reversed ? "" : "-" : reversed ? "-" : "";
    const extent2 = `${anchor}.extent_${channel}`;
    const offset2 = `${sign2}${delta}.${channel} / ${boundScales ? `${sizeSg}` : `span(${extent2})`}`;
    const panFn = !boundScales || !scaleCmpt ? "panLinear" : scaleType2 === "log" ? "panLog" : scaleType2 === "symlog" ? "panSymlog" : scaleType2 === "pow" ? "panPow" : "panLinear";
    const arg = !boundScales ? "" : scaleType2 === "pow" ? `, ${scaleCmpt.get("exponent") ?? 1}` : scaleType2 === "symlog" ? `, ${scaleCmpt.get("constant") ?? 1}` : "";
    const update2 = `${panFn}(${extent2}, ${offset2}${arg})`;
    signal.on.push({
      events: { signal: delta },
      update: boundScales ? update2 : `clampRange(${update2}, 0, ${sizeSg})`
    });
  }
  const ANCHOR = "_zoom_anchor";
  const DELTA = "_zoom_delta";
  const zoom = {
    defined: (selCmpt) => {
      return selCmpt.type === "interval" && selCmpt.zoom;
    },
    signals: (model, selCmpt, signals) => {
      const name = selCmpt.name;
      const boundScales = scaleBindings.defined(selCmpt);
      const delta = name + DELTA;
      const { x: x2, y: y2 } = selCmpt.project.hasChannel;
      const sx = $(model.scaleName(X));
      const sy = $(model.scaleName(Y));
      let events2 = eventSelector(selCmpt.zoom, "scope");
      if (!boundScales) {
        events2 = events2.map((e3) => (e3.markname = name + BRUSH, e3));
      }
      signals.push({
        name: name + ANCHOR,
        on: [
          {
            events: events2,
            update: !boundScales ? `{x: x(unit), y: y(unit)}` : "{" + [sx ? `x: invert(${sx}, x(unit))` : "", sy ? `y: invert(${sy}, y(unit))` : ""].filter((expr2) => expr2).join(", ") + "}"
          }
        ]
      }, {
        name: delta,
        on: [
          {
            events: events2,
            force: true,
            update: "pow(1.001, event.deltaY * pow(16, event.deltaMode))"
          }
        ]
      });
      if (x2 !== void 0) {
        onDelta(model, selCmpt, x2, "width", signals);
      }
      if (y2 !== void 0) {
        onDelta(model, selCmpt, y2, "height", signals);
      }
      return signals;
    }
  };
  function onDelta(model, selCmpt, proj, size, signals) {
    const name = selCmpt.name;
    const channel = proj.channel;
    const boundScales = scaleBindings.defined(selCmpt);
    const signal = signals.find((s) => s.name === proj.signals[boundScales ? "data" : "visual"]);
    const sizeSg = model.getSizeSignalRef(size).signal;
    const scaleCmpt = model.getScaleComponent(channel);
    const scaleType2 = scaleCmpt && scaleCmpt.get("type");
    const base = boundScales ? domain(model, channel) : signal.name;
    const delta = name + DELTA;
    const anchor = `${name}${ANCHOR}.${channel}`;
    const zoomFn = !boundScales || !scaleCmpt ? "zoomLinear" : scaleType2 === "log" ? "zoomLog" : scaleType2 === "symlog" ? "zoomSymlog" : scaleType2 === "pow" ? "zoomPow" : "zoomLinear";
    const arg = !boundScales ? "" : scaleType2 === "pow" ? `, ${scaleCmpt.get("exponent") ?? 1}` : scaleType2 === "symlog" ? `, ${scaleCmpt.get("constant") ?? 1}` : "";
    const update2 = `${zoomFn}(${base}, ${anchor}, ${delta}${arg})`;
    signal.on.push({
      events: { signal: delta },
      update: boundScales ? update2 : `clampRange(${update2}, 0, ${sizeSg})`
    });
  }
  const STORE = "_store";
  const TUPLE = "_tuple";
  const MODIFY = "_modify";
  const VL_SELECTION_RESOLVE = "vlSelectionResolve";
  const selectionCompilers = [
    point$1,
    interval,
    project,
    toggle,
    // Bindings may disable direct manipulation.
    inputBindings,
    scaleBindings,
    legendBindings,
    clear,
    translate,
    zoom,
    nearest
  ];
  function getFacetModel(model) {
    let parent = model.parent;
    while (parent) {
      if (isFacetModel(parent))
        break;
      parent = parent.parent;
    }
    return parent;
  }
  function unitName(model, { escape: escape2 } = { escape: true }) {
    let name = escape2 ? $(model.name) : model.name;
    const facetModel = getFacetModel(model);
    if (facetModel) {
      const { facet } = facetModel;
      for (const channel of FACET_CHANNELS) {
        if (facet[channel]) {
          name += ` + '__facet_${channel}_' + (facet[${$(facetModel.vgField(channel))}])`;
        }
      }
    }
    return name;
  }
  function requiresSelectionId(model) {
    return vals(model.component.selection ?? {}).reduce((identifier, selCmpt) => {
      return identifier || selCmpt.project.hasSelectionId;
    }, false);
  }
  function disableDirectManipulation(selCmpt, selDef) {
    if (isString(selDef.select) || !selDef.select.on)
      delete selCmpt.events;
    if (isString(selDef.select) || !selDef.select.clear)
      delete selCmpt.clear;
    if (isString(selDef.select) || !selDef.select.toggle)
      delete selCmpt.toggle;
  }
  function isTimerSelection(selCmpt) {
    var _a2;
    return (_a2 = selCmpt.events) == null ? void 0 : _a2.find((e3) => "type" in e3 && e3.type === "timer");
  }
  const RawCode = "RawCode";
  const Literal = "Literal";
  const Property = "Property";
  const Identifier = "Identifier";
  const ArrayExpression = "ArrayExpression";
  const BinaryExpression = "BinaryExpression";
  const CallExpression = "CallExpression";
  const ConditionalExpression = "ConditionalExpression";
  const LogicalExpression = "LogicalExpression";
  const MemberExpression = "MemberExpression";
  const ObjectExpression = "ObjectExpression";
  const UnaryExpression = "UnaryExpression";
  function ASTNode(type2) {
    this.type = type2;
  }
  ASTNode.prototype.visit = function(visitor) {
    let c2, i, n;
    if (visitor(this)) return 1;
    for (c2 = children(this), i = 0, n = c2.length; i < n; ++i) {
      if (c2[i].visit(visitor)) return 1;
    }
  };
  function children(node) {
    switch (node.type) {
      case ArrayExpression:
        return node.elements;
      case BinaryExpression:
      case LogicalExpression:
        return [node.left, node.right];
      case CallExpression:
        return [node.callee].concat(node.arguments);
      case ConditionalExpression:
        return [node.test, node.consequent, node.alternate];
      case MemberExpression:
        return [node.object, node.property];
      case ObjectExpression:
        return node.properties;
      case Property:
        return [node.key, node.value];
      case UnaryExpression:
        return [node.argument];
      case Identifier:
      case Literal:
      case RawCode:
      default:
        return [];
    }
  }
  var TokenName, source, index, length, lookahead;
  var TokenBooleanLiteral = 1, TokenEOF = 2, TokenIdentifier = 3, TokenKeyword = 4, TokenNullLiteral = 5, TokenNumericLiteral = 6, TokenPunctuator = 7, TokenStringLiteral = 8, TokenRegularExpression = 9;
  TokenName = {};
  TokenName[TokenBooleanLiteral] = "Boolean";
  TokenName[TokenEOF] = "<end>";
  TokenName[TokenIdentifier] = "Identifier";
  TokenName[TokenKeyword] = "Keyword";
  TokenName[TokenNullLiteral] = "Null";
  TokenName[TokenNumericLiteral] = "Numeric";
  TokenName[TokenPunctuator] = "Punctuator";
  TokenName[TokenStringLiteral] = "String";
  TokenName[TokenRegularExpression] = "RegularExpression";
  var SyntaxArrayExpression = "ArrayExpression", SyntaxBinaryExpression = "BinaryExpression", SyntaxCallExpression = "CallExpression", SyntaxConditionalExpression = "ConditionalExpression", SyntaxIdentifier = "Identifier", SyntaxLiteral = "Literal", SyntaxLogicalExpression = "LogicalExpression", SyntaxMemberExpression = "MemberExpression", SyntaxObjectExpression = "ObjectExpression", SyntaxProperty = "Property", SyntaxUnaryExpression = "UnaryExpression";
  var MessageUnexpectedToken = "Unexpected token %0", MessageUnexpectedNumber = "Unexpected number", MessageUnexpectedString = "Unexpected string", MessageUnexpectedIdentifier = "Unexpected identifier", MessageUnexpectedReserved = "Unexpected reserved word", MessageUnexpectedEOS = "Unexpected end of input", MessageInvalidRegExp = "Invalid regular expression", MessageUnterminatedRegExp = "Invalid regular expression: missing /", MessageStrictOctalLiteral = "Octal literals are not allowed in strict mode.", MessageStrictDuplicateProperty = "Duplicate data property in object literal not allowed in strict mode";
  var ILLEGAL = "ILLEGAL", DISABLED = "Disabled.";
  var RegexNonAsciiIdentifierStart = new RegExp("[\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u08A0-\\u08B2\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58\\u0C59\\u0C60\\u0C61\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D60\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F4\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19C1-\\u19C7\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2E2F\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FCC\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA69D\\uA6A0-\\uA6EF\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA78E\\uA790-\\uA7AD\\uA7B0\\uA7B1\\uA7F7-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uA9E0-\\uA9E4\\uA9E6-\\uA9EF\\uA9FA-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB5F\\uAB64\\uAB65\\uABC0-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]"), RegexNonAsciiIdentifierPart = new RegExp("[\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0300-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u0483-\\u0487\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0610-\\u061A\\u0620-\\u0669\\u066E-\\u06D3\\u06D5-\\u06DC\\u06DF-\\u06E8\\u06EA-\\u06FC\\u06FF\\u0710-\\u074A\\u074D-\\u07B1\\u07C0-\\u07F5\\u07FA\\u0800-\\u082D\\u0840-\\u085B\\u08A0-\\u08B2\\u08E4-\\u0963\\u0966-\\u096F\\u0971-\\u0983\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BC-\\u09C4\\u09C7\\u09C8\\u09CB-\\u09CE\\u09D7\\u09DC\\u09DD\\u09DF-\\u09E3\\u09E6-\\u09F1\\u0A01-\\u0A03\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A3C\\u0A3E-\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A59-\\u0A5C\\u0A5E\\u0A66-\\u0A75\\u0A81-\\u0A83\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABC-\\u0AC5\\u0AC7-\\u0AC9\\u0ACB-\\u0ACD\\u0AD0\\u0AE0-\\u0AE3\\u0AE6-\\u0AEF\\u0B01-\\u0B03\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3C-\\u0B44\\u0B47\\u0B48\\u0B4B-\\u0B4D\\u0B56\\u0B57\\u0B5C\\u0B5D\\u0B5F-\\u0B63\\u0B66-\\u0B6F\\u0B71\\u0B82\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCD\\u0BD0\\u0BD7\\u0BE6-\\u0BEF\\u0C00-\\u0C03\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C58\\u0C59\\u0C60-\\u0C63\\u0C66-\\u0C6F\\u0C81-\\u0C83\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBC-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCD\\u0CD5\\u0CD6\\u0CDE\\u0CE0-\\u0CE3\\u0CE6-\\u0CEF\\u0CF1\\u0CF2\\u0D01-\\u0D03\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D-\\u0D44\\u0D46-\\u0D48\\u0D4A-\\u0D4E\\u0D57\\u0D60-\\u0D63\\u0D66-\\u0D6F\\u0D7A-\\u0D7F\\u0D82\\u0D83\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0DCA\\u0DCF-\\u0DD4\\u0DD6\\u0DD8-\\u0DDF\\u0DE6-\\u0DEF\\u0DF2\\u0DF3\\u0E01-\\u0E3A\\u0E40-\\u0E4E\\u0E50-\\u0E59\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB9\\u0EBB-\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EC8-\\u0ECD\\u0ED0-\\u0ED9\\u0EDC-\\u0EDF\\u0F00\\u0F18\\u0F19\\u0F20-\\u0F29\\u0F35\\u0F37\\u0F39\\u0F3E-\\u0F47\\u0F49-\\u0F6C\\u0F71-\\u0F84\\u0F86-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u1000-\\u1049\\u1050-\\u109D\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u135D-\\u135F\\u1380-\\u138F\\u13A0-\\u13F4\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1714\\u1720-\\u1734\\u1740-\\u1753\\u1760-\\u176C\\u176E-\\u1770\\u1772\\u1773\\u1780-\\u17D3\\u17D7\\u17DC\\u17DD\\u17E0-\\u17E9\\u180B-\\u180D\\u1810-\\u1819\\u1820-\\u1877\\u1880-\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1920-\\u192B\\u1930-\\u193B\\u1946-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u19D0-\\u19D9\\u1A00-\\u1A1B\\u1A20-\\u1A5E\\u1A60-\\u1A7C\\u1A7F-\\u1A89\\u1A90-\\u1A99\\u1AA7\\u1AB0-\\u1ABD\\u1B00-\\u1B4B\\u1B50-\\u1B59\\u1B6B-\\u1B73\\u1B80-\\u1BF3\\u1C00-\\u1C37\\u1C40-\\u1C49\\u1C4D-\\u1C7D\\u1CD0-\\u1CD2\\u1CD4-\\u1CF6\\u1CF8\\u1CF9\\u1D00-\\u1DF5\\u1DFC-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u200C\\u200D\\u203F\\u2040\\u2054\\u2071\\u207F\\u2090-\\u209C\\u20D0-\\u20DC\\u20E1\\u20E5-\\u20F0\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D7F-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2DE0-\\u2DFF\\u2E2F\\u3005-\\u3007\\u3021-\\u302F\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u3099\\u309A\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FCC\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA62B\\uA640-\\uA66F\\uA674-\\uA67D\\uA67F-\\uA69D\\uA69F-\\uA6F1\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA78E\\uA790-\\uA7AD\\uA7B0\\uA7B1\\uA7F7-\\uA827\\uA840-\\uA873\\uA880-\\uA8C4\\uA8D0-\\uA8D9\\uA8E0-\\uA8F7\\uA8FB\\uA900-\\uA92D\\uA930-\\uA953\\uA960-\\uA97C\\uA980-\\uA9C0\\uA9CF-\\uA9D9\\uA9E0-\\uA9FE\\uAA00-\\uAA36\\uAA40-\\uAA4D\\uAA50-\\uAA59\\uAA60-\\uAA76\\uAA7A-\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEF\\uAAF2-\\uAAF6\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB5F\\uAB64\\uAB65\\uABC0-\\uABEA\\uABEC\\uABED\\uABF0-\\uABF9\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE00-\\uFE0F\\uFE20-\\uFE2D\\uFE33\\uFE34\\uFE4D-\\uFE4F\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF10-\\uFF19\\uFF21-\\uFF3A\\uFF3F\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]");
  function assert(condition, message) {
    if (!condition) {
      throw new Error("ASSERT: " + message);
    }
  }
  function isDecimalDigit(ch2) {
    return ch2 >= 48 && ch2 <= 57;
  }
  function isHexDigit(ch2) {
    return "0123456789abcdefABCDEF".includes(ch2);
  }
  function isOctalDigit(ch2) {
    return "01234567".includes(ch2);
  }
  function isWhiteSpace(ch2) {
    return ch2 === 32 || ch2 === 9 || ch2 === 11 || ch2 === 12 || ch2 === 160 || ch2 >= 5760 && [5760, 6158, 8192, 8193, 8194, 8195, 8196, 8197, 8198, 8199, 8200, 8201, 8202, 8239, 8287, 12288, 65279].includes(ch2);
  }
  function isLineTerminator(ch2) {
    return ch2 === 10 || ch2 === 13 || ch2 === 8232 || ch2 === 8233;
  }
  function isIdentifierStart(ch2) {
    return ch2 === 36 || ch2 === 95 || // $ (dollar) and _ (underscore)
    ch2 >= 65 && ch2 <= 90 || // A..Z
    ch2 >= 97 && ch2 <= 122 || // a..z
    ch2 === 92 || // \ (backslash)
    ch2 >= 128 && RegexNonAsciiIdentifierStart.test(String.fromCharCode(ch2));
  }
  function isIdentifierPart(ch2) {
    return ch2 === 36 || ch2 === 95 || // $ (dollar) and _ (underscore)
    ch2 >= 65 && ch2 <= 90 || // A..Z
    ch2 >= 97 && ch2 <= 122 || // a..z
    ch2 >= 48 && ch2 <= 57 || // 0..9
    ch2 === 92 || // \ (backslash)
    ch2 >= 128 && RegexNonAsciiIdentifierPart.test(String.fromCharCode(ch2));
  }
  const keywords = {
    "if": 1,
    "in": 1,
    "do": 1,
    "var": 1,
    "for": 1,
    "new": 1,
    "try": 1,
    "let": 1,
    "this": 1,
    "else": 1,
    "case": 1,
    "void": 1,
    "with": 1,
    "enum": 1,
    "while": 1,
    "break": 1,
    "catch": 1,
    "throw": 1,
    "const": 1,
    "yield": 1,
    "class": 1,
    "super": 1,
    "return": 1,
    "typeof": 1,
    "delete": 1,
    "switch": 1,
    "export": 1,
    "import": 1,
    "public": 1,
    "static": 1,
    "default": 1,
    "finally": 1,
    "extends": 1,
    "package": 1,
    "private": 1,
    "function": 1,
    "continue": 1,
    "debugger": 1,
    "interface": 1,
    "protected": 1,
    "instanceof": 1,
    "implements": 1
  };
  function skipComment() {
    while (index < length) {
      const ch2 = source.charCodeAt(index);
      if (isWhiteSpace(ch2) || isLineTerminator(ch2)) {
        ++index;
      } else {
        break;
      }
    }
  }
  function scanHexEscape(prefix) {
    var i, len, ch2, code = 0;
    len = prefix === "u" ? 4 : 2;
    for (i = 0; i < len; ++i) {
      if (index < length && isHexDigit(source[index])) {
        ch2 = source[index++];
        code = code * 16 + "0123456789abcdef".indexOf(ch2.toLowerCase());
      } else {
        throwError({}, MessageUnexpectedToken, ILLEGAL);
      }
    }
    return String.fromCharCode(code);
  }
  function scanUnicodeCodePointEscape() {
    var ch2, code, cu1, cu2;
    ch2 = source[index];
    code = 0;
    if (ch2 === "}") {
      throwError({}, MessageUnexpectedToken, ILLEGAL);
    }
    while (index < length) {
      ch2 = source[index++];
      if (!isHexDigit(ch2)) {
        break;
      }
      code = code * 16 + "0123456789abcdef".indexOf(ch2.toLowerCase());
    }
    if (code > 1114111 || ch2 !== "}") {
      throwError({}, MessageUnexpectedToken, ILLEGAL);
    }
    if (code <= 65535) {
      return String.fromCharCode(code);
    }
    cu1 = (code - 65536 >> 10) + 55296;
    cu2 = (code - 65536 & 1023) + 56320;
    return String.fromCharCode(cu1, cu2);
  }
  function getEscapedIdentifier() {
    var ch2, id2;
    ch2 = source.charCodeAt(index++);
    id2 = String.fromCharCode(ch2);
    if (ch2 === 92) {
      if (source.charCodeAt(index) !== 117) {
        throwError({}, MessageUnexpectedToken, ILLEGAL);
      }
      ++index;
      ch2 = scanHexEscape("u");
      if (!ch2 || ch2 === "\\" || !isIdentifierStart(ch2.charCodeAt(0))) {
        throwError({}, MessageUnexpectedToken, ILLEGAL);
      }
      id2 = ch2;
    }
    while (index < length) {
      ch2 = source.charCodeAt(index);
      if (!isIdentifierPart(ch2)) {
        break;
      }
      ++index;
      id2 += String.fromCharCode(ch2);
      if (ch2 === 92) {
        id2 = id2.substr(0, id2.length - 1);
        if (source.charCodeAt(index) !== 117) {
          throwError({}, MessageUnexpectedToken, ILLEGAL);
        }
        ++index;
        ch2 = scanHexEscape("u");
        if (!ch2 || ch2 === "\\" || !isIdentifierPart(ch2.charCodeAt(0))) {
          throwError({}, MessageUnexpectedToken, ILLEGAL);
        }
        id2 += ch2;
      }
    }
    return id2;
  }
  function getIdentifier() {
    var start, ch2;
    start = index++;
    while (index < length) {
      ch2 = source.charCodeAt(index);
      if (ch2 === 92) {
        index = start;
        return getEscapedIdentifier();
      }
      if (isIdentifierPart(ch2)) {
        ++index;
      } else {
        break;
      }
    }
    return source.slice(start, index);
  }
  function scanIdentifier() {
    var start, id2, type2;
    start = index;
    id2 = source.charCodeAt(index) === 92 ? getEscapedIdentifier() : getIdentifier();
    if (id2.length === 1) {
      type2 = TokenIdentifier;
    } else if (keywords.hasOwnProperty(id2)) {
      type2 = TokenKeyword;
    } else if (id2 === "null") {
      type2 = TokenNullLiteral;
    } else if (id2 === "true" || id2 === "false") {
      type2 = TokenBooleanLiteral;
    } else {
      type2 = TokenIdentifier;
    }
    return {
      type: type2,
      value: id2,
      start,
      end: index
    };
  }
  function scanPunctuator() {
    var start = index, code = source.charCodeAt(index), code2, ch1 = source[index], ch2, ch3, ch4;
    switch (code) {
      case 46:
      case 40:
      case 41:
      case 59:
      case 44:
      case 123:
      case 125:
      case 91:
      case 93:
      case 58:
      case 63:
      case 126:
        ++index;
        return {
          type: TokenPunctuator,
          value: String.fromCharCode(code),
          start,
          end: index
        };
      default:
        code2 = source.charCodeAt(index + 1);
        if (code2 === 61) {
          switch (code) {
            case 43:
            case 45:
            case 47:
            case 60:
            case 62:
            case 94:
            case 124:
            case 37:
            case 38:
            case 42:
              index += 2;
              return {
                type: TokenPunctuator,
                value: String.fromCharCode(code) + String.fromCharCode(code2),
                start,
                end: index
              };
            case 33:
            case 61:
              index += 2;
              if (source.charCodeAt(index) === 61) {
                ++index;
              }
              return {
                type: TokenPunctuator,
                value: source.slice(start, index),
                start,
                end: index
              };
          }
        }
    }
    ch4 = source.substr(index, 4);
    if (ch4 === ">>>=") {
      index += 4;
      return {
        type: TokenPunctuator,
        value: ch4,
        start,
        end: index
      };
    }
    ch3 = ch4.substr(0, 3);
    if (ch3 === ">>>" || ch3 === "<<=" || ch3 === ">>=") {
      index += 3;
      return {
        type: TokenPunctuator,
        value: ch3,
        start,
        end: index
      };
    }
    ch2 = ch3.substr(0, 2);
    if (ch1 === ch2[1] && "+-<>&|".includes(ch1) || ch2 === "=>") {
      index += 2;
      return {
        type: TokenPunctuator,
        value: ch2,
        start,
        end: index
      };
    }
    if (ch2 === "//") {
      throwError({}, MessageUnexpectedToken, ILLEGAL);
    }
    if ("<>=!+-*%&|^/".includes(ch1)) {
      ++index;
      return {
        type: TokenPunctuator,
        value: ch1,
        start,
        end: index
      };
    }
    throwError({}, MessageUnexpectedToken, ILLEGAL);
  }
  function scanHexLiteral(start) {
    let number2 = "";
    while (index < length) {
      if (!isHexDigit(source[index])) {
        break;
      }
      number2 += source[index++];
    }
    if (number2.length === 0) {
      throwError({}, MessageUnexpectedToken, ILLEGAL);
    }
    if (isIdentifierStart(source.charCodeAt(index))) {
      throwError({}, MessageUnexpectedToken, ILLEGAL);
    }
    return {
      type: TokenNumericLiteral,
      value: parseInt("0x" + number2, 16),
      start,
      end: index
    };
  }
  function scanOctalLiteral(start) {
    let number2 = "0" + source[index++];
    while (index < length) {
      if (!isOctalDigit(source[index])) {
        break;
      }
      number2 += source[index++];
    }
    if (isIdentifierStart(source.charCodeAt(index)) || isDecimalDigit(source.charCodeAt(index))) {
      throwError({}, MessageUnexpectedToken, ILLEGAL);
    }
    return {
      type: TokenNumericLiteral,
      value: parseInt(number2, 8),
      octal: true,
      start,
      end: index
    };
  }
  function scanNumericLiteral() {
    var number2, start, ch2;
    ch2 = source[index];
    assert(isDecimalDigit(ch2.charCodeAt(0)) || ch2 === ".", "Numeric literal must start with a decimal digit or a decimal point");
    start = index;
    number2 = "";
    if (ch2 !== ".") {
      number2 = source[index++];
      ch2 = source[index];
      if (number2 === "0") {
        if (ch2 === "x" || ch2 === "X") {
          ++index;
          return scanHexLiteral(start);
        }
        if (isOctalDigit(ch2)) {
          return scanOctalLiteral(start);
        }
        if (ch2 && isDecimalDigit(ch2.charCodeAt(0))) {
          throwError({}, MessageUnexpectedToken, ILLEGAL);
        }
      }
      while (isDecimalDigit(source.charCodeAt(index))) {
        number2 += source[index++];
      }
      ch2 = source[index];
    }
    if (ch2 === ".") {
      number2 += source[index++];
      while (isDecimalDigit(source.charCodeAt(index))) {
        number2 += source[index++];
      }
      ch2 = source[index];
    }
    if (ch2 === "e" || ch2 === "E") {
      number2 += source[index++];
      ch2 = source[index];
      if (ch2 === "+" || ch2 === "-") {
        number2 += source[index++];
      }
      if (isDecimalDigit(source.charCodeAt(index))) {
        while (isDecimalDigit(source.charCodeAt(index))) {
          number2 += source[index++];
        }
      } else {
        throwError({}, MessageUnexpectedToken, ILLEGAL);
      }
    }
    if (isIdentifierStart(source.charCodeAt(index))) {
      throwError({}, MessageUnexpectedToken, ILLEGAL);
    }
    return {
      type: TokenNumericLiteral,
      value: parseFloat(number2),
      start,
      end: index
    };
  }
  function scanStringLiteral() {
    var str = "", quote, start, ch2, code, octal = false;
    quote = source[index];
    assert(quote === "'" || quote === '"', "String literal must starts with a quote");
    start = index;
    ++index;
    while (index < length) {
      ch2 = source[index++];
      if (ch2 === quote) {
        quote = "";
        break;
      } else if (ch2 === "\\") {
        ch2 = source[index++];
        if (!ch2 || !isLineTerminator(ch2.charCodeAt(0))) {
          switch (ch2) {
            case "u":
            case "x":
              if (source[index] === "{") {
                ++index;
                str += scanUnicodeCodePointEscape();
              } else {
                str += scanHexEscape(ch2);
              }
              break;
            case "n":
              str += "\n";
              break;
            case "r":
              str += "\r";
              break;
            case "t":
              str += "	";
              break;
            case "b":
              str += "\b";
              break;
            case "f":
              str += "\f";
              break;
            case "v":
              str += "\v";
              break;
            default:
              if (isOctalDigit(ch2)) {
                code = "01234567".indexOf(ch2);
                if (code !== 0) {
                  octal = true;
                }
                if (index < length && isOctalDigit(source[index])) {
                  octal = true;
                  code = code * 8 + "01234567".indexOf(source[index++]);
                  if ("0123".includes(ch2) && index < length && isOctalDigit(source[index])) {
                    code = code * 8 + "01234567".indexOf(source[index++]);
                  }
                }
                str += String.fromCharCode(code);
              } else {
                str += ch2;
              }
              break;
          }
        } else {
          if (ch2 === "\r" && source[index] === "\n") {
            ++index;
          }
        }
      } else if (isLineTerminator(ch2.charCodeAt(0))) {
        break;
      } else {
        str += ch2;
      }
    }
    if (quote !== "") {
      throwError({}, MessageUnexpectedToken, ILLEGAL);
    }
    return {
      type: TokenStringLiteral,
      value: str,
      octal,
      start,
      end: index
    };
  }
  function testRegExp(pattern, flags) {
    let tmp = pattern;
    if (flags.includes("u")) {
      tmp = tmp.replace(/\\u\{([0-9a-fA-F]+)\}/g, ($0, $1) => {
        if (parseInt($1, 16) <= 1114111) {
          return "x";
        }
        throwError({}, MessageInvalidRegExp);
      }).replace(/[\uD800-\uDBFF][\uDC00-\uDFFF]/g, "x");
    }
    try {
      new RegExp(tmp);
    } catch (e3) {
      throwError({}, MessageInvalidRegExp);
    }
    try {
      return new RegExp(pattern, flags);
    } catch (exception) {
      return null;
    }
  }
  function scanRegExpBody() {
    var ch2, str, classMarker, terminated, body;
    ch2 = source[index];
    assert(ch2 === "/", "Regular expression literal must start with a slash");
    str = source[index++];
    classMarker = false;
    terminated = false;
    while (index < length) {
      ch2 = source[index++];
      str += ch2;
      if (ch2 === "\\") {
        ch2 = source[index++];
        if (isLineTerminator(ch2.charCodeAt(0))) {
          throwError({}, MessageUnterminatedRegExp);
        }
        str += ch2;
      } else if (isLineTerminator(ch2.charCodeAt(0))) {
        throwError({}, MessageUnterminatedRegExp);
      } else if (classMarker) {
        if (ch2 === "]") {
          classMarker = false;
        }
      } else {
        if (ch2 === "/") {
          terminated = true;
          break;
        } else if (ch2 === "[") {
          classMarker = true;
        }
      }
    }
    if (!terminated) {
      throwError({}, MessageUnterminatedRegExp);
    }
    body = str.substr(1, str.length - 2);
    return {
      value: body,
      literal: str
    };
  }
  function scanRegExpFlags() {
    var ch2, str, flags;
    str = "";
    flags = "";
    while (index < length) {
      ch2 = source[index];
      if (!isIdentifierPart(ch2.charCodeAt(0))) {
        break;
      }
      ++index;
      if (ch2 === "\\" && index < length) {
        throwError({}, MessageUnexpectedToken, ILLEGAL);
      } else {
        flags += ch2;
        str += ch2;
      }
    }
    if (flags.search(/[^gimuy]/g) >= 0) {
      throwError({}, MessageInvalidRegExp, flags);
    }
    return {
      value: flags,
      literal: str
    };
  }
  function scanRegExp() {
    var start, body, flags, value2;
    lookahead = null;
    skipComment();
    start = index;
    body = scanRegExpBody();
    flags = scanRegExpFlags();
    value2 = testRegExp(body.value, flags.value);
    return {
      literal: body.literal + flags.literal,
      value: value2,
      regex: {
        pattern: body.value,
        flags: flags.value
      },
      start,
      end: index
    };
  }
  function isIdentifierName(token) {
    return token.type === TokenIdentifier || token.type === TokenKeyword || token.type === TokenBooleanLiteral || token.type === TokenNullLiteral;
  }
  function advance() {
    skipComment();
    if (index >= length) {
      return {
        type: TokenEOF,
        start: index,
        end: index
      };
    }
    const ch2 = source.charCodeAt(index);
    if (isIdentifierStart(ch2)) {
      return scanIdentifier();
    }
    if (ch2 === 40 || ch2 === 41 || ch2 === 59) {
      return scanPunctuator();
    }
    if (ch2 === 39 || ch2 === 34) {
      return scanStringLiteral();
    }
    if (ch2 === 46) {
      if (isDecimalDigit(source.charCodeAt(index + 1))) {
        return scanNumericLiteral();
      }
      return scanPunctuator();
    }
    if (isDecimalDigit(ch2)) {
      return scanNumericLiteral();
    }
    return scanPunctuator();
  }
  function lex() {
    const token = lookahead;
    index = token.end;
    lookahead = advance();
    index = token.end;
    return token;
  }
  function peek() {
    const pos = index;
    lookahead = advance();
    index = pos;
  }
  function finishArrayExpression(elements) {
    const node = new ASTNode(SyntaxArrayExpression);
    node.elements = elements;
    return node;
  }
  function finishBinaryExpression(operator2, left, right) {
    const node = new ASTNode(operator2 === "||" || operator2 === "&&" ? SyntaxLogicalExpression : SyntaxBinaryExpression);
    node.operator = operator2;
    node.left = left;
    node.right = right;
    return node;
  }
  function finishCallExpression(callee, args) {
    const node = new ASTNode(SyntaxCallExpression);
    node.callee = callee;
    node.arguments = args;
    return node;
  }
  function finishConditionalExpression(test2, consequent, alternate) {
    const node = new ASTNode(SyntaxConditionalExpression);
    node.test = test2;
    node.consequent = consequent;
    node.alternate = alternate;
    return node;
  }
  function finishIdentifier(name) {
    const node = new ASTNode(SyntaxIdentifier);
    node.name = name;
    return node;
  }
  function finishLiteral(token) {
    const node = new ASTNode(SyntaxLiteral);
    node.value = token.value;
    node.raw = source.slice(token.start, token.end);
    if (token.regex) {
      if (node.raw === "//") {
        node.raw = "/(?:)/";
      }
      node.regex = token.regex;
    }
    return node;
  }
  function finishMemberExpression(accessor2, object2, property2) {
    const node = new ASTNode(SyntaxMemberExpression);
    node.computed = accessor2 === "[";
    node.object = object2;
    node.property = property2;
    if (!node.computed) property2.member = true;
    return node;
  }
  function finishObjectExpression(properties) {
    const node = new ASTNode(SyntaxObjectExpression);
    node.properties = properties;
    return node;
  }
  function finishProperty(kind, key2, value2) {
    const node = new ASTNode(SyntaxProperty);
    node.key = key2;
    node.value = value2;
    node.kind = kind;
    return node;
  }
  function finishUnaryExpression(operator2, argument) {
    const node = new ASTNode(SyntaxUnaryExpression);
    node.operator = operator2;
    node.argument = argument;
    node.prefix = true;
    return node;
  }
  function throwError(token, messageFormat) {
    var error2, args = Array.prototype.slice.call(arguments, 2), msg = messageFormat.replace(/%(\d)/g, (whole, index2) => {
      assert(index2 < args.length, "Message reference must be in range");
      return args[index2];
    });
    error2 = new Error(msg);
    error2.index = index;
    error2.description = msg;
    throw error2;
  }
  function throwUnexpected(token) {
    if (token.type === TokenEOF) {
      throwError(token, MessageUnexpectedEOS);
    }
    if (token.type === TokenNumericLiteral) {
      throwError(token, MessageUnexpectedNumber);
    }
    if (token.type === TokenStringLiteral) {
      throwError(token, MessageUnexpectedString);
    }
    if (token.type === TokenIdentifier) {
      throwError(token, MessageUnexpectedIdentifier);
    }
    if (token.type === TokenKeyword) {
      throwError(token, MessageUnexpectedReserved);
    }
    throwError(token, MessageUnexpectedToken, token.value);
  }
  function expect(value2) {
    const token = lex();
    if (token.type !== TokenPunctuator || token.value !== value2) {
      throwUnexpected(token);
    }
  }
  function match(value2) {
    return lookahead.type === TokenPunctuator && lookahead.value === value2;
  }
  function matchKeyword(keyword) {
    return lookahead.type === TokenKeyword && lookahead.value === keyword;
  }
  function parseArrayInitialiser() {
    const elements = [];
    index = lookahead.start;
    expect("[");
    while (!match("]")) {
      if (match(",")) {
        lex();
        elements.push(null);
      } else {
        elements.push(parseConditionalExpression());
        if (!match("]")) {
          expect(",");
        }
      }
    }
    lex();
    return finishArrayExpression(elements);
  }
  function parseObjectPropertyKey() {
    index = lookahead.start;
    const token = lex();
    if (token.type === TokenStringLiteral || token.type === TokenNumericLiteral) {
      if (token.octal) {
        throwError(token, MessageStrictOctalLiteral);
      }
      return finishLiteral(token);
    }
    return finishIdentifier(token.value);
  }
  function parseObjectProperty() {
    var token, key2, id2, value2;
    index = lookahead.start;
    token = lookahead;
    if (token.type === TokenIdentifier) {
      id2 = parseObjectPropertyKey();
      expect(":");
      value2 = parseConditionalExpression();
      return finishProperty("init", id2, value2);
    }
    if (token.type === TokenEOF || token.type === TokenPunctuator) {
      throwUnexpected(token);
    } else {
      key2 = parseObjectPropertyKey();
      expect(":");
      value2 = parseConditionalExpression();
      return finishProperty("init", key2, value2);
    }
  }
  function parseObjectInitialiser() {
    var properties = [], property2, name, key2, map2 = {}, toString2 = String;
    index = lookahead.start;
    expect("{");
    while (!match("}")) {
      property2 = parseObjectProperty();
      if (property2.key.type === SyntaxIdentifier) {
        name = property2.key.name;
      } else {
        name = toString2(property2.key.value);
      }
      key2 = "$" + name;
      if (Object.prototype.hasOwnProperty.call(map2, key2)) {
        throwError({}, MessageStrictDuplicateProperty);
      } else {
        map2[key2] = true;
      }
      properties.push(property2);
      if (!match("}")) {
        expect(",");
      }
    }
    expect("}");
    return finishObjectExpression(properties);
  }
  function parseGroupExpression() {
    expect("(");
    const expr2 = parseExpression$1();
    expect(")");
    return expr2;
  }
  const legalKeywords = {
    "if": 1
  };
  function parsePrimaryExpression() {
    var type2, token, expr2;
    if (match("(")) {
      return parseGroupExpression();
    }
    if (match("[")) {
      return parseArrayInitialiser();
    }
    if (match("{")) {
      return parseObjectInitialiser();
    }
    type2 = lookahead.type;
    index = lookahead.start;
    if (type2 === TokenIdentifier || legalKeywords[lookahead.value]) {
      expr2 = finishIdentifier(lex().value);
    } else if (type2 === TokenStringLiteral || type2 === TokenNumericLiteral) {
      if (lookahead.octal) {
        throwError(lookahead, MessageStrictOctalLiteral);
      }
      expr2 = finishLiteral(lex());
    } else if (type2 === TokenKeyword) {
      throw new Error(DISABLED);
    } else if (type2 === TokenBooleanLiteral) {
      token = lex();
      token.value = token.value === "true";
      expr2 = finishLiteral(token);
    } else if (type2 === TokenNullLiteral) {
      token = lex();
      token.value = null;
      expr2 = finishLiteral(token);
    } else if (match("/") || match("/=")) {
      expr2 = finishLiteral(scanRegExp());
      peek();
    } else {
      throwUnexpected(lex());
    }
    return expr2;
  }
  function parseArguments() {
    const args = [];
    expect("(");
    if (!match(")")) {
      while (index < length) {
        args.push(parseConditionalExpression());
        if (match(")")) {
          break;
        }
        expect(",");
      }
    }
    expect(")");
    return args;
  }
  function parseNonComputedProperty() {
    index = lookahead.start;
    const token = lex();
    if (!isIdentifierName(token)) {
      throwUnexpected(token);
    }
    return finishIdentifier(token.value);
  }
  function parseNonComputedMember() {
    expect(".");
    return parseNonComputedProperty();
  }
  function parseComputedMember() {
    expect("[");
    const expr2 = parseExpression$1();
    expect("]");
    return expr2;
  }
  function parseLeftHandSideExpressionAllowCall() {
    var expr2, args, property2;
    expr2 = parsePrimaryExpression();
    for (; ; ) {
      if (match(".")) {
        property2 = parseNonComputedMember();
        expr2 = finishMemberExpression(".", expr2, property2);
      } else if (match("(")) {
        args = parseArguments();
        expr2 = finishCallExpression(expr2, args);
      } else if (match("[")) {
        property2 = parseComputedMember();
        expr2 = finishMemberExpression("[", expr2, property2);
      } else {
        break;
      }
    }
    return expr2;
  }
  function parsePostfixExpression() {
    const expr2 = parseLeftHandSideExpressionAllowCall();
    if (lookahead.type === TokenPunctuator) {
      if (match("++") || match("--")) {
        throw new Error(DISABLED);
      }
    }
    return expr2;
  }
  function parseUnaryExpression() {
    var token, expr2;
    if (lookahead.type !== TokenPunctuator && lookahead.type !== TokenKeyword) {
      expr2 = parsePostfixExpression();
    } else if (match("++") || match("--")) {
      throw new Error(DISABLED);
    } else if (match("+") || match("-") || match("~") || match("!")) {
      token = lex();
      expr2 = parseUnaryExpression();
      expr2 = finishUnaryExpression(token.value, expr2);
    } else if (matchKeyword("delete") || matchKeyword("void") || matchKeyword("typeof")) {
      throw new Error(DISABLED);
    } else {
      expr2 = parsePostfixExpression();
    }
    return expr2;
  }
  function binaryPrecedence(token) {
    let prec = 0;
    if (token.type !== TokenPunctuator && token.type !== TokenKeyword) {
      return 0;
    }
    switch (token.value) {
      case "||":
        prec = 1;
        break;
      case "&&":
        prec = 2;
        break;
      case "|":
        prec = 3;
        break;
      case "^":
        prec = 4;
        break;
      case "&":
        prec = 5;
        break;
      case "==":
      case "!=":
      case "===":
      case "!==":
        prec = 6;
        break;
      case "<":
      case ">":
      case "<=":
      case ">=":
      case "instanceof":
      case "in":
        prec = 7;
        break;
      case "<<":
      case ">>":
      case ">>>":
        prec = 8;
        break;
      case "+":
      case "-":
        prec = 9;
        break;
      case "*":
      case "/":
      case "%":
        prec = 11;
        break;
    }
    return prec;
  }
  function parseBinaryExpression() {
    var marker, markers, expr2, token, prec, stack2, right, operator2, left, i;
    marker = lookahead;
    left = parseUnaryExpression();
    token = lookahead;
    prec = binaryPrecedence(token);
    if (prec === 0) {
      return left;
    }
    token.prec = prec;
    lex();
    markers = [marker, lookahead];
    right = parseUnaryExpression();
    stack2 = [left, token, right];
    while ((prec = binaryPrecedence(lookahead)) > 0) {
      while (stack2.length > 2 && prec <= stack2[stack2.length - 2].prec) {
        right = stack2.pop();
        operator2 = stack2.pop().value;
        left = stack2.pop();
        markers.pop();
        expr2 = finishBinaryExpression(operator2, left, right);
        stack2.push(expr2);
      }
      token = lex();
      token.prec = prec;
      stack2.push(token);
      markers.push(lookahead);
      expr2 = parseUnaryExpression();
      stack2.push(expr2);
    }
    i = stack2.length - 1;
    expr2 = stack2[i];
    markers.pop();
    while (i > 1) {
      markers.pop();
      expr2 = finishBinaryExpression(stack2[i - 1].value, stack2[i - 2], expr2);
      i -= 2;
    }
    return expr2;
  }
  function parseConditionalExpression() {
    var expr2, consequent, alternate;
    expr2 = parseBinaryExpression();
    if (match("?")) {
      lex();
      consequent = parseConditionalExpression();
      expect(":");
      alternate = parseConditionalExpression();
      expr2 = finishConditionalExpression(expr2, consequent, alternate);
    }
    return expr2;
  }
  function parseExpression$1() {
    const expr2 = parseConditionalExpression();
    if (match(",")) {
      throw new Error(DISABLED);
    }
    return expr2;
  }
  function parser(code) {
    source = code;
    index = 0;
    length = source.length;
    lookahead = null;
    peek();
    const expr2 = parseExpression$1();
    if (lookahead.type !== TokenEOF) {
      throw new Error("Unexpect token after expression.");
    }
    return expr2;
  }
  function getName(node) {
    const name = [];
    if (node.type === "Identifier") {
      return [node.name];
    }
    if (node.type === "Literal") {
      return [node.value];
    }
    if (node.type === "MemberExpression") {
      name.push(...getName(node.object));
      name.push(...getName(node.property));
    }
    return name;
  }
  function startsWithDatum(node) {
    if (node.object.type === "MemberExpression") {
      return startsWithDatum(node.object);
    }
    return node.object.name === "datum";
  }
  function getDependentFields(expression2) {
    const ast = parser(expression2);
    const dependents = /* @__PURE__ */ new Set();
    ast.visit((node) => {
      if (node.type === "MemberExpression" && startsWithDatum(node)) {
        dependents.add(getName(node).slice(1).join("."));
      }
    });
    return dependents;
  }
  class FilterNode extends DataFlowNode {
    clone() {
      return new FilterNode(null, this.model, duplicate(this.filter));
    }
    constructor(parent, model, filter2) {
      super(parent);
      this.model = model;
      this.filter = filter2;
      this.expr = expression(this.model, this.filter, this);
      this._dependentFields = getDependentFields(this.expr);
    }
    dependentFields() {
      return this._dependentFields;
    }
    producedFields() {
      return /* @__PURE__ */ new Set();
    }
    assemble() {
      return {
        type: "filter",
        expr: this.expr
      };
    }
    hash() {
      return `Filter ${this.expr}`;
    }
  }
  function parseUnitSelection(model, selDefs) {
    const selCmpts = {};
    const selectionConfig = model.config.selection;
    if (!selDefs || !selDefs.length)
      return selCmpts;
    let nTimerSelections = 0;
    for (const def2 of selDefs) {
      const name = varName(def2.name);
      const selDef = def2.select;
      const type2 = isString(selDef) ? selDef : selDef.type;
      const defaults2 = isObject(selDef) ? duplicate(selDef) : { type: type2 };
      const cfg = selectionConfig[type2];
      for (const key2 in cfg) {
        if (key2 === "fields" || key2 === "encodings") {
          continue;
        }
        if (key2 === "mark") {
          defaults2.mark = { ...cfg.mark, ...defaults2.mark };
        }
        if (defaults2[key2] === void 0 || defaults2[key2] === true) {
          defaults2[key2] = duplicate(cfg[key2] ?? defaults2[key2]);
        }
      }
      const selCmpt = selCmpts[name] = {
        ...defaults2,
        name,
        type: type2,
        init: def2.value,
        bind: def2.bind,
        events: isString(defaults2.on) ? eventSelector(defaults2.on, "scope") : array$5(duplicate(defaults2.on))
      };
      if (isTimerSelection(selCmpt)) {
        nTimerSelections++;
        if (nTimerSelections > 1) {
          delete selCmpts[name];
          continue;
        }
      }
      const def_ = duplicate(def2);
      for (const c2 of selectionCompilers) {
        if (c2.defined(selCmpt) && c2.parse) {
          c2.parse(model, selCmpt, def_);
        }
      }
    }
    if (nTimerSelections > 1) {
      warn(MULTIPLE_TIMER_ANIMATION_SELECTION);
    }
    return selCmpts;
  }
  function parseSelectionPredicate(model, pred, dfnode, datum2 = "datum") {
    const name = isString(pred) ? pred : pred.param;
    const vname = varName(name);
    const store = $(vname + STORE);
    let selCmpt;
    try {
      selCmpt = model.getSelectionComponent(vname, name);
    } catch (e3) {
      return `!!${vname}`;
    }
    if (selCmpt.project.timeUnit) {
      const child = dfnode ?? model.component.data.raw;
      const tunode = selCmpt.project.timeUnit.clone();
      if (child.parent) {
        tunode.insertAsParentOf(child);
      } else {
        child.parent = tunode;
      }
    }
    const fn = selCmpt.project.hasSelectionId ? "vlSelectionIdTest(" : "vlSelectionTest(";
    const resolve2 = selCmpt.resolve === "global" ? ")" : `, ${$(selCmpt.resolve)})`;
    const test2 = `${fn}${store}, ${datum2}${resolve2}`;
    const length2 = `length(data(${store}))`;
    return pred.empty === false ? `${length2} && ${test2}` : `!${length2} || ${test2}`;
  }
  function parseSelectionExtent(model, name, extent2) {
    const vname = varName(name);
    const encoding = extent2.encoding;
    let field2 = extent2.field;
    let selCmpt;
    try {
      selCmpt = model.getSelectionComponent(vname, name);
    } catch (e3) {
      return vname;
    }
    if (!encoding && !field2) {
      field2 = selCmpt.project.items[0].field;
      if (selCmpt.project.items.length > 1) {
        warn(selectionAsScaleDomainWithoutField(field2));
      }
    } else if (encoding && !field2) {
      const encodings = selCmpt.project.items.filter((p) => p.channel === encoding);
      if (!encodings.length || encodings.length > 1) {
        field2 = selCmpt.project.items[0].field;
        warn(selectionAsScaleDomainWrongEncodings(encodings, encoding, extent2, field2));
      } else {
        field2 = encodings[0].field;
      }
    }
    return `${selCmpt.name}[${$(replacePathInField(field2))}]`;
  }
  function materializeSelections(model, main2) {
    for (const [selection, selCmpt] of entries$1(model.component.selection ?? {})) {
      const lookupName = model.getName(`lookup_${selection}`);
      model.component.data.outputNodes[lookupName] = selCmpt.materialized = new OutputNode(new FilterNode(main2, model, { param: selection }), lookupName, DataSourceType.Lookup, model.component.data.outputNodeRefCounts);
    }
  }
  function expression(model, filterOp, node) {
    return logicalExpr(filterOp, (predicate) => {
      if (isString(predicate)) {
        return predicate;
      } else if (isSelectionPredicate(predicate)) {
        return parseSelectionPredicate(model, predicate, node);
      } else {
        return fieldFilterExpression(predicate);
      }
    });
  }
  function assembleTitle(title2, config) {
    if (!title2) {
      return void 0;
    }
    if (isArray(title2) && !isText(title2)) {
      return title2.map((fieldDef) => defaultTitle(fieldDef, config)).join(", ");
    }
    return title2;
  }
  function setAxisEncode(axis, part, vgProp, vgRef) {
    var _a2, _b2;
    axis.encode ?? (axis.encode = {});
    (_a2 = axis.encode)[part] ?? (_a2[part] = {});
    (_b2 = axis.encode[part]).update ?? (_b2.update = {});
    axis.encode[part].update[vgProp] = vgRef;
  }
  function assembleAxis(axisCmpt, kind, config, opt = { header: false }) {
    var _a2, _b2;
    const { disable, orient: orient2, scale: scale2, labelExpr, title: title2, zindex: zindex2, ...axis } = axisCmpt.combine();
    if (disable) {
      return void 0;
    }
    for (const p in axis) {
      const prop = p;
      const propType = AXIS_PROPERTY_TYPE[prop];
      const propValue = axis[prop];
      if (propType && propType !== kind && propType !== "both") {
        delete axis[prop];
      } else if (isConditionalAxisValue(propValue)) {
        const { condition, ...valueOrSignalRef } = propValue;
        const conditions = array$5(condition);
        const propIndex = CONDITIONAL_AXIS_PROP_INDEX[prop];
        if (propIndex) {
          const { vgProp, part } = propIndex;
          const vgRef = [
            ...conditions.map((c2) => {
              const { test: test2, ...valueOrSignalCRef } = c2;
              return {
                test: expression(null, test2),
                ...valueOrSignalCRef
              };
            }),
            valueOrSignalRef
          ];
          setAxisEncode(axis, part, vgProp, vgRef);
          delete axis[prop];
        } else if (propIndex === null) {
          const signalRef = {
            signal: conditions.map((c2) => {
              const { test: test2, ...valueOrSignalCRef } = c2;
              return `${expression(null, test2)} ? ${exprFromValueRefOrSignalRef(valueOrSignalCRef)} : `;
            }).join("") + exprFromValueRefOrSignalRef(valueOrSignalRef)
          };
          axis[prop] = signalRef;
        }
      } else if (isSignalRef(propValue)) {
        const propIndex = CONDITIONAL_AXIS_PROP_INDEX[prop];
        if (propIndex) {
          const { vgProp, part } = propIndex;
          setAxisEncode(axis, part, vgProp, propValue);
          delete axis[prop];
        }
      }
      if (contains(["labelAlign", "labelBaseline"], prop) && axis[prop] === null) {
        delete axis[prop];
      }
    }
    if (kind === "grid") {
      if (!axis.grid) {
        return void 0;
      }
      if (axis.encode) {
        const { grid } = axis.encode;
        axis.encode = {
          ...grid ? { grid } : {}
        };
        if (isEmpty(axis.encode)) {
          delete axis.encode;
        }
      }
      return {
        scale: scale2,
        orient: orient2,
        ...axis,
        domain: false,
        labels: false,
        aria: false,
        // always hide grid axis
        // Always set min/maxExtent to 0 to ensure that `config.axis*.minExtent` and `config.axis*.maxExtent`
        // would not affect gridAxis
        maxExtent: 0,
        minExtent: 0,
        ticks: false,
        zindex: getFirstDefined(zindex2, 0)
        // put grid behind marks by default
      };
    } else {
      if (!opt.header && axisCmpt.mainExtracted) {
        return void 0;
      }
      if (labelExpr !== void 0) {
        let expr2 = labelExpr;
        if (((_b2 = (_a2 = axis.encode) == null ? void 0 : _a2.labels) == null ? void 0 : _b2.update) && isSignalRef(axis.encode.labels.update.text)) {
          expr2 = replaceAll(labelExpr, "datum.label", axis.encode.labels.update.text.signal);
        }
        setAxisEncode(axis, "labels", "text", { signal: expr2 });
      }
      if (axis.labelAlign === null) {
        delete axis.labelAlign;
      }
      if (axis.encode) {
        for (const part of AXIS_PARTS) {
          if (!axisCmpt.hasAxisPart(part)) {
            delete axis.encode[part];
          }
        }
        if (isEmpty(axis.encode)) {
          delete axis.encode;
        }
      }
      const titleString = assembleTitle(title2, config);
      return {
        scale: scale2,
        orient: orient2,
        grid: false,
        ...titleString ? { title: titleString } : {},
        ...axis,
        ...config.aria === false ? { aria: false } : {},
        zindex: getFirstDefined(zindex2, 0)
        // put axis line above marks by default
      };
    }
  }
  function assembleAxisSignals(model) {
    const { axes } = model.component;
    const signals = [];
    for (const channel of POSITION_SCALE_CHANNELS) {
      if (axes[channel]) {
        for (const axis of axes[channel]) {
          if (!axis.get("disable") && !axis.get("gridScale")) {
            const sizeType = channel === "x" ? "height" : "width";
            const update2 = model.getSizeSignalRef(sizeType).signal;
            if (sizeType !== update2) {
              signals.push({
                name: sizeType,
                update: update2
              });
            }
          }
        }
      }
    }
    return signals;
  }
  function assembleAxes(axisComponents, config) {
    const { x: x2 = [], y: y2 = [] } = axisComponents;
    return [
      ...x2.map((a2) => assembleAxis(a2, "grid", config)),
      ...y2.map((a2) => assembleAxis(a2, "grid", config)),
      ...x2.map((a2) => assembleAxis(a2, "main", config)),
      ...y2.map((a2) => assembleAxis(a2, "main", config))
    ].filter((a2) => a2);
  }
  function getAxisConfigFromConfigTypes(configTypes, config, channel, orient2) {
    return Object.assign.apply(null, [
      {},
      ...configTypes.map((configType) => {
        if (configType === "axisOrient") {
          const orient1 = channel === "x" ? "bottom" : "left";
          const orientConfig1 = config[channel === "x" ? "axisBottom" : "axisLeft"] || {};
          const orientConfig2 = config[channel === "x" ? "axisTop" : "axisRight"] || {};
          const props = /* @__PURE__ */ new Set([...keys(orientConfig1), ...keys(orientConfig2)]);
          const conditionalOrientAxisConfig = {};
          for (const prop of props.values()) {
            conditionalOrientAxisConfig[prop] = {
              // orient is surely signal in this case
              signal: `${orient2["signal"]} === "${orient1}" ? ${signalOrStringValue(orientConfig1[prop])} : ${signalOrStringValue(orientConfig2[prop])}`
            };
          }
          return conditionalOrientAxisConfig;
        }
        return config[configType];
      })
    ]);
  }
  function getAxisConfigs(channel, scaleType2, orient2, config) {
    const typeBasedConfigTypes = scaleType2 === "band" ? ["axisDiscrete", "axisBand"] : scaleType2 === "point" ? ["axisDiscrete", "axisPoint"] : isQuantitative(scaleType2) ? ["axisQuantitative"] : scaleType2 === "time" || scaleType2 === "utc" ? ["axisTemporal"] : [];
    const axisChannel = channel === "x" ? "axisX" : "axisY";
    const axisOrient = isSignalRef(orient2) ? "axisOrient" : `axis${titleCase(orient2)}`;
    const vlOnlyConfigTypes = [
      // technically Vega does have axisBand, but if we make another separation here,
      // it will further introduce complexity in the code
      ...typeBasedConfigTypes,
      ...typeBasedConfigTypes.map((c2) => axisChannel + c2.substr(4))
    ];
    const vgConfigTypes = ["axis", axisOrient, axisChannel];
    return {
      vlOnlyAxisConfig: getAxisConfigFromConfigTypes(vlOnlyConfigTypes, config, channel, orient2),
      vgAxisConfig: getAxisConfigFromConfigTypes(vgConfigTypes, config, channel, orient2),
      axisConfigStyle: getAxisConfigStyle([...vgConfigTypes, ...vlOnlyConfigTypes], config)
    };
  }
  function getAxisConfigStyle(axisConfigTypes, config) {
    var _a2;
    const toMerge = [{}];
    for (const configType of axisConfigTypes) {
      let style2 = (_a2 = config[configType]) == null ? void 0 : _a2.style;
      if (style2) {
        style2 = array$5(style2);
        for (const s of style2) {
          toMerge.push(config.style[s]);
        }
      }
    }
    return Object.assign.apply(null, toMerge);
  }
  function getAxisConfig(property2, styleConfigIndex, style2, axisConfigs = {}) {
    var _a2;
    const styleConfig = getStyleConfig(property2, style2, styleConfigIndex);
    if (styleConfig !== void 0) {
      return {
        configFrom: "style",
        configValue: styleConfig
      };
    }
    for (const configFrom of ["vlOnlyAxisConfig", "vgAxisConfig", "axisConfigStyle"]) {
      if (((_a2 = axisConfigs[configFrom]) == null ? void 0 : _a2[property2]) !== void 0) {
        return { configFrom, configValue: axisConfigs[configFrom][property2] };
      }
    }
    return {};
  }
  const axisRules = {
    scale: ({ model, channel }) => model.scaleName(channel),
    format: ({ format: format2 }) => format2,
    // we already calculate this in parse
    formatType: ({ formatType }) => formatType,
    // we already calculate this in parse
    grid: ({ fieldOrDatumDef, axis, scaleType: scaleType2 }) => axis.grid ?? defaultGrid(scaleType2, fieldOrDatumDef),
    gridScale: ({ model, channel }) => gridScale(model, channel),
    labelAlign: ({ axis, labelAngle, orient: orient2, channel }) => axis.labelAlign || defaultLabelAlign(labelAngle, orient2, channel),
    labelAngle: ({ labelAngle }) => labelAngle,
    // we already calculate this in parse
    labelBaseline: ({ axis, labelAngle, orient: orient2, channel }) => axis.labelBaseline || defaultLabelBaseline(labelAngle, orient2, channel),
    labelFlush: ({ axis, fieldOrDatumDef, channel }) => axis.labelFlush ?? defaultLabelFlush(fieldOrDatumDef.type, channel),
    labelOverlap: ({ axis, fieldOrDatumDef, scaleType: scaleType2 }) => axis.labelOverlap ?? defaultLabelOverlap$1(fieldOrDatumDef.type, scaleType2, isFieldDef(fieldOrDatumDef) && !!fieldOrDatumDef.timeUnit, isFieldDef(fieldOrDatumDef) ? fieldOrDatumDef.sort : void 0),
    // we already calculate orient in parse
    orient: ({ orient: orient2 }) => orient2,
    // Need to cast until Vega supports signal
    tickCount: ({ channel, model, axis, fieldOrDatumDef, scaleType: scaleType2 }) => {
      const sizeType = channel === "x" ? "width" : channel === "y" ? "height" : void 0;
      const size = sizeType ? model.getSizeSignalRef(sizeType) : void 0;
      return axis.tickCount ?? defaultTickCount({ fieldOrDatumDef, scaleType: scaleType2, size, values: axis.values });
    },
    tickMinStep: defaultTickMinStep,
    title: ({ axis, model, channel }) => {
      if (axis.title !== void 0) {
        return axis.title;
      }
      const fieldDefTitle = getFieldDefTitle(model, channel);
      if (fieldDefTitle !== void 0) {
        return fieldDefTitle;
      }
      const fieldDef = model.typedFieldDef(channel);
      const channel2 = channel === "x" ? "x2" : "y2";
      const fieldDef2 = model.fieldDef(channel2);
      return mergeTitleFieldDefs(fieldDef ? [toFieldDefBase(fieldDef)] : [], isFieldDef(fieldDef2) ? [toFieldDefBase(fieldDef2)] : []);
    },
    values: ({ axis, fieldOrDatumDef }) => values$1(axis, fieldOrDatumDef),
    zindex: ({ axis, fieldOrDatumDef, mark }) => axis.zindex ?? defaultZindex(mark, fieldOrDatumDef)
  };
  function defaultGrid(scaleType2, fieldDef) {
    return !hasDiscreteDomain(scaleType2) && isFieldDef(fieldDef) && !isBinning(fieldDef == null ? void 0 : fieldDef.bin) && !isBinned(fieldDef == null ? void 0 : fieldDef.bin);
  }
  function gridScale(model, channel) {
    const gridChannel = channel === "x" ? "y" : "x";
    if (model.getScaleComponent(gridChannel)) {
      return model.scaleName(gridChannel);
    }
    return void 0;
  }
  function getLabelAngle(fieldOrDatumDef, axis, channel, styleConfig, axisConfigs) {
    const labelAngle = axis == null ? void 0 : axis.labelAngle;
    if (labelAngle !== void 0) {
      return isSignalRef(labelAngle) ? labelAngle : normalizeAngle(labelAngle);
    } else {
      const { configValue: angle2 } = getAxisConfig("labelAngle", styleConfig, axis == null ? void 0 : axis.style, axisConfigs);
      if (angle2 !== void 0) {
        return normalizeAngle(angle2);
      } else {
        if (channel === X && contains([NOMINAL, ORDINAL], fieldOrDatumDef.type) && !(isFieldDef(fieldOrDatumDef) && fieldOrDatumDef.timeUnit)) {
          return 270;
        }
        return void 0;
      }
    }
  }
  function normalizeAngleExpr(angle2) {
    return `(((${angle2.signal} % 360) + 360) % 360)`;
  }
  function defaultLabelBaseline(angle2, orient2, channel, alwaysIncludeMiddle) {
    if (angle2 !== void 0) {
      if (channel === "x") {
        if (isSignalRef(angle2)) {
          const a2 = normalizeAngleExpr(angle2);
          const orientIsTop = isSignalRef(orient2) ? `(${orient2.signal} === "top")` : orient2 === "top";
          return {
            signal: `(45 < ${a2} && ${a2} < 135) || (225 < ${a2} && ${a2} < 315) ? "middle" :(${a2} <= 45 || 315 <= ${a2}) === ${orientIsTop} ? "bottom" : "top"`
          };
        }
        if (45 < angle2 && angle2 < 135 || 225 < angle2 && angle2 < 315) {
          return "middle";
        }
        if (isSignalRef(orient2)) {
          const op = angle2 <= 45 || 315 <= angle2 ? "===" : "!==";
          return { signal: `${orient2.signal} ${op} "top" ? "bottom" : "top"` };
        }
        return (angle2 <= 45 || 315 <= angle2) === (orient2 === "top") ? "bottom" : "top";
      } else {
        if (isSignalRef(angle2)) {
          const a2 = normalizeAngleExpr(angle2);
          const orientIsLeft = isSignalRef(orient2) ? `(${orient2.signal} === "left")` : orient2 === "left";
          const middle = alwaysIncludeMiddle ? '"middle"' : "null";
          return {
            signal: `${a2} <= 45 || 315 <= ${a2} || (135 <= ${a2} && ${a2} <= 225) ? ${middle} : (45 <= ${a2} && ${a2} <= 135) === ${orientIsLeft} ? "top" : "bottom"`
          };
        }
        if (angle2 <= 45 || 315 <= angle2 || 135 <= angle2 && angle2 <= 225) {
          return alwaysIncludeMiddle ? "middle" : null;
        }
        if (isSignalRef(orient2)) {
          const op = 45 <= angle2 && angle2 <= 135 ? "===" : "!==";
          return { signal: `${orient2.signal} ${op} "left" ? "top" : "bottom"` };
        }
        return (45 <= angle2 && angle2 <= 135) === (orient2 === "left") ? "top" : "bottom";
      }
    }
    return void 0;
  }
  function defaultLabelAlign(angle2, orient2, channel) {
    if (angle2 === void 0) {
      return void 0;
    }
    const isX2 = channel === "x";
    const startAngle = isX2 ? 0 : 90;
    const mainOrient = isX2 ? "bottom" : "left";
    if (isSignalRef(angle2)) {
      const a2 = normalizeAngleExpr(angle2);
      const orientIsMain = isSignalRef(orient2) ? `(${orient2.signal} === "${mainOrient}")` : orient2 === mainOrient;
      return {
        signal: `(${startAngle ? `(${a2} + 90)` : a2} % 180 === 0) ? ${isX2 ? null : '"center"'} :(${startAngle} < ${a2} && ${a2} < ${180 + startAngle}) === ${orientIsMain} ? "left" : "right"`
      };
    }
    if ((angle2 + startAngle) % 180 === 0) {
      return isX2 ? null : "center";
    }
    if (isSignalRef(orient2)) {
      const op = startAngle < angle2 && angle2 < 180 + startAngle ? "===" : "!==";
      const orientIsMain = `${orient2.signal} ${op} "${mainOrient}"`;
      return {
        signal: `${orientIsMain} ? "left" : "right"`
      };
    }
    if ((startAngle < angle2 && angle2 < 180 + startAngle) === (orient2 === mainOrient)) {
      return "left";
    }
    return "right";
  }
  function defaultLabelFlush(type2, channel) {
    if (channel === "x" && contains(["quantitative", "temporal"], type2)) {
      return true;
    }
    return void 0;
  }
  function defaultLabelOverlap$1(type2, scaleType2, hasTimeUnit, sort2) {
    if (hasTimeUnit && !isObject(sort2) || type2 !== "nominal" && type2 !== "ordinal") {
      if (scaleType2 === "log" || scaleType2 === "symlog") {
        return "greedy";
      }
      return true;
    }
    return void 0;
  }
  function defaultOrient(channel) {
    return channel === "x" ? "bottom" : "left";
  }
  function defaultTickCount({ fieldOrDatumDef, scaleType: scaleType2, size, values: vals2 }) {
    var _a2;
    if (!vals2 && !hasDiscreteDomain(scaleType2) && scaleType2 !== "log") {
      if (isFieldDef(fieldOrDatumDef)) {
        if (isBinning(fieldOrDatumDef.bin)) {
          return { signal: `ceil(${size.signal}/10)` };
        }
        if (fieldOrDatumDef.timeUnit && contains(["month", "hours", "day", "quarter"], (_a2 = normalizeTimeUnit(fieldOrDatumDef.timeUnit)) == null ? void 0 : _a2.unit)) {
          return void 0;
        }
      }
      return { signal: `ceil(${size.signal}/40)` };
    }
    return void 0;
  }
  function defaultTickMinStep({ format: format2, fieldOrDatumDef }) {
    if (format2 === "d") {
      return 1;
    }
    if (isFieldDef(fieldOrDatumDef)) {
      const { timeUnit } = fieldOrDatumDef;
      if (timeUnit) {
        const signal = durationExpr(timeUnit);
        if (signal) {
          return { signal };
        }
      }
    }
    return void 0;
  }
  function getFieldDefTitle(model, channel) {
    const channel2 = channel === "x" ? "x2" : "y2";
    const fieldDef = model.fieldDef(channel);
    const fieldDef2 = model.fieldDef(channel2);
    const title1 = fieldDef ? fieldDef.title : void 0;
    const title2 = fieldDef2 ? fieldDef2.title : void 0;
    if (title1 && title2) {
      return mergeTitle(title1, title2);
    } else if (title1) {
      return title1;
    } else if (title2) {
      return title2;
    } else if (title1 !== void 0) {
      return title1;
    } else if (title2 !== void 0) {
      return title2;
    }
    return void 0;
  }
  function values$1(axis, fieldOrDatumDef) {
    const vals2 = axis.values;
    if (isArray(vals2)) {
      return valueArray(fieldOrDatumDef, vals2);
    } else if (isSignalRef(vals2)) {
      return vals2;
    }
    return void 0;
  }
  function defaultZindex(mark, fieldDef) {
    if (mark === "rect" && isDiscrete(fieldDef)) {
      return 1;
    }
    return 0;
  }
  class CalculateNode extends DataFlowNode {
    clone() {
      return new CalculateNode(null, duplicate(this.transform));
    }
    constructor(parent, transform2) {
      super(parent);
      this.transform = transform2;
      this._dependentFields = getDependentFields(this.transform.calculate);
    }
    static parseAllForSortIndex(parent, model) {
      model.forEachFieldDef((fieldDef, channel) => {
        if (!isScaleFieldDef(fieldDef)) {
          return;
        }
        if (isSortArray(fieldDef.sort)) {
          const { field: field2, timeUnit } = fieldDef;
          const sort2 = fieldDef.sort;
          const calculate = sort2.map((sortValue, i) => {
            return `${fieldFilterExpression({ field: field2, timeUnit, equal: sortValue })} ? ${i} : `;
          }).join("") + sort2.length;
          parent = new CalculateNode(parent, {
            calculate,
            as: sortArrayIndexField(fieldDef, channel, { forAs: true })
          });
        }
      });
      return parent;
    }
    producedFields() {
      return /* @__PURE__ */ new Set([this.transform.as]);
    }
    dependentFields() {
      return this._dependentFields;
    }
    assemble() {
      return {
        type: "formula",
        expr: this.transform.calculate,
        as: this.transform.as
      };
    }
    hash() {
      return `Calculate ${hash(this.transform)}`;
    }
  }
  function sortArrayIndexField(fieldDef, channel, opt) {
    return vgField(fieldDef, { prefix: channel, suffix: "sort_index", ...opt });
  }
  function getHeaderChannel(channel, orient2) {
    if (contains(["top", "bottom"], orient2)) {
      return "column";
    } else if (contains(["left", "right"], orient2)) {
      return "row";
    }
    return channel === "row" ? "row" : "column";
  }
  function getHeaderProperty(prop, header, config, channel) {
    const headerSpecificConfig = channel === "row" ? config.headerRow : channel === "column" ? config.headerColumn : config.headerFacet;
    return getFirstDefined((header || {})[prop], headerSpecificConfig[prop], config.header[prop]);
  }
  function getHeaderProperties(properties, header, config, channel) {
    const props = {};
    for (const prop of properties) {
      const value2 = getHeaderProperty(prop, header || {}, config, channel);
      if (value2 !== void 0) {
        props[prop] = value2;
      }
    }
    return props;
  }
  const HEADER_CHANNELS = ["row", "column"];
  const HEADER_TYPES = ["header", "footer"];
  function assembleTitleGroup(model, channel) {
    const title2 = model.component.layoutHeaders[channel].title;
    const config = model.config ? model.config : void 0;
    const facetFieldDef = model.component.layoutHeaders[channel].facetFieldDef ? model.component.layoutHeaders[channel].facetFieldDef : void 0;
    const { titleAnchor, titleAngle: ta, titleOrient } = getHeaderProperties(["titleAnchor", "titleAngle", "titleOrient"], facetFieldDef.header, config, channel);
    const headerChannel = getHeaderChannel(channel, titleOrient);
    const titleAngle = normalizeAngle(ta);
    return {
      name: `${channel}-title`,
      type: "group",
      role: `${headerChannel}-title`,
      title: {
        text: title2,
        ...channel === "row" ? { orient: "left" } : {},
        style: "guide-title",
        ...defaultHeaderGuideBaseline(titleAngle, headerChannel),
        ...defaultHeaderGuideAlign(headerChannel, titleAngle, titleAnchor),
        ...assembleHeaderProperties(config, facetFieldDef, channel, HEADER_TITLE_PROPERTIES, HEADER_TITLE_PROPERTIES_MAP)
      }
    };
  }
  function defaultHeaderGuideAlign(headerChannel, angle2, anchor = "middle") {
    switch (anchor) {
      case "start":
        return { align: "left" };
      case "end":
        return { align: "right" };
    }
    const align2 = defaultLabelAlign(angle2, headerChannel === "row" ? "left" : "top", headerChannel === "row" ? "y" : "x");
    return align2 ? { align: align2 } : {};
  }
  function defaultHeaderGuideBaseline(angle2, channel) {
    const baseline2 = defaultLabelBaseline(angle2, channel === "row" ? "left" : "top", channel === "row" ? "y" : "x", true);
    return baseline2 ? { baseline: baseline2 } : {};
  }
  function assembleHeaderGroups(model, channel) {
    const layoutHeader = model.component.layoutHeaders[channel];
    const groups = [];
    for (const headerType of HEADER_TYPES) {
      if (layoutHeader[headerType]) {
        for (const headerComponent of layoutHeader[headerType]) {
          const group2 = assembleHeaderGroup(model, channel, headerType, layoutHeader, headerComponent);
          if (group2 != null) {
            groups.push(group2);
          }
        }
      }
    }
    return groups;
  }
  function getSort$1(facetFieldDef, channel) {
    const { sort: sort2 } = facetFieldDef;
    if (isSortField(sort2)) {
      return {
        field: vgField(sort2, { expr: "datum" }),
        order: sort2.order ?? "ascending"
      };
    } else if (isArray(sort2)) {
      return {
        field: sortArrayIndexField(facetFieldDef, channel, { expr: "datum" }),
        order: "ascending"
      };
    } else {
      return {
        field: vgField(facetFieldDef, { expr: "datum" }),
        order: sort2 ?? "ascending"
      };
    }
  }
  function assembleLabelTitle(facetFieldDef, channel, config) {
    const { format: format2, formatType, labelAngle, labelAnchor, labelOrient, labelExpr } = getHeaderProperties(["format", "formatType", "labelAngle", "labelAnchor", "labelOrient", "labelExpr"], facetFieldDef.header, config, channel);
    const titleTextExpr = formatSignalRef({
      fieldOrDatumDef: facetFieldDef,
      format: format2,
      formatType,
      expr: "parent",
      config
    }).signal;
    const headerChannel = getHeaderChannel(channel, labelOrient);
    return {
      text: {
        signal: labelExpr ? replaceAll(replaceAll(labelExpr, "datum.label", titleTextExpr), "datum.value", vgField(facetFieldDef, { expr: "parent" })) : titleTextExpr
      },
      ...channel === "row" ? { orient: "left" } : {},
      style: "guide-label",
      frame: "group",
      ...defaultHeaderGuideBaseline(labelAngle, headerChannel),
      ...defaultHeaderGuideAlign(headerChannel, labelAngle, labelAnchor),
      ...assembleHeaderProperties(config, facetFieldDef, channel, HEADER_LABEL_PROPERTIES, HEADER_LABEL_PROPERTIES_MAP)
    };
  }
  function assembleHeaderGroup(model, channel, headerType, layoutHeader, headerComponent) {
    if (headerComponent) {
      let title2 = null;
      const { facetFieldDef } = layoutHeader;
      const config = model.config ? model.config : void 0;
      if (facetFieldDef && headerComponent.labels) {
        const { labelOrient } = getHeaderProperties(["labelOrient"], facetFieldDef.header, config, channel);
        if (channel === "row" && !contains(["top", "bottom"], labelOrient) || channel === "column" && !contains(["left", "right"], labelOrient)) {
          title2 = assembleLabelTitle(facetFieldDef, channel, config);
        }
      }
      const isFacetWithoutRowCol = isFacetModel(model) && !isFacetMapping(model.facet);
      const axes = headerComponent.axes;
      const hasAxes = (axes == null ? void 0 : axes.length) > 0;
      if (title2 || hasAxes) {
        const sizeChannel = channel === "row" ? "height" : "width";
        return {
          name: model.getName(`${channel}_${headerType}`),
          type: "group",
          role: `${channel}-${headerType}`,
          ...layoutHeader.facetFieldDef ? {
            from: { data: model.getName(`${channel}_domain`) },
            sort: getSort$1(facetFieldDef, channel)
          } : {},
          ...hasAxes && isFacetWithoutRowCol ? {
            from: { data: model.getName(`facet_domain_${channel}`) }
          } : {},
          ...title2 ? { title: title2 } : {},
          ...headerComponent.sizeSignal ? {
            encode: {
              update: {
                [sizeChannel]: headerComponent.sizeSignal
              }
            }
          } : {},
          ...hasAxes ? { axes } : {}
        };
      }
    }
    return null;
  }
  const LAYOUT_TITLE_BAND = {
    column: {
      start: 0,
      end: 1
    },
    row: {
      start: 1,
      end: 0
    }
  };
  function getLayoutTitleBand(titleAnchor, headerChannel) {
    return LAYOUT_TITLE_BAND[headerChannel][titleAnchor];
  }
  function assembleLayoutTitleBand(headerComponentIndex, config) {
    const titleBand = {};
    for (const channel of FACET_CHANNELS) {
      const headerComponent = headerComponentIndex[channel];
      if (headerComponent == null ? void 0 : headerComponent.facetFieldDef) {
        const { titleAnchor, titleOrient } = getHeaderProperties(["titleAnchor", "titleOrient"], headerComponent.facetFieldDef.header, config, channel);
        const headerChannel = getHeaderChannel(channel, titleOrient);
        const band2 = getLayoutTitleBand(titleAnchor, headerChannel);
        if (band2 !== void 0) {
          titleBand[headerChannel] = band2;
        }
      }
    }
    return isEmpty(titleBand) ? void 0 : titleBand;
  }
  function assembleHeaderProperties(config, facetFieldDef, channel, properties, propertiesMap) {
    const props = {};
    for (const prop of properties) {
      if (!propertiesMap[prop]) {
        continue;
      }
      const value2 = getHeaderProperty(prop, facetFieldDef == null ? void 0 : facetFieldDef.header, config, channel);
      if (value2 !== void 0) {
        props[propertiesMap[prop]] = value2;
      }
    }
    return props;
  }
  function assembleLayoutSignals(model) {
    return [
      ...sizeSignals(model, "width"),
      ...sizeSignals(model, "height"),
      ...sizeSignals(model, "childWidth"),
      ...sizeSignals(model, "childHeight")
    ];
  }
  function sizeSignals(model, sizeType) {
    const channel = sizeType === "width" ? "x" : "y";
    const size = model.component.layoutSize.get(sizeType);
    if (!size || size === "merged") {
      return [];
    }
    const name = model.getSizeSignalRef(sizeType).signal;
    if (size === "step") {
      const scaleComponent = model.getScaleComponent(channel);
      if (scaleComponent) {
        const type2 = scaleComponent.get("type");
        const range2 = scaleComponent.get("range");
        if (hasDiscreteDomain(type2) && isVgRangeStep(range2)) {
          const scaleName = model.scaleName(channel);
          if (isFacetModel(model.parent)) {
            const parentResolve = model.parent.component.resolve;
            if (parentResolve.scale[channel] === "independent") {
              return [stepSignal(scaleName, range2)];
            }
          }
          return [
            stepSignal(scaleName, range2),
            {
              name,
              update: sizeExpr(scaleName, scaleComponent, `domain('${scaleName}').length`)
            }
          ];
        }
      }
      throw new Error("layout size is step although width/height is not step.");
    } else if (size == "container") {
      const isWidth = name.endsWith("width");
      const expr2 = isWidth ? "containerSize()[0]" : "containerSize()[1]";
      const defaultValue = getViewConfigContinuousSize(model.config.view, isWidth ? "width" : "height");
      const safeExpr = `isFinite(${expr2}) ? ${expr2} : ${defaultValue}`;
      return [{ name, init: safeExpr, on: [{ update: safeExpr, events: "window:resize" }] }];
    } else {
      return [
        {
          name,
          value: size
        }
      ];
    }
  }
  function stepSignal(scaleName, range2) {
    const name = `${scaleName}_step`;
    if (isSignalRef(range2.step)) {
      return { name, update: range2.step.signal };
    } else {
      return { name, value: range2.step };
    }
  }
  function sizeExpr(scaleName, scaleComponent, cardinality) {
    const type2 = scaleComponent.get("type");
    const padding2 = scaleComponent.get("padding");
    const paddingOuter2 = getFirstDefined(scaleComponent.get("paddingOuter"), padding2);
    let paddingInner2 = scaleComponent.get("paddingInner");
    paddingInner2 = type2 === "band" ? (
      // only band has real paddingInner
      paddingInner2 !== void 0 ? paddingInner2 : padding2
    ) : (
      // For point, as calculated in https://github.com/vega/vega-scale/blob/master/src/band.js#L128,
      // it's equivalent to have paddingInner = 1 since there is only n-1 steps between n points.
      1
    );
    return `bandspace(${cardinality}, ${signalOrStringValue(paddingInner2)}, ${signalOrStringValue(paddingOuter2)}) * ${scaleName}_step`;
  }
  function getSizeTypeFromLayoutSizeType(layoutSizeType) {
    return layoutSizeType === "childWidth" ? "width" : layoutSizeType === "childHeight" ? "height" : layoutSizeType;
  }
  function guideEncodeEntry(encoding, model) {
    return keys(encoding).reduce((encode2, channel) => {
      return {
        ...encode2,
        ...wrapCondition({
          model,
          channelDef: encoding[channel],
          vgChannel: channel,
          mainRefFn: (def2) => signalOrValueRef(def2.value),
          invalidValueRef: void 0
          // guide encoding won't show invalid values for the scale
        })
      };
    }, {});
  }
  function defaultScaleResolve(channel, model) {
    if (isFacetModel(model)) {
      return channel === "theta" ? "independent" : "shared";
    } else if (isLayerModel(model)) {
      return "shared";
    } else if (isConcatModel(model)) {
      return isXorY(channel) || channel === "theta" || channel === "radius" ? "independent" : "shared";
    }
    throw new Error("invalid model type for resolve");
  }
  function parseGuideResolve(resolve2, channel) {
    const channelScaleResolve = resolve2.scale[channel];
    const guide = isXorY(channel) ? "axis" : "legend";
    if (channelScaleResolve === "independent") {
      if (resolve2[guide][channel] === "shared") {
        warn(independentScaleMeansIndependentGuide(channel));
      }
      return "independent";
    }
    return resolve2[guide][channel] || "shared";
  }
  const LEGEND_COMPONENT_PROPERTY_INDEX = {
    ...COMMON_LEGEND_PROPERTY_INDEX,
    disable: 1,
    labelExpr: 1,
    selections: 1,
    // channel scales
    opacity: 1,
    shape: 1,
    stroke: 1,
    fill: 1,
    size: 1,
    strokeWidth: 1,
    strokeDash: 1,
    // encode
    encode: 1
  };
  const LEGEND_COMPONENT_PROPERTIES = keys(LEGEND_COMPONENT_PROPERTY_INDEX);
  class LegendComponent extends Split {
  }
  const legendEncodeRules = {
    symbols,
    gradient,
    labels: labels$1,
    entries
  };
  function symbols(symbolsSpec, { fieldOrDatumDef, model, channel, legendCmpt, legendType: legendType2 }) {
    if (legendType2 !== "symbol") {
      return void 0;
    }
    const { markDef, encoding, config, mark } = model;
    const filled = markDef.filled && mark !== "trail";
    let out = {
      ...applyMarkConfig({}, model, FILL_STROKE_CONFIG),
      ...color(model, { filled })
    };
    const symbolOpacity = legendCmpt.get("symbolOpacity") ?? config.legend.symbolOpacity;
    const symbolFillColor = legendCmpt.get("symbolFillColor") ?? config.legend.symbolFillColor;
    const symbolStrokeColor = legendCmpt.get("symbolStrokeColor") ?? config.legend.symbolStrokeColor;
    const opacity2 = symbolOpacity === void 0 ? getMaxValue(encoding.opacity) ?? markDef.opacity : void 0;
    if (out.fill) {
      if (channel === "fill" || filled && channel === COLOR) {
        delete out.fill;
      } else if (hasProperty(out.fill, "field")) {
        if (symbolFillColor) {
          delete out.fill;
        } else {
          out.fill = signalOrValueRef(config.legend.symbolBaseFillColor ?? "black");
          out.fillOpacity = signalOrValueRef(opacity2 ?? 1);
        }
      } else if (isArray(out.fill)) {
        const fill2 = getFirstConditionValue(encoding.fill ?? encoding.color) ?? markDef.fill ?? (filled && markDef.color);
        if (fill2) {
          out.fill = signalOrValueRef(fill2);
        }
      }
    }
    if (out.stroke) {
      if (channel === "stroke" || !filled && channel === COLOR) {
        delete out.stroke;
      } else if (hasProperty(out.stroke, "field") || symbolStrokeColor) {
        delete out.stroke;
      } else if (isArray(out.stroke)) {
        const stroke2 = getFirstDefined(getFirstConditionValue(encoding.stroke || encoding.color), markDef.stroke, filled ? markDef.color : void 0);
        if (stroke2) {
          out.stroke = { value: stroke2 };
        }
      }
    }
    if (channel !== OPACITY) {
      const condition = isFieldDef(fieldOrDatumDef) && selectedCondition(model, legendCmpt, fieldOrDatumDef);
      if (condition) {
        out.opacity = [
          { test: condition, ...signalOrValueRef(opacity2 ?? 1) },
          signalOrValueRef(config.legend.unselectedOpacity)
        ];
      } else if (opacity2) {
        out.opacity = signalOrValueRef(opacity2);
      }
    }
    out = { ...out, ...symbolsSpec };
    return isEmpty(out) ? void 0 : out;
  }
  function gradient(gradientSpec, { model, legendType: legendType2, legendCmpt }) {
    if (legendType2 !== "gradient") {
      return void 0;
    }
    const { config, markDef, encoding } = model;
    let out = {};
    const gradientOpacity = legendCmpt.get("gradientOpacity") ?? config.legend.gradientOpacity;
    const opacity2 = gradientOpacity === void 0 ? getMaxValue(encoding.opacity) || markDef.opacity : void 0;
    if (opacity2) {
      out.opacity = signalOrValueRef(opacity2);
    }
    out = { ...out, ...gradientSpec };
    return isEmpty(out) ? void 0 : out;
  }
  function labels$1(specifiedlabelsSpec, { fieldOrDatumDef, model, channel, legendCmpt }) {
    const legend = model.legend(channel) || {};
    const config = model.config;
    const condition = isFieldDef(fieldOrDatumDef) ? selectedCondition(model, legendCmpt, fieldOrDatumDef) : void 0;
    const opacity2 = condition ? [{ test: condition, value: 1 }, { value: config.legend.unselectedOpacity }] : void 0;
    const { format: format2, formatType } = legend;
    let text2 = void 0;
    if (isCustomFormatType(formatType)) {
      text2 = formatCustomType({
        fieldOrDatumDef,
        field: "datum.value",
        format: format2,
        formatType,
        config
      });
    } else if (format2 === void 0 && formatType === void 0 && config.customFormatTypes) {
      if (fieldOrDatumDef.type === "quantitative" && config.numberFormatType) {
        text2 = formatCustomType({
          fieldOrDatumDef,
          field: "datum.value",
          format: config.numberFormat,
          formatType: config.numberFormatType,
          config
        });
      } else if (fieldOrDatumDef.type === "temporal" && config.timeFormatType && isFieldDef(fieldOrDatumDef) && fieldOrDatumDef.timeUnit === void 0) {
        text2 = formatCustomType({
          fieldOrDatumDef,
          field: "datum.value",
          format: config.timeFormat,
          formatType: config.timeFormatType,
          config
        });
      }
    }
    const labelsSpec = {
      ...opacity2 ? { opacity: opacity2 } : {},
      ...text2 ? { text: text2 } : {},
      ...specifiedlabelsSpec
    };
    return isEmpty(labelsSpec) ? void 0 : labelsSpec;
  }
  function entries(entriesSpec, { legendCmpt }) {
    const selections = legendCmpt.get("selections");
    return (selections == null ? void 0 : selections.length) ? { ...entriesSpec, fill: { value: "transparent" } } : entriesSpec;
  }
  function getMaxValue(channelDef) {
    return getConditionValue(channelDef, (v, conditionalDef) => Math.max(v, conditionalDef.value));
  }
  function getFirstConditionValue(channelDef) {
    return getConditionValue(channelDef, (v, conditionalDef) => {
      return getFirstDefined(v, conditionalDef.value);
    });
  }
  function getConditionValue(channelDef, reducer) {
    if (hasConditionalValueDef(channelDef)) {
      return array$5(channelDef.condition).reduce(reducer, channelDef.value);
    } else if (isValueDef(channelDef)) {
      return channelDef.value;
    }
    return void 0;
  }
  function selectedCondition(model, legendCmpt, fieldDef) {
    const selections = legendCmpt.get("selections");
    if (!(selections == null ? void 0 : selections.length))
      return void 0;
    const field2 = $(fieldDef.field);
    return selections.map((name) => {
      const store = $(varName(name) + STORE);
      return `(!length(data(${store})) || (${name}[${field2}] && indexof(${name}[${field2}], datum.value) >= 0))`;
    }).join(" || ");
  }
  const legendRules = {
    direction: ({ direction }) => direction,
    format: ({ fieldOrDatumDef, legend, config }) => {
      const { format: format2, formatType } = legend;
      return guideFormat(fieldOrDatumDef, fieldOrDatumDef.type, format2, formatType, config, false);
    },
    formatType: ({ legend, fieldOrDatumDef, scaleType: scaleType2 }) => {
      const { formatType } = legend;
      return guideFormatType(formatType, fieldOrDatumDef, scaleType2);
    },
    gradientLength: (params2) => {
      const { legend, legendConfig } = params2;
      return legend.gradientLength ?? legendConfig.gradientLength ?? defaultGradientLength(params2);
    },
    labelOverlap: ({ legend, legendConfig, scaleType: scaleType2 }) => legend.labelOverlap ?? legendConfig.labelOverlap ?? defaultLabelOverlap(scaleType2),
    symbolType: ({ legend, markDef, channel, encoding }) => legend.symbolType ?? defaultSymbolType(markDef.type, channel, encoding.shape, markDef.shape),
    title: ({ fieldOrDatumDef, config }) => title(fieldOrDatumDef, config, { allowDisabling: true }),
    type: ({ legendType: legendType2, scaleType: scaleType2, channel }) => {
      if (isColorChannel(channel) && isContinuousToContinuous(scaleType2)) {
        if (legendType2 === "gradient") {
          return void 0;
        }
      } else if (legendType2 === "symbol") {
        return void 0;
      }
      return legendType2;
    },
    // depended by other property, let's define upfront
    values: ({ fieldOrDatumDef, legend }) => values(legend, fieldOrDatumDef)
  };
  function values(legend, fieldOrDatumDef) {
    const vals2 = legend.values;
    if (isArray(vals2)) {
      return valueArray(fieldOrDatumDef, vals2);
    } else if (isSignalRef(vals2)) {
      return vals2;
    }
    return void 0;
  }
  function defaultSymbolType(mark, channel, shapeChannelDef, markShape) {
    if (channel !== "shape") {
      const shape2 = getFirstConditionValue(shapeChannelDef) ?? markShape;
      if (shape2) {
        return shape2;
      }
    }
    switch (mark) {
      case "bar":
      case "rect":
      case "image":
      case "square":
        return "square";
      case "line":
      case "trail":
      case "rule":
        return "stroke";
      case "arc":
      case "point":
      case "circle":
      case "tick":
      case "geoshape":
      case "area":
      case "text":
        return "circle";
    }
  }
  function getLegendType(params2) {
    const { legend } = params2;
    return getFirstDefined(legend.type, defaultType$1(params2));
  }
  function defaultType$1({ channel, timeUnit, scaleType: scaleType2 }) {
    if (isColorChannel(channel)) {
      if (contains(["quarter", "month", "day"], timeUnit)) {
        return "symbol";
      }
      if (isContinuousToContinuous(scaleType2)) {
        return "gradient";
      }
    }
    return "symbol";
  }
  function getDirection({ legendConfig, legendType: legendType2, orient: orient2, legend }) {
    return legend.direction ?? legendConfig[legendType2 ? "gradientDirection" : "symbolDirection"] ?? defaultDirection(orient2, legendType2);
  }
  function defaultDirection(orient2, legendType2) {
    switch (orient2) {
      case "top":
      case "bottom":
        return "horizontal";
      case "left":
      case "right":
      case "none":
      case void 0:
        return void 0;
      default:
        return legendType2 === "gradient" ? "horizontal" : void 0;
    }
  }
  function defaultGradientLength({ legendConfig, model, direction, orient: orient2, scaleType: scaleType2 }) {
    const { gradientHorizontalMaxLength, gradientHorizontalMinLength, gradientVerticalMaxLength, gradientVerticalMinLength } = legendConfig;
    if (isContinuousToContinuous(scaleType2)) {
      if (direction === "horizontal") {
        if (orient2 === "top" || orient2 === "bottom") {
          return gradientLengthSignal(model, "width", gradientHorizontalMinLength, gradientHorizontalMaxLength);
        } else {
          return gradientHorizontalMinLength;
        }
      } else {
        return gradientLengthSignal(model, "height", gradientVerticalMinLength, gradientVerticalMaxLength);
      }
    }
    return void 0;
  }
  function gradientLengthSignal(model, sizeType, min2, max2) {
    const sizeSignal = model.getSizeSignalRef(sizeType).signal;
    return { signal: `clamp(${sizeSignal}, ${min2}, ${max2})` };
  }
  function defaultLabelOverlap(scaleType2) {
    if (contains(["quantile", "threshold", "log", "symlog"], scaleType2)) {
      return "greedy";
    }
    return void 0;
  }
  function parseLegend(model) {
    const legendComponent = isUnitModel(model) ? parseUnitLegend(model) : parseNonUnitLegend(model);
    model.component.legends = legendComponent;
    return legendComponent;
  }
  function parseUnitLegend(model) {
    const { encoding } = model;
    const legendComponent = {};
    for (const channel of [COLOR, ...LEGEND_SCALE_CHANNELS]) {
      const def2 = getFieldOrDatumDef(encoding[channel]);
      if (!def2 || !model.getScaleComponent(channel)) {
        continue;
      }
      if (channel === SHAPE && isFieldDef(def2) && def2.type === GEOJSON) {
        continue;
      }
      legendComponent[channel] = parseLegendForChannel(model, channel);
    }
    return legendComponent;
  }
  function getLegendDefWithScale(model, channel) {
    const scale2 = model.scaleName(channel);
    if (model.mark === "trail") {
      if (channel === "color") {
        return { stroke: scale2 };
      } else if (channel === "size") {
        return { strokeWidth: scale2 };
      }
    }
    if (channel === "color") {
      return model.markDef.filled ? { fill: scale2 } : { stroke: scale2 };
    }
    return { [channel]: scale2 };
  }
  function isExplicit$1(value2, property2, legend, fieldDef) {
    switch (property2) {
      case "disable":
        return legend !== void 0;
      case "values":
        return !!(legend == null ? void 0 : legend.values);
      case "title":
        if (property2 === "title" && value2 === (fieldDef == null ? void 0 : fieldDef.title)) {
          return true;
        }
    }
    return value2 === (legend || {})[property2];
  }
  function parseLegendForChannel(model, channel) {
    var _a2;
    let legend = model.legend(channel);
    const { markDef, encoding, config } = model;
    const legendConfig = config.legend;
    const legendCmpt = new LegendComponent({}, getLegendDefWithScale(model, channel));
    parseInteractiveLegend(model, channel, legendCmpt);
    const disable = legend !== void 0 ? !legend : legendConfig.disable;
    legendCmpt.set("disable", disable, legend !== void 0);
    if (disable) {
      return legendCmpt;
    }
    legend = legend || {};
    const scaleType2 = model.getScaleComponent(channel).get("type");
    const fieldOrDatumDef = getFieldOrDatumDef(encoding[channel]);
    const timeUnit = isFieldDef(fieldOrDatumDef) ? (_a2 = normalizeTimeUnit(fieldOrDatumDef.timeUnit)) == null ? void 0 : _a2.unit : void 0;
    const orient2 = legend.orient || config.legend.orient || "right";
    const legendType2 = getLegendType({ legend, channel, timeUnit, scaleType: scaleType2 });
    const direction = getDirection({ legend, legendType: legendType2, orient: orient2, legendConfig });
    const ruleParams = {
      legend,
      channel,
      model,
      markDef,
      encoding,
      fieldOrDatumDef,
      legendConfig,
      config,
      scaleType: scaleType2,
      orient: orient2,
      legendType: legendType2,
      direction
    };
    for (const property2 of LEGEND_COMPONENT_PROPERTIES) {
      if (legendType2 === "gradient" && property2.startsWith("symbol") || legendType2 === "symbol" && property2.startsWith("gradient")) {
        continue;
      }
      const value2 = property2 in legendRules ? legendRules[property2](ruleParams) : legend[property2];
      if (value2 !== void 0) {
        const explicit = isExplicit$1(value2, property2, legend, model.fieldDef(channel));
        if (explicit || config.legend[property2] === void 0) {
          legendCmpt.set(property2, value2, explicit);
        }
      }
    }
    const legendEncoding = (legend == null ? void 0 : legend.encoding) ?? {};
    const selections = legendCmpt.get("selections");
    const legendEncode = {};
    const legendEncodeParams = { fieldOrDatumDef, model, channel, legendCmpt, legendType: legendType2 };
    for (const part of ["labels", "legend", "title", "symbols", "gradient", "entries"]) {
      const legendEncodingPart = guideEncodeEntry(legendEncoding[part] ?? {}, model);
      const value2 = part in legendEncodeRules ? legendEncodeRules[part](legendEncodingPart, legendEncodeParams) : legendEncodingPart;
      if (value2 !== void 0 && !isEmpty(value2)) {
        legendEncode[part] = {
          ...(selections == null ? void 0 : selections.length) && isFieldDef(fieldOrDatumDef) ? { name: `${varName(fieldOrDatumDef.field)}_legend_${part}` } : {},
          ...(selections == null ? void 0 : selections.length) ? { interactive: !!selections } : {},
          update: value2
        };
      }
    }
    if (!isEmpty(legendEncode)) {
      legendCmpt.set("encode", legendEncode, !!(legend == null ? void 0 : legend.encoding));
    }
    return legendCmpt;
  }
  function parseNonUnitLegend(model) {
    const { legends, resolve: resolve2 } = model.component;
    for (const child of model.children) {
      parseLegend(child);
      for (const channel of keys(child.component.legends)) {
        resolve2.legend[channel] = parseGuideResolve(model.component.resolve, channel);
        if (resolve2.legend[channel] === "shared") {
          legends[channel] = mergeLegendComponent(legends[channel], child.component.legends[channel]);
          if (!legends[channel]) {
            resolve2.legend[channel] = "independent";
            delete legends[channel];
          }
        }
      }
    }
    for (const channel of keys(legends)) {
      for (const child of model.children) {
        if (!child.component.legends[channel]) {
          continue;
        }
        if (resolve2.legend[channel] === "shared") {
          delete child.component.legends[channel];
        }
      }
    }
    return legends;
  }
  function mergeLegendComponent(mergedLegend, childLegend) {
    var _a2, _b2, _c2, _d2;
    if (!mergedLegend) {
      return childLegend.clone();
    }
    const mergedOrient = mergedLegend.getWithExplicit("orient");
    const childOrient = childLegend.getWithExplicit("orient");
    if (mergedOrient.explicit && childOrient.explicit && mergedOrient.value !== childOrient.value) {
      return void 0;
    }
    let typeMerged = false;
    for (const prop of LEGEND_COMPONENT_PROPERTIES) {
      const mergedValueWithExplicit = mergeValuesWithExplicit(
        mergedLegend.getWithExplicit(prop),
        childLegend.getWithExplicit(prop),
        prop,
        "legend",
        // Tie breaker function
        (v1, v2) => {
          switch (prop) {
            case "symbolType":
              return mergeSymbolType(v1, v2);
            case "title":
              return mergeTitleComponent(v1, v2);
            case "type":
              typeMerged = true;
              return makeImplicit("symbol");
          }
          return defaultTieBreaker(v1, v2, prop, "legend");
        }
      );
      mergedLegend.setWithExplicit(prop, mergedValueWithExplicit);
    }
    if (typeMerged) {
      if ((_b2 = (_a2 = mergedLegend.implicit) == null ? void 0 : _a2.encode) == null ? void 0 : _b2.gradient) {
        deleteNestedProperty(mergedLegend.implicit, ["encode", "gradient"]);
      }
      if ((_d2 = (_c2 = mergedLegend.explicit) == null ? void 0 : _c2.encode) == null ? void 0 : _d2.gradient) {
        deleteNestedProperty(mergedLegend.explicit, ["encode", "gradient"]);
      }
    }
    return mergedLegend;
  }
  function mergeSymbolType(st1, st2) {
    if (st2.value === "circle") {
      return st2;
    }
    return st1;
  }
  function setLegendEncode(legend, part, vgProp, vgRef) {
    var _a2, _b2;
    legend.encode ?? (legend.encode = {});
    (_a2 = legend.encode)[part] ?? (_a2[part] = {});
    (_b2 = legend.encode[part]).update ?? (_b2.update = {});
    legend.encode[part].update[vgProp] = vgRef;
  }
  function assembleLegends(model) {
    const legendComponentIndex = model.component.legends;
    const legendByDomain = {};
    for (const channel of keys(legendComponentIndex)) {
      const scaleComponent = model.getScaleComponent(channel);
      const domainHash = stringify$1(scaleComponent.get("domains"));
      if (legendByDomain[domainHash]) {
        for (const mergedLegendComponent of legendByDomain[domainHash]) {
          const merged = mergeLegendComponent(mergedLegendComponent, legendComponentIndex[channel]);
          if (!merged) {
            legendByDomain[domainHash].push(legendComponentIndex[channel]);
          }
        }
      } else {
        legendByDomain[domainHash] = [legendComponentIndex[channel].clone()];
      }
    }
    const legends = vals(legendByDomain).flat().map((l) => assembleLegend(l, model.config)).filter((l) => l !== void 0);
    return legends;
  }
  function assembleLegend(legendCmpt, config) {
    var _a2, _b2, _c2;
    const { disable, labelExpr, selections, ...legend } = legendCmpt.combine();
    if (disable) {
      return void 0;
    }
    if (config.aria === false && legend.aria == void 0) {
      legend.aria = false;
    }
    if ((_a2 = legend.encode) == null ? void 0 : _a2.symbols) {
      const out = legend.encode.symbols.update;
      if (out.fill && out.fill["value"] !== "transparent" && !out.stroke && !legend.stroke) {
        out.stroke = { value: "transparent" };
      }
      for (const property2 of LEGEND_SCALE_CHANNELS) {
        if (legend[property2]) {
          delete out[property2];
        }
      }
    }
    if (!legend.title) {
      delete legend.title;
    }
    if (labelExpr !== void 0) {
      let expr2 = labelExpr;
      if (((_c2 = (_b2 = legend.encode) == null ? void 0 : _b2.labels) == null ? void 0 : _c2.update) && isSignalRef(legend.encode.labels.update.text)) {
        expr2 = replaceAll(labelExpr, "datum.label", legend.encode.labels.update.text.signal);
      }
      setLegendEncode(legend, "labels", "text", { signal: expr2 });
    }
    return legend;
  }
  function assembleProjections(model) {
    if (isLayerModel(model) || isConcatModel(model)) {
      return assembleProjectionsForModelAndChildren(model);
    } else {
      return assembleProjectionForModel(model);
    }
  }
  function assembleProjectionsForModelAndChildren(model) {
    return model.children.reduce((projections2, child) => {
      return projections2.concat(child.assembleProjections());
    }, assembleProjectionForModel(model));
  }
  function assembleProjectionForModel(model) {
    const component = model.component.projection;
    if (!component || component.merged) {
      return [];
    }
    const projection2 = component.combine();
    const { name } = projection2;
    if (!component.data) {
      return [
        {
          name,
          // translate to center by default
          translate: { signal: "[width / 2, height / 2]" },
          // parameters, overwrite default translate if specified
          ...projection2
        }
      ];
    } else {
      const size = {
        signal: `[${component.size.map((ref2) => ref2.signal).join(", ")}]`
      };
      const fits = component.data.reduce((sources, data2) => {
        const source2 = isSignalRef(data2) ? data2.signal : `data('${model.lookupDataSource(data2)}')`;
        if (!contains(sources, source2)) {
          sources.push(source2);
        }
        return sources;
      }, []);
      if (fits.length <= 0) {
        throw new Error("Projection's fit didn't find any data sources");
      }
      return [
        {
          name,
          size,
          fit: {
            signal: fits.length > 1 ? `[${fits.join(", ")}]` : fits[0]
          },
          ...projection2
        }
      ];
    }
  }
  const PROJECTION_PROPERTIES = [
    "type",
    "clipAngle",
    "clipExtent",
    "center",
    "rotate",
    "precision",
    "reflectX",
    "reflectY",
    "coefficient",
    "distance",
    "fraction",
    "lobes",
    "parallel",
    "radius",
    "ratio",
    "spacing",
    "tilt"
  ];
  class ProjectionComponent extends Split {
    constructor(name, specifiedProjection, size, data2) {
      super(
        { ...specifiedProjection },
        // all explicit properties of projection
        { name }
        // name as initial implicit property
      );
      this.specifiedProjection = specifiedProjection;
      this.size = size;
      this.data = data2;
      this.merged = false;
    }
    /**
     * Whether the projection parameters should fit provided data.
     */
    get isFit() {
      return !!this.data;
    }
  }
  function parseProjection(model) {
    model.component.projection = isUnitModel(model) ? parseUnitProjection(model) : parseNonUnitProjections(model);
  }
  function parseUnitProjection(model) {
    if (model.hasProjection) {
      const proj = replaceExprRef(model.specifiedProjection);
      const fit2 = !(proj && (proj.scale != null || proj.translate != null));
      const size = fit2 ? [model.getSizeSignalRef("width"), model.getSizeSignalRef("height")] : void 0;
      const data2 = fit2 ? gatherFitData(model) : void 0;
      const projComp = new ProjectionComponent(model.projectionName(true), {
        ...replaceExprRef(model.config.projection),
        ...proj
      }, size, data2);
      if (!projComp.get("type")) {
        projComp.set("type", "equalEarth", false);
      }
      return projComp;
    }
    return void 0;
  }
  function gatherFitData(model) {
    const data2 = [];
    const { encoding } = model;
    for (const posssiblePair of [
      [LONGITUDE, LATITUDE],
      [LONGITUDE2, LATITUDE2]
    ]) {
      if (getFieldOrDatumDef(encoding[posssiblePair[0]]) || getFieldOrDatumDef(encoding[posssiblePair[1]])) {
        data2.push({
          signal: model.getName(`geojson_${data2.length}`)
        });
      }
    }
    if (model.channelHasField(SHAPE) && model.typedFieldDef(SHAPE).type === GEOJSON) {
      data2.push({
        signal: model.getName(`geojson_${data2.length}`)
      });
    }
    if (data2.length === 0) {
      data2.push(model.requestDataName(DataSourceType.Main));
    }
    return data2;
  }
  function mergeIfNoConflict(first, second2) {
    const allPropertiesShared = every(PROJECTION_PROPERTIES, (prop) => {
      if (!has$1(first.explicit, prop) && !has$1(second2.explicit, prop)) {
        return true;
      }
      if (has$1(first.explicit, prop) && has$1(second2.explicit, prop) && // some properties might be signals or objects and require hashing for comparison
      deepEqual(first.get(prop), second2.get(prop))) {
        return true;
      }
      return false;
    });
    const size = deepEqual(first.size, second2.size);
    if (size) {
      if (allPropertiesShared) {
        return first;
      } else if (deepEqual(first.explicit, {})) {
        return second2;
      } else if (deepEqual(second2.explicit, {})) {
        return first;
      }
    }
    return null;
  }
  function parseNonUnitProjections(model) {
    if (model.children.length === 0) {
      return void 0;
    }
    let nonUnitProjection;
    for (const child of model.children) {
      parseProjection(child);
    }
    const mergable = every(model.children, (child) => {
      const projection2 = child.component.projection;
      if (!projection2) {
        return true;
      } else if (!nonUnitProjection) {
        nonUnitProjection = projection2;
        return true;
      } else {
        const merge2 = mergeIfNoConflict(nonUnitProjection, projection2);
        if (merge2) {
          nonUnitProjection = merge2;
        }
        return !!merge2;
      }
    });
    if (nonUnitProjection && mergable) {
      const name = model.projectionName(true);
      const modelProjection = new ProjectionComponent(name, nonUnitProjection.specifiedProjection, nonUnitProjection.size, duplicate(nonUnitProjection.data));
      for (const child of model.children) {
        const projection2 = child.component.projection;
        if (projection2) {
          if (projection2.isFit) {
            modelProjection.data.push(...child.component.projection.data);
          }
          child.renameProjection(projection2.get("name"), name);
          projection2.merged = true;
        }
      }
      return modelProjection;
    }
    return void 0;
  }
  function rangeFormula(model, fieldDef, channel, config) {
    if (binRequiresRange(fieldDef, channel)) {
      const guide = isUnitModel(model) ? model.axis(channel) ?? model.legend(channel) ?? {} : {};
      const startField = vgField(fieldDef, { expr: "datum" });
      const endField = vgField(fieldDef, { expr: "datum", binSuffix: "end" });
      return {
        formulaAs: vgField(fieldDef, { binSuffix: "range", forAs: true }),
        formula: binFormatExpression(startField, endField, guide.format, guide.formatType, config)
      };
    }
    return {};
  }
  function binKey(bin2, field2) {
    return `${binToString(bin2)}_${field2}`;
  }
  function getSignalsFromModel(model, key2) {
    return {
      signal: model.getName(`${key2}_bins`),
      extentSignal: model.getName(`${key2}_extent`)
    };
  }
  function getBinSignalName(model, field2, bin2) {
    const normalizedBin = normalizeBin(bin2, void 0) ?? {};
    const key2 = binKey(normalizedBin, field2);
    return model.getName(`${key2}_bins`);
  }
  function isBinTransform(t) {
    return "as" in t;
  }
  function createBinComponent(t, bin2, model) {
    let as;
    let span2;
    if (isBinTransform(t)) {
      as = isString(t.as) ? [t.as, `${t.as}_end`] : [t.as[0], t.as[1]];
    } else {
      as = [vgField(t, { forAs: true }), vgField(t, { binSuffix: "end", forAs: true })];
    }
    const normalizedBin = { ...normalizeBin(bin2, void 0) };
    const key2 = binKey(normalizedBin, t.field);
    const { signal, extentSignal } = getSignalsFromModel(model, key2);
    if (isParameterExtent(normalizedBin.extent)) {
      const ext = normalizedBin.extent;
      span2 = parseSelectionExtent(model, ext.param, ext);
      delete normalizedBin.extent;
    }
    const binComponent = {
      bin: normalizedBin,
      field: t.field,
      as: [as],
      ...signal ? { signal } : {},
      ...extentSignal ? { extentSignal } : {},
      ...span2 ? { span: span2 } : {}
    };
    return { key: key2, binComponent };
  }
  class BinNode extends DataFlowNode {
    clone() {
      return new BinNode(null, duplicate(this.bins));
    }
    constructor(parent, bins2) {
      super(parent);
      this.bins = bins2;
    }
    static makeFromEncoding(parent, model) {
      const bins2 = model.reduceFieldDef((binComponentIndex, fieldDef, channel) => {
        if (isTypedFieldDef(fieldDef) && isBinning(fieldDef.bin)) {
          const { key: key2, binComponent } = createBinComponent(fieldDef, fieldDef.bin, model);
          binComponentIndex[key2] = {
            ...binComponent,
            ...binComponentIndex[key2],
            ...rangeFormula(model, fieldDef, channel, model.config)
          };
        }
        return binComponentIndex;
      }, {});
      if (isEmpty(bins2)) {
        return null;
      }
      return new BinNode(parent, bins2);
    }
    /**
     * Creates a bin node from BinTransform.
     * The optional parameter should provide
     */
    static makeFromTransform(parent, t, model) {
      const { key: key2, binComponent } = createBinComponent(t, t.bin, model);
      return new BinNode(parent, {
        [key2]: binComponent
      });
    }
    /**
     * Merge bin nodes. This method either integrates the bin config from the other node
     * or if this node already has a bin config, renames the corresponding signal in the model.
     */
    merge(other, renameSignal) {
      for (const key2 of keys(other.bins)) {
        if (key2 in this.bins) {
          renameSignal(other.bins[key2].signal, this.bins[key2].signal);
          this.bins[key2].as = unique([...this.bins[key2].as, ...other.bins[key2].as], hash);
        } else {
          this.bins[key2] = other.bins[key2];
        }
      }
      for (const child of other.children) {
        other.removeChild(child);
        child.parent = this;
      }
      other.remove();
    }
    producedFields() {
      return new Set(vals(this.bins).map((c2) => c2.as).flat(2));
    }
    dependentFields() {
      return new Set(vals(this.bins).map((c2) => c2.field));
    }
    hash() {
      return `Bin ${hash(this.bins)}`;
    }
    assemble() {
      return vals(this.bins).flatMap((bin2) => {
        const transform2 = [];
        const [binAs, ...remainingAs] = bin2.as;
        const { extent: extent2, ...params2 } = bin2.bin;
        const binTrans = {
          type: "bin",
          field: replacePathInField(bin2.field),
          as: binAs,
          signal: bin2.signal,
          ...!isParameterExtent(extent2) ? { extent: extent2 } : { extent: null },
          ...bin2.span ? { span: { signal: `span(${bin2.span})` } } : {},
          ...params2
        };
        if (!extent2 && bin2.extentSignal) {
          transform2.push({
            type: "extent",
            field: replacePathInField(bin2.field),
            signal: bin2.extentSignal
          });
          binTrans.extent = { signal: bin2.extentSignal };
        }
        transform2.push(binTrans);
        for (const as of remainingAs) {
          for (let i = 0; i < 2; i++) {
            transform2.push({
              type: "formula",
              expr: vgField({ field: binAs[i] }, { expr: "datum" }),
              as: as[i]
            });
          }
        }
        if (bin2.formula) {
          transform2.push({
            type: "formula",
            expr: bin2.formula,
            as: bin2.formulaAs
          });
        }
        return transform2;
      });
    }
  }
  function addDimension(dims, channel, fieldDef, model) {
    var _a2;
    const channelDef2 = isUnitModel(model) ? model.encoding[getSecondaryRangeChannel(channel)] : void 0;
    if (isTypedFieldDef(fieldDef) && isUnitModel(model) && hasBandEnd(fieldDef, channelDef2, model.markDef, model.config)) {
      dims.add(vgField(fieldDef, {}));
      dims.add(vgField(fieldDef, { suffix: "end" }));
      const { mark, markDef, config } = model;
      const bandPosition = getBandPosition({ fieldDef, markDef, config });
      if (isRectBasedMark(mark) && bandPosition !== 0.5 && isXorY(channel)) {
        dims.add(vgField(fieldDef, { suffix: OFFSETTED_RECT_START_SUFFIX }));
        dims.add(vgField(fieldDef, { suffix: OFFSETTED_RECT_END_SUFFIX }));
      }
      if (fieldDef.bin && binRequiresRange(fieldDef, channel)) {
        dims.add(vgField(fieldDef, { binSuffix: "range" }));
      }
    } else if (isGeoPositionChannel(channel)) {
      const posChannel = getPositionChannelFromLatLong(channel);
      dims.add(model.getName(posChannel));
    } else {
      dims.add(vgField(fieldDef));
    }
    if (isScaleFieldDef(fieldDef) && isFieldRange((_a2 = fieldDef.scale) == null ? void 0 : _a2.range)) {
      dims.add(fieldDef.scale.range.field);
    }
    return dims;
  }
  function mergeMeasures(parentMeasures, childMeasures) {
    for (const field2 of keys(childMeasures)) {
      const ops2 = childMeasures[field2];
      for (const op of keys(ops2)) {
        if (field2 in parentMeasures) {
          parentMeasures[field2][op] = /* @__PURE__ */ new Set([...parentMeasures[field2][op] ?? [], ...ops2[op]]);
        } else {
          parentMeasures[field2] = { [op]: ops2[op] };
        }
      }
    }
  }
  class AggregateNode extends DataFlowNode {
    clone() {
      return new AggregateNode(null, new Set(this.dimensions), duplicate(this.measures));
    }
    /**
     * @param dimensions string set for dimensions
     * @param measures dictionary mapping field name => dict of aggregation functions and names to use
     */
    constructor(parent, dimensions, measures) {
      super(parent);
      this.dimensions = dimensions;
      this.measures = measures;
    }
    get groupBy() {
      return this.dimensions;
    }
    static makeFromEncoding(parent, model) {
      let isAggregate2 = false;
      model.forEachFieldDef((fd) => {
        if (fd.aggregate) {
          isAggregate2 = true;
        }
      });
      const meas = {};
      const dims = /* @__PURE__ */ new Set();
      if (!isAggregate2) {
        return null;
      }
      model.forEachFieldDef((fieldDef, channel) => {
        const { aggregate, field: field2 } = fieldDef;
        if (aggregate) {
          if (aggregate === "count") {
            meas["*"] ?? (meas["*"] = {});
            meas["*"]["count"] = /* @__PURE__ */ new Set([vgField(fieldDef, { forAs: true })]);
          } else {
            if (isArgminDef(aggregate) || isArgmaxDef(aggregate)) {
              const op = isArgminDef(aggregate) ? "argmin" : "argmax";
              const argField = aggregate[op];
              meas[argField] ?? (meas[argField] = {});
              meas[argField][op] = /* @__PURE__ */ new Set([vgField({ op, field: argField }, { forAs: true })]);
            } else {
              meas[field2] ?? (meas[field2] = {});
              meas[field2][aggregate] = /* @__PURE__ */ new Set([vgField(fieldDef, { forAs: true })]);
            }
            if (isScaleChannel(channel) && model.scaleDomain(channel) === "unaggregated") {
              meas[field2] ?? (meas[field2] = {});
              meas[field2]["min"] = /* @__PURE__ */ new Set([vgField({ field: field2, aggregate: "min" }, { forAs: true })]);
              meas[field2]["max"] = /* @__PURE__ */ new Set([vgField({ field: field2, aggregate: "max" }, { forAs: true })]);
            }
          }
        } else {
          addDimension(dims, channel, fieldDef, model);
        }
      });
      if (dims.size + keys(meas).length === 0) {
        return null;
      }
      return new AggregateNode(parent, dims, meas);
    }
    static makeFromTransform(parent, t) {
      var _a2;
      const dims = /* @__PURE__ */ new Set();
      const meas = {};
      for (const s of t.aggregate) {
        const { op, field: field2, as } = s;
        if (op) {
          if (op === "count") {
            meas["*"] ?? (meas["*"] = {});
            meas["*"]["count"] = /* @__PURE__ */ new Set([as ? as : vgField(s, { forAs: true })]);
          } else {
            meas[field2] ?? (meas[field2] = {});
            (_a2 = meas[field2])[op] ?? (_a2[op] = /* @__PURE__ */ new Set());
            meas[field2][op].add(as ? as : vgField(s, { forAs: true }));
          }
        }
      }
      for (const s of t.groupby ?? []) {
        dims.add(s);
      }
      if (dims.size + keys(meas).length === 0) {
        return null;
      }
      return new AggregateNode(parent, dims, meas);
    }
    merge(other) {
      if (setEqual(this.dimensions, other.dimensions)) {
        mergeMeasures(this.measures, other.measures);
        return true;
      }
      debug("different dimensions, cannot merge");
      return false;
    }
    addDimensions(fields) {
      fields.forEach(this.dimensions.add, this.dimensions);
    }
    dependentFields() {
      return /* @__PURE__ */ new Set([...this.dimensions, ...keys(this.measures)]);
    }
    producedFields() {
      const out = /* @__PURE__ */ new Set();
      for (const field2 of keys(this.measures)) {
        for (const op of keys(this.measures[field2])) {
          const m2 = this.measures[field2][op];
          if (m2.size === 0) {
            out.add(`${op}_${field2}`);
          } else {
            m2.forEach(out.add, out);
          }
        }
      }
      return out;
    }
    hash() {
      return `Aggregate ${hash({ dimensions: this.dimensions, measures: this.measures })}`;
    }
    assemble() {
      const ops2 = [];
      const fields = [];
      const as = [];
      for (const field2 of keys(this.measures)) {
        for (const op of keys(this.measures[field2])) {
          for (const alias of this.measures[field2][op]) {
            as.push(alias);
            ops2.push(op);
            fields.push(field2 === "*" ? null : replacePathInField(field2));
          }
        }
      }
      const result = {
        type: "aggregate",
        groupby: [...this.dimensions].map(replacePathInField),
        ops: ops2,
        fields,
        as
      };
      return result;
    }
  }
  class FacetNode extends DataFlowNode {
    /**
     * @param model The facet model.
     * @param name The name that this facet source will have.
     * @param data The source data for this facet data.
     */
    constructor(parent, model, name, data2) {
      super(parent);
      this.model = model;
      this.name = name;
      this.data = data2;
      for (const channel of FACET_CHANNELS) {
        const fieldDef = model.facet[channel];
        if (fieldDef) {
          const { bin: bin2, sort: sort2 } = fieldDef;
          this[channel] = {
            name: model.getName(`${channel}_domain`),
            fields: [vgField(fieldDef), ...isBinning(bin2) ? [vgField(fieldDef, { binSuffix: "end" })] : []],
            ...isSortField(sort2) ? { sortField: sort2 } : isArray(sort2) ? { sortIndexField: sortArrayIndexField(fieldDef, channel) } : {}
          };
        }
      }
      this.childModel = model.child;
    }
    hash() {
      let out = `Facet`;
      for (const channel of FACET_CHANNELS) {
        if (this[channel]) {
          out += ` ${channel.charAt(0)}:${hash(this[channel])}`;
        }
      }
      return out;
    }
    get fields() {
      var _a2;
      const f = [];
      for (const channel of FACET_CHANNELS) {
        if ((_a2 = this[channel]) == null ? void 0 : _a2.fields) {
          f.push(...this[channel].fields);
        }
      }
      return f;
    }
    dependentFields() {
      const depFields = new Set(this.fields);
      for (const channel of FACET_CHANNELS) {
        if (this[channel]) {
          if (this[channel].sortField) {
            depFields.add(this[channel].sortField.field);
          }
          if (this[channel].sortIndexField) {
            depFields.add(this[channel].sortIndexField);
          }
        }
      }
      return depFields;
    }
    producedFields() {
      return /* @__PURE__ */ new Set();
    }
    /**
     * The name to reference this source is its name.
     */
    getSource() {
      return this.name;
    }
    getChildIndependentFieldsWithStep() {
      const childIndependentFieldsWithStep = {};
      for (const channel of POSITION_SCALE_CHANNELS) {
        const childScaleComponent = this.childModel.component.scales[channel];
        if (childScaleComponent && !childScaleComponent.merged) {
          const type2 = childScaleComponent.get("type");
          const range2 = childScaleComponent.get("range");
          if (hasDiscreteDomain(type2) && isVgRangeStep(range2)) {
            const domain2 = assembleDomain(this.childModel, channel);
            const field2 = getFieldFromDomain(domain2);
            if (field2) {
              childIndependentFieldsWithStep[channel] = field2;
            } else {
              warn(unknownField(channel));
            }
          }
        }
      }
      return childIndependentFieldsWithStep;
    }
    assembleRowColumnHeaderData(channel, crossedDataName, childIndependentFieldsWithStep) {
      const childChannel = { row: "y", column: "x", facet: void 0 }[channel];
      const fields = [];
      const ops2 = [];
      const as = [];
      if (childChannel && childIndependentFieldsWithStep && childIndependentFieldsWithStep[childChannel]) {
        if (crossedDataName) {
          fields.push(`distinct_${childIndependentFieldsWithStep[childChannel]}`);
          ops2.push("max");
        } else {
          fields.push(childIndependentFieldsWithStep[childChannel]);
          ops2.push("distinct");
        }
        as.push(`distinct_${childIndependentFieldsWithStep[childChannel]}`);
      }
      const { sortField, sortIndexField } = this[channel];
      if (sortField) {
        const { op = DEFAULT_SORT_OP, field: field2 } = sortField;
        fields.push(field2);
        ops2.push(op);
        as.push(vgField(sortField, { forAs: true }));
      } else if (sortIndexField) {
        fields.push(sortIndexField);
        ops2.push("max");
        as.push(sortIndexField);
      }
      return {
        name: this[channel].name,
        // Use data from the crossed one if it exist
        source: crossedDataName ?? this.data,
        transform: [
          {
            type: "aggregate",
            groupby: this[channel].fields,
            ...fields.length ? {
              fields,
              ops: ops2,
              as
            } : {}
          }
        ]
      };
    }
    assembleFacetHeaderData(childIndependentFieldsWithStep) {
      var _a2;
      const { columns } = this.model.layout;
      const { layoutHeaders: layoutHeaders2 } = this.model.component;
      const data2 = [];
      const hasSharedAxis = {};
      for (const headerChannel of HEADER_CHANNELS) {
        for (const headerType of HEADER_TYPES) {
          const headers = (layoutHeaders2[headerChannel] && layoutHeaders2[headerChannel][headerType]) ?? [];
          for (const header of headers) {
            if (((_a2 = header.axes) == null ? void 0 : _a2.length) > 0) {
              hasSharedAxis[headerChannel] = true;
              break;
            }
          }
        }
        if (hasSharedAxis[headerChannel]) {
          const cardinality = `length(data("${this.facet.name}"))`;
          const stop2 = headerChannel === "row" ? columns ? { signal: `ceil(${cardinality} / ${columns})` } : 1 : columns ? { signal: `min(${cardinality}, ${columns})` } : { signal: cardinality };
          data2.push({
            name: `${this.facet.name}_${headerChannel}`,
            transform: [
              {
                type: "sequence",
                start: 0,
                stop: stop2
              }
            ]
          });
        }
      }
      const { row, column } = hasSharedAxis;
      if (row || column) {
        data2.unshift(this.assembleRowColumnHeaderData("facet", null, childIndependentFieldsWithStep));
      }
      return data2;
    }
    assemble() {
      const data2 = [];
      let crossedDataName = null;
      const childIndependentFieldsWithStep = this.getChildIndependentFieldsWithStep();
      const { column, row, facet } = this;
      if (column && row && (childIndependentFieldsWithStep.x || childIndependentFieldsWithStep.y)) {
        crossedDataName = `cross_${this.column.name}_${this.row.name}`;
        const fields = [].concat(childIndependentFieldsWithStep.x ?? [], childIndependentFieldsWithStep.y ?? []);
        const ops2 = fields.map(() => "distinct");
        data2.push({
          name: crossedDataName,
          source: this.data,
          transform: [
            {
              type: "aggregate",
              groupby: this.fields,
              fields,
              ops: ops2
            }
          ]
        });
      }
      for (const channel of [COLUMN, ROW]) {
        if (this[channel]) {
          data2.push(this.assembleRowColumnHeaderData(channel, crossedDataName, childIndependentFieldsWithStep));
        }
      }
      if (facet) {
        const facetData = this.assembleFacetHeaderData(childIndependentFieldsWithStep);
        if (facetData) {
          data2.push(...facetData);
        }
      }
      return data2;
    }
  }
  function unquote(pattern) {
    if (pattern.startsWith("'") && pattern.endsWith("'") || pattern.startsWith('"') && pattern.endsWith('"')) {
      return pattern.slice(1, -1);
    }
    return pattern;
  }
  function parseExpression(field2, parse2) {
    const f = accessPathWithDatum(field2);
    if (parse2 === "number") {
      return `toNumber(${f})`;
    } else if (parse2 === "boolean") {
      return `toBoolean(${f})`;
    } else if (parse2 === "string") {
      return `toString(${f})`;
    } else if (parse2 === "date") {
      return `toDate(${f})`;
    } else if (parse2 === "flatten") {
      return f;
    } else if (parse2.startsWith("date:")) {
      const specifier = unquote(parse2.slice(5, parse2.length));
      return `timeParse(${f},'${specifier}')`;
    } else if (parse2.startsWith("utc:")) {
      const specifier = unquote(parse2.slice(4, parse2.length));
      return `utcParse(${f},'${specifier}')`;
    } else {
      warn(unrecognizedParse(parse2));
      return null;
    }
  }
  function getImplicitFromFilterTransform(transform2) {
    const implicit2 = {};
    forEachLeaf(transform2.filter, (filter2) => {
      if (isFieldPredicate(filter2)) {
        let val = null;
        if (isFieldEqualPredicate(filter2)) {
          val = signalRefOrValue(filter2.equal);
        } else if (isFieldLTEPredicate(filter2)) {
          val = signalRefOrValue(filter2.lte);
        } else if (isFieldLTPredicate(filter2)) {
          val = signalRefOrValue(filter2.lt);
        } else if (isFieldGTPredicate(filter2)) {
          val = signalRefOrValue(filter2.gt);
        } else if (isFieldGTEPredicate(filter2)) {
          val = signalRefOrValue(filter2.gte);
        } else if (isFieldRangePredicate(filter2)) {
          val = filter2.range[0];
        } else if (isFieldOneOfPredicate(filter2)) {
          val = (filter2.oneOf ?? filter2.in)[0];
        }
        if (val) {
          if (isDateTime(val)) {
            implicit2[filter2.field] = "date";
          } else if (isNumber$1(val)) {
            implicit2[filter2.field] = "number";
          } else if (isString(val)) {
            implicit2[filter2.field] = "string";
          }
        }
        if (filter2.timeUnit) {
          implicit2[filter2.field] = "date";
        }
      }
    });
    return implicit2;
  }
  function getImplicitFromEncoding(model) {
    const implicit2 = {};
    function add2(fieldDef) {
      if (isFieldOrDatumDefForTimeFormat(fieldDef)) {
        implicit2[fieldDef.field] = "date";
      } else if (fieldDef.type === "quantitative" && isMinMaxOp(fieldDef.aggregate)) {
        implicit2[fieldDef.field] = "number";
      } else if (accessPathDepth(fieldDef.field) > 1) {
        if (!(fieldDef.field in implicit2)) {
          implicit2[fieldDef.field] = "flatten";
        }
      } else if (isScaleFieldDef(fieldDef) && isSortField(fieldDef.sort) && accessPathDepth(fieldDef.sort.field) > 1) {
        if (!(fieldDef.sort.field in implicit2)) {
          implicit2[fieldDef.sort.field] = "flatten";
        }
      }
    }
    if (isUnitModel(model) || isFacetModel(model)) {
      model.forEachFieldDef((fieldDef, channel) => {
        if (isTypedFieldDef(fieldDef)) {
          add2(fieldDef);
        } else {
          const mainChannel = getMainRangeChannel(channel);
          const mainFieldDef = model.fieldDef(mainChannel);
          add2({
            ...fieldDef,
            type: mainFieldDef.type
          });
        }
      });
    }
    if (isUnitModel(model)) {
      const { mark, markDef, encoding } = model;
      if (isPathMark(mark) && // No need to sort by dimension if we have a connected scatterplot (order channel is present)
      !model.encoding.order) {
        const dimensionChannel = markDef.orient === "horizontal" ? "y" : "x";
        const dimensionChannelDef = encoding[dimensionChannel];
        if (isFieldDef(dimensionChannelDef) && dimensionChannelDef.type === "quantitative" && !(dimensionChannelDef.field in implicit2)) {
          implicit2[dimensionChannelDef.field] = "number";
        }
      }
    }
    return implicit2;
  }
  function getImplicitFromSelection(model) {
    const implicit2 = {};
    if (isUnitModel(model) && model.component.selection) {
      for (const name of keys(model.component.selection)) {
        const selCmpt = model.component.selection[name];
        for (const proj of selCmpt.project.items) {
          if (!proj.channel && accessPathDepth(proj.field) > 1) {
            implicit2[proj.field] = "flatten";
          }
        }
      }
    }
    return implicit2;
  }
  class ParseNode extends DataFlowNode {
    clone() {
      return new ParseNode(null, duplicate(this._parse));
    }
    constructor(parent, parse2) {
      super(parent);
      this._parse = parse2;
    }
    hash() {
      return `Parse ${hash(this._parse)}`;
    }
    /**
     * Creates a parse node from a data.format.parse and updates ancestorParse.
     */
    static makeExplicit(parent, model, ancestorParse) {
      var _a2;
      let explicit = {};
      const data2 = model.data;
      if (!isGenerator(data2) && ((_a2 = data2 == null ? void 0 : data2.format) == null ? void 0 : _a2.parse)) {
        explicit = data2.format.parse;
      }
      return this.makeWithAncestors(parent, explicit, {}, ancestorParse);
    }
    /**
     * Creates a parse node from "explicit" parse and "implicit" parse and updates ancestorParse.
     */
    static makeWithAncestors(parent, explicit, implicit2, ancestorParse) {
      for (const field2 of keys(implicit2)) {
        const parsedAs = ancestorParse.getWithExplicit(field2);
        if (parsedAs.value !== void 0) {
          if (parsedAs.explicit || parsedAs.value === implicit2[field2] || parsedAs.value === "derived" || implicit2[field2] === "flatten") {
            delete implicit2[field2];
          } else {
            warn(differentParse(field2, implicit2[field2], parsedAs.value));
          }
        }
      }
      for (const field2 of keys(explicit)) {
        const parsedAs = ancestorParse.get(field2);
        if (parsedAs !== void 0) {
          if (parsedAs === explicit[field2]) {
            delete explicit[field2];
          } else {
            warn(differentParse(field2, explicit[field2], parsedAs));
          }
        }
      }
      const parse2 = new Split(explicit, implicit2);
      ancestorParse.copyAll(parse2);
      const p = {};
      for (const key2 of keys(parse2.combine())) {
        const val = parse2.get(key2);
        if (val !== null) {
          p[key2] = val;
        }
      }
      if (keys(p).length === 0 || ancestorParse.parseNothing) {
        return null;
      }
      return new ParseNode(parent, p);
    }
    get parse() {
      return this._parse;
    }
    merge(other) {
      this._parse = { ...this._parse, ...other.parse };
      other.remove();
    }
    /**
     * Assemble an object for Vega's format.parse property.
     */
    assembleFormatParse() {
      const formatParse = {};
      for (const field2 of keys(this._parse)) {
        const p = this._parse[field2];
        if (accessPathDepth(field2) === 1) {
          formatParse[field2] = p;
        }
      }
      return formatParse;
    }
    // format parse depends and produces all fields in its parse
    producedFields() {
      return new Set(keys(this._parse));
    }
    dependentFields() {
      return new Set(keys(this._parse));
    }
    assembleTransforms(onlyNested = false) {
      return keys(this._parse).filter((field2) => onlyNested ? accessPathDepth(field2) > 1 : true).map((field2) => {
        const expr2 = parseExpression(field2, this._parse[field2]);
        if (!expr2) {
          return null;
        }
        const formula = {
          type: "formula",
          expr: expr2,
          as: removePathFromField(field2)
          // Vega output is always flattened
        };
        return formula;
      }).filter((t) => t !== null);
    }
  }
  class IdentifierNode extends DataFlowNode {
    clone() {
      return new IdentifierNode(null);
    }
    constructor(parent) {
      super(parent);
    }
    dependentFields() {
      return /* @__PURE__ */ new Set();
    }
    producedFields() {
      return /* @__PURE__ */ new Set([SELECTION_ID]);
    }
    hash() {
      return "Identifier";
    }
    assemble() {
      return { type: "identifier", as: SELECTION_ID };
    }
  }
  class GraticuleNode extends DataFlowNode {
    clone() {
      return new GraticuleNode(null, this.params);
    }
    constructor(parent, params2) {
      super(parent);
      this.params = params2;
    }
    dependentFields() {
      return /* @__PURE__ */ new Set();
    }
    producedFields() {
      return void 0;
    }
    hash() {
      return `Graticule ${hash(this.params)}`;
    }
    assemble() {
      return {
        type: "graticule",
        ...this.params === true ? {} : this.params
      };
    }
  }
  class SequenceNode extends DataFlowNode {
    clone() {
      return new SequenceNode(null, this.params);
    }
    constructor(parent, params2) {
      super(parent);
      this.params = params2;
    }
    dependentFields() {
      return /* @__PURE__ */ new Set();
    }
    producedFields() {
      return /* @__PURE__ */ new Set([this.params.as ?? "data"]);
    }
    hash() {
      return `Hash ${hash(this.params)}`;
    }
    assemble() {
      return {
        type: "sequence",
        ...this.params
      };
    }
  }
  class SourceNode extends DataFlowNode {
    constructor(data2) {
      super(null);
      data2 ?? (data2 = { name: "source" });
      let format2;
      if (!isGenerator(data2)) {
        format2 = data2.format ? { ...omit(data2.format, ["parse"]) } : {};
      }
      if (isInlineData(data2)) {
        this._data = { values: data2.values };
      } else if (isUrlData(data2)) {
        this._data = { url: data2.url };
        if (!format2.type) {
          let defaultExtension = /(?:\.([^.]+))?$/.exec(data2.url)[1];
          if (!contains(["json", "csv", "tsv", "dsv", "topojson"], defaultExtension)) {
            defaultExtension = "json";
          }
          format2.type = defaultExtension;
        }
      } else if (isSphereGenerator(data2)) {
        this._data = { values: [{ type: "Sphere" }] };
      } else if (isNamedData(data2) || isGenerator(data2)) {
        this._data = {};
      }
      this._generator = isGenerator(data2);
      if (data2.name) {
        this._name = data2.name;
      }
      if (format2 && !isEmpty(format2)) {
        this._data.format = format2;
      }
    }
    dependentFields() {
      return /* @__PURE__ */ new Set();
    }
    producedFields() {
      return void 0;
    }
    get data() {
      return this._data;
    }
    hasName() {
      return !!this._name;
    }
    get isGenerator() {
      return this._generator;
    }
    get dataName() {
      return this._name;
    }
    set dataName(name) {
      this._name = name;
    }
    set parent(parent) {
      throw new Error("Source nodes have to be roots.");
    }
    remove() {
      throw new Error("Source nodes are roots and cannot be removed.");
    }
    hash() {
      throw new Error("Cannot hash sources");
    }
    assemble() {
      return {
        name: this._name,
        ...this._data,
        transform: []
      };
    }
  }
  var __classPrivateFieldSet = function(receiver, state, value2, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return kind === "a" ? f.call(receiver, value2) : f ? f.value = value2 : state.set(receiver, value2), value2;
  };
  var __classPrivateFieldGet = function(receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
  };
  var _Optimizer_modified;
  function isDataSourceNode(node) {
    return node instanceof SourceNode || node instanceof GraticuleNode || node instanceof SequenceNode;
  }
  class Optimizer {
    constructor() {
      _Optimizer_modified.set(this, void 0);
      __classPrivateFieldSet(this, _Optimizer_modified, false, "f");
    }
    // Once true, #modified is never set to false
    setModified() {
      __classPrivateFieldSet(this, _Optimizer_modified, true, "f");
    }
    get modifiedFlag() {
      return __classPrivateFieldGet(this, _Optimizer_modified, "f");
    }
  }
  _Optimizer_modified = /* @__PURE__ */ new WeakMap();
  class BottomUpOptimizer extends Optimizer {
    /**
     * Compute a map of node depths that we can use to determine a topological sort order.
     */
    getNodeDepths(node, depth, depths) {
      depths.set(node, depth);
      for (const child of node.children) {
        this.getNodeDepths(child, depth + 1, depths);
      }
      return depths;
    }
    /**
     * Run the optimizer on all nodes starting from the leaves.
     */
    optimize(node) {
      const depths = this.getNodeDepths(node, 0, /* @__PURE__ */ new Map());
      const topologicalSort = [...depths.entries()].sort((a2, b2) => b2[1] - a2[1]);
      for (const tuple of topologicalSort) {
        this.run(tuple[0]);
      }
      return this.modifiedFlag;
    }
  }
  class TopDownOptimizer extends Optimizer {
    /**
     * Run the optimizer depth first on all nodes starting from the roots.
     */
    optimize(node) {
      this.run(node);
      for (const child of node.children) {
        this.optimize(child);
      }
      return this.modifiedFlag;
    }
  }
  class MergeIdenticalNodes extends TopDownOptimizer {
    mergeNodes(parent, nodes) {
      const mergedNode = nodes.shift();
      for (const node of nodes) {
        parent.removeChild(node);
        node.parent = mergedNode;
        node.remove();
      }
    }
    run(node) {
      const hashes = node.children.map((x2) => x2.hash());
      const buckets = {};
      for (let i = 0; i < hashes.length; i++) {
        if (buckets[hashes[i]] === void 0) {
          buckets[hashes[i]] = [node.children[i]];
        } else {
          buckets[hashes[i]].push(node.children[i]);
        }
      }
      for (const k of keys(buckets)) {
        if (buckets[k].length > 1) {
          this.setModified();
          this.mergeNodes(node, buckets[k]);
        }
      }
    }
  }
  class RemoveUnnecessaryIdentifierNodes extends TopDownOptimizer {
    constructor(model) {
      super();
      this.requiresSelectionId = model && requiresSelectionId(model);
    }
    run(node) {
      if (node instanceof IdentifierNode) {
        if (!(this.requiresSelectionId && (isDataSourceNode(node.parent) || node.parent instanceof AggregateNode || node.parent instanceof ParseNode))) {
          this.setModified();
          node.remove();
        }
      }
    }
  }
  class RemoveDuplicateTimeUnits extends Optimizer {
    optimize(node) {
      this.run(node, /* @__PURE__ */ new Set());
      return this.modifiedFlag;
    }
    run(node, timeUnitFields) {
      let producedFields = /* @__PURE__ */ new Set();
      if (node instanceof TimeUnitNode) {
        producedFields = node.producedFields();
        if (hasIntersection(producedFields, timeUnitFields)) {
          this.setModified();
          node.removeFormulas(timeUnitFields);
          if (node.producedFields.length === 0) {
            node.remove();
          }
        }
      }
      for (const child of node.children) {
        this.run(child, /* @__PURE__ */ new Set([...timeUnitFields, ...producedFields]));
      }
    }
  }
  class RemoveUnnecessaryOutputNodes extends TopDownOptimizer {
    constructor() {
      super();
    }
    run(node) {
      if (node instanceof OutputNode && !node.isRequired()) {
        this.setModified();
        node.remove();
      }
    }
  }
  class MoveParseUp extends BottomUpOptimizer {
    run(node) {
      if (isDataSourceNode(node)) {
        return;
      }
      if (node.numChildren() > 1) {
        return;
      }
      for (const child of node.children) {
        if (child instanceof ParseNode) {
          if (node instanceof ParseNode) {
            this.setModified();
            node.merge(child);
          } else {
            if (fieldIntersection(node.producedFields(), child.dependentFields())) {
              continue;
            }
            this.setModified();
            child.swapWithParent();
          }
        }
      }
      return;
    }
  }
  class MergeParse extends BottomUpOptimizer {
    run(node) {
      const originalChildren = [...node.children];
      const parseChildren = node.children.filter((child) => child instanceof ParseNode);
      if (node.numChildren() > 1 && parseChildren.length >= 1) {
        const commonParse = {};
        const conflictingParse = /* @__PURE__ */ new Set();
        for (const parseNode of parseChildren) {
          const parse2 = parseNode.parse;
          for (const k of keys(parse2)) {
            if (!(k in commonParse)) {
              commonParse[k] = parse2[k];
            } else if (commonParse[k] !== parse2[k]) {
              conflictingParse.add(k);
            }
          }
        }
        for (const field2 of conflictingParse) {
          delete commonParse[field2];
        }
        if (!isEmpty(commonParse)) {
          this.setModified();
          const mergedParseNode = new ParseNode(node, commonParse);
          for (const childNode of originalChildren) {
            if (childNode instanceof ParseNode) {
              for (const key2 of keys(commonParse)) {
                delete childNode.parse[key2];
              }
            }
            node.removeChild(childNode);
            childNode.parent = mergedParseNode;
            if (childNode instanceof ParseNode && keys(childNode.parse).length === 0) {
              childNode.remove();
            }
          }
        }
      }
    }
  }
  class RemoveUnusedSubtrees extends BottomUpOptimizer {
    run(node) {
      if (node instanceof OutputNode || node.numChildren() > 0 || node instanceof FacetNode) ;
      else if (node instanceof SourceNode) ;
      else {
        this.setModified();
        node.remove();
      }
    }
  }
  class MergeTimeUnits extends BottomUpOptimizer {
    run(node) {
      const timeUnitChildren = node.children.filter((x2) => x2 instanceof TimeUnitNode);
      const combination = timeUnitChildren.pop();
      for (const timeUnit of timeUnitChildren) {
        this.setModified();
        combination.merge(timeUnit);
      }
    }
  }
  class MergeAggregates extends BottomUpOptimizer {
    run(node) {
      const aggChildren = node.children.filter((child) => child instanceof AggregateNode);
      const groupedAggregates = {};
      for (const agg of aggChildren) {
        const groupBys = hash(agg.groupBy);
        if (!(groupBys in groupedAggregates)) {
          groupedAggregates[groupBys] = [];
        }
        groupedAggregates[groupBys].push(agg);
      }
      for (const group2 of keys(groupedAggregates)) {
        const mergeableAggs = groupedAggregates[group2];
        if (mergeableAggs.length > 1) {
          const mergedAggs = mergeableAggs.pop();
          for (const agg of mergeableAggs) {
            if (mergedAggs.merge(agg)) {
              node.removeChild(agg);
              agg.parent = mergedAggs;
              agg.remove();
              this.setModified();
            }
          }
        }
      }
    }
  }
  class MergeBins extends BottomUpOptimizer {
    constructor(model) {
      super();
      this.model = model;
    }
    run(node) {
      const moveBinsUp = !(isDataSourceNode(node) || node instanceof FilterNode || node instanceof ParseNode || node instanceof IdentifierNode);
      const promotableBins = [];
      const remainingBins = [];
      for (const child of node.children) {
        if (child instanceof BinNode) {
          if (moveBinsUp && !fieldIntersection(node.producedFields(), child.dependentFields())) {
            promotableBins.push(child);
          } else {
            remainingBins.push(child);
          }
        }
      }
      if (promotableBins.length > 0) {
        const promotedBin = promotableBins.pop();
        for (const bin2 of promotableBins) {
          promotedBin.merge(bin2, this.model.renameSignal.bind(this.model));
        }
        this.setModified();
        if (node instanceof BinNode) {
          node.merge(promotedBin, this.model.renameSignal.bind(this.model));
        } else {
          promotedBin.swapWithParent();
        }
      }
      if (remainingBins.length > 1) {
        const remainingBin = remainingBins.pop();
        for (const bin2 of remainingBins) {
          remainingBin.merge(bin2, this.model.renameSignal.bind(this.model));
        }
        this.setModified();
      }
    }
  }
  class MergeOutputs extends BottomUpOptimizer {
    run(node) {
      const children2 = [...node.children];
      const hasOutputChild = some(children2, (child) => child instanceof OutputNode);
      if (!hasOutputChild || node.numChildren() <= 1) {
        return;
      }
      const otherChildren = [];
      let mainOutput;
      for (const child of children2) {
        if (child instanceof OutputNode) {
          let lastOutput = child;
          while (lastOutput.numChildren() === 1) {
            const [theChild] = lastOutput.children;
            if (theChild instanceof OutputNode) {
              lastOutput = theChild;
            } else {
              break;
            }
          }
          otherChildren.push(...lastOutput.children);
          if (mainOutput) {
            node.removeChild(child);
            child.parent = mainOutput.parent;
            mainOutput.parent.removeChild(mainOutput);
            mainOutput.parent = lastOutput;
            this.setModified();
          } else {
            mainOutput = lastOutput;
          }
        } else {
          otherChildren.push(child);
        }
      }
      if (otherChildren.length) {
        this.setModified();
        for (const child of otherChildren) {
          child.parent.removeChild(child);
          child.parent = mainOutput;
        }
      }
    }
  }
  class JoinAggregateTransformNode extends DataFlowNode {
    clone() {
      return new JoinAggregateTransformNode(null, duplicate(this.transform));
    }
    constructor(parent, transform2) {
      super(parent);
      this.transform = transform2;
    }
    addDimensions(fields) {
      this.transform.groupby = unique(this.transform.groupby.concat(fields), (d) => d);
    }
    dependentFields() {
      const out = /* @__PURE__ */ new Set();
      if (this.transform.groupby) {
        this.transform.groupby.forEach(out.add, out);
      }
      this.transform.joinaggregate.map((w2) => w2.field).filter((f) => f !== void 0).forEach(out.add, out);
      return out;
    }
    producedFields() {
      return new Set(this.transform.joinaggregate.map(this.getDefaultName));
    }
    getDefaultName(joinAggregateFieldDef) {
      return joinAggregateFieldDef.as ?? vgField(joinAggregateFieldDef);
    }
    hash() {
      return `JoinAggregateTransform ${hash(this.transform)}`;
    }
    assemble() {
      const fields = [];
      const ops2 = [];
      const as = [];
      for (const joinaggregate of this.transform.joinaggregate) {
        ops2.push(joinaggregate.op);
        as.push(this.getDefaultName(joinaggregate));
        fields.push(joinaggregate.field === void 0 ? null : joinaggregate.field);
      }
      const groupby = this.transform.groupby;
      return {
        type: "joinaggregate",
        as,
        ops: ops2,
        fields,
        ...groupby !== void 0 ? { groupby } : {}
      };
    }
  }
  class FilterInvalidNode extends DataFlowNode {
    clone() {
      return new FilterInvalidNode(null, { ...this.filter });
    }
    constructor(parent, filter2) {
      super(parent);
      this.filter = filter2;
    }
    static make(parent, model, dataSourcesForHandlingInvalidValues) {
      const { config, markDef } = model;
      const { marks, scales: scales2 } = dataSourcesForHandlingInvalidValues;
      if (marks === "include-invalid-values" && scales2 === "include-invalid-values") {
        return null;
      }
      const filter2 = model.reduceFieldDef((aggregator, fieldDef, channel) => {
        const scaleComponent = isScaleChannel(channel) && model.getScaleComponent(channel);
        if (scaleComponent) {
          const scaleType2 = scaleComponent.get("type");
          const { aggregate } = fieldDef;
          const invalidDataMode = getScaleInvalidDataMode({
            scaleChannel: channel,
            markDef,
            config,
            scaleType: scaleType2,
            isCountAggregate: isCountingAggregateOp(aggregate)
          });
          if (invalidDataMode !== "show" && invalidDataMode !== "always-valid") {
            aggregator[fieldDef.field] = fieldDef;
          }
        }
        return aggregator;
      }, {});
      if (!keys(filter2).length) {
        return null;
      }
      return new FilterInvalidNode(parent, filter2);
    }
    dependentFields() {
      return new Set(keys(this.filter));
    }
    producedFields() {
      return /* @__PURE__ */ new Set();
    }
    hash() {
      return `FilterInvalid ${hash(this.filter)}`;
    }
    /**
     * Create the VgTransforms for each of the filtered fields.
     */
    assemble() {
      const filters2 = keys(this.filter).reduce((vegaFilters, field2) => {
        const fieldDef = this.filter[field2];
        const ref2 = vgField(fieldDef, { expr: "datum" });
        if (fieldDef !== null) {
          if (fieldDef.type === "temporal") {
            vegaFilters.push(`(isDate(${ref2}) || (${isValidFiniteNumberExpr(ref2)}))`);
          } else if (fieldDef.type === "quantitative") {
            vegaFilters.push(isValidFiniteNumberExpr(ref2));
          } else ;
        }
        return vegaFilters;
      }, []);
      return filters2.length > 0 ? {
        type: "filter",
        expr: filters2.join(" && ")
      } : null;
    }
  }
  function isValidFiniteNumberExpr(ref2) {
    return `isValid(${ref2}) && isFinite(+${ref2})`;
  }
  function getStackByFields(model) {
    return model.stack.stackBy.reduce((fields, by) => {
      const fieldDef = by.fieldDef;
      const _field = vgField(fieldDef);
      if (_field) {
        fields.push(_field);
      }
      return fields;
    }, []);
  }
  function isValidAsArray(as) {
    return isArray(as) && as.every((s) => isString(s)) && as.length > 1;
  }
  class StackNode extends DataFlowNode {
    clone() {
      return new StackNode(null, duplicate(this._stack));
    }
    constructor(parent, stack2) {
      super(parent);
      this._stack = stack2;
    }
    static makeFromTransform(parent, stackTransform) {
      const { stack: stack2, groupby, as, offset: offset2 = "zero" } = stackTransform;
      const sortFields = [];
      const sortOrder = [];
      if (stackTransform.sort !== void 0) {
        for (const sortField of stackTransform.sort) {
          sortFields.push(sortField.field);
          sortOrder.push(getFirstDefined(sortField.order, "ascending"));
        }
      }
      const sort2 = {
        field: sortFields,
        order: sortOrder
      };
      let normalizedAs;
      if (isValidAsArray(as)) {
        normalizedAs = as;
      } else if (isString(as)) {
        normalizedAs = [as, `${as}_end`];
      } else {
        normalizedAs = [`${stackTransform.stack}_start`, `${stackTransform.stack}_end`];
      }
      return new StackNode(parent, {
        dimensionFieldDefs: [],
        stackField: stack2,
        groupby,
        offset: offset2,
        sort: sort2,
        facetby: [],
        as: normalizedAs
      });
    }
    static makeFromEncoding(parent, model) {
      const stackProperties = model.stack;
      const { encoding } = model;
      if (!stackProperties) {
        return null;
      }
      const { groupbyChannels, fieldChannel, offset: offset2, impute } = stackProperties;
      const dimensionFieldDefs = groupbyChannels.map((groupbyChannel) => {
        const cDef = encoding[groupbyChannel];
        return getFieldDef(cDef);
      }).filter((def2) => !!def2);
      const stackby = getStackByFields(model);
      const orderDef = model.encoding.order;
      let sort2;
      if (isArray(orderDef) || isFieldDef(orderDef)) {
        sort2 = sortParams(orderDef);
      } else {
        const sortOrder = isOrderOnlyDef(orderDef) ? orderDef.sort : fieldChannel === "y" ? "descending" : "ascending";
        sort2 = stackby.reduce((s, field2) => {
          if (!s.field.includes(field2)) {
            s.field.push(field2);
            s.order.push(sortOrder);
          }
          return s;
        }, { field: [], order: [] });
      }
      return new StackNode(parent, {
        dimensionFieldDefs,
        stackField: model.vgField(fieldChannel),
        facetby: [],
        stackby,
        sort: sort2,
        offset: offset2,
        impute,
        as: [
          model.vgField(fieldChannel, { suffix: "start", forAs: true }),
          model.vgField(fieldChannel, { suffix: "end", forAs: true })
        ]
      });
    }
    get stack() {
      return this._stack;
    }
    addDimensions(fields) {
      this._stack.facetby.push(...fields);
    }
    dependentFields() {
      const out = /* @__PURE__ */ new Set();
      out.add(this._stack.stackField);
      this.getGroupbyFields().forEach(out.add, out);
      this._stack.facetby.forEach(out.add, out);
      this._stack.sort.field.forEach(out.add, out);
      return out;
    }
    producedFields() {
      return new Set(this._stack.as);
    }
    hash() {
      return `Stack ${hash(this._stack)}`;
    }
    getGroupbyFields() {
      const { dimensionFieldDefs, impute, groupby } = this._stack;
      if (dimensionFieldDefs.length > 0) {
        return dimensionFieldDefs.map((dimensionFieldDef) => {
          if (dimensionFieldDef.bin) {
            if (impute) {
              return [vgField(dimensionFieldDef, { binSuffix: "mid" })];
            }
            return [
              // For binned group by field without impute, we need both bin (start) and bin_end
              vgField(dimensionFieldDef, {}),
              vgField(dimensionFieldDef, { binSuffix: "end" })
            ];
          }
          return [vgField(dimensionFieldDef)];
        }).flat();
      }
      return groupby ?? [];
    }
    assemble() {
      const transform2 = [];
      const { facetby, dimensionFieldDefs, stackField: field2, stackby, sort: sort2, offset: offset2, impute, as } = this._stack;
      if (impute) {
        for (const dimensionFieldDef of dimensionFieldDefs) {
          const { bandPosition = 0.5, bin: bin2 } = dimensionFieldDef;
          if (bin2) {
            const binStart = vgField(dimensionFieldDef, { expr: "datum" });
            const binEnd = vgField(dimensionFieldDef, { expr: "datum", binSuffix: "end" });
            transform2.push({
              type: "formula",
              expr: `${isValidFiniteNumberExpr(binStart)} ? ${bandPosition}*${binStart}+${1 - bandPosition}*${binEnd} : ${binStart}`,
              as: vgField(dimensionFieldDef, { binSuffix: "mid", forAs: true })
            });
          }
          transform2.push({
            type: "impute",
            field: field2,
            groupby: [...stackby, ...facetby],
            key: vgField(dimensionFieldDef, { binSuffix: "mid" }),
            method: "value",
            value: 0
          });
        }
      }
      transform2.push({
        type: "stack",
        groupby: [...this.getGroupbyFields(), ...facetby],
        field: field2,
        sort: sort2,
        as,
        offset: offset2
      });
      return transform2;
    }
  }
  class WindowTransformNode extends DataFlowNode {
    clone() {
      return new WindowTransformNode(null, duplicate(this.transform));
    }
    constructor(parent, transform2) {
      super(parent);
      this.transform = transform2;
    }
    addDimensions(fields) {
      this.transform.groupby = unique(this.transform.groupby.concat(fields), (d) => d);
    }
    dependentFields() {
      const out = /* @__PURE__ */ new Set();
      (this.transform.groupby ?? []).forEach(out.add, out);
      (this.transform.sort ?? []).forEach((m2) => out.add(m2.field));
      this.transform.window.map((w2) => w2.field).filter((f) => f !== void 0).forEach(out.add, out);
      return out;
    }
    producedFields() {
      return new Set(this.transform.window.map(this.getDefaultName));
    }
    getDefaultName(windowFieldDef) {
      return windowFieldDef.as ?? vgField(windowFieldDef);
    }
    hash() {
      return `WindowTransform ${hash(this.transform)}`;
    }
    assemble() {
      const fields = [];
      const ops2 = [];
      const as = [];
      const params2 = [];
      for (const window2 of this.transform.window) {
        ops2.push(window2.op);
        as.push(this.getDefaultName(window2));
        params2.push(window2.param === void 0 ? null : window2.param);
        fields.push(window2.field === void 0 ? null : window2.field);
      }
      const frame2 = this.transform.frame;
      const groupby = this.transform.groupby;
      if (frame2 && frame2[0] === null && frame2[1] === null && ops2.every((o) => isAggregateOp(o))) {
        return {
          type: "joinaggregate",
          as,
          ops: ops2,
          fields,
          ...groupby !== void 0 ? { groupby } : {}
        };
      }
      const sortFields = [];
      const sortOrder = [];
      if (this.transform.sort !== void 0) {
        for (const sortField of this.transform.sort) {
          sortFields.push(sortField.field);
          sortOrder.push(sortField.order ?? "ascending");
        }
      }
      const sort2 = {
        field: sortFields,
        order: sortOrder
      };
      const ignorePeers = this.transform.ignorePeers;
      return {
        type: "window",
        params: params2,
        as,
        ops: ops2,
        fields,
        sort: sort2,
        ...ignorePeers !== void 0 ? { ignorePeers } : {},
        ...groupby !== void 0 ? { groupby } : {},
        ...frame2 !== void 0 ? { frame: frame2 } : {}
      };
    }
  }
  function cloneSubtree(facet) {
    function clone(node) {
      if (!(node instanceof FacetNode)) {
        const copy2 = node.clone();
        if (copy2 instanceof OutputNode) {
          const newName = FACET_SCALE_PREFIX + copy2.getSource();
          copy2.setSource(newName);
          facet.model.component.data.outputNodes[newName] = copy2;
        } else if (copy2 instanceof AggregateNode || copy2 instanceof StackNode || copy2 instanceof WindowTransformNode || copy2 instanceof JoinAggregateTransformNode) {
          copy2.addDimensions(facet.fields);
        }
        for (const n of node.children.flatMap(clone)) {
          n.parent = copy2;
        }
        return [copy2];
      }
      return node.children.flatMap(clone);
    }
    return clone;
  }
  function moveFacetDown(node) {
    if (node instanceof FacetNode) {
      if (node.numChildren() === 1 && !(node.children[0] instanceof OutputNode)) {
        const child = node.children[0];
        if (child instanceof AggregateNode || child instanceof StackNode || child instanceof WindowTransformNode || child instanceof JoinAggregateTransformNode) {
          child.addDimensions(node.fields);
        }
        child.swapWithParent();
        moveFacetDown(node);
      } else {
        const facetMain = node.model.component.data.main;
        moveMainDownToFacet(facetMain);
        const cloner = cloneSubtree(node);
        const copy2 = node.children.map(cloner).flat();
        for (const c2 of copy2) {
          c2.parent = facetMain;
        }
      }
    } else {
      node.children.map(moveFacetDown);
    }
  }
  function moveMainDownToFacet(node) {
    if (node instanceof OutputNode && node.type === DataSourceType.Main) {
      if (node.numChildren() === 1) {
        const child = node.children[0];
        if (!(child instanceof FacetNode)) {
          child.swapWithParent();
          moveMainDownToFacet(node);
        }
      }
    }
  }
  const FACET_SCALE_PREFIX = "scale_";
  const MAX_OPTIMIZATION_RUNS = 5;
  function checkLinks(nodes) {
    for (const node of nodes) {
      for (const child of node.children) {
        if (child.parent !== node) {
          return false;
        }
      }
      if (!checkLinks(node.children)) {
        return false;
      }
    }
    return true;
  }
  function runOptimizer(optimizer, nodes) {
    let modified2 = false;
    for (const node of nodes) {
      modified2 = optimizer.optimize(node) || modified2;
    }
    return modified2;
  }
  function optimizationDataflowHelper(dataComponent, model, firstPass) {
    let roots = dataComponent.sources;
    let modified2 = false;
    modified2 = runOptimizer(new RemoveUnnecessaryOutputNodes(), roots) || modified2;
    modified2 = runOptimizer(new RemoveUnnecessaryIdentifierNodes(model), roots) || modified2;
    roots = roots.filter((r) => r.numChildren() > 0);
    modified2 = runOptimizer(new RemoveUnusedSubtrees(), roots) || modified2;
    roots = roots.filter((r) => r.numChildren() > 0);
    if (!firstPass) {
      modified2 = runOptimizer(new MoveParseUp(), roots) || modified2;
      modified2 = runOptimizer(new MergeBins(model), roots) || modified2;
      modified2 = runOptimizer(new RemoveDuplicateTimeUnits(), roots) || modified2;
      modified2 = runOptimizer(new MergeParse(), roots) || modified2;
      modified2 = runOptimizer(new MergeAggregates(), roots) || modified2;
      modified2 = runOptimizer(new MergeTimeUnits(), roots) || modified2;
      modified2 = runOptimizer(new MergeIdenticalNodes(), roots) || modified2;
      modified2 = runOptimizer(new MergeOutputs(), roots) || modified2;
    }
    dataComponent.sources = roots;
    return modified2;
  }
  function optimizeDataflow(data2, model) {
    checkLinks(data2.sources);
    let firstPassCounter = 0;
    let secondPassCounter = 0;
    for (let i = 0; i < MAX_OPTIMIZATION_RUNS; i++) {
      if (!optimizationDataflowHelper(data2, model, true)) {
        break;
      }
      firstPassCounter++;
    }
    data2.sources.map(moveFacetDown);
    for (let i = 0; i < MAX_OPTIMIZATION_RUNS; i++) {
      if (!optimizationDataflowHelper(data2, model, false)) {
        break;
      }
      secondPassCounter++;
    }
    checkLinks(data2.sources);
    if (Math.max(firstPassCounter, secondPassCounter) === MAX_OPTIMIZATION_RUNS) {
      warn(`Maximum optimization runs(${MAX_OPTIMIZATION_RUNS}) reached.`);
    }
  }
  class SignalRefWrapper {
    constructor(exprGenerator) {
      Object.defineProperty(this, "signal", {
        enumerable: true,
        get: exprGenerator
      });
    }
    static fromName(rename, signalName) {
      return new SignalRefWrapper(() => rename(signalName));
    }
  }
  function parseScaleDomain(model) {
    if (isUnitModel(model)) {
      parseUnitScaleDomain(model);
    } else {
      parseNonUnitScaleDomain(model);
    }
  }
  function parseUnitScaleDomain(model) {
    const localScaleComponents = model.component.scales;
    for (const channel of keys(localScaleComponents)) {
      const domains = parseDomainForChannel(model, channel);
      const localScaleCmpt = localScaleComponents[channel];
      localScaleCmpt.setWithExplicit("domains", domains);
      parseSelectionDomain(model, channel);
      if (model.component.data.isFaceted) {
        let facetParent = model;
        while (!isFacetModel(facetParent) && facetParent.parent) {
          facetParent = facetParent.parent;
        }
        const resolve2 = facetParent.component.resolve.scale[channel];
        if (resolve2 === "shared") {
          for (const domain2 of domains.value) {
            if (isDataRefDomain(domain2)) {
              domain2.data = FACET_SCALE_PREFIX + domain2.data.replace(FACET_SCALE_PREFIX, "");
            }
          }
        }
      }
    }
  }
  function parseNonUnitScaleDomain(model) {
    for (const child of model.children) {
      parseScaleDomain(child);
    }
    const localScaleComponents = model.component.scales;
    for (const channel of keys(localScaleComponents)) {
      let domains;
      let selectionExtent = null;
      for (const child of model.children) {
        const childComponent = child.component.scales[channel];
        if (childComponent) {
          if (domains === void 0) {
            domains = childComponent.getWithExplicit("domains");
          } else {
            domains = mergeValuesWithExplicit(domains, childComponent.getWithExplicit("domains"), "domains", "scale", domainsTieBreaker);
          }
          const se = childComponent.get("selectionExtent");
          if (selectionExtent && se && selectionExtent.param !== se.param) {
            warn(NEEDS_SAME_SELECTION);
          }
          selectionExtent = se;
        }
      }
      localScaleComponents[channel].setWithExplicit("domains", domains);
      if (selectionExtent) {
        localScaleComponents[channel].set("selectionExtent", selectionExtent, true);
      }
    }
  }
  function normalizeUnaggregatedDomain(domain2, fieldDef, scaleType2, scaleConfig) {
    if (domain2 === "unaggregated") {
      const { valid, reason } = canUseUnaggregatedDomain(fieldDef, scaleType2);
      if (!valid) {
        warn(reason);
        return void 0;
      }
    } else if (domain2 === void 0 && scaleConfig.useUnaggregatedDomain) {
      const { valid } = canUseUnaggregatedDomain(fieldDef, scaleType2);
      if (valid) {
        return "unaggregated";
      }
    }
    return domain2;
  }
  function parseDomainForChannel(model, channel) {
    const scaleType2 = model.getScaleComponent(channel).get("type");
    const { encoding } = model;
    const domain2 = normalizeUnaggregatedDomain(model.scaleDomain(channel), model.typedFieldDef(channel), scaleType2, model.config.scale);
    if (domain2 !== model.scaleDomain(channel)) {
      model.specifiedScales[channel] = {
        ...model.specifiedScales[channel],
        domain: domain2
      };
    }
    if (channel === "x" && getFieldOrDatumDef(encoding.x2)) {
      if (getFieldOrDatumDef(encoding.x)) {
        return mergeValuesWithExplicit(parseSingleChannelDomain(scaleType2, domain2, model, "x"), parseSingleChannelDomain(scaleType2, domain2, model, "x2"), "domain", "scale", domainsTieBreaker);
      } else {
        return parseSingleChannelDomain(scaleType2, domain2, model, "x2");
      }
    } else if (channel === "y" && getFieldOrDatumDef(encoding.y2)) {
      if (getFieldOrDatumDef(encoding.y)) {
        return mergeValuesWithExplicit(parseSingleChannelDomain(scaleType2, domain2, model, "y"), parseSingleChannelDomain(scaleType2, domain2, model, "y2"), "domain", "scale", domainsTieBreaker);
      } else {
        return parseSingleChannelDomain(scaleType2, domain2, model, "y2");
      }
    }
    return parseSingleChannelDomain(scaleType2, domain2, model, channel);
  }
  function mapDomainToDataSignal(domain2, type2, timeUnit) {
    return domain2.map((v) => {
      const data2 = valueExpr(v, { timeUnit, type: type2 });
      return { signal: `{data: ${data2}}` };
    });
  }
  function convertDomainIfItIsDateTime(domain2, type2, timeUnit) {
    var _a2;
    const normalizedTimeUnit = (_a2 = normalizeTimeUnit(timeUnit)) == null ? void 0 : _a2.unit;
    if (type2 === "temporal" || normalizedTimeUnit) {
      return mapDomainToDataSignal(domain2, type2, normalizedTimeUnit);
    }
    return [domain2];
  }
  function parseSingleChannelDomain(scaleType2, domain2, model, channel) {
    const { encoding, markDef, mark, config, stack: stack2 } = model;
    const fieldOrDatumDef = getFieldOrDatumDef(encoding[channel]);
    const { type: type2 } = fieldOrDatumDef;
    const timeUnit = fieldOrDatumDef["timeUnit"];
    const dataSourceTypeForScaleDomain = getScaleDataSourceForHandlingInvalidValues({
      invalid: getMarkConfig("invalid", markDef, config),
      isPath: isPathMark(mark)
    });
    if (isDomainUnionWith(domain2)) {
      const defaultDomain = parseSingleChannelDomain(scaleType2, void 0, model, channel);
      const unionWith = convertDomainIfItIsDateTime(domain2.unionWith, type2, timeUnit);
      return makeExplicit([...unionWith, ...defaultDomain.value]);
    } else if (isSignalRef(domain2)) {
      return makeExplicit([domain2]);
    } else if (domain2 && domain2 !== "unaggregated" && !isParameterDomain(domain2)) {
      return makeExplicit(convertDomainIfItIsDateTime(domain2, type2, timeUnit));
    }
    if (stack2 && channel === stack2.fieldChannel) {
      if (stack2.offset === "normalize") {
        return makeImplicit([[0, 1]]);
      }
      const data2 = model.requestDataName(dataSourceTypeForScaleDomain);
      return makeImplicit([
        {
          data: data2,
          field: model.vgField(channel, { suffix: "start" })
        },
        {
          data: data2,
          field: model.vgField(channel, { suffix: "end" })
        }
      ]);
    }
    const sort2 = isScaleChannel(channel) && isFieldDef(fieldOrDatumDef) ? domainSort(model, channel, scaleType2) : void 0;
    if (isDatumDef(fieldOrDatumDef)) {
      const d = convertDomainIfItIsDateTime([fieldOrDatumDef.datum], type2, timeUnit);
      return makeImplicit(d);
    }
    const fieldDef = fieldOrDatumDef;
    if (domain2 === "unaggregated") {
      const { field: field2 } = fieldOrDatumDef;
      return makeImplicit([
        {
          data: model.requestDataName(dataSourceTypeForScaleDomain),
          field: vgField({ field: field2, aggregate: "min" })
        },
        {
          data: model.requestDataName(dataSourceTypeForScaleDomain),
          field: vgField({ field: field2, aggregate: "max" })
        }
      ]);
    } else if (isBinning(fieldDef.bin)) {
      if (hasDiscreteDomain(scaleType2)) {
        if (scaleType2 === "bin-ordinal") {
          return makeImplicit([]);
        }
        return makeImplicit([
          {
            // If sort by aggregation of a specified sort field, we need to use RAW table,
            // so we can aggregate values for the scale independently from the main aggregation.
            data: isBoolean(sort2) ? model.requestDataName(dataSourceTypeForScaleDomain) : model.requestDataName(DataSourceType.Raw),
            // Use range if we added it and the scale does not support computing a range as a signal.
            field: model.vgField(channel, binRequiresRange(fieldDef, channel) ? { binSuffix: "range" } : {}),
            // we have to use a sort object if sort = true to make the sort correct by bin start
            sort: sort2 === true || !isObject(sort2) ? {
              field: model.vgField(channel, {}),
              op: "min"
              // min or max doesn't matter since we sort by the start of the bin range
            } : sort2
          }
        ]);
      } else {
        const { bin: bin2 } = fieldDef;
        if (isBinning(bin2)) {
          const binSignal = getBinSignalName(model, fieldDef.field, bin2);
          return makeImplicit([
            new SignalRefWrapper(() => {
              const signal = model.getSignalName(binSignal);
              return `[${signal}.start, ${signal}.stop]`;
            })
          ]);
        } else {
          return makeImplicit([
            {
              data: model.requestDataName(dataSourceTypeForScaleDomain),
              field: model.vgField(channel, {})
            }
          ]);
        }
      }
    } else if (fieldDef.timeUnit && contains(["time", "utc"], scaleType2)) {
      const fieldDef2 = encoding[getSecondaryRangeChannel(channel)];
      if (hasBandEnd(fieldDef, fieldDef2, markDef, config)) {
        const data2 = model.requestDataName(dataSourceTypeForScaleDomain);
        const bandPosition = getBandPosition({ fieldDef, fieldDef2, markDef, config });
        const isRectWithOffset = isRectBasedMark(mark) && bandPosition !== 0.5 && isXorY(channel);
        return makeImplicit([
          {
            data: data2,
            field: model.vgField(channel, isRectWithOffset ? { suffix: OFFSETTED_RECT_START_SUFFIX } : {})
          },
          {
            data: data2,
            field: model.vgField(channel, { suffix: isRectWithOffset ? OFFSETTED_RECT_END_SUFFIX : "end" })
          }
        ]);
      }
    }
    if (sort2) {
      return makeImplicit([
        {
          // If sort by aggregation of a specified sort field, we need to use RAW table,
          // so we can aggregate values for the scale independently from the main aggregation.
          data: isBoolean(sort2) ? model.requestDataName(dataSourceTypeForScaleDomain) : model.requestDataName(DataSourceType.Raw),
          field: model.vgField(channel),
          sort: sort2
        }
      ]);
    } else {
      return makeImplicit([
        {
          data: model.requestDataName(dataSourceTypeForScaleDomain),
          field: model.vgField(channel)
        }
      ]);
    }
  }
  function normalizeSortField(sort2, isStackedMeasure) {
    const { op, field: field2, order } = sort2;
    return {
      // Apply default op
      op: op ?? (isStackedMeasure ? "sum" : DEFAULT_SORT_OP),
      // flatten nested fields
      ...field2 ? { field: replacePathInField(field2) } : {},
      ...order ? { order } : {}
    };
  }
  function parseSelectionDomain(model, channel) {
    var _a2;
    const scale2 = model.component.scales[channel];
    const spec = model.specifiedScales[channel].domain;
    const bin2 = (_a2 = model.fieldDef(channel)) == null ? void 0 : _a2.bin;
    const domain2 = isParameterDomain(spec) ? spec : void 0;
    const extent2 = isBinParams(bin2) && isParameterExtent(bin2.extent) ? bin2.extent : void 0;
    if (domain2 || extent2) {
      scale2.set("selectionExtent", domain2 ?? extent2, true);
    }
  }
  function domainSort(model, channel, scaleType2) {
    if (!hasDiscreteDomain(scaleType2)) {
      return void 0;
    }
    const fieldDef = model.fieldDef(channel);
    const sort2 = fieldDef.sort;
    if (isSortArray(sort2)) {
      return {
        op: "min",
        field: sortArrayIndexField(fieldDef, channel),
        order: "ascending"
      };
    }
    const { stack: stack2 } = model;
    const stackDimensions = stack2 ? /* @__PURE__ */ new Set([...stack2.groupbyFields, ...stack2.stackBy.map((s) => s.fieldDef.field)]) : void 0;
    if (isSortField(sort2)) {
      const isStackedMeasure = stack2 && !stackDimensions.has(sort2.field);
      return normalizeSortField(sort2, isStackedMeasure);
    } else if (isSortByEncoding(sort2)) {
      const { encoding, order } = sort2;
      const fieldDefToSortBy = model.fieldDef(encoding);
      const { aggregate, field: field2 } = fieldDefToSortBy;
      const isStackedMeasure = stack2 && !stackDimensions.has(field2);
      if (isArgminDef(aggregate) || isArgmaxDef(aggregate)) {
        return normalizeSortField({
          field: vgField(fieldDefToSortBy),
          order
        }, isStackedMeasure);
      } else if (isAggregateOp(aggregate) || !aggregate) {
        return normalizeSortField({
          op: aggregate,
          // can't be argmin/argmax since we don't support them in encoding field def
          field: field2,
          order
        }, isStackedMeasure);
      }
    } else if (sort2 === "descending") {
      return {
        op: "min",
        field: model.vgField(channel),
        order: "descending"
      };
    } else if (contains([
      "ascending",
      void 0
      /* default =ascending*/
    ], sort2)) {
      return true;
    }
    return void 0;
  }
  function canUseUnaggregatedDomain(fieldDef, scaleType2) {
    const { aggregate, type: type2 } = fieldDef;
    if (!aggregate) {
      return {
        valid: false,
        reason: unaggregateDomainHasNoEffectForRawField(fieldDef)
      };
    }
    if (isString(aggregate) && !SHARED_DOMAIN_OPS.has(aggregate)) {
      return {
        valid: false,
        reason: unaggregateDomainWithNonSharedDomainOp(aggregate)
      };
    }
    if (type2 === "quantitative") {
      if (scaleType2 === "log") {
        return {
          valid: false,
          reason: unaggregatedDomainWithLogScale(fieldDef)
        };
      }
    }
    return { valid: true };
  }
  function domainsTieBreaker(v1, v2, property2, propertyOf) {
    if (v1.explicit && v2.explicit) {
      warn(mergeConflictingDomainProperty(property2, propertyOf, v1.value, v2.value));
    }
    return { explicit: v1.explicit, value: [...v1.value, ...v2.value] };
  }
  function mergeDomains(domains) {
    const uniqueDomains = unique(domains.map((domain2) => {
      if (isDataRefDomain(domain2)) {
        const { sort: _s, ...domainWithoutSort } = domain2;
        return domainWithoutSort;
      }
      return domain2;
    }), hash);
    const sorts = unique(domains.map((d) => {
      if (isDataRefDomain(d)) {
        const s = d.sort;
        if (s !== void 0 && !isBoolean(s)) {
          if ("op" in s && s.op === "count") {
            delete s.field;
          }
          if (s.order === "ascending") {
            delete s.order;
          }
        }
        return s;
      }
      return void 0;
    }).filter((s) => s !== void 0), hash);
    if (uniqueDomains.length === 0) {
      return void 0;
    } else if (uniqueDomains.length === 1) {
      const domain2 = domains[0];
      if (isDataRefDomain(domain2) && sorts.length > 0) {
        let sort3 = sorts[0];
        if (sorts.length > 1) {
          warn(MORE_THAN_ONE_SORT);
          const filteredSorts = sorts.filter((s) => isObject(s) && "op" in s && s.op !== "min");
          if (sorts.every((s) => isObject(s) && "op" in s) && filteredSorts.length === 1) {
            sort3 = filteredSorts[0];
          } else {
            sort3 = true;
          }
        } else {
          if (isObject(sort3) && "field" in sort3) {
            const sortField = sort3.field;
            if (domain2.field === sortField) {
              sort3 = sort3.order ? { order: sort3.order } : true;
            }
          }
        }
        return {
          ...domain2,
          sort: sort3
        };
      }
      return domain2;
    }
    const unionDomainSorts = unique(sorts.map((s) => {
      if (isBoolean(s) || !("op" in s) || isString(s.op) && has$1(MULTIDOMAIN_SORT_OP_INDEX, s.op)) {
        return s;
      }
      warn(domainSortDropped(s));
      return true;
    }), hash);
    let sort2;
    if (unionDomainSorts.length === 1) {
      sort2 = unionDomainSorts[0];
    } else if (unionDomainSorts.length > 1) {
      warn(MORE_THAN_ONE_SORT);
      sort2 = true;
    }
    const allData = unique(domains.map((d) => {
      if (isDataRefDomain(d)) {
        return d.data;
      }
      return null;
    }), (x2) => x2);
    if (allData.length === 1 && allData[0] !== null) {
      const domain2 = {
        data: allData[0],
        fields: uniqueDomains.map((d) => d.field),
        ...sort2 ? { sort: sort2 } : {}
      };
      return domain2;
    }
    return { fields: uniqueDomains, ...sort2 ? { sort: sort2 } : {} };
  }
  function getFieldFromDomain(domain2) {
    if (isDataRefDomain(domain2) && isString(domain2.field)) {
      return domain2.field;
    } else if (isDataRefUnionedDomain(domain2)) {
      let field2;
      for (const nonUnionDomain of domain2.fields) {
        if (isDataRefDomain(nonUnionDomain) && isString(nonUnionDomain.field)) {
          if (!field2) {
            field2 = nonUnionDomain.field;
          } else if (field2 !== nonUnionDomain.field) {
            warn(FACETED_INDEPENDENT_DIFFERENT_SOURCES);
            return field2;
          }
        }
      }
      warn(FACETED_INDEPENDENT_SAME_FIELDS_DIFFERENT_SOURCES);
      return field2;
    } else if (isFieldRefUnionDomain(domain2)) {
      warn(FACETED_INDEPENDENT_SAME_SOURCE);
      const field2 = domain2.fields[0];
      return isString(field2) ? field2 : void 0;
    }
    return void 0;
  }
  function assembleDomain(model, channel) {
    const scaleComponent = model.component.scales[channel];
    const domains = scaleComponent.get("domains").map((domain2) => {
      if (isDataRefDomain(domain2)) {
        domain2.data = model.lookupDataSource(domain2.data);
      }
      return domain2;
    });
    return mergeDomains(domains);
  }
  function assembleScales(model) {
    if (isLayerModel(model) || isConcatModel(model)) {
      return model.children.reduce((scales2, child) => {
        return scales2.concat(assembleScales(child));
      }, assembleScalesForModel(model));
    } else {
      return assembleScalesForModel(model);
    }
  }
  function assembleScalesForModel(model) {
    return keys(model.component.scales).reduce((scales2, channel) => {
      const scaleComponent = model.component.scales[channel];
      if (scaleComponent.merged) {
        return scales2;
      }
      const scale2 = scaleComponent.combine();
      const { name, type: type2, selectionExtent, domains: _d2, range: _r2, reverse: reverse2, ...otherScaleProps } = scale2;
      const range2 = assembleScaleRange(scale2.range, name, channel, model);
      const domain2 = assembleDomain(model, channel);
      const domainRaw = selectionExtent ? assembleSelectionScaleDomain(model, selectionExtent, scaleComponent, domain2) : null;
      scales2.push({
        name,
        type: type2,
        ...domain2 ? { domain: domain2 } : {},
        ...domainRaw ? { domainRaw } : {},
        range: range2,
        ...reverse2 !== void 0 ? { reverse: reverse2 } : {},
        ...otherScaleProps
      });
      return scales2;
    }, []);
  }
  function assembleScaleRange(scaleRange, scaleName, channel, model) {
    if (isXorY(channel)) {
      if (isVgRangeStep(scaleRange)) {
        return {
          step: { signal: `${scaleName}_step` }
        };
      }
    } else if (isObject(scaleRange) && isDataRefDomain(scaleRange)) {
      return {
        ...scaleRange,
        data: model.lookupDataSource(scaleRange.data)
      };
    }
    return scaleRange;
  }
  class ScaleComponent extends Split {
    constructor(name, typeWithExplicit) {
      super(
        {},
        // no initial explicit property
        { name }
        // name as initial implicit property
      );
      this.merged = false;
      this.setWithExplicit("type", typeWithExplicit);
    }
    /**
     * Whether the scale definitely includes or not include zero in the domain
     */
    domainHasZero() {
      const scaleType2 = this.get("type");
      if (contains([ScaleType.LOG, ScaleType.TIME, ScaleType.UTC], scaleType2)) {
        return "definitely-not";
      }
      const scaleZero = this.get("zero");
      if (scaleZero === true || // If zero is undefined, linear/sqrt/pow scales have zero by default.
      scaleZero === void 0 && contains([ScaleType.LINEAR, ScaleType.SQRT, ScaleType.POW], scaleType2)) {
        return "definitely";
      }
      const domains = this.get("domains");
      if (domains.length > 0) {
        let hasExplicitDomainWithZero = false;
        let hasExplicitDomainWithoutZero = false;
        let hasDomainBasedOnField = false;
        for (const d of domains) {
          if (isArray(d)) {
            const first = d[0];
            const last = d[d.length - 1];
            if (isNumber$1(first) && isNumber$1(last)) {
              if (first <= 0 && last >= 0) {
                hasExplicitDomainWithZero = true;
                continue;
              } else {
                hasExplicitDomainWithoutZero = true;
                continue;
              }
            }
          }
          hasDomainBasedOnField = true;
        }
        if (hasExplicitDomainWithZero) {
          return "definitely";
        } else if (hasExplicitDomainWithoutZero && !hasDomainBasedOnField) {
          return "definitely-not";
        }
      }
      return "maybe";
    }
  }
  const RANGE_PROPERTIES = ["range", "scheme"];
  function parseUnitScaleRange(model) {
    const localScaleComponents = model.component.scales;
    for (const channel of SCALE_CHANNELS) {
      const localScaleCmpt = localScaleComponents[channel];
      if (!localScaleCmpt) {
        continue;
      }
      const rangeWithExplicit = parseRangeForChannel(channel, model);
      localScaleCmpt.setWithExplicit("range", rangeWithExplicit);
    }
  }
  function getBinStepSignal(model, channel) {
    const fieldDef = model.fieldDef(channel);
    if (fieldDef == null ? void 0 : fieldDef.bin) {
      const { bin: bin2, field: field2 } = fieldDef;
      const sizeType = getSizeChannel(channel);
      const sizeSignal = model.getName(sizeType);
      if (isObject(bin2) && bin2.binned && bin2.step !== void 0) {
        return new SignalRefWrapper(() => {
          const scaleName = model.scaleName(channel);
          const binCount = `(domain("${scaleName}")[1] - domain("${scaleName}")[0]) / ${bin2.step}`;
          return `${model.getSignalName(sizeSignal)} / (${binCount})`;
        });
      } else if (isBinning(bin2)) {
        const binSignal = getBinSignalName(model, field2, bin2);
        return new SignalRefWrapper(() => {
          const updatedName = model.getSignalName(binSignal);
          const binCount = `(${updatedName}.stop - ${updatedName}.start) / ${updatedName}.step`;
          return `${model.getSignalName(sizeSignal)} / (${binCount})`;
        });
      }
    }
    return void 0;
  }
  function parseRangeForChannel(channel, model) {
    const specifiedScale = model.specifiedScales[channel];
    const { size } = model;
    const mergedScaleCmpt = model.getScaleComponent(channel);
    const scaleType2 = mergedScaleCmpt.get("type");
    for (const property2 of RANGE_PROPERTIES) {
      if (specifiedScale[property2] !== void 0) {
        const supportedByScaleType = scaleTypeSupportProperty(scaleType2, property2);
        const channelIncompatability = channelScalePropertyIncompatability(channel, property2);
        if (!supportedByScaleType) {
          warn(scalePropertyNotWorkWithScaleType(scaleType2, property2, channel));
        } else if (channelIncompatability) {
          warn(channelIncompatability);
        } else {
          switch (property2) {
            case "range": {
              const range2 = specifiedScale.range;
              if (isArray(range2)) {
                if (isXorY(channel)) {
                  return makeExplicit(range2.map((v) => {
                    if (v === "width" || v === "height") {
                      const sizeSignal = model.getName(v);
                      const getSignalName = model.getSignalName.bind(model);
                      return SignalRefWrapper.fromName(getSignalName, sizeSignal);
                    }
                    return v;
                  }));
                }
              } else if (isObject(range2)) {
                return makeExplicit({
                  data: model.requestDataName(DataSourceType.Main),
                  field: range2.field,
                  sort: { op: "min", field: model.vgField(channel) }
                });
              }
              return makeExplicit(range2);
            }
            case "scheme":
              return makeExplicit(parseScheme(specifiedScale[property2]));
          }
        }
      }
    }
    const sizeChannel = channel === X || channel === "xOffset" ? "width" : "height";
    const sizeValue = size[sizeChannel];
    if (isStep(sizeValue)) {
      if (isXorY(channel)) {
        if (hasDiscreteDomain(scaleType2)) {
          const step = getPositionStep(sizeValue, model, channel);
          if (step) {
            return makeExplicit({ step });
          }
        } else {
          warn(stepDropped(sizeChannel));
        }
      } else if (isXorYOffset(channel)) {
        const positionChannel = channel === XOFFSET ? "x" : "y";
        const positionScaleCmpt = model.getScaleComponent(positionChannel);
        const positionScaleType = positionScaleCmpt.get("type");
        if (positionScaleType === "band") {
          const step = getOffsetStep(sizeValue, scaleType2);
          if (step) {
            return makeExplicit(step);
          }
        }
      }
    }
    const { rangeMin: rangeMin2, rangeMax: rangeMax2 } = specifiedScale;
    const d = defaultRange(channel, model);
    if ((rangeMin2 !== void 0 || rangeMax2 !== void 0) && // it's ok to check just rangeMin's compatibility since rangeMin/rangeMax are the same
    scaleTypeSupportProperty(scaleType2, "rangeMin") && isArray(d) && d.length === 2) {
      return makeExplicit([rangeMin2 ?? d[0], rangeMax2 ?? d[1]]);
    }
    return makeImplicit(d);
  }
  function parseScheme(scheme2) {
    if (isExtendedScheme(scheme2)) {
      return {
        scheme: scheme2.name,
        ...omit(scheme2, ["name"])
      };
    }
    return { scheme: scheme2 };
  }
  function fullWidthOrHeightRange(channel, model, scaleType2, { center } = {}) {
    const sizeType = getSizeChannel(channel);
    const sizeSignal = model.getName(sizeType);
    const getSignalName = model.getSignalName.bind(model);
    if (channel === Y && hasContinuousDomain(scaleType2)) {
      return center ? [
        SignalRefWrapper.fromName((name) => `${getSignalName(name)}/2`, sizeSignal),
        SignalRefWrapper.fromName((name) => `-${getSignalName(name)}/2`, sizeSignal)
      ] : [SignalRefWrapper.fromName(getSignalName, sizeSignal), 0];
    } else {
      return center ? [
        SignalRefWrapper.fromName((name) => `-${getSignalName(name)}/2`, sizeSignal),
        SignalRefWrapper.fromName((name) => `${getSignalName(name)}/2`, sizeSignal)
      ] : [0, SignalRefWrapper.fromName(getSignalName, sizeSignal)];
    }
  }
  function defaultRange(channel, model) {
    const { size, config, mark, encoding } = model;
    const { type: type2 } = getFieldOrDatumDef(encoding[channel]);
    const mergedScaleCmpt = model.getScaleComponent(channel);
    const scaleType2 = mergedScaleCmpt.get("type");
    const { domain: domain2, domainMid } = model.specifiedScales[channel];
    switch (channel) {
      case X:
      case Y: {
        if (contains(["point", "band"], scaleType2)) {
          const positionSize = getDiscretePositionSize(channel, size, config.view);
          if (isStep(positionSize)) {
            const step = getPositionStep(positionSize, model, channel);
            return { step };
          }
        }
        return fullWidthOrHeightRange(channel, model, scaleType2);
      }
      case XOFFSET:
      case YOFFSET:
        return getOffsetRange(channel, model, scaleType2);
      case SIZE: {
        const rangeMin2 = sizeRangeMin(mark, config);
        const rangeMax2 = sizeRangeMax(mark, size, model, config);
        if (isContinuousToDiscrete(scaleType2)) {
          return interpolateRange(rangeMin2, rangeMax2, defaultContinuousToDiscreteCount(scaleType2, config, domain2, channel));
        } else {
          return [rangeMin2, rangeMax2];
        }
      }
      case THETA:
        return [0, Math.PI * 2];
      case ANGLE:
        return [0, 360];
      case RADIUS: {
        return [
          0,
          new SignalRefWrapper(() => {
            const w2 = model.getSignalName(isFacetModel(model.parent) ? "child_width" : "width");
            const h2 = model.getSignalName(isFacetModel(model.parent) ? "child_height" : "height");
            return `min(${w2},${h2})/2`;
          })
        ];
      }
      case TIME: {
        return { step: 1e3 / config.scale.framesPerSecond };
      }
      case STROKEWIDTH:
        return [config.scale.minStrokeWidth, config.scale.maxStrokeWidth];
      case STROKEDASH:
        return [
          // TODO: add this to Vega's config.range?
          [1, 0],
          [4, 2],
          [2, 1],
          [1, 1],
          [1, 2, 4, 2]
        ];
      case SHAPE:
        return "symbol";
      case COLOR:
      case FILL:
      case STROKE:
        if (scaleType2 === "ordinal") {
          return type2 === "nominal" ? "category" : "ordinal";
        } else {
          if (domainMid !== void 0) {
            return "diverging";
          } else {
            return mark === "rect" || mark === "geoshape" ? "heatmap" : "ramp";
          }
        }
      case OPACITY:
      case FILLOPACITY:
      case STROKEOPACITY:
        return [config.scale.minOpacity, config.scale.maxOpacity];
    }
  }
  function getPositionStep(step, model, channel) {
    const { encoding } = model;
    const mergedScaleCmpt = model.getScaleComponent(channel);
    const offsetChannel = getOffsetScaleChannel(channel);
    const offsetDef = encoding[offsetChannel];
    const stepFor = getStepFor({ step, offsetIsDiscrete: isFieldOrDatumDef(offsetDef) && isDiscrete$1(offsetDef.type) });
    if (stepFor === "offset" && channelHasFieldOrDatum(encoding, offsetChannel)) {
      const offsetScaleCmpt = model.getScaleComponent(offsetChannel);
      const offsetScaleName = model.scaleName(offsetChannel);
      let stepCount = `domain('${offsetScaleName}').length`;
      if (offsetScaleCmpt.get("type") === "band") {
        const offsetPaddingInner = offsetScaleCmpt.get("paddingInner") ?? offsetScaleCmpt.get("padding") ?? 0;
        const offsetPaddingOuter = offsetScaleCmpt.get("paddingOuter") ?? offsetScaleCmpt.get("padding") ?? 0;
        stepCount = `bandspace(${stepCount}, ${offsetPaddingInner}, ${offsetPaddingOuter})`;
      }
      const paddingInner2 = mergedScaleCmpt.get("paddingInner") ?? mergedScaleCmpt.get("padding");
      return {
        signal: `${step.step} * ${stepCount} / (1-${exprFromSignalRefOrValue(paddingInner2)})`
      };
    } else {
      return step.step;
    }
  }
  function getOffsetStep(step, offsetScaleType) {
    const stepFor = getStepFor({ step, offsetIsDiscrete: hasDiscreteDomain(offsetScaleType) });
    if (stepFor === "offset") {
      return { step: step.step };
    }
    return void 0;
  }
  function getOffsetRange(channel, model, offsetScaleType) {
    const positionChannel = channel === XOFFSET ? "x" : "y";
    const positionScaleCmpt = model.getScaleComponent(positionChannel);
    if (!positionScaleCmpt) {
      return fullWidthOrHeightRange(positionChannel, model, offsetScaleType, { center: true });
    }
    const positionScaleType = positionScaleCmpt.get("type");
    const positionScaleName = model.scaleName(positionChannel);
    const { markDef, config } = model;
    if (positionScaleType === "band") {
      const size = getDiscretePositionSize(positionChannel, model.size, model.config.view);
      if (isStep(size)) {
        const step = getOffsetStep(size, offsetScaleType);
        if (step) {
          return step;
        }
      }
      return [0, { signal: `bandwidth('${positionScaleName}')` }];
    } else {
      const positionDef = model.encoding[positionChannel];
      if (isFieldDef(positionDef) && positionDef.timeUnit) {
        const duration = durationExpr(positionDef.timeUnit, (expr2) => `scale('${positionScaleName}', ${expr2})`);
        const padding2 = model.config.scale.bandWithNestedOffsetPaddingInner;
        const bandPositionOffset = getBandPosition({
          fieldDef: positionDef,
          markDef,
          config
        }) - 0.5;
        const bandPositionOffsetExpr = bandPositionOffset !== 0 ? ` + ${bandPositionOffset}` : "";
        if (padding2) {
          const startRatio = isSignalRef(padding2) ? `${padding2.signal}/2` + bandPositionOffsetExpr : `${padding2 / 2 + bandPositionOffset}`;
          const endRatio = isSignalRef(padding2) ? `(1 - ${padding2.signal}/2)` + bandPositionOffsetExpr : `${1 - padding2 / 2 + bandPositionOffset}`;
          return [{ signal: `${startRatio} * (${duration})` }, { signal: `${endRatio} * (${duration})` }];
        }
        return [0, { signal: duration }];
      }
      return never(`Cannot use ${channel} scale if ${positionChannel} scale is not discrete.`);
    }
  }
  function getDiscretePositionSize(channel, size, viewConfig) {
    const sizeChannel = channel === X ? "width" : "height";
    const sizeValue = size[sizeChannel];
    if (sizeValue) {
      return sizeValue;
    }
    return getViewConfigDiscreteSize(viewConfig, sizeChannel);
  }
  function defaultContinuousToDiscreteCount(scaleType2, config, domain2, channel) {
    switch (scaleType2) {
      case "quantile":
        return config.scale.quantileCount;
      case "quantize":
        return config.scale.quantizeCount;
      case "threshold":
        if (domain2 !== void 0 && isArray(domain2)) {
          return domain2.length + 1;
        } else {
          warn(domainRequiredForThresholdScale(channel));
          return 3;
        }
    }
  }
  function interpolateRange(rangeMin2, rangeMax2, cardinality) {
    const f = () => {
      const rMax = signalOrStringValue(rangeMax2);
      const rMin = signalOrStringValue(rangeMin2);
      const step = `(${rMax} - ${rMin}) / (${cardinality} - 1)`;
      return `sequence(${rMin}, ${rMax} + ${step}, ${step})`;
    };
    if (isSignalRef(rangeMax2)) {
      return new SignalRefWrapper(f);
    } else {
      return { signal: f() };
    }
  }
  function sizeRangeMin(mark, config) {
    switch (mark) {
      case "bar":
      case "tick":
        return config.scale.minBandSize;
      case "line":
      case "trail":
      case "rule":
        return config.scale.minStrokeWidth;
      case "text":
        return config.scale.minFontSize;
      case "point":
      case "square":
      case "circle":
        return config.scale.minSize;
    }
    throw new Error(incompatibleChannel("size", mark));
  }
  const MAX_SIZE_RANGE_STEP_RATIO = 0.95;
  function sizeRangeMax(mark, size, model, config) {
    const xyStepSignals = {
      x: getBinStepSignal(model, "x"),
      y: getBinStepSignal(model, "y")
    };
    switch (mark) {
      case "bar":
      case "tick": {
        if (config.scale.maxBandSize !== void 0) {
          return config.scale.maxBandSize;
        }
        const min2 = minXYStep(size, xyStepSignals, config.view);
        if (isNumber$1(min2)) {
          return min2 - 1;
        } else {
          return new SignalRefWrapper(() => `${min2.signal} - 1`);
        }
      }
      case "line":
      case "trail":
      case "rule":
        return config.scale.maxStrokeWidth;
      case "text":
        return config.scale.maxFontSize;
      case "point":
      case "square":
      case "circle": {
        if (config.scale.maxSize) {
          return config.scale.maxSize;
        }
        const pointStep = minXYStep(size, xyStepSignals, config.view);
        if (isNumber$1(pointStep)) {
          return Math.pow(MAX_SIZE_RANGE_STEP_RATIO * pointStep, 2);
        } else {
          return new SignalRefWrapper(() => `pow(${MAX_SIZE_RANGE_STEP_RATIO} * ${pointStep.signal}, 2)`);
        }
      }
    }
    throw new Error(incompatibleChannel("size", mark));
  }
  function minXYStep(size, xyStepSignals, viewConfig) {
    const widthStep = isStep(size.width) ? size.width.step : getViewConfigDiscreteStep(viewConfig, "width");
    const heightStep = isStep(size.height) ? size.height.step : getViewConfigDiscreteStep(viewConfig, "height");
    if (xyStepSignals.x || xyStepSignals.y) {
      return new SignalRefWrapper(() => {
        const exprs = [
          xyStepSignals.x ? xyStepSignals.x.signal : widthStep,
          xyStepSignals.y ? xyStepSignals.y.signal : heightStep
        ];
        return `min(${exprs.join(", ")})`;
      });
    }
    return Math.min(widthStep, heightStep);
  }
  function parseScaleProperty(model, property2) {
    if (isUnitModel(model)) {
      parseUnitScaleProperty(model, property2);
    } else {
      parseNonUnitScaleProperty(model, property2);
    }
  }
  function parseUnitScaleProperty(model, property2) {
    const localScaleComponents = model.component.scales;
    const { config, encoding, markDef, specifiedScales } = model;
    for (const channel of keys(localScaleComponents)) {
      const specifiedScale = specifiedScales[channel];
      const localScaleCmpt = localScaleComponents[channel];
      const mergedScaleCmpt = model.getScaleComponent(channel);
      const fieldOrDatumDef = getFieldOrDatumDef(encoding[channel]);
      const specifiedValue = specifiedScale[property2];
      const scaleType2 = mergedScaleCmpt.get("type");
      const scalePadding = mergedScaleCmpt.get("padding");
      const scalePaddingInner = mergedScaleCmpt.get("paddingInner");
      const supportedByScaleType = scaleTypeSupportProperty(scaleType2, property2);
      const channelIncompatability = channelScalePropertyIncompatability(channel, property2);
      if (specifiedValue !== void 0) {
        if (!supportedByScaleType) {
          warn(scalePropertyNotWorkWithScaleType(scaleType2, property2, channel));
        } else if (channelIncompatability) {
          warn(channelIncompatability);
        }
      }
      if (supportedByScaleType && channelIncompatability === void 0) {
        if (specifiedValue !== void 0) {
          const timeUnit = fieldOrDatumDef.timeUnit;
          const type2 = fieldOrDatumDef.type;
          switch (property2) {
            case "domainMax":
            case "domainMin":
              if (isDateTime(specifiedScale[property2]) || type2 === "temporal" || timeUnit) {
                localScaleCmpt.set(property2, { signal: valueExpr(specifiedScale[property2], { type: type2, timeUnit }) }, true);
              } else {
                localScaleCmpt.set(property2, specifiedScale[property2], true);
              }
              break;
            default:
              localScaleCmpt.copyKeyFromObject(property2, specifiedScale);
          }
        } else {
          const value2 = hasProperty(scaleRules, property2) ? scaleRules[property2]({
            model,
            channel,
            fieldOrDatumDef,
            scaleType: scaleType2,
            scalePadding,
            scalePaddingInner,
            domain: specifiedScale.domain,
            domainMin: specifiedScale.domainMin,
            domainMax: specifiedScale.domainMax,
            markDef,
            config,
            hasNestedOffsetScale: channelHasNestedOffsetScale(encoding, channel),
            hasSecondaryRangeChannel: !!encoding[getSecondaryRangeChannel(channel)]
          }) : config.scale[property2];
          if (value2 !== void 0) {
            localScaleCmpt.set(property2, value2, false);
          }
        }
      }
    }
  }
  const scaleRules = {
    bins: ({ model, fieldOrDatumDef }) => isFieldDef(fieldOrDatumDef) ? bins(model, fieldOrDatumDef) : void 0,
    interpolate: ({ channel, fieldOrDatumDef }) => interpolate(channel, fieldOrDatumDef.type),
    nice: ({ scaleType: scaleType2, channel, domain: domain2, domainMin, domainMax, fieldOrDatumDef }) => nice(scaleType2, channel, domain2, domainMin, domainMax, fieldOrDatumDef),
    padding: ({ channel, scaleType: scaleType2, fieldOrDatumDef, markDef, config }) => padding(channel, scaleType2, config.scale, fieldOrDatumDef, markDef, config.bar),
    paddingInner: ({ scalePadding, channel, markDef, scaleType: scaleType2, config, hasNestedOffsetScale }) => paddingInner(scalePadding, channel, markDef.type, scaleType2, config.scale, hasNestedOffsetScale),
    paddingOuter: ({ scalePadding, channel, scaleType: scaleType2, scalePaddingInner, config, hasNestedOffsetScale }) => paddingOuter(scalePadding, channel, scaleType2, scalePaddingInner, config.scale, hasNestedOffsetScale),
    reverse: ({ fieldOrDatumDef, scaleType: scaleType2, channel, config }) => {
      const sort2 = isFieldDef(fieldOrDatumDef) ? fieldOrDatumDef.sort : void 0;
      return reverse(scaleType2, sort2, channel, config.scale);
    },
    zero: ({ channel, fieldOrDatumDef, domain: domain2, markDef, scaleType: scaleType2, config, hasSecondaryRangeChannel }) => zero(channel, fieldOrDatumDef, domain2, markDef, scaleType2, config.scale, hasSecondaryRangeChannel)
  };
  function parseScaleRange(model) {
    if (isUnitModel(model)) {
      parseUnitScaleRange(model);
    } else {
      parseNonUnitScaleProperty(model, "range");
    }
  }
  function parseNonUnitScaleProperty(model, property2) {
    const localScaleComponents = model.component.scales;
    for (const child of model.children) {
      if (property2 === "range") {
        parseScaleRange(child);
      } else {
        parseScaleProperty(child, property2);
      }
    }
    for (const channel of keys(localScaleComponents)) {
      let valueWithExplicit;
      for (const child of model.children) {
        const childComponent = child.component.scales[channel];
        if (childComponent) {
          const childValueWithExplicit = childComponent.getWithExplicit(property2);
          valueWithExplicit = mergeValuesWithExplicit(valueWithExplicit, childValueWithExplicit, property2, "scale", tieBreakByComparing((v1, v2) => {
            switch (property2) {
              case "range":
                if (v1.step && v2.step) {
                  return v1.step - v2.step;
                }
                return 0;
            }
            return 0;
          }));
        }
      }
      localScaleComponents[channel].setWithExplicit(property2, valueWithExplicit);
    }
  }
  function bins(model, fieldDef) {
    const bin2 = fieldDef.bin;
    if (isBinning(bin2)) {
      const binSignal = getBinSignalName(model, fieldDef.field, bin2);
      return new SignalRefWrapper(() => {
        return model.getSignalName(binSignal);
      });
    } else if (isBinned(bin2) && isBinParams(bin2) && bin2.step !== void 0) {
      return {
        step: bin2.step
      };
    }
    return void 0;
  }
  function interpolate(channel, type2) {
    if (contains([COLOR, FILL, STROKE], channel) && type2 !== "nominal") {
      return "hcl";
    }
    return void 0;
  }
  function nice(scaleType2, channel, specifiedDomain, domainMin, domainMax, fieldOrDatumDef) {
    var _a2;
    if (((_a2 = getFieldDef(fieldOrDatumDef)) == null ? void 0 : _a2.bin) || isArray(specifiedDomain) || domainMax != null || domainMin != null || contains([ScaleType.TIME, ScaleType.UTC], scaleType2)) {
      return void 0;
    }
    return isXorY(channel) ? true : void 0;
  }
  function padding(channel, scaleType2, scaleConfig, fieldOrDatumDef, markDef, barConfig) {
    if (isXorY(channel)) {
      if (isContinuousToContinuous(scaleType2)) {
        if (scaleConfig.continuousPadding !== void 0) {
          return scaleConfig.continuousPadding;
        }
        const { type: type2, orient: orient2 } = markDef;
        if (type2 === "bar" && !(isFieldDef(fieldOrDatumDef) && (fieldOrDatumDef.bin || fieldOrDatumDef.timeUnit))) {
          if (orient2 === "vertical" && channel === "x" || orient2 === "horizontal" && channel === "y") {
            return barConfig.continuousBandSize;
          }
        }
      }
      if (scaleType2 === ScaleType.POINT) {
        return scaleConfig.pointPadding;
      }
    }
    return void 0;
  }
  function paddingInner(paddingValue, channel, mark, scaleType2, scaleConfig, hasNestedOffsetScale = false) {
    if (paddingValue !== void 0) {
      return void 0;
    }
    if (isXorY(channel)) {
      const { bandPaddingInner, barBandPaddingInner, rectBandPaddingInner, tickBandPaddingInner, bandWithNestedOffsetPaddingInner } = scaleConfig;
      if (hasNestedOffsetScale) {
        return bandWithNestedOffsetPaddingInner;
      }
      return getFirstDefined(bandPaddingInner, mark === "bar" ? barBandPaddingInner : mark === "tick" ? tickBandPaddingInner : rectBandPaddingInner);
    } else if (isXorYOffset(channel)) {
      if (scaleType2 === ScaleType.BAND) {
        return scaleConfig.offsetBandPaddingInner;
      }
    }
    return void 0;
  }
  function paddingOuter(paddingValue, channel, scaleType2, paddingInnerValue, scaleConfig, hasNestedOffsetScale = false) {
    if (paddingValue !== void 0) {
      return void 0;
    }
    if (isXorY(channel)) {
      const { bandPaddingOuter, bandWithNestedOffsetPaddingOuter } = scaleConfig;
      if (hasNestedOffsetScale) {
        return bandWithNestedOffsetPaddingOuter;
      }
      if (scaleType2 === ScaleType.BAND) {
        return getFirstDefined(
          bandPaddingOuter,
          /* By default, paddingOuter is paddingInner / 2. The reason is that
            size (width/height) = step * (cardinality - paddingInner + 2 * paddingOuter).
            and we want the width/height to be integer by default.
            Note that step (by default) and cardinality are integers.) */
          isSignalRef(paddingInnerValue) ? { signal: `${paddingInnerValue.signal}/2` } : paddingInnerValue / 2
        );
      }
    } else if (isXorYOffset(channel)) {
      if (scaleType2 === ScaleType.POINT) {
        return 0.5;
      } else if (scaleType2 === ScaleType.BAND) {
        return scaleConfig.offsetBandPaddingOuter;
      }
    }
    return void 0;
  }
  function reverse(scaleType2, sort2, channel, scaleConfig) {
    if (channel === "x" && scaleConfig.xReverse !== void 0) {
      if (hasContinuousDomain(scaleType2) && sort2 === "descending") {
        if (isSignalRef(scaleConfig.xReverse)) {
          return { signal: `!${scaleConfig.xReverse.signal}` };
        } else {
          return !scaleConfig.xReverse;
        }
      }
      return scaleConfig.xReverse;
    }
    if (hasContinuousDomain(scaleType2) && sort2 === "descending") {
      return true;
    }
    return void 0;
  }
  function zero(channel, fieldDef, specifiedDomain, markDef, scaleType2, scaleConfig, hasSecondaryRangeChannel) {
    const hasCustomDomain = !!specifiedDomain && specifiedDomain !== "unaggregated";
    if (hasCustomDomain) {
      if (hasContinuousDomain(scaleType2)) {
        if (isArray(specifiedDomain)) {
          const first = specifiedDomain[0];
          const last = specifiedDomain[specifiedDomain.length - 1];
          if (isNumber$1(first) && first <= 0 && isNumber$1(last) && last >= 0) {
            return true;
          }
        }
        return false;
      }
    }
    if (channel === "size" && fieldDef.type === "quantitative" && !isContinuousToDiscrete(scaleType2)) {
      return true;
    }
    if (!(isFieldDef(fieldDef) && fieldDef.bin) && contains([...POSITION_SCALE_CHANNELS, ...POLAR_POSITION_SCALE_CHANNELS], channel)) {
      const { orient: orient2, type: type2 } = markDef;
      if (contains(["bar", "area", "line", "trail"], type2)) {
        if (orient2 === "horizontal" && channel === "y" || orient2 === "vertical" && channel === "x") {
          return false;
        }
      }
      if (contains(["bar", "area"], type2) && !hasSecondaryRangeChannel) {
        return true;
      }
      return scaleConfig == null ? void 0 : scaleConfig.zero;
    }
    return false;
  }
  function scaleType(specifiedScale, channel, fieldDef, mark, hasNestedOffsetScale = false) {
    const defaultScaleType = defaultType(channel, fieldDef, mark, hasNestedOffsetScale);
    const { type: type2 } = specifiedScale;
    if (!isScaleChannel(channel)) {
      return null;
    }
    if (type2 !== void 0) {
      if (!channelSupportScaleType(channel, type2)) {
        warn(scaleTypeNotWorkWithChannel(channel, type2, defaultScaleType));
        return defaultScaleType;
      }
      if (isFieldDef(fieldDef) && !scaleTypeSupportDataType(type2, fieldDef.type)) {
        warn(scaleTypeNotWorkWithFieldDef(type2, defaultScaleType));
        return defaultScaleType;
      }
      return type2;
    }
    return defaultScaleType;
  }
  function defaultType(channel, fieldDef, mark, hasNestedOffsetScale) {
    var _a2;
    switch (fieldDef.type) {
      case "nominal":
      case "ordinal": {
        if (isColorChannel(channel) || rangeType(channel) === "discrete") {
          if (channel === "shape" && fieldDef.type === "ordinal") {
            warn(discreteChannelCannotEncode(channel, "ordinal"));
          }
          return "ordinal";
        }
        if (isTime(channel)) {
          return "band";
        }
        if (isXorY(channel) || isXorYOffset(channel)) {
          if (contains(["rect", "bar", "image", "rule", "tick"], mark.type)) {
            return "band";
          }
          if (hasNestedOffsetScale) {
            return "band";
          }
        } else if (mark.type === "arc" && channel in POLAR_POSITION_SCALE_CHANNEL_INDEX) {
          return "band";
        }
        const dimensionSize = mark[getSizeChannel(channel)];
        if (isRelativeBandSize(dimensionSize)) {
          return "band";
        }
        if (isPositionFieldOrDatumDef(fieldDef) && ((_a2 = fieldDef.axis) == null ? void 0 : _a2.tickBand)) {
          return "band";
        }
        return "point";
      }
      case "temporal":
        if (isColorChannel(channel)) {
          return "time";
        } else if (rangeType(channel) === "discrete") {
          warn(discreteChannelCannotEncode(channel, "temporal"));
          return "ordinal";
        } else if (isFieldDef(fieldDef) && fieldDef.timeUnit && normalizeTimeUnit(fieldDef.timeUnit).utc) {
          return "utc";
        } else if (isTime(channel)) {
          return "band";
        }
        return "time";
      case "quantitative":
        if (isColorChannel(channel)) {
          if (isFieldDef(fieldDef) && isBinning(fieldDef.bin)) {
            return "bin-ordinal";
          }
          return "linear";
        } else if (rangeType(channel) === "discrete") {
          warn(discreteChannelCannotEncode(channel, "quantitative"));
          return "ordinal";
        } else if (isTime(channel)) {
          return "band";
        }
        return "linear";
      case "geojson":
        return void 0;
    }
    throw new Error(invalidFieldType(fieldDef.type));
  }
  function parseScales(model, { ignoreRange } = {}) {
    parseScaleCore(model);
    parseScaleDomain(model);
    for (const prop of NON_TYPE_DOMAIN_RANGE_VEGA_SCALE_PROPERTIES) {
      parseScaleProperty(model, prop);
    }
    if (!ignoreRange) {
      parseScaleRange(model);
    }
  }
  function parseScaleCore(model) {
    if (isUnitModel(model)) {
      model.component.scales = parseUnitScaleCore(model);
    } else {
      model.component.scales = parseNonUnitScaleCore(model);
    }
  }
  function parseUnitScaleCore(model) {
    const { encoding, mark, markDef } = model;
    const scaleComponents = {};
    for (const channel of SCALE_CHANNELS) {
      const fieldOrDatumDef = getFieldOrDatumDef(encoding[channel]);
      if (fieldOrDatumDef && mark === GEOSHAPE && channel === SHAPE && fieldOrDatumDef.type === GEOJSON) {
        continue;
      }
      let specifiedScale = fieldOrDatumDef && fieldOrDatumDef.scale;
      if (fieldOrDatumDef && specifiedScale !== null && specifiedScale !== false) {
        specifiedScale ?? (specifiedScale = {});
        const hasNestedOffsetScale = channelHasNestedOffsetScale(encoding, channel);
        const sType = scaleType(specifiedScale, channel, fieldOrDatumDef, markDef, hasNestedOffsetScale);
        scaleComponents[channel] = new ScaleComponent(model.scaleName(`${channel}`, true), {
          value: sType,
          explicit: specifiedScale.type === sType
        });
      }
    }
    return scaleComponents;
  }
  const scaleTypeTieBreaker = tieBreakByComparing((st1, st2) => scaleTypePrecedence(st1) - scaleTypePrecedence(st2));
  function parseNonUnitScaleCore(model) {
    var _a2;
    const scaleComponents = model.component.scales = {};
    const scaleTypeWithExplicitIndex = {};
    const resolve2 = model.component.resolve;
    for (const child of model.children) {
      parseScaleCore(child);
      for (const channel of keys(child.component.scales)) {
        (_a2 = resolve2.scale)[channel] ?? (_a2[channel] = defaultScaleResolve(channel, model));
        if (resolve2.scale[channel] === "shared") {
          const explicitScaleType = scaleTypeWithExplicitIndex[channel];
          const childScaleType = child.component.scales[channel].getWithExplicit("type");
          if (explicitScaleType) {
            if (scaleCompatible(explicitScaleType.value, childScaleType.value)) {
              scaleTypeWithExplicitIndex[channel] = mergeValuesWithExplicit(explicitScaleType, childScaleType, "type", "scale", scaleTypeTieBreaker);
            } else {
              resolve2.scale[channel] = "independent";
              delete scaleTypeWithExplicitIndex[channel];
            }
          } else {
            scaleTypeWithExplicitIndex[channel] = childScaleType;
          }
        }
      }
    }
    for (const channel of keys(scaleTypeWithExplicitIndex)) {
      const name = model.scaleName(channel, true);
      const typeWithExplicit = scaleTypeWithExplicitIndex[channel];
      scaleComponents[channel] = new ScaleComponent(name, typeWithExplicit);
      for (const child of model.children) {
        const childScale = child.component.scales[channel];
        if (childScale) {
          child.renameScale(childScale.get("name"), name);
          childScale.merged = true;
        }
      }
    }
    return scaleComponents;
  }
  class NameMap {
    constructor() {
      this.nameMap = {};
    }
    rename(oldName, newName) {
      this.nameMap[oldName] = newName;
    }
    has(name) {
      return this.nameMap[name] !== void 0;
    }
    get(name) {
      while (this.nameMap[name] && name !== this.nameMap[name]) {
        name = this.nameMap[name];
      }
      return name;
    }
  }
  function isUnitModel(model) {
    return (model == null ? void 0 : model.type) === "unit";
  }
  function isFacetModel(model) {
    return (model == null ? void 0 : model.type) === "facet";
  }
  function isConcatModel(model) {
    return (model == null ? void 0 : model.type) === "concat";
  }
  function isLayerModel(model) {
    return (model == null ? void 0 : model.type) === "layer";
  }
  class Model {
    constructor(spec, type2, parent, parentGivenName, config, resolve2, view) {
      this.type = type2;
      this.parent = parent;
      this.config = config;
      this.parent = parent;
      this.config = config;
      this.view = replaceExprRef(view);
      this.name = spec.name ?? parentGivenName;
      this.title = isText(spec.title) ? { text: spec.title } : spec.title ? replaceExprRef(spec.title) : void 0;
      this.scaleNameMap = parent ? parent.scaleNameMap : new NameMap();
      this.projectionNameMap = parent ? parent.projectionNameMap : new NameMap();
      this.signalNameMap = parent ? parent.signalNameMap : new NameMap();
      this.data = spec.data;
      this.description = spec.description;
      this.transforms = normalizeTransform(spec.transform ?? []);
      this.layout = type2 === "layer" || type2 === "unit" ? {} : extractCompositionLayout(spec, type2, config);
      this.component = {
        data: {
          sources: parent ? parent.component.data.sources : [],
          outputNodes: parent ? parent.component.data.outputNodes : {},
          outputNodeRefCounts: parent ? parent.component.data.outputNodeRefCounts : {},
          // data is faceted if the spec is a facet spec or the parent has faceted data and data is undefined
          isFaceted: isFacetSpec(spec) || (parent == null ? void 0 : parent.component.data.isFaceted) && spec.data === void 0
        },
        layoutSize: new Split(),
        layoutHeaders: { row: {}, column: {}, facet: {} },
        mark: null,
        resolve: {
          scale: {},
          axis: {},
          legend: {},
          ...resolve2 ? duplicate(resolve2) : {}
        },
        selection: null,
        scales: null,
        projection: null,
        axes: {},
        legends: {}
      };
    }
    get width() {
      return this.getSizeSignalRef("width");
    }
    get height() {
      return this.getSizeSignalRef("height");
    }
    parse() {
      this.parseScale();
      this.parseLayoutSize();
      this.renameTopLevelLayoutSizeSignal();
      this.parseSelections();
      this.parseProjection();
      this.parseData();
      this.parseAxesAndHeaders();
      this.parseLegends();
      this.parseMarkGroup();
    }
    parseScale() {
      parseScales(this);
    }
    parseProjection() {
      parseProjection(this);
    }
    /**
     * Rename top-level spec's size to be just width / height, ignoring model name.
     * This essentially merges the top-level spec's width/height signals with the width/height signals
     * to help us reduce redundant signals declaration.
     */
    renameTopLevelLayoutSizeSignal() {
      if (this.getName("width") !== "width") {
        this.renameSignal(this.getName("width"), "width");
      }
      if (this.getName("height") !== "height") {
        this.renameSignal(this.getName("height"), "height");
      }
    }
    parseLegends() {
      parseLegend(this);
    }
    assembleEncodeFromView(view) {
      const { style: _, ...baseView } = view;
      const e3 = {};
      for (const property2 of keys(baseView)) {
        const value2 = baseView[property2];
        if (value2 !== void 0) {
          e3[property2] = signalOrValueRef(value2);
        }
      }
      return e3;
    }
    assembleGroupEncodeEntry(isTopLevel) {
      let encodeEntry2 = {};
      if (this.view) {
        encodeEntry2 = this.assembleEncodeFromView(this.view);
      }
      if (!isTopLevel) {
        if (this.description) {
          encodeEntry2["description"] = signalOrValueRef(this.description);
        }
        if (this.type === "unit" || this.type === "layer") {
          return {
            width: this.getSizeSignalRef("width"),
            height: this.getSizeSignalRef("height"),
            ...encodeEntry2
          };
        }
      }
      return isEmpty(encodeEntry2) ? void 0 : encodeEntry2;
    }
    assembleLayout() {
      if (!this.layout) {
        return void 0;
      }
      const { spacing, ...layout } = this.layout;
      const { component, config } = this;
      const titleBand = assembleLayoutTitleBand(component.layoutHeaders, config);
      return {
        padding: spacing,
        ...this.assembleDefaultLayout(),
        ...layout,
        ...titleBand ? { titleBand } : {}
      };
    }
    assembleDefaultLayout() {
      return {};
    }
    assembleHeaderMarks() {
      const { layoutHeaders: layoutHeaders2 } = this.component;
      let headerMarks = [];
      for (const channel of FACET_CHANNELS) {
        if (layoutHeaders2[channel].title) {
          headerMarks.push(assembleTitleGroup(this, channel));
        }
      }
      for (const channel of HEADER_CHANNELS) {
        headerMarks = headerMarks.concat(assembleHeaderGroups(this, channel));
      }
      return headerMarks;
    }
    assembleAxes() {
      return assembleAxes(this.component.axes, this.config);
    }
    assembleLegends() {
      return assembleLegends(this);
    }
    assembleProjections() {
      return assembleProjections(this);
    }
    assembleTitle() {
      const { encoding, ...titleNoEncoding } = this.title ?? {};
      const title2 = {
        ...extractTitleConfig(this.config.title).nonMarkTitleProperties,
        ...titleNoEncoding,
        ...encoding ? { encode: { update: encoding } } : {}
      };
      if (title2.text) {
        if (contains(["unit", "layer"], this.type)) {
          if (contains(["middle", void 0], title2.anchor)) {
            title2.frame ?? (title2.frame = "group");
          }
        } else {
          title2.anchor ?? (title2.anchor = "start");
        }
        return isEmpty(title2) ? void 0 : title2;
      }
      return void 0;
    }
    /**
     * Assemble the mark group for this model. We accept optional `signals` so that we can include concat top-level signals with the top-level model's local signals.
     */
    assembleGroup(signals = []) {
      const group2 = {};
      signals = signals.concat(this.assembleSignals());
      if (signals.length > 0) {
        group2.signals = signals;
      }
      const layout = this.assembleLayout();
      if (layout) {
        group2.layout = layout;
      }
      group2.marks = [].concat(this.assembleHeaderMarks(), this.assembleMarks());
      const scales2 = !this.parent || isFacetModel(this.parent) ? assembleScales(this) : [];
      if (scales2.length > 0) {
        group2.scales = scales2;
      }
      const axes = this.assembleAxes();
      if (axes.length > 0) {
        group2.axes = axes;
      }
      const legends = this.assembleLegends();
      if (legends.length > 0) {
        group2.legends = legends;
      }
      return group2;
    }
    getName(text2) {
      return varName((this.name ? `${this.name}_` : "") + text2);
    }
    getDataName(type2) {
      return this.getName(DataSourceType[type2].toLowerCase());
    }
    /**
     * Request a data source name for the given data source type and mark that data source as required.
     * This method should be called in parse, so that all used data source can be correctly instantiated in assembleData().
     * You can lookup the correct dataset name in assemble with `lookupDataSource`.
     */
    requestDataName(name) {
      const fullName = this.getDataName(name);
      const refCounts = this.component.data.outputNodeRefCounts;
      refCounts[fullName] = (refCounts[fullName] || 0) + 1;
      return fullName;
    }
    getSizeSignalRef(layoutSizeType) {
      if (isFacetModel(this.parent)) {
        const sizeType = getSizeTypeFromLayoutSizeType(layoutSizeType);
        const channel = getPositionScaleChannel(sizeType);
        const scaleComponent = this.component.scales[channel];
        if (scaleComponent && !scaleComponent.merged) {
          const type2 = scaleComponent.get("type");
          const range2 = scaleComponent.get("range");
          if (hasDiscreteDomain(type2) && isVgRangeStep(range2)) {
            const scaleName = scaleComponent.get("name");
            const domain2 = assembleDomain(this, channel);
            const field2 = getFieldFromDomain(domain2);
            if (field2) {
              const fieldRef2 = vgField({ aggregate: "distinct", field: field2 }, { expr: "datum" });
              return {
                signal: sizeExpr(scaleName, scaleComponent, fieldRef2)
              };
            } else {
              warn(unknownField(channel));
              return null;
            }
          }
        }
      }
      return {
        signal: this.signalNameMap.get(this.getName(layoutSizeType))
      };
    }
    /**
     * Lookup the name of the datasource for an output node. You probably want to call this in assemble.
     */
    lookupDataSource(name) {
      const node = this.component.data.outputNodes[name];
      if (!node) {
        return name;
      }
      return node.getSource();
    }
    getSignalName(oldSignalName) {
      return this.signalNameMap.get(oldSignalName);
    }
    renameSignal(oldName, newName) {
      this.signalNameMap.rename(oldName, newName);
    }
    renameScale(oldName, newName) {
      this.scaleNameMap.rename(oldName, newName);
    }
    renameProjection(oldName, newName) {
      this.projectionNameMap.rename(oldName, newName);
    }
    /**
     * @return scale name for a given channel after the scale has been parsed and named.
     */
    scaleName(originalScaleName, parse2) {
      if (parse2) {
        return this.getName(originalScaleName);
      }
      if (
        // If there is a scale for the channel, there should be a local scale component for it
        isChannel(originalScaleName) && isScaleChannel(originalScaleName) && this.component.scales[originalScaleName] || // in the scale name map (the scale get merged by its parent)
        this.scaleNameMap.has(this.getName(originalScaleName))
      ) {
        return this.scaleNameMap.get(this.getName(originalScaleName));
      }
      return void 0;
    }
    /**
     * @return projection name after the projection has been parsed and named.
     */
    projectionName(parse2) {
      if (parse2) {
        return this.getName("projection");
      }
      if (this.component.projection && !this.component.projection.merged || this.projectionNameMap.has(this.getName("projection"))) {
        return this.projectionNameMap.get(this.getName("projection"));
      }
      return void 0;
    }
    /**
     * Traverse a model's hierarchy to get the scale component for a particular channel.
     */
    getScaleComponent(channel) {
      if (!this.component.scales) {
        throw new Error("getScaleComponent cannot be called before parseScale(). Make sure you have called parseScale or use parseUnitModelWithScale().");
      }
      const localScaleComponent = this.component.scales[channel];
      if (localScaleComponent && !localScaleComponent.merged) {
        return localScaleComponent;
      }
      return this.parent ? this.parent.getScaleComponent(channel) : void 0;
    }
    getScaleType(channel) {
      const scaleComponent = this.getScaleComponent(channel);
      return scaleComponent ? scaleComponent.get("type") : void 0;
    }
    /**
     * Traverse a model's hierarchy to get a particular selection component.
     */
    getSelectionComponent(variableName, origName) {
      let sel = this.component.selection[variableName];
      if (!sel && this.parent) {
        sel = this.parent.getSelectionComponent(variableName, origName);
      }
      if (!sel) {
        throw new Error(selectionNotFound(origName));
      }
      return sel;
    }
    /**
     * Returns true if the model has a signalRef for an axis orient.
     */
    hasAxisOrientSignalRef() {
      var _a2, _b2;
      return ((_a2 = this.component.axes.x) == null ? void 0 : _a2.some((a2) => a2.hasOrientSignalRef())) || ((_b2 = this.component.axes.y) == null ? void 0 : _b2.some((a2) => a2.hasOrientSignalRef()));
    }
  }
  class ModelWithField extends Model {
    /** Get "field" reference for Vega */
    vgField(channel, opt = {}) {
      const fieldDef = this.fieldDef(channel);
      if (!fieldDef) {
        return void 0;
      }
      return vgField(fieldDef, opt);
    }
    reduceFieldDef(f, init2) {
      return reduce(this.getMapping(), (acc, cd, c2) => {
        const fieldDef = getFieldDef(cd);
        if (fieldDef) {
          return f(acc, fieldDef, c2);
        }
        return acc;
      }, init2);
    }
    forEachFieldDef(f, t) {
      forEach(this.getMapping(), (cd, c2) => {
        const fieldDef = getFieldDef(cd);
        if (fieldDef) {
          f(fieldDef, c2);
        }
      }, t);
    }
  }
  class DensityTransformNode extends DataFlowNode {
    clone() {
      return new DensityTransformNode(null, duplicate(this.transform));
    }
    constructor(parent, transform2) {
      super(parent);
      this.transform = transform2;
      this.transform = duplicate(transform2);
      const specifiedAs = this.transform.as ?? [void 0, void 0];
      this.transform.as = [specifiedAs[0] ?? "value", specifiedAs[1] ?? "density"];
      const resolve2 = this.transform.resolve ?? "shared";
      this.transform.resolve = resolve2;
    }
    dependentFields() {
      return /* @__PURE__ */ new Set([this.transform.density, ...this.transform.groupby ?? []]);
    }
    producedFields() {
      return new Set(this.transform.as);
    }
    hash() {
      return `DensityTransform ${hash(this.transform)}`;
    }
    assemble() {
      const { density, ...rest } = this.transform;
      const result = {
        type: "kde",
        field: density,
        ...rest
      };
      result.resolve = this.transform.resolve;
      return result;
    }
  }
  class ExtentTransformNode extends DataFlowNode {
    clone() {
      return new ExtentTransformNode(null, duplicate(this.transform));
    }
    constructor(parent, transform2) {
      super(parent);
      this.transform = transform2;
      this.transform = duplicate(transform2);
    }
    dependentFields() {
      return /* @__PURE__ */ new Set([this.transform.extent]);
    }
    producedFields() {
      return /* @__PURE__ */ new Set([]);
    }
    hash() {
      return `ExtentTransform ${hash(this.transform)}`;
    }
    assemble() {
      const { extent: extent2, param: param2 } = this.transform;
      const result = {
        type: "extent",
        field: extent2,
        signal: param2
      };
      return result;
    }
  }
  class FlattenTransformNode extends DataFlowNode {
    clone() {
      return new FlattenTransformNode(this.parent, duplicate(this.transform));
    }
    constructor(parent, transform2) {
      super(parent);
      this.transform = transform2;
      this.transform = duplicate(transform2);
      const { flatten: flatten2, as = [] } = this.transform;
      this.transform.as = flatten2.map((f, i) => as[i] ?? f);
    }
    dependentFields() {
      return new Set(this.transform.flatten);
    }
    producedFields() {
      return new Set(this.transform.as);
    }
    hash() {
      return `FlattenTransform ${hash(this.transform)}`;
    }
    assemble() {
      const { flatten: fields, as } = this.transform;
      const result = {
        type: "flatten",
        fields,
        as
      };
      return result;
    }
  }
  class FoldTransformNode extends DataFlowNode {
    clone() {
      return new FoldTransformNode(null, duplicate(this.transform));
    }
    constructor(parent, transform2) {
      super(parent);
      this.transform = transform2;
      this.transform = duplicate(transform2);
      const specifiedAs = this.transform.as ?? [void 0, void 0];
      this.transform.as = [specifiedAs[0] ?? "key", specifiedAs[1] ?? "value"];
    }
    dependentFields() {
      return new Set(this.transform.fold);
    }
    producedFields() {
      return new Set(this.transform.as);
    }
    hash() {
      return `FoldTransform ${hash(this.transform)}`;
    }
    assemble() {
      const { fold, as } = this.transform;
      const result = {
        type: "fold",
        fields: fold,
        as
      };
      return result;
    }
  }
  class GeoJSONNode extends DataFlowNode {
    clone() {
      return new GeoJSONNode(null, duplicate(this.fields), this.geojson, this.signal);
    }
    static parseAll(parent, model) {
      if (model.component.projection && !model.component.projection.isFit) {
        return parent;
      }
      let geoJsonCounter = 0;
      for (const coordinates of [
        [LONGITUDE, LATITUDE],
        [LONGITUDE2, LATITUDE2]
      ]) {
        const pair = coordinates.map((channel) => {
          const def2 = getFieldOrDatumDef(model.encoding[channel]);
          return isFieldDef(def2) ? def2.field : isDatumDef(def2) ? { expr: `${def2.datum}` } : isValueDef(def2) ? { expr: `${def2["value"]}` } : void 0;
        });
        if (pair[0] || pair[1]) {
          parent = new GeoJSONNode(parent, pair, null, model.getName(`geojson_${geoJsonCounter++}`));
        }
      }
      if (model.channelHasField(SHAPE)) {
        const fieldDef = model.typedFieldDef(SHAPE);
        if (fieldDef.type === GEOJSON) {
          parent = new GeoJSONNode(parent, null, fieldDef.field, model.getName(`geojson_${geoJsonCounter++}`));
        }
      }
      return parent;
    }
    constructor(parent, fields, geojson, signal) {
      super(parent);
      this.fields = fields;
      this.geojson = geojson;
      this.signal = signal;
    }
    dependentFields() {
      const fields = (this.fields ?? []).filter(isString);
      return /* @__PURE__ */ new Set([...this.geojson ? [this.geojson] : [], ...fields]);
    }
    producedFields() {
      return /* @__PURE__ */ new Set();
    }
    hash() {
      return `GeoJSON ${this.geojson} ${this.signal} ${hash(this.fields)}`;
    }
    assemble() {
      return [
        ...this.geojson ? [
          {
            type: "filter",
            expr: `isValid(datum["${this.geojson}"])`
          }
        ] : [],
        {
          type: "geojson",
          ...this.fields ? { fields: this.fields } : {},
          ...this.geojson ? { geojson: this.geojson } : {},
          signal: this.signal
        }
      ];
    }
  }
  class GeoPointNode extends DataFlowNode {
    clone() {
      return new GeoPointNode(null, this.projection, duplicate(this.fields), duplicate(this.as));
    }
    constructor(parent, projection2, fields, as) {
      super(parent);
      this.projection = projection2;
      this.fields = fields;
      this.as = as;
    }
    static parseAll(parent, model) {
      if (!model.projectionName()) {
        return parent;
      }
      for (const coordinates of [
        [LONGITUDE, LATITUDE],
        [LONGITUDE2, LATITUDE2]
      ]) {
        const pair = coordinates.map((channel) => {
          const def2 = getFieldOrDatumDef(model.encoding[channel]);
          return isFieldDef(def2) ? def2.field : isDatumDef(def2) ? { expr: `${def2.datum}` } : isValueDef(def2) ? { expr: `${def2["value"]}` } : void 0;
        });
        const suffix = coordinates[0] === LONGITUDE2 ? "2" : "";
        if (pair[0] || pair[1]) {
          parent = new GeoPointNode(parent, model.projectionName(), pair, [
            model.getName(`x${suffix}`),
            model.getName(`y${suffix}`)
          ]);
        }
      }
      return parent;
    }
    dependentFields() {
      return new Set(this.fields.filter(isString));
    }
    producedFields() {
      return new Set(this.as);
    }
    hash() {
      return `Geopoint ${this.projection} ${hash(this.fields)} ${hash(this.as)}`;
    }
    assemble() {
      return {
        type: "geopoint",
        projection: this.projection,
        fields: this.fields,
        as: this.as
      };
    }
  }
  class ImputeNode extends DataFlowNode {
    clone() {
      return new ImputeNode(null, duplicate(this.transform));
    }
    constructor(parent, transform2) {
      super(parent);
      this.transform = transform2;
    }
    dependentFields() {
      return /* @__PURE__ */ new Set([this.transform.impute, this.transform.key, ...this.transform.groupby ?? []]);
    }
    producedFields() {
      return /* @__PURE__ */ new Set([this.transform.impute]);
    }
    processSequence(keyvals) {
      const { start = 0, stop: stop2, step } = keyvals;
      const result = [start, stop2, ...step ? [step] : []].join(",");
      return { signal: `sequence(${result})` };
    }
    static makeFromTransform(parent, imputeTransform) {
      return new ImputeNode(parent, imputeTransform);
    }
    static makeFromEncoding(parent, model) {
      const encoding = model.encoding;
      const xDef = encoding.x;
      const yDef = encoding.y;
      if (isFieldDef(xDef) && isFieldDef(yDef)) {
        const imputedChannel = xDef.impute ? xDef : yDef.impute ? yDef : void 0;
        if (imputedChannel === void 0) {
          return void 0;
        }
        const keyChannel = xDef.impute ? yDef : yDef.impute ? xDef : void 0;
        const { method: method2, value: value2, frame: frame2, keyvals } = imputedChannel.impute;
        const groupbyFields = pathGroupingFields(model.mark, encoding);
        return new ImputeNode(parent, {
          impute: imputedChannel.field,
          key: keyChannel.field,
          ...method2 ? { method: method2 } : {},
          ...value2 !== void 0 ? { value: value2 } : {},
          ...frame2 ? { frame: frame2 } : {},
          ...keyvals !== void 0 ? { keyvals } : {},
          ...groupbyFields.length ? { groupby: groupbyFields } : {}
        });
      }
      return null;
    }
    hash() {
      return `Impute ${hash(this.transform)}`;
    }
    assemble() {
      const { impute, key: key2, keyvals, method: method2, groupby, value: value2, frame: frame2 = [null, null] } = this.transform;
      const imputeTransform = {
        type: "impute",
        field: impute,
        key: key2,
        ...keyvals ? { keyvals: isImputeSequence(keyvals) ? this.processSequence(keyvals) : keyvals } : {},
        method: "value",
        ...groupby ? { groupby } : {},
        value: !method2 || method2 === "value" ? value2 : null
      };
      if (method2 && method2 !== "value") {
        const deriveNewField = {
          type: "window",
          as: [`imputed_${impute}_value`],
          ops: [method2],
          fields: [impute],
          frame: frame2,
          ignorePeers: false,
          ...groupby ? { groupby } : {}
        };
        const replaceOriginal = {
          type: "formula",
          expr: `datum.${impute} === null ? datum.imputed_${impute}_value : datum.${impute}`,
          as: impute
        };
        return [imputeTransform, deriveNewField, replaceOriginal];
      } else {
        return [imputeTransform];
      }
    }
  }
  class LoessTransformNode extends DataFlowNode {
    clone() {
      return new LoessTransformNode(null, duplicate(this.transform));
    }
    constructor(parent, transform2) {
      super(parent);
      this.transform = transform2;
      this.transform = duplicate(transform2);
      const specifiedAs = this.transform.as ?? [void 0, void 0];
      this.transform.as = [specifiedAs[0] ?? transform2.on, specifiedAs[1] ?? transform2.loess];
    }
    dependentFields() {
      return /* @__PURE__ */ new Set([this.transform.loess, this.transform.on, ...this.transform.groupby ?? []]);
    }
    producedFields() {
      return new Set(this.transform.as);
    }
    hash() {
      return `LoessTransform ${hash(this.transform)}`;
    }
    assemble() {
      const { loess: loess2, on: on2, ...rest } = this.transform;
      const result = {
        type: "loess",
        x: on2,
        y: loess2,
        ...rest
      };
      return result;
    }
  }
  class LookupNode extends DataFlowNode {
    clone() {
      return new LookupNode(null, duplicate(this.transform), this.secondary);
    }
    constructor(parent, transform2, secondary) {
      super(parent);
      this.transform = transform2;
      this.secondary = secondary;
    }
    static make(parent, model, transform2, counter2) {
      const sources = model.component.data.sources;
      const { from } = transform2;
      let fromOutputNode = null;
      if (isLookupData(from)) {
        let fromSource = findSource(from.data, sources);
        if (!fromSource) {
          fromSource = new SourceNode(from.data);
          sources.push(fromSource);
        }
        const fromOutputName = model.getName(`lookup_${counter2}`);
        fromOutputNode = new OutputNode(fromSource, fromOutputName, DataSourceType.Lookup, model.component.data.outputNodeRefCounts);
        model.component.data.outputNodes[fromOutputName] = fromOutputNode;
      } else if (isLookupSelection(from)) {
        const selName = from.param;
        transform2 = { as: selName, ...transform2 };
        let selCmpt;
        try {
          selCmpt = model.getSelectionComponent(varName(selName), selName);
        } catch (e3) {
          throw new Error(cannotLookupVariableParameter(selName));
        }
        fromOutputNode = selCmpt.materialized;
        if (!fromOutputNode) {
          throw new Error(noSameUnitLookup(selName));
        }
      }
      return new LookupNode(parent, transform2, fromOutputNode.getSource());
    }
    dependentFields() {
      return /* @__PURE__ */ new Set([this.transform.lookup]);
    }
    producedFields() {
      return new Set(this.transform.as ? array$5(this.transform.as) : this.transform.from.fields);
    }
    hash() {
      return `Lookup ${hash({ transform: this.transform, secondary: this.secondary })}`;
    }
    assemble() {
      let foreign;
      if (this.transform.from.fields) {
        foreign = {
          values: this.transform.from.fields,
          ...this.transform.as ? { as: array$5(this.transform.as) } : {}
        };
      } else {
        let asName = this.transform.as;
        if (!isString(asName)) {
          warn(NO_FIELDS_NEEDS_AS);
          asName = "_lookup";
        }
        foreign = {
          as: [asName]
        };
      }
      return {
        type: "lookup",
        from: this.secondary,
        key: this.transform.from.key,
        fields: [this.transform.lookup],
        ...foreign,
        ...this.transform.default ? { default: this.transform.default } : {}
      };
    }
  }
  class QuantileTransformNode extends DataFlowNode {
    clone() {
      return new QuantileTransformNode(null, duplicate(this.transform));
    }
    constructor(parent, transform2) {
      super(parent);
      this.transform = transform2;
      this.transform = duplicate(transform2);
      const specifiedAs = this.transform.as ?? [void 0, void 0];
      this.transform.as = [specifiedAs[0] ?? "prob", specifiedAs[1] ?? "value"];
    }
    dependentFields() {
      return /* @__PURE__ */ new Set([this.transform.quantile, ...this.transform.groupby ?? []]);
    }
    producedFields() {
      return new Set(this.transform.as);
    }
    hash() {
      return `QuantileTransform ${hash(this.transform)}`;
    }
    assemble() {
      const { quantile: quantile2, ...rest } = this.transform;
      const result = {
        type: "quantile",
        field: quantile2,
        ...rest
      };
      return result;
    }
  }
  class RegressionTransformNode extends DataFlowNode {
    clone() {
      return new RegressionTransformNode(null, duplicate(this.transform));
    }
    constructor(parent, transform2) {
      super(parent);
      this.transform = transform2;
      this.transform = duplicate(transform2);
      const specifiedAs = this.transform.as ?? [void 0, void 0];
      this.transform.as = [specifiedAs[0] ?? transform2.on, specifiedAs[1] ?? transform2.regression];
    }
    dependentFields() {
      return /* @__PURE__ */ new Set([this.transform.regression, this.transform.on, ...this.transform.groupby ?? []]);
    }
    producedFields() {
      return new Set(this.transform.as);
    }
    hash() {
      return `RegressionTransform ${hash(this.transform)}`;
    }
    assemble() {
      const { regression, on: on2, ...rest } = this.transform;
      const result = {
        type: "regression",
        x: on2,
        y: regression,
        ...rest
      };
      return result;
    }
  }
  class PivotTransformNode extends DataFlowNode {
    clone() {
      return new PivotTransformNode(null, duplicate(this.transform));
    }
    constructor(parent, transform2) {
      super(parent);
      this.transform = transform2;
    }
    addDimensions(fields) {
      this.transform.groupby = unique((this.transform.groupby ?? []).concat(fields), (d) => d);
    }
    producedFields() {
      return void 0;
    }
    dependentFields() {
      return /* @__PURE__ */ new Set([this.transform.pivot, this.transform.value, ...this.transform.groupby ?? []]);
    }
    hash() {
      return `PivotTransform ${hash(this.transform)}`;
    }
    assemble() {
      const { pivot, value: value2, groupby, limit, op } = this.transform;
      return {
        type: "pivot",
        field: pivot,
        value: value2,
        ...limit !== void 0 ? { limit } : {},
        ...op !== void 0 ? { op } : {},
        ...groupby !== void 0 ? { groupby } : {}
      };
    }
  }
  class SampleTransformNode extends DataFlowNode {
    clone() {
      return new SampleTransformNode(null, duplicate(this.transform));
    }
    constructor(parent, transform2) {
      super(parent);
      this.transform = transform2;
    }
    dependentFields() {
      return /* @__PURE__ */ new Set();
    }
    producedFields() {
      return /* @__PURE__ */ new Set();
    }
    hash() {
      return `SampleTransform ${hash(this.transform)}`;
    }
    assemble() {
      return {
        type: "sample",
        size: this.transform.sample
      };
    }
  }
  function makeWalkTree(data2) {
    let datasetIndex = 0;
    function walkTree(node, dataSource) {
      if (node instanceof SourceNode) {
        if (!node.isGenerator && !isUrlData(node.data)) {
          data2.push(dataSource);
          const newData = {
            name: null,
            source: dataSource.name,
            transform: []
          };
          dataSource = newData;
        }
      }
      if (node instanceof ParseNode) {
        if (node.parent instanceof SourceNode && !dataSource.source) {
          dataSource.format = {
            ...dataSource.format,
            parse: node.assembleFormatParse()
          };
          dataSource.transform.push(...node.assembleTransforms(true));
        } else {
          dataSource.transform.push(...node.assembleTransforms());
        }
      }
      if (node instanceof FacetNode) {
        if (!dataSource.name) {
          dataSource.name = `data_${datasetIndex++}`;
        }
        if (!dataSource.source || dataSource.transform.length > 0) {
          data2.push(dataSource);
          node.data = dataSource.name;
        } else {
          node.data = dataSource.source;
        }
        data2.push(...node.assemble());
        return;
      }
      if (node instanceof GraticuleNode || node instanceof SequenceNode || node instanceof FilterInvalidNode || node instanceof FilterNode || node instanceof CalculateNode || node instanceof GeoPointNode || node instanceof AggregateNode || node instanceof LookupNode || node instanceof WindowTransformNode || node instanceof JoinAggregateTransformNode || node instanceof FoldTransformNode || node instanceof FlattenTransformNode || node instanceof DensityTransformNode || node instanceof LoessTransformNode || node instanceof QuantileTransformNode || node instanceof RegressionTransformNode || node instanceof IdentifierNode || node instanceof SampleTransformNode || node instanceof PivotTransformNode || node instanceof ExtentTransformNode) {
        dataSource.transform.push(node.assemble());
      }
      if (node instanceof BinNode || node instanceof TimeUnitNode || node instanceof ImputeNode || node instanceof StackNode || node instanceof GeoJSONNode) {
        dataSource.transform.push(...node.assemble());
      }
      if (node instanceof OutputNode) {
        if (dataSource.source && dataSource.transform.length === 0) {
          node.setSource(dataSource.source);
        } else if (node.parent instanceof OutputNode) {
          node.setSource(dataSource.name);
        } else {
          if (!dataSource.name) {
            dataSource.name = `data_${datasetIndex++}`;
          }
          node.setSource(dataSource.name);
          if (node.numChildren() === 1) {
            data2.push(dataSource);
            const newData = {
              name: null,
              source: dataSource.name,
              transform: []
            };
            dataSource = newData;
          }
        }
      }
      switch (node.numChildren()) {
        case 0:
          if (node instanceof OutputNode && (!dataSource.source || dataSource.transform.length > 0)) {
            data2.push(dataSource);
          }
          break;
        case 1:
          walkTree(node.children[0], dataSource);
          break;
        default: {
          if (!dataSource.name) {
            dataSource.name = `data_${datasetIndex++}`;
          }
          let source2 = dataSource.name;
          if (!dataSource.source || dataSource.transform.length > 0) {
            data2.push(dataSource);
          } else {
            source2 = dataSource.source;
          }
          for (const child of node.children) {
            const newData = {
              name: null,
              source: source2,
              transform: []
            };
            walkTree(child, newData);
          }
          break;
        }
      }
    }
    return walkTree;
  }
  function assembleFacetData(root) {
    const data2 = [];
    const walkTree = makeWalkTree(data2);
    for (const child of root.children) {
      walkTree(child, {
        source: root.name,
        name: null,
        transform: []
      });
    }
    return data2;
  }
  function assembleRootData(dataComponent, datasets) {
    const data2 = [];
    const walkTree = makeWalkTree(data2);
    let sourceIndex = 0;
    for (const root of dataComponent.sources) {
      if (!root.hasName()) {
        root.dataName = `source_${sourceIndex++}`;
      }
      const newData = root.assemble();
      walkTree(root, newData);
    }
    for (const d of data2) {
      if (d.transform.length === 0) {
        delete d.transform;
      }
    }
    let whereTo = 0;
    for (const [i, d] of data2.entries()) {
      if ((d.transform ?? []).length === 0 && !d.source) {
        data2.splice(whereTo++, 0, data2.splice(i, 1)[0]);
      }
    }
    for (const d of data2) {
      for (const t of d.transform ?? []) {
        if (t.type === "lookup") {
          t.from = dataComponent.outputNodes[t.from].getSource();
        }
      }
    }
    for (const d of data2) {
      if (d.name in datasets) {
        d.values = datasets[d.name];
      }
    }
    return data2;
  }
  function getHeaderType(orient2) {
    if (orient2 === "top" || orient2 === "left" || isSignalRef(orient2)) {
      return "header";
    }
    return "footer";
  }
  function parseFacetHeaders(model) {
    for (const channel of FACET_CHANNELS) {
      parseFacetHeader(model, channel);
    }
    mergeChildAxis(model, "x");
    mergeChildAxis(model, "y");
  }
  function parseFacetHeader(model, channel) {
    var _a2;
    const { facet, config, child, component } = model;
    if (model.channelHasField(channel)) {
      const fieldDef = facet[channel];
      const titleConfig = getHeaderProperty("title", null, config, channel);
      let title$1 = title(fieldDef, config, {
        allowDisabling: true,
        includeDefault: titleConfig === void 0 || !!titleConfig
      });
      if (child.component.layoutHeaders[channel].title) {
        title$1 = isArray(title$1) ? title$1.join(", ") : title$1;
        title$1 += ` / ${child.component.layoutHeaders[channel].title}`;
        child.component.layoutHeaders[channel].title = null;
      }
      const labelOrient = getHeaderProperty("labelOrient", fieldDef.header, config, channel);
      const labels2 = fieldDef.header !== null ? getFirstDefined((_a2 = fieldDef.header) == null ? void 0 : _a2.labels, config.header.labels, true) : false;
      const headerType = contains(["bottom", "right"], labelOrient) ? "footer" : "header";
      component.layoutHeaders[channel] = {
        title: fieldDef.header !== null ? title$1 : null,
        facetFieldDef: fieldDef,
        [headerType]: channel === "facet" ? [] : [makeHeaderComponent(model, channel, labels2)]
      };
    }
  }
  function makeHeaderComponent(model, channel, labels2) {
    const sizeType = channel === "row" ? "height" : "width";
    return {
      labels: labels2,
      sizeSignal: model.child.component.layoutSize.get(sizeType) ? model.child.getSizeSignalRef(sizeType) : void 0,
      axes: []
    };
  }
  function mergeChildAxis(model, channel) {
    const { child } = model;
    if (child.component.axes[channel]) {
      const { layoutHeaders: layoutHeaders2, resolve: resolve2 } = model.component;
      resolve2.axis[channel] = parseGuideResolve(resolve2, channel);
      if (resolve2.axis[channel] === "shared") {
        const headerChannel = channel === "x" ? "column" : "row";
        const layoutHeader = layoutHeaders2[headerChannel];
        for (const axisComponent of child.component.axes[channel]) {
          const headerType = getHeaderType(axisComponent.get("orient"));
          layoutHeader[headerType] ?? (layoutHeader[headerType] = [makeHeaderComponent(model, headerChannel, false)]);
          const mainAxis = assembleAxis(axisComponent, "main", model.config, { header: true });
          if (mainAxis) {
            layoutHeader[headerType][0].axes.push(mainAxis);
          }
          axisComponent.mainExtracted = true;
        }
      }
    }
  }
  function parseLayerLayoutSize(model) {
    parseChildrenLayoutSize(model);
    parseNonUnitLayoutSizeForChannel(model, "width");
    parseNonUnitLayoutSizeForChannel(model, "height");
  }
  function parseConcatLayoutSize(model) {
    parseChildrenLayoutSize(model);
    const widthType = model.layout.columns === 1 ? "width" : "childWidth";
    const heightType = model.layout.columns === void 0 ? "height" : "childHeight";
    parseNonUnitLayoutSizeForChannel(model, widthType);
    parseNonUnitLayoutSizeForChannel(model, heightType);
  }
  function parseChildrenLayoutSize(model) {
    for (const child of model.children) {
      child.parseLayoutSize();
    }
  }
  function parseNonUnitLayoutSizeForChannel(model, layoutSizeType) {
    const sizeType = getSizeTypeFromLayoutSizeType(layoutSizeType);
    const channel = getPositionScaleChannel(sizeType);
    const resolve2 = model.component.resolve;
    const layoutSizeCmpt = model.component.layoutSize;
    let mergedSize;
    for (const child of model.children) {
      const childSize = child.component.layoutSize.getWithExplicit(sizeType);
      const scaleResolve = resolve2.scale[channel] ?? defaultScaleResolve(channel, model);
      if (scaleResolve === "independent" && childSize.value === "step") {
        mergedSize = void 0;
        break;
      }
      if (mergedSize) {
        if (scaleResolve === "independent" && mergedSize.value !== childSize.value) {
          mergedSize = void 0;
          break;
        }
        mergedSize = mergeValuesWithExplicit(mergedSize, childSize, sizeType, "");
      } else {
        mergedSize = childSize;
      }
    }
    if (mergedSize) {
      for (const child of model.children) {
        model.renameSignal(child.getName(sizeType), model.getName(layoutSizeType));
        child.component.layoutSize.set(sizeType, "merged", false);
      }
      layoutSizeCmpt.setWithExplicit(layoutSizeType, mergedSize);
    } else {
      layoutSizeCmpt.setWithExplicit(layoutSizeType, {
        explicit: false,
        value: void 0
      });
    }
  }
  function parseUnitLayoutSize(model) {
    const { size, component } = model;
    for (const channel of POSITION_SCALE_CHANNELS) {
      const sizeType = getSizeChannel(channel);
      if (size[sizeType]) {
        const specifiedSize = size[sizeType];
        component.layoutSize.set(sizeType, isStep(specifiedSize) ? "step" : specifiedSize, true);
      } else {
        const defaultSize = defaultUnitSize(model, sizeType);
        component.layoutSize.set(sizeType, defaultSize, false);
      }
    }
  }
  function defaultUnitSize(model, sizeType) {
    const channel = sizeType === "width" ? "x" : "y";
    const config = model.config;
    const scaleComponent = model.getScaleComponent(channel);
    if (scaleComponent) {
      const scaleType2 = scaleComponent.get("type");
      const range2 = scaleComponent.get("range");
      if (hasDiscreteDomain(scaleType2)) {
        const size = getViewConfigDiscreteSize(config.view, sizeType);
        if (isVgRangeStep(range2) || isStep(size)) {
          return "step";
        } else {
          return size;
        }
      } else {
        return getViewConfigContinuousSize(config.view, sizeType);
      }
    } else if (model.hasProjection || model.mark === "arc") {
      return getViewConfigContinuousSize(config.view, sizeType);
    } else {
      const size = getViewConfigDiscreteSize(config.view, sizeType);
      return isStep(size) ? size.step : size;
    }
  }
  function facetSortFieldName(fieldDef, sort2, opt) {
    return vgField(sort2, { suffix: `by_${vgField(fieldDef)}`, ...opt });
  }
  class FacetModel extends ModelWithField {
    constructor(spec, parent, parentGivenName, config) {
      super(spec, "facet", parent, parentGivenName, config, spec.resolve);
      this.child = buildModel(spec.spec, this, this.getName("child"), void 0, config);
      this.children = [this.child];
      this.facet = this.initFacet(spec.facet);
    }
    initFacet(facet) {
      if (!isFacetMapping(facet)) {
        return { facet: this.initFacetFieldDef(facet, "facet") };
      }
      const channels = keys(facet);
      const normalizedFacet = {};
      for (const channel of channels) {
        if (![ROW, COLUMN].includes(channel)) {
          warn(incompatibleChannel(channel, "facet"));
          break;
        }
        const fieldDef = facet[channel];
        if (fieldDef.field === void 0) {
          warn(emptyFieldDef(fieldDef, channel));
          break;
        }
        normalizedFacet[channel] = this.initFacetFieldDef(fieldDef, channel);
      }
      return normalizedFacet;
    }
    initFacetFieldDef(fieldDef, channel) {
      const facetFieldDef = initFieldDef(fieldDef, channel);
      if (facetFieldDef.header) {
        facetFieldDef.header = replaceExprRef(facetFieldDef.header);
      } else if (facetFieldDef.header === null) {
        facetFieldDef.header = null;
      }
      return facetFieldDef;
    }
    channelHasField(channel) {
      return hasProperty(this.facet, channel);
    }
    fieldDef(channel) {
      return this.facet[channel];
    }
    parseData() {
      this.component.data = parseData(this);
      this.child.parseData();
    }
    parseLayoutSize() {
      parseChildrenLayoutSize(this);
    }
    parseSelections() {
      this.child.parseSelections();
      this.component.selection = this.child.component.selection;
      if (Object.values(this.component.selection).some((selCmpt) => isTimerSelection(selCmpt))) {
        error(MULTI_VIEW_ANIMATION_UNSUPPORTED);
      }
    }
    parseMarkGroup() {
      this.child.parseMarkGroup();
    }
    parseAxesAndHeaders() {
      this.child.parseAxesAndHeaders();
      parseFacetHeaders(this);
    }
    assembleSelectionTopLevelSignals(signals) {
      return this.child.assembleSelectionTopLevelSignals(signals);
    }
    assembleSignals() {
      this.child.assembleSignals();
      return [];
    }
    assembleSelectionData(data2) {
      return this.child.assembleSelectionData(data2);
    }
    getHeaderLayoutMixins() {
      const layoutMixins = {};
      for (const channel of FACET_CHANNELS) {
        for (const headerType of HEADER_TYPES) {
          const layoutHeaderComponent = this.component.layoutHeaders[channel];
          const headerComponent = layoutHeaderComponent[headerType];
          const { facetFieldDef } = layoutHeaderComponent;
          if (facetFieldDef) {
            const titleOrient = getHeaderProperty("titleOrient", facetFieldDef.header, this.config, channel);
            if (["right", "bottom"].includes(titleOrient)) {
              const headerChannel = getHeaderChannel(channel, titleOrient);
              layoutMixins.titleAnchor ?? (layoutMixins.titleAnchor = {});
              layoutMixins.titleAnchor[headerChannel] = "end";
            }
          }
          if (headerComponent == null ? void 0 : headerComponent[0]) {
            const sizeType = channel === "row" ? "height" : "width";
            const bandType = headerType === "header" ? "headerBand" : "footerBand";
            if (channel !== "facet" && !this.child.component.layoutSize.get(sizeType)) {
              layoutMixins[bandType] ?? (layoutMixins[bandType] = {});
              layoutMixins[bandType][channel] = 0.5;
            }
            if (layoutHeaderComponent.title) {
              layoutMixins.offset ?? (layoutMixins.offset = {});
              layoutMixins.offset[channel === "row" ? "rowTitle" : "columnTitle"] = 10;
            }
          }
        }
      }
      return layoutMixins;
    }
    assembleDefaultLayout() {
      const { column, row } = this.facet;
      const columns = column ? this.columnDistinctSignal() : row ? 1 : void 0;
      let align2 = "all";
      if (!row && this.component.resolve.scale.x === "independent") {
        align2 = "none";
      } else if (!column && this.component.resolve.scale.y === "independent") {
        align2 = "none";
      }
      return {
        ...this.getHeaderLayoutMixins(),
        ...columns ? { columns } : {},
        bounds: "full",
        align: align2
      };
    }
    assembleLayoutSignals() {
      return this.child.assembleLayoutSignals();
    }
    columnDistinctSignal() {
      if (this.parent && this.parent instanceof FacetModel) {
        return void 0;
      } else {
        const facetLayoutDataName = this.getName("column_domain");
        return { signal: `length(data('${facetLayoutDataName}'))` };
      }
    }
    assembleGroupStyle() {
      return void 0;
    }
    assembleGroup(signals) {
      if (this.parent && this.parent instanceof FacetModel) {
        return {
          ...this.channelHasField("column") ? {
            encode: {
              update: {
                // TODO(https://github.com/vega/vega-lite/issues/2759):
                // Correct the signal for facet of concat of facet_column
                columns: { field: vgField(this.facet.column, { prefix: "distinct" }) }
              }
            }
          } : {},
          ...super.assembleGroup(signals)
        };
      }
      return super.assembleGroup(signals);
    }
    /**
     * Aggregate cardinality for calculating size
     */
    getCardinalityAggregateForChild() {
      const fields = [];
      const ops2 = [];
      const as = [];
      if (this.child instanceof FacetModel) {
        if (this.child.channelHasField("column")) {
          const field2 = vgField(this.child.facet.column);
          fields.push(field2);
          ops2.push("distinct");
          as.push(`distinct_${field2}`);
        }
      } else {
        for (const channel of POSITION_SCALE_CHANNELS) {
          const childScaleComponent = this.child.component.scales[channel];
          if (childScaleComponent && !childScaleComponent.merged) {
            const type2 = childScaleComponent.get("type");
            const range2 = childScaleComponent.get("range");
            if (hasDiscreteDomain(type2) && isVgRangeStep(range2)) {
              const domain2 = assembleDomain(this.child, channel);
              const field2 = getFieldFromDomain(domain2);
              if (field2) {
                fields.push(field2);
                ops2.push("distinct");
                as.push(`distinct_${field2}`);
              } else {
                warn(unknownField(channel));
              }
            }
          }
        }
      }
      return { fields, ops: ops2, as };
    }
    assembleFacet() {
      const { name, data: data2 } = this.component.data.facetRoot;
      const { row, column } = this.facet;
      const { fields, ops: ops2, as } = this.getCardinalityAggregateForChild();
      const groupby = [];
      for (const channel of FACET_CHANNELS) {
        const fieldDef = this.facet[channel];
        if (fieldDef) {
          groupby.push(vgField(fieldDef));
          const { bin: bin2, sort: sort2 } = fieldDef;
          if (isBinning(bin2)) {
            groupby.push(vgField(fieldDef, { binSuffix: "end" }));
          }
          if (isSortField(sort2)) {
            const { field: field2, op = DEFAULT_SORT_OP } = sort2;
            const outputName = facetSortFieldName(fieldDef, sort2);
            if (row && column) {
              fields.push(outputName);
              ops2.push("max");
              as.push(outputName);
            } else {
              fields.push(field2);
              ops2.push(op);
              as.push(outputName);
            }
          } else if (isArray(sort2)) {
            const outputName = sortArrayIndexField(fieldDef, channel);
            fields.push(outputName);
            ops2.push("max");
            as.push(outputName);
          }
        }
      }
      const cross2 = !!row && !!column;
      return {
        name,
        data: data2,
        groupby,
        ...cross2 || fields.length > 0 ? {
          aggregate: {
            ...cross2 ? { cross: cross2 } : {},
            ...fields.length ? { fields, ops: ops2, as } : {}
          }
        } : {}
      };
    }
    facetSortFields(channel) {
      const { facet } = this;
      const fieldDef = facet[channel];
      if (fieldDef) {
        if (isSortField(fieldDef.sort)) {
          return [facetSortFieldName(fieldDef, fieldDef.sort, { expr: "datum" })];
        } else if (isArray(fieldDef.sort)) {
          return [sortArrayIndexField(fieldDef, channel, { expr: "datum" })];
        }
        return [vgField(fieldDef, { expr: "datum" })];
      }
      return [];
    }
    facetSortOrder(channel) {
      const { facet } = this;
      const fieldDef = facet[channel];
      if (fieldDef) {
        const { sort: sort2 } = fieldDef;
        const order = (isSortField(sort2) ? sort2.order : !isArray(sort2) && sort2) || "ascending";
        return [order];
      }
      return [];
    }
    assembleLabelTitle() {
      var _a2;
      const { facet, config } = this;
      if (facet.facet) {
        return assembleLabelTitle(facet.facet, "facet", config);
      }
      const ORTHOGONAL_ORIENT = {
        row: ["top", "bottom"],
        column: ["left", "right"]
      };
      for (const channel of HEADER_CHANNELS) {
        if (facet[channel]) {
          const labelOrient = getHeaderProperty("labelOrient", (_a2 = facet[channel]) == null ? void 0 : _a2.header, config, channel);
          if (ORTHOGONAL_ORIENT[channel].includes(labelOrient)) {
            return assembleLabelTitle(facet[channel], channel, config);
          }
        }
      }
      return void 0;
    }
    assembleMarks() {
      const { child } = this;
      const facetRoot = this.component.data.facetRoot;
      const data2 = assembleFacetData(facetRoot);
      const encodeEntry2 = child.assembleGroupEncodeEntry(false);
      const title2 = this.assembleLabelTitle() || child.assembleTitle();
      const style2 = child.assembleGroupStyle();
      const markGroup = {
        name: this.getName("cell"),
        type: "group",
        ...title2 ? { title: title2 } : {},
        ...style2 ? { style: style2 } : {},
        from: {
          facet: this.assembleFacet()
        },
        // TODO: move this to after data
        sort: {
          field: FACET_CHANNELS.map((c2) => this.facetSortFields(c2)).flat(),
          order: FACET_CHANNELS.map((c2) => this.facetSortOrder(c2)).flat()
        },
        ...data2.length > 0 ? { data: data2 } : {},
        ...encodeEntry2 ? { encode: { update: encodeEntry2 } } : {},
        ...child.assembleGroup(assembleFacetSignals(this, []))
      };
      return [markGroup];
    }
    getMapping() {
      return this.facet;
    }
  }
  function makeJoinAggregateFromFacet(parent, facet) {
    const { row, column } = facet;
    if (row && column) {
      let newParent = null;
      for (const fieldDef of [row, column]) {
        if (isSortField(fieldDef.sort)) {
          const { field: field2, op = DEFAULT_SORT_OP } = fieldDef.sort;
          parent = newParent = new JoinAggregateTransformNode(parent, {
            joinaggregate: [
              {
                op,
                field: field2,
                as: facetSortFieldName(fieldDef, fieldDef.sort, { forAs: true })
              }
            ],
            groupby: [vgField(fieldDef)]
          });
        }
      }
      return newParent;
    }
    return null;
  }
  function findSource(data2, sources) {
    var _a2, _b2, _c2, _d2;
    for (const other of sources) {
      const otherData = other.data;
      if (data2.name && other.hasName() && data2.name !== other.dataName) {
        continue;
      }
      const formatMesh = (_a2 = data2.format) == null ? void 0 : _a2.mesh;
      const otherFeature = (_b2 = otherData.format) == null ? void 0 : _b2.feature;
      if (formatMesh && otherFeature) {
        continue;
      }
      const formatFeature = (_c2 = data2.format) == null ? void 0 : _c2.feature;
      if ((formatFeature || otherFeature) && formatFeature !== otherFeature) {
        continue;
      }
      const otherMesh = (_d2 = otherData.format) == null ? void 0 : _d2.mesh;
      if ((formatMesh || otherMesh) && formatMesh !== otherMesh) {
        continue;
      }
      if (isInlineData(data2) && isInlineData(otherData)) {
        if (deepEqual(data2.values, otherData.values)) {
          return other;
        }
      } else if (isUrlData(data2) && isUrlData(otherData)) {
        if (data2.url === otherData.url) {
          return other;
        }
      } else if (isNamedData(data2)) {
        if (data2.name === other.dataName) {
          return other;
        }
      }
    }
    return null;
  }
  function parseRoot(model, sources) {
    if (model.data || !model.parent) {
      if (model.data === null) {
        const source2 = new SourceNode({ values: [] });
        sources.push(source2);
        return source2;
      }
      const existingSource = findSource(model.data, sources);
      if (existingSource) {
        if (!isGenerator(model.data)) {
          existingSource.data.format = mergeDeep$1({}, model.data.format, existingSource.data.format);
        }
        if (!existingSource.hasName() && model.data.name) {
          existingSource.dataName = model.data.name;
        }
        return existingSource;
      } else {
        const source2 = new SourceNode(model.data);
        sources.push(source2);
        return source2;
      }
    } else {
      return model.parent.component.data.facetRoot ? model.parent.component.data.facetRoot : model.parent.component.data.main;
    }
  }
  function parseTransformArray(head, model, ancestorParse) {
    let lookupCounter = 0;
    for (const t of model.transforms) {
      let derivedType = void 0;
      let transformNode;
      if (isCalculate(t)) {
        transformNode = head = new CalculateNode(head, t);
        derivedType = "derived";
      } else if (isFilter(t)) {
        const implicit2 = getImplicitFromFilterTransform(t);
        transformNode = head = ParseNode.makeWithAncestors(head, {}, implicit2, ancestorParse) ?? head;
        head = new FilterNode(head, model, t.filter);
      } else if (isBin(t)) {
        transformNode = head = BinNode.makeFromTransform(head, t, model);
        derivedType = "number";
      } else if (isTimeUnit(t)) {
        derivedType = "date";
        const parsedAs = ancestorParse.getWithExplicit(t.field);
        if (parsedAs.value === void 0) {
          head = new ParseNode(head, { [t.field]: derivedType });
          ancestorParse.set(t.field, derivedType, false);
        }
        transformNode = head = TimeUnitNode.makeFromTransform(head, t);
      } else if (isAggregate(t)) {
        transformNode = head = AggregateNode.makeFromTransform(head, t);
        derivedType = "number";
        if (requiresSelectionId(model)) {
          head = new IdentifierNode(head);
        }
      } else if (isLookup(t)) {
        transformNode = head = LookupNode.make(head, model, t, lookupCounter++);
        derivedType = "derived";
      } else if (isWindow(t)) {
        transformNode = head = new WindowTransformNode(head, t);
        derivedType = "number";
      } else if (isJoinAggregate(t)) {
        transformNode = head = new JoinAggregateTransformNode(head, t);
        derivedType = "number";
      } else if (isStack(t)) {
        transformNode = head = StackNode.makeFromTransform(head, t);
        derivedType = "derived";
      } else if (isFold(t)) {
        transformNode = head = new FoldTransformNode(head, t);
        derivedType = "derived";
      } else if (isExtent(t)) {
        transformNode = head = new ExtentTransformNode(head, t);
        derivedType = "derived";
      } else if (isFlatten(t)) {
        transformNode = head = new FlattenTransformNode(head, t);
        derivedType = "derived";
      } else if (isPivot(t)) {
        transformNode = head = new PivotTransformNode(head, t);
        derivedType = "derived";
      } else if (isSample(t)) {
        head = new SampleTransformNode(head, t);
      } else if (isImpute(t)) {
        transformNode = head = ImputeNode.makeFromTransform(head, t);
        derivedType = "derived";
      } else if (isDensity(t)) {
        transformNode = head = new DensityTransformNode(head, t);
        derivedType = "derived";
      } else if (isQuantile(t)) {
        transformNode = head = new QuantileTransformNode(head, t);
        derivedType = "derived";
      } else if (isRegression(t)) {
        transformNode = head = new RegressionTransformNode(head, t);
        derivedType = "derived";
      } else if (isLoess(t)) {
        transformNode = head = new LoessTransformNode(head, t);
        derivedType = "derived";
      } else {
        warn(invalidTransformIgnored(t));
        continue;
      }
      if (transformNode && derivedType !== void 0) {
        for (const field2 of transformNode.producedFields() ?? []) {
          ancestorParse.set(field2, derivedType, false);
        }
      }
    }
    return head;
  }
  function parseData(model) {
    var _a2;
    let head = parseRoot(model, model.component.data.sources);
    const { outputNodes, outputNodeRefCounts } = model.component.data;
    const data2 = model.data;
    const newData = data2 && (isGenerator(data2) || isUrlData(data2) || isInlineData(data2));
    const ancestorParse = !newData && model.parent ? model.parent.component.data.ancestorParse.clone() : new AncestorParse();
    if (isGenerator(data2)) {
      if (isSequenceGenerator(data2)) {
        head = new SequenceNode(head, data2.sequence);
      } else if (isGraticuleGenerator(data2)) {
        head = new GraticuleNode(head, data2.graticule);
      }
      ancestorParse.parseNothing = true;
    } else if (((_a2 = data2 == null ? void 0 : data2.format) == null ? void 0 : _a2.parse) === null) {
      ancestorParse.parseNothing = true;
    }
    head = ParseNode.makeExplicit(head, model, ancestorParse) ?? head;
    head = new IdentifierNode(head);
    const parentIsLayer = model.parent && isLayerModel(model.parent);
    if (isUnitModel(model) || isFacetModel(model)) {
      if (parentIsLayer) {
        head = BinNode.makeFromEncoding(head, model) ?? head;
      }
    }
    if (model.transforms.length > 0) {
      head = parseTransformArray(head, model, ancestorParse);
    }
    const implicitSelection = getImplicitFromSelection(model);
    const implicitEncoding = getImplicitFromEncoding(model);
    head = ParseNode.makeWithAncestors(head, {}, { ...implicitSelection, ...implicitEncoding }, ancestorParse) ?? head;
    if (isUnitModel(model)) {
      head = GeoJSONNode.parseAll(head, model);
      head = GeoPointNode.parseAll(head, model);
    }
    if (isUnitModel(model) || isFacetModel(model)) {
      if (!parentIsLayer) {
        head = BinNode.makeFromEncoding(head, model) ?? head;
      }
      head = TimeUnitNode.makeFromEncoding(head, model) ?? head;
      head = CalculateNode.parseAllForSortIndex(head, model);
    }
    const raw = head = makeOutputNode(DataSourceType.Raw, model, head);
    if (isUnitModel(model)) {
      const agg = AggregateNode.makeFromEncoding(head, model);
      if (agg) {
        head = agg;
        if (requiresSelectionId(model)) {
          head = new IdentifierNode(head);
        }
      }
      head = ImputeNode.makeFromEncoding(head, model) ?? head;
      head = StackNode.makeFromEncoding(head, model) ?? head;
    }
    let preFilterInvalid;
    let dataSourcesForHandlingInvalidValues;
    if (isUnitModel(model)) {
      const { markDef, mark, config } = model;
      const invalid = getMarkPropOrConfig("invalid", markDef, config);
      const { marks, scales: scales2 } = dataSourcesForHandlingInvalidValues = getDataSourcesForHandlingInvalidValues({
        invalid,
        isPath: isPathMark(mark)
      });
      if (marks !== scales2 && scales2 === "include-invalid-values") {
        preFilterInvalid = head = makeOutputNode(DataSourceType.PreFilterInvalid, model, head);
      }
      if (marks === "exclude-invalid-values") {
        head = FilterInvalidNode.make(head, model, dataSourcesForHandlingInvalidValues) ?? head;
      }
    }
    const main2 = head = makeOutputNode(DataSourceType.Main, model, head);
    let postFilterInvalid;
    if (isUnitModel(model) && dataSourcesForHandlingInvalidValues) {
      const { marks, scales: scales2 } = dataSourcesForHandlingInvalidValues;
      if (marks === "include-invalid-values" && scales2 === "exclude-invalid-values") {
        head = FilterInvalidNode.make(head, model, dataSourcesForHandlingInvalidValues) ?? head;
        postFilterInvalid = head = makeOutputNode(DataSourceType.PostFilterInvalid, model, head);
      }
    }
    if (isUnitModel(model)) {
      materializeSelections(model, main2);
    }
    let facetRoot = null;
    if (isFacetModel(model)) {
      const facetName = model.getName("facet");
      head = makeJoinAggregateFromFacet(head, model.facet) ?? head;
      facetRoot = new FacetNode(head, model, facetName, main2.getSource());
      outputNodes[facetName] = facetRoot;
    }
    return {
      ...model.component.data,
      outputNodes,
      outputNodeRefCounts,
      raw,
      main: main2,
      facetRoot,
      ancestorParse,
      preFilterInvalid,
      postFilterInvalid
    };
  }
  function makeOutputNode(dataSourceType, model, head) {
    const { outputNodes, outputNodeRefCounts } = model.component.data;
    const name = model.getDataName(dataSourceType);
    const node = new OutputNode(head, name, dataSourceType, outputNodeRefCounts);
    outputNodes[name] = node;
    return node;
  }
  class ConcatModel extends Model {
    constructor(spec, parent, parentGivenName, config) {
      var _a2, _b2, _c2, _d2;
      super(spec, "concat", parent, parentGivenName, config, spec.resolve);
      if (((_b2 = (_a2 = spec.resolve) == null ? void 0 : _a2.axis) == null ? void 0 : _b2.x) === "shared" || ((_d2 = (_c2 = spec.resolve) == null ? void 0 : _c2.axis) == null ? void 0 : _d2.y) === "shared") {
        warn(CONCAT_CANNOT_SHARE_AXIS);
      }
      this.children = this.getChildren(spec).map((child, i) => {
        return buildModel(child, this, this.getName(`concat_${i}`), void 0, config);
      });
    }
    parseData() {
      this.component.data = parseData(this);
      for (const child of this.children) {
        child.parseData();
      }
    }
    parseSelections() {
      this.component.selection = {};
      for (const child of this.children) {
        child.parseSelections();
        for (const key2 of keys(child.component.selection)) {
          this.component.selection[key2] = child.component.selection[key2];
        }
      }
      if (Object.values(this.component.selection).some((selCmpt) => isTimerSelection(selCmpt))) {
        error(MULTI_VIEW_ANIMATION_UNSUPPORTED);
      }
    }
    parseMarkGroup() {
      for (const child of this.children) {
        child.parseMarkGroup();
      }
    }
    parseAxesAndHeaders() {
      for (const child of this.children) {
        child.parseAxesAndHeaders();
      }
    }
    getChildren(spec) {
      if (isVConcatSpec(spec)) {
        return spec.vconcat;
      } else if (isHConcatSpec(spec)) {
        return spec.hconcat;
      }
      return spec.concat;
    }
    parseLayoutSize() {
      parseConcatLayoutSize(this);
    }
    parseAxisGroup() {
      return null;
    }
    assembleSelectionTopLevelSignals(signals) {
      return this.children.reduce((sg, child) => child.assembleSelectionTopLevelSignals(sg), signals);
    }
    assembleSignals() {
      this.children.forEach((child) => child.assembleSignals());
      return [];
    }
    assembleLayoutSignals() {
      const layoutSignals = assembleLayoutSignals(this);
      for (const child of this.children) {
        layoutSignals.push(...child.assembleLayoutSignals());
      }
      return layoutSignals;
    }
    assembleSelectionData(data2) {
      return this.children.reduce((db, child) => child.assembleSelectionData(db), data2);
    }
    assembleMarks() {
      return this.children.map((child) => {
        const title2 = child.assembleTitle();
        const style2 = child.assembleGroupStyle();
        const encodeEntry2 = child.assembleGroupEncodeEntry(false);
        return {
          type: "group",
          name: child.getName("group"),
          ...title2 ? { title: title2 } : {},
          ...style2 ? { style: style2 } : {},
          ...encodeEntry2 ? { encode: { update: encodeEntry2 } } : {},
          ...child.assembleGroup()
        };
      });
    }
    assembleGroupStyle() {
      return void 0;
    }
    assembleDefaultLayout() {
      const columns = this.layout.columns;
      return {
        ...columns != null ? { columns } : {},
        bounds: "full",
        // Use align each so it can work with multiple plots with different size
        align: "each"
      };
    }
  }
  function isFalseOrNull(v) {
    return v === false || v === null;
  }
  const AXIS_COMPONENT_PROPERTIES_INDEX = {
    disable: 1,
    gridScale: 1,
    scale: 1,
    ...COMMON_AXIS_PROPERTIES_INDEX,
    labelExpr: 1,
    encode: 1
  };
  const AXIS_COMPONENT_PROPERTIES = keys(AXIS_COMPONENT_PROPERTIES_INDEX);
  class AxisComponent extends Split {
    constructor(explicit = {}, implicit2 = {}, mainExtracted = false) {
      super();
      this.explicit = explicit;
      this.implicit = implicit2;
      this.mainExtracted = mainExtracted;
    }
    clone() {
      return new AxisComponent(duplicate(this.explicit), duplicate(this.implicit), this.mainExtracted);
    }
    hasAxisPart(part) {
      if (part === "axis") {
        return true;
      }
      if (part === "grid" || part === "title") {
        return !!this.get(part);
      }
      return !isFalseOrNull(this.get(part));
    }
    hasOrientSignalRef() {
      return isSignalRef(this.explicit.orient);
    }
  }
  function labels(model, channel, specifiedLabelsSpec) {
    const { encoding, config } = model;
    const fieldOrDatumDef = getFieldOrDatumDef(encoding[channel]) ?? getFieldOrDatumDef(encoding[getSecondaryRangeChannel(channel)]);
    const axis = model.axis(channel) || {};
    const { format: format2, formatType } = axis;
    if (isCustomFormatType(formatType)) {
      return {
        text: formatCustomType({
          fieldOrDatumDef,
          field: "datum.value",
          format: format2,
          formatType,
          config
        }),
        ...specifiedLabelsSpec
      };
    } else if (format2 === void 0 && formatType === void 0 && config.customFormatTypes) {
      if (channelDefType(fieldOrDatumDef) === "quantitative") {
        if (isPositionFieldOrDatumDef(fieldOrDatumDef) && fieldOrDatumDef.stack === "normalize" && config.normalizedNumberFormatType) {
          return {
            text: formatCustomType({
              fieldOrDatumDef,
              field: "datum.value",
              format: config.normalizedNumberFormat,
              formatType: config.normalizedNumberFormatType,
              config
            }),
            ...specifiedLabelsSpec
          };
        } else if (config.numberFormatType) {
          return {
            text: formatCustomType({
              fieldOrDatumDef,
              field: "datum.value",
              format: config.numberFormat,
              formatType: config.numberFormatType,
              config
            }),
            ...specifiedLabelsSpec
          };
        }
      }
      if (channelDefType(fieldOrDatumDef) === "temporal" && config.timeFormatType && isFieldDef(fieldOrDatumDef) && !fieldOrDatumDef.timeUnit) {
        return {
          text: formatCustomType({
            fieldOrDatumDef,
            field: "datum.value",
            format: config.timeFormat,
            formatType: config.timeFormatType,
            config
          }),
          ...specifiedLabelsSpec
        };
      }
    }
    return specifiedLabelsSpec;
  }
  function parseUnitAxes(model) {
    return POSITION_SCALE_CHANNELS.reduce((axis, channel) => {
      if (model.component.scales[channel]) {
        axis[channel] = [parseAxis(channel, model)];
      }
      return axis;
    }, {});
  }
  const OPPOSITE_ORIENT = {
    bottom: "top",
    top: "bottom",
    left: "right",
    right: "left"
  };
  function parseLayerAxes(model) {
    const { axes, resolve: resolve2 } = model.component;
    const axisCount = { top: 0, bottom: 0, right: 0, left: 0 };
    for (const child of model.children) {
      child.parseAxesAndHeaders();
      for (const channel of keys(child.component.axes)) {
        resolve2.axis[channel] = parseGuideResolve(model.component.resolve, channel);
        if (resolve2.axis[channel] === "shared") {
          axes[channel] = mergeAxisComponents(axes[channel], child.component.axes[channel]);
          if (!axes[channel]) {
            resolve2.axis[channel] = "independent";
            delete axes[channel];
          }
        }
      }
    }
    for (const channel of POSITION_SCALE_CHANNELS) {
      for (const child of model.children) {
        if (!child.component.axes[channel]) {
          continue;
        }
        if (resolve2.axis[channel] === "independent") {
          axes[channel] = (axes[channel] ?? []).concat(child.component.axes[channel]);
          for (const axisComponent of child.component.axes[channel]) {
            const { value: orient2, explicit } = axisComponent.getWithExplicit("orient");
            if (isSignalRef(orient2)) {
              continue;
            }
            if (axisCount[orient2] > 0 && !explicit) {
              const oppositeOrient = OPPOSITE_ORIENT[orient2];
              if (axisCount[orient2] > axisCount[oppositeOrient]) {
                axisComponent.set("orient", oppositeOrient, false);
              }
            }
            axisCount[orient2]++;
          }
        }
        delete child.component.axes[channel];
      }
      if (resolve2.axis[channel] === "independent" && axes[channel] && axes[channel].length > 1) {
        for (const [index2, axisCmpt] of (axes[channel] || []).entries()) {
          if (index2 > 0 && !!axisCmpt.get("grid") && !axisCmpt.explicit.grid) {
            axisCmpt.implicit.grid = false;
          }
        }
      }
    }
  }
  function mergeAxisComponents(mergedAxisCmpts, childAxisCmpts) {
    if (mergedAxisCmpts) {
      if (mergedAxisCmpts.length !== childAxisCmpts.length) {
        return void 0;
      }
      const length2 = mergedAxisCmpts.length;
      for (let i = 0; i < length2; i++) {
        const merged = mergedAxisCmpts[i];
        const child = childAxisCmpts[i];
        if (!!merged !== !!child) {
          return void 0;
        } else if (merged && child) {
          const mergedOrient = merged.getWithExplicit("orient");
          const childOrient = child.getWithExplicit("orient");
          if (mergedOrient.explicit && childOrient.explicit && mergedOrient.value !== childOrient.value) {
            return void 0;
          } else {
            mergedAxisCmpts[i] = mergeAxisComponent(merged, child);
          }
        }
      }
    } else {
      return childAxisCmpts.map((axisComponent) => axisComponent.clone());
    }
    return mergedAxisCmpts;
  }
  function mergeAxisComponent(merged, child) {
    for (const prop of AXIS_COMPONENT_PROPERTIES) {
      const mergedValueWithExplicit = mergeValuesWithExplicit(
        merged.getWithExplicit(prop),
        child.getWithExplicit(prop),
        prop,
        "axis",
        // Tie breaker function
        (v1, v2) => {
          switch (prop) {
            case "title":
              return mergeTitleComponent(v1, v2);
            case "gridScale":
              return {
                explicit: v1.explicit,
                // keep the old explicit
                value: getFirstDefined(v1.value, v2.value)
              };
          }
          return defaultTieBreaker(v1, v2, prop, "axis");
        }
      );
      merged.setWithExplicit(prop, mergedValueWithExplicit);
    }
    return merged;
  }
  function isExplicit(value2, property2, axis, model, channel) {
    if (property2 === "disable") {
      return axis !== void 0;
    }
    axis = axis || {};
    switch (property2) {
      case "titleAngle":
      case "labelAngle":
        return value2 === (isSignalRef(axis.labelAngle) ? axis.labelAngle : normalizeAngle(axis.labelAngle));
      case "values":
        return !!axis.values;
      case "encode":
        return !!axis.encoding || !!axis.labelAngle;
      case "title":
        if (value2 === getFieldDefTitle(model, channel)) {
          return true;
        }
    }
    return value2 === axis[property2];
  }
  const propsToAlwaysIncludeConfig = /* @__PURE__ */ new Set([
    "grid",
    // Grid is an exception because we need to set grid = true to generate another grid axis
    "translate",
    // translate has dependent logic for bar's bin position and it's 0.5 by default in Vega. If a config overrides this value, we need to know.
    // the rest are not axis configs in Vega, but are in VL, so we need to set too.
    "format",
    "formatType",
    "orient",
    "labelExpr",
    "tickCount",
    "position",
    "tickMinStep"
  ]);
  function parseAxis(channel, model) {
    var _a2, _b2;
    let axis = model.axis(channel);
    const axisComponent = new AxisComponent();
    const fieldOrDatumDef = getFieldOrDatumDef(model.encoding[channel]);
    const { mark, config } = model;
    const orient2 = (axis == null ? void 0 : axis.orient) || ((_a2 = config[channel === "x" ? "axisX" : "axisY"]) == null ? void 0 : _a2.orient) || ((_b2 = config.axis) == null ? void 0 : _b2.orient) || defaultOrient(channel);
    const scaleType2 = model.getScaleComponent(channel).get("type");
    const axisConfigs = getAxisConfigs(channel, scaleType2, orient2, model.config);
    const disable = axis !== void 0 ? !axis : getAxisConfig("disable", config.style, axis == null ? void 0 : axis.style, axisConfigs).configValue;
    axisComponent.set("disable", disable, axis !== void 0);
    if (disable) {
      return axisComponent;
    }
    axis = axis || {};
    const labelAngle = getLabelAngle(fieldOrDatumDef, axis, channel, config.style, axisConfigs);
    const formatType = guideFormatType(axis.formatType, fieldOrDatumDef, scaleType2);
    const format2 = guideFormat(fieldOrDatumDef, fieldOrDatumDef.type, axis.format, axis.formatType, config, true);
    const ruleParams = {
      fieldOrDatumDef,
      axis,
      channel,
      model,
      scaleType: scaleType2,
      orient: orient2,
      labelAngle,
      format: format2,
      formatType,
      mark,
      config
    };
    for (const property2 of AXIS_COMPONENT_PROPERTIES) {
      const value2 = property2 in axisRules ? axisRules[property2](ruleParams) : isAxisProperty(property2) ? axis[property2] : void 0;
      const hasValue = value2 !== void 0;
      const explicit = isExplicit(value2, property2, axis, model, channel);
      if (hasValue && explicit) {
        axisComponent.set(property2, value2, explicit);
      } else {
        const { configValue = void 0, configFrom = void 0 } = isAxisProperty(property2) && property2 !== "values" ? getAxisConfig(property2, config.style, axis.style, axisConfigs) : {};
        const hasConfigValue = configValue !== void 0;
        if (hasValue && !hasConfigValue) {
          axisComponent.set(property2, value2, explicit);
        } else if (
          // Cases need implicit values
          // 1. Axis config that aren't available in Vega
          !(configFrom === "vgAxisConfig") || // 2. Certain properties are always included (see `propsToAlwaysIncludeConfig`'s declaration for more details)
          propsToAlwaysIncludeConfig.has(property2) && hasConfigValue || // 3. Conditional axis values and signals
          isConditionalAxisValue(configValue) || isSignalRef(configValue)
        ) {
          axisComponent.set(property2, configValue, false);
        }
      }
    }
    const axisEncoding = axis.encoding ?? {};
    const axisEncode = AXIS_PARTS.reduce((e3, part) => {
      if (!axisComponent.hasAxisPart(part)) {
        return e3;
      }
      const axisEncodingPart = guideEncodeEntry(axisEncoding[part] ?? {}, model);
      const value2 = part === "labels" ? labels(model, channel, axisEncodingPart) : axisEncodingPart;
      if (value2 !== void 0 && !isEmpty(value2)) {
        e3[part] = { update: value2 };
      }
      return e3;
    }, {});
    if (!isEmpty(axisEncode)) {
      axisComponent.set("encode", axisEncode, !!axis.encoding || axis.labelAngle !== void 0);
    }
    return axisComponent;
  }
  function initLayoutSize({ encoding, size }) {
    for (const channel of POSITION_SCALE_CHANNELS) {
      const sizeType = getSizeChannel(channel);
      if (isStep(size[sizeType])) {
        if (isContinuousFieldOrDatumDef(encoding[channel])) {
          delete size[sizeType];
          warn(stepDropped(sizeType));
        }
      }
    }
    return size;
  }
  const arc = {
    vgMark: "arc",
    encodeEntry: (model) => {
      return {
        ...baseEncodeEntry(model, {
          align: "ignore",
          baseline: "ignore",
          color: "include",
          size: "ignore",
          orient: "ignore",
          theta: "ignore"
        }),
        ...pointPosition("x", model, { defaultPos: "mid" }),
        ...pointPosition("y", model, { defaultPos: "mid" }),
        // arcs are rectangles in polar coordinates
        ...rectPosition(model, "radius"),
        ...rectPosition(model, "theta")
      };
    }
  };
  const area = {
    vgMark: "area",
    encodeEntry: (model) => {
      return {
        ...baseEncodeEntry(model, {
          align: "ignore",
          baseline: "ignore",
          color: "include",
          orient: "include",
          size: "ignore",
          theta: "ignore"
        }),
        ...pointOrRangePosition("x", model, {
          defaultPos: "zeroOrMin",
          defaultPos2: "zeroOrMin",
          range: model.markDef.orient === "horizontal"
        }),
        ...pointOrRangePosition("y", model, {
          defaultPos: "zeroOrMin",
          defaultPos2: "zeroOrMin",
          range: model.markDef.orient === "vertical"
        }),
        ...defined(model)
      };
    }
  };
  const bar = {
    vgMark: "rect",
    encodeEntry: (model) => {
      return {
        ...baseEncodeEntry(model, {
          align: "ignore",
          baseline: "ignore",
          color: "include",
          orient: "ignore",
          size: "ignore",
          theta: "ignore"
        }),
        ...rectPosition(model, "x"),
        ...rectPosition(model, "y")
      };
    }
  };
  const geoshape = {
    vgMark: "shape",
    encodeEntry: (model) => {
      return {
        ...baseEncodeEntry(model, {
          align: "ignore",
          baseline: "ignore",
          color: "include",
          size: "ignore",
          orient: "ignore",
          theta: "ignore"
        })
      };
    },
    postEncodingTransform: (model) => {
      const { encoding } = model;
      const shapeDef = encoding.shape;
      const transform2 = {
        type: "geoshape",
        projection: model.projectionName(),
        // as: 'shape',
        ...shapeDef && isFieldDef(shapeDef) && shapeDef.type === GEOJSON ? { field: vgField(shapeDef, { expr: "datum" }) } : {}
      };
      return [transform2];
    }
  };
  const image = {
    vgMark: "image",
    encodeEntry: (model) => {
      return {
        ...baseEncodeEntry(model, {
          align: "ignore",
          baseline: "ignore",
          color: "ignore",
          orient: "ignore",
          size: "ignore",
          theta: "ignore"
        }),
        ...rectPosition(model, "x"),
        ...rectPosition(model, "y"),
        ...text$1(model, "url")
      };
    }
  };
  const line = {
    vgMark: "line",
    encodeEntry: (model) => {
      return {
        ...baseEncodeEntry(model, {
          align: "ignore",
          baseline: "ignore",
          color: "include",
          size: "ignore",
          orient: "ignore",
          theta: "ignore"
        }),
        ...pointPosition("x", model, { defaultPos: "mid" }),
        ...pointPosition("y", model, { defaultPos: "mid" }),
        ...nonPosition("size", model, {
          vgChannel: "strokeWidth"
          // VL's line size is strokeWidth
        }),
        ...defined(model)
      };
    }
  };
  const trail = {
    vgMark: "trail",
    encodeEntry: (model) => {
      return {
        ...baseEncodeEntry(model, {
          align: "ignore",
          baseline: "ignore",
          color: "include",
          size: "include",
          orient: "ignore",
          theta: "ignore"
        }),
        ...pointPosition("x", model, { defaultPos: "mid" }),
        ...pointPosition("y", model, { defaultPos: "mid" }),
        ...nonPosition("size", model),
        ...defined(model)
      };
    }
  };
  function encodeEntry(model, fixedShape) {
    const { config } = model;
    return {
      ...baseEncodeEntry(model, {
        align: "ignore",
        baseline: "ignore",
        color: "include",
        size: "include",
        orient: "ignore",
        theta: "ignore"
      }),
      ...pointPosition("x", model, { defaultPos: "mid" }),
      ...pointPosition("y", model, { defaultPos: "mid" }),
      ...nonPosition("size", model),
      ...nonPosition("angle", model),
      ...shapeMixins(model, config, fixedShape)
    };
  }
  function shapeMixins(model, config, fixedShape) {
    if (fixedShape) {
      return { shape: { value: fixedShape } };
    }
    return nonPosition("shape", model);
  }
  const point = {
    vgMark: "symbol",
    encodeEntry: (model) => {
      return encodeEntry(model);
    }
  };
  const circle = {
    vgMark: "symbol",
    encodeEntry: (model) => {
      return encodeEntry(model, "circle");
    }
  };
  const square = {
    vgMark: "symbol",
    encodeEntry: (model) => {
      return encodeEntry(model, "square");
    }
  };
  const rect = {
    vgMark: "rect",
    encodeEntry: (model) => {
      return {
        ...baseEncodeEntry(model, {
          align: "ignore",
          baseline: "ignore",
          color: "include",
          orient: "ignore",
          size: "ignore",
          theta: "ignore"
        }),
        ...rectPosition(model, "x"),
        ...rectPosition(model, "y")
      };
    }
  };
  const rule = {
    vgMark: "rule",
    encodeEntry: (model) => {
      const { markDef } = model;
      const orient2 = markDef.orient;
      if (!model.encoding.x && !model.encoding.y && !model.encoding.latitude && !model.encoding.longitude) {
        return {};
      }
      return {
        ...baseEncodeEntry(model, {
          align: "ignore",
          baseline: "ignore",
          color: "include",
          orient: "ignore",
          size: "ignore",
          theta: "ignore"
        }),
        ...pointOrRangePosition("x", model, {
          defaultPos: orient2 === "horizontal" ? "zeroOrMax" : "mid",
          defaultPos2: "zeroOrMin",
          range: orient2 !== "vertical"
          // include x2 for horizontal or line segment rule
        }),
        ...pointOrRangePosition("y", model, {
          defaultPos: orient2 === "vertical" ? "zeroOrMax" : "mid",
          defaultPos2: "zeroOrMin",
          range: orient2 !== "horizontal"
          // include y2 for vertical or line segment rule
        }),
        ...nonPosition("size", model, {
          vgChannel: "strokeWidth"
          // VL's rule size is strokeWidth
        })
      };
    }
  };
  const text = {
    vgMark: "text",
    encodeEntry: (model) => {
      const { config, encoding } = model;
      return {
        ...baseEncodeEntry(model, {
          align: "include",
          baseline: "include",
          color: "include",
          size: "ignore",
          orient: "ignore",
          theta: "include"
        }),
        ...pointPosition("x", model, { defaultPos: "mid" }),
        ...pointPosition("y", model, { defaultPos: "mid" }),
        ...text$1(model),
        ...nonPosition("size", model, {
          vgChannel: "fontSize"
          // VL's text size is fontSize
        }),
        ...nonPosition("angle", model),
        ...valueIfDefined("align", align(model.markDef, encoding, config)),
        ...valueIfDefined("baseline", baseline(model.markDef, encoding, config)),
        ...pointPosition("radius", model, { defaultPos: null }),
        ...pointPosition("theta", model, { defaultPos: null })
      };
    }
  };
  function align(markDef, encoding, config) {
    const a2 = getMarkPropOrConfig("align", markDef, config);
    if (a2 === void 0) {
      return "center";
    }
    return void 0;
  }
  function baseline(markDef, encoding, config) {
    const b2 = getMarkPropOrConfig("baseline", markDef, config);
    if (b2 === void 0) {
      return "middle";
    }
    return void 0;
  }
  const tick = {
    vgMark: "rect",
    encodeEntry: (model) => {
      const { config, markDef } = model;
      const orient2 = markDef.orient;
      const vgSizeAxisChannel = orient2 === "horizontal" ? "x" : "y";
      const vgThicknessAxisChannel = orient2 === "horizontal" ? "y" : "x";
      const vgThicknessChannel = orient2 === "horizontal" ? "height" : "width";
      return {
        ...baseEncodeEntry(model, {
          align: "ignore",
          baseline: "ignore",
          color: "include",
          orient: "ignore",
          size: "ignore",
          theta: "ignore"
        }),
        ...rectPosition(model, vgSizeAxisChannel),
        ...pointPosition(vgThicknessAxisChannel, model, {
          defaultPos: "mid",
          vgChannel: vgThicknessAxisChannel === "y" ? "yc" : "xc"
        }),
        [vgThicknessChannel]: signalOrValueRef(getMarkPropOrConfig("thickness", markDef, config))
      };
    }
  };
  const markCompiler = {
    arc,
    area,
    bar,
    circle,
    geoshape,
    image,
    line,
    point,
    rect,
    rule,
    square,
    text,
    tick,
    trail
  };
  function parseMarkGroups(model) {
    if (contains([LINE, AREA, TRAIL], model.mark)) {
      const details = pathGroupingFields(model.mark, model.encoding);
      if (details.length > 0) {
        return getPathGroups(model, details);
      }
    } else if (model.mark === BAR) {
      const hasCornerRadius2 = VG_CORNERRADIUS_CHANNELS.some((prop) => getMarkPropOrConfig(prop, model.markDef, model.config));
      if (model.stack && !model.fieldDef("size") && hasCornerRadius2) {
        return getGroupsForStackedBarWithCornerRadius(model);
      }
    }
    return getMarkGroup(model);
  }
  const FACETED_PATH_PREFIX = "faceted_path_";
  function getPathGroups(model, details) {
    return [
      {
        name: model.getName("pathgroup"),
        type: "group",
        from: {
          facet: {
            name: FACETED_PATH_PREFIX + model.requestDataName(DataSourceType.Main),
            data: model.requestDataName(DataSourceType.Main),
            groupby: details
          }
        },
        encode: {
          update: {
            width: { field: { group: "width" } },
            height: { field: { group: "height" } }
          }
        },
        // With subfacet for line/area group, need to use faceted data from above.
        marks: getMarkGroup(model, { fromPrefix: FACETED_PATH_PREFIX })
      }
    ];
  }
  const STACK_GROUP_PREFIX = "stack_group_";
  function getGroupsForStackedBarWithCornerRadius(model) {
    var _a2;
    const [mark] = getMarkGroup(model, { fromPrefix: STACK_GROUP_PREFIX });
    const fieldScale = model.scaleName(model.stack.fieldChannel);
    const stackField = (opt = {}) => model.vgField(model.stack.fieldChannel, opt);
    const stackFieldGroup = (func, expr2) => {
      const vgFieldMinMax = [
        stackField({ prefix: "min", suffix: "start", expr: expr2 }),
        stackField({ prefix: "max", suffix: "start", expr: expr2 }),
        stackField({ prefix: "min", suffix: "end", expr: expr2 }),
        stackField({ prefix: "max", suffix: "end", expr: expr2 })
      ];
      return `${func}(${vgFieldMinMax.map((field2) => `scale('${fieldScale}',${field2})`).join(",")})`;
    };
    let groupUpdate;
    let innerGroupUpdate;
    if (model.stack.fieldChannel === "x") {
      groupUpdate = {
        ...pick(mark.encode.update, ["y", "yc", "y2", "height", ...VG_CORNERRADIUS_CHANNELS]),
        x: { signal: stackFieldGroup("min", "datum") },
        x2: { signal: stackFieldGroup("max", "datum") },
        clip: { value: true }
      };
      innerGroupUpdate = {
        x: { field: { group: "x" }, mult: -1 },
        height: { field: { group: "height" } }
      };
      mark.encode.update = {
        ...omit(mark.encode.update, ["y", "yc", "y2"]),
        height: { field: { group: "height" } }
      };
    } else {
      groupUpdate = {
        ...pick(mark.encode.update, ["x", "xc", "x2", "width"]),
        y: { signal: stackFieldGroup("min", "datum") },
        y2: { signal: stackFieldGroup("max", "datum") },
        clip: { value: true }
      };
      innerGroupUpdate = {
        y: { field: { group: "y" }, mult: -1 },
        width: { field: { group: "width" } }
      };
      mark.encode.update = {
        ...omit(mark.encode.update, ["x", "xc", "x2"]),
        width: { field: { group: "width" } }
      };
    }
    for (const key2 of VG_CORNERRADIUS_CHANNELS) {
      const configValue = getMarkConfig(key2, model.markDef, model.config);
      if (mark.encode.update[key2]) {
        groupUpdate[key2] = mark.encode.update[key2];
        delete mark.encode.update[key2];
      } else if (configValue) {
        groupUpdate[key2] = signalOrValueRef(configValue);
      }
      if (configValue) {
        mark.encode.update[key2] = { value: 0 };
      }
    }
    const groupby = [];
    if (((_a2 = model.stack.groupbyChannels) == null ? void 0 : _a2.length) > 0) {
      for (const groupbyChannel of model.stack.groupbyChannels) {
        const groupByField = model.fieldDef(groupbyChannel);
        const field2 = vgField(groupByField);
        if (field2) {
          groupby.push(field2);
        }
        if ((groupByField == null ? void 0 : groupByField.bin) || (groupByField == null ? void 0 : groupByField.timeUnit)) {
          groupby.push(vgField(groupByField, { binSuffix: "end" }));
        }
      }
    }
    const strokeProperties = [
      "stroke",
      "strokeWidth",
      "strokeJoin",
      "strokeCap",
      "strokeDash",
      "strokeDashOffset",
      "strokeMiterLimit",
      "strokeOpacity"
    ];
    groupUpdate = strokeProperties.reduce((encode2, prop) => {
      if (mark.encode.update[prop]) {
        return { ...encode2, [prop]: mark.encode.update[prop] };
      } else {
        const configValue = getMarkConfig(prop, model.markDef, model.config);
        if (configValue !== void 0) {
          return { ...encode2, [prop]: signalOrValueRef(configValue) };
        } else {
          return encode2;
        }
      }
    }, groupUpdate);
    if (groupUpdate.stroke) {
      groupUpdate.strokeForeground = { value: true };
      groupUpdate.strokeOffset = { value: 0 };
    }
    return [
      {
        type: "group",
        from: {
          facet: {
            data: model.requestDataName(DataSourceType.Main),
            name: STACK_GROUP_PREFIX + model.requestDataName(DataSourceType.Main),
            groupby,
            aggregate: {
              fields: [
                stackField({ suffix: "start" }),
                stackField({ suffix: "start" }),
                stackField({ suffix: "end" }),
                stackField({ suffix: "end" })
              ],
              ops: ["min", "max", "min", "max"]
            }
          }
        },
        encode: {
          update: groupUpdate
        },
        marks: [
          {
            type: "group",
            encode: { update: innerGroupUpdate },
            marks: [mark]
          }
        ]
      }
    ];
  }
  function getSort(model) {
    const { encoding, stack: stack2, mark, markDef, config } = model;
    const order = encoding.order;
    if (!isArray(order) && isValueDef(order) && isNullOrFalse(order.value) || !order && isNullOrFalse(getMarkPropOrConfig("order", markDef, config))) {
      return void 0;
    } else if ((isArray(order) || isFieldDef(order)) && !stack2) {
      return sortParams(order, { expr: "datum" });
    } else if (isPathMark(mark)) {
      const dimensionChannel = markDef.orient === "horizontal" ? "y" : "x";
      const dimensionChannelDef = encoding[dimensionChannel];
      if (isFieldDef(dimensionChannelDef)) {
        return { field: dimensionChannel };
      }
    }
    return void 0;
  }
  function getMarkGroup(model, opt = { fromPrefix: "" }) {
    const { mark, markDef, encoding, config } = model;
    const clip2 = getFirstDefined(markDef.clip, scaleClip(model), projectionClip(model));
    const style2 = getStyles(markDef);
    const key2 = encoding.key;
    const sort2 = getSort(model);
    const interactive2 = interactiveFlag(model);
    const aria2 = getMarkPropOrConfig("aria", markDef, config);
    const postEncodingTransform = markCompiler[mark].postEncodingTransform ? markCompiler[mark].postEncodingTransform(model) : null;
    return [
      {
        name: model.getName("marks"),
        type: markCompiler[mark].vgMark,
        ...clip2 ? { clip: clip2 } : {},
        ...style2 ? { style: style2 } : {},
        ...key2 ? { key: key2.field } : {},
        ...sort2 ? { sort: sort2 } : {},
        ...interactive2 ? interactive2 : {},
        ...aria2 === false ? { aria: aria2 } : {},
        from: { data: opt.fromPrefix + model.requestDataName(DataSourceType.Main) },
        encode: {
          update: markCompiler[mark].encodeEntry(model)
        },
        ...postEncodingTransform ? {
          transform: postEncodingTransform
        } : {}
      }
    ];
  }
  function scaleClip(model) {
    const xScale = model.getScaleComponent("x");
    const yScale = model.getScaleComponent("y");
    return (xScale == null ? void 0 : xScale.get("selectionExtent")) || (yScale == null ? void 0 : yScale.get("selectionExtent")) ? true : void 0;
  }
  function projectionClip(model) {
    const projection2 = model.component.projection;
    return projection2 && !projection2.isFit ? true : void 0;
  }
  function interactiveFlag(model) {
    if (!model.component.selection)
      return null;
    const unitCount = keys(model.component.selection).length;
    let parentCount = unitCount;
    let parent = model.parent;
    while (parent && parentCount === 0) {
      parentCount = keys(parent.component.selection).length;
      parent = parent.parent;
    }
    return parentCount ? {
      interactive: unitCount > 0 || model.mark === "geoshape" || !!model.encoding.tooltip || !!model.markDef.tooltip
    } : null;
  }
  class UnitModel extends ModelWithField {
    constructor(spec, parent, parentGivenName, parentGivenSize = {}, config) {
      super(spec, "unit", parent, parentGivenName, config, void 0, isFrameMixins(spec) ? spec.view : void 0);
      this.specifiedScales = {};
      this.specifiedAxes = {};
      this.specifiedLegends = {};
      this.specifiedProjection = {};
      this.selection = [];
      this.children = [];
      this.correctDataNames = (mark2) => {
        var _a2, _b2, _c2;
        if ((_a2 = mark2.from) == null ? void 0 : _a2.data) {
          mark2.from.data = this.lookupDataSource(mark2.from.data);
          if ("time" in this.encoding) {
            mark2.from.data = mark2.from.data + CURR;
          }
        }
        if ((_c2 = (_b2 = mark2.from) == null ? void 0 : _b2.facet) == null ? void 0 : _c2.data) {
          mark2.from.facet.data = this.lookupDataSource(mark2.from.facet.data);
        }
        return mark2;
      };
      const markDef = isMarkDef(spec.mark) ? { ...spec.mark } : { type: spec.mark };
      const mark = markDef.type;
      if (markDef.filled === void 0) {
        markDef.filled = defaultFilled(markDef, config, {
          graticule: spec.data && isGraticuleGenerator(spec.data)
        });
      }
      const encoding = this.encoding = initEncoding(spec.encoding || {}, mark, markDef.filled, config);
      this.markDef = initMarkdef(markDef, encoding, config);
      this.size = initLayoutSize({
        encoding,
        size: isFrameMixins(spec) ? {
          ...parentGivenSize,
          ...spec.width ? { width: spec.width } : {},
          ...spec.height ? { height: spec.height } : {}
        } : parentGivenSize
      });
      this.stack = stack(this.markDef, encoding);
      this.specifiedScales = this.initScales(mark, encoding);
      this.specifiedAxes = this.initAxes(encoding);
      this.specifiedLegends = this.initLegends(encoding);
      this.specifiedProjection = spec.projection;
      this.selection = (spec.params ?? []).filter((p) => isSelectionParameter(p));
    }
    get hasProjection() {
      const { encoding } = this;
      const isGeoShapeMark = this.mark === GEOSHAPE;
      const hasGeoPosition = encoding && GEOPOSITION_CHANNELS.some((channel) => isFieldOrDatumDef(encoding[channel]));
      return isGeoShapeMark || hasGeoPosition;
    }
    /**
     * Return specified Vega-Lite scale domain for a particular channel
     * @param channel
     */
    scaleDomain(channel) {
      const scale2 = this.specifiedScales[channel];
      return scale2 ? scale2.domain : void 0;
    }
    axis(channel) {
      return this.specifiedAxes[channel];
    }
    legend(channel) {
      return this.specifiedLegends[channel];
    }
    initScales(mark, encoding) {
      return SCALE_CHANNELS.reduce((scales2, channel) => {
        const fieldOrDatumDef = getFieldOrDatumDef(encoding[channel]);
        if (fieldOrDatumDef) {
          scales2[channel] = this.initScale(fieldOrDatumDef.scale ?? {});
        }
        return scales2;
      }, {});
    }
    initScale(scale2) {
      const { domain: domain2, range: range2 } = scale2;
      const scaleInternal = replaceExprRef(scale2);
      if (isArray(domain2)) {
        scaleInternal.domain = domain2.map(signalRefOrValue);
      }
      if (isArray(range2)) {
        scaleInternal.range = range2.map(signalRefOrValue);
      }
      return scaleInternal;
    }
    initAxes(encoding) {
      return POSITION_SCALE_CHANNELS.reduce((_axis, channel) => {
        const channelDef = encoding[channel];
        if (isFieldOrDatumDef(channelDef) || channel === X && isFieldOrDatumDef(encoding.x2) || channel === Y && isFieldOrDatumDef(encoding.y2)) {
          const axisSpec = isFieldOrDatumDef(channelDef) ? channelDef.axis : void 0;
          _axis[channel] = axisSpec ? this.initAxis({ ...axisSpec }) : axisSpec;
        }
        return _axis;
      }, {});
    }
    initAxis(axis) {
      const props = keys(axis);
      const axisInternal = {};
      for (const prop of props) {
        const val = axis[prop];
        axisInternal[prop] = isConditionalAxisValue(val) ? signalOrValueRefWithCondition(val) : signalRefOrValue(val);
      }
      return axisInternal;
    }
    initLegends(encoding) {
      return NONPOSITION_SCALE_CHANNELS.reduce((_legend, channel) => {
        const fieldOrDatumDef = getFieldOrDatumDef(encoding[channel]);
        if (fieldOrDatumDef && supportLegend(channel)) {
          const legend = fieldOrDatumDef.legend;
          _legend[channel] = legend ? replaceExprRef(legend) : legend;
        }
        return _legend;
      }, {});
    }
    parseData() {
      this.component.data = parseData(this);
    }
    parseLayoutSize() {
      parseUnitLayoutSize(this);
    }
    parseSelections() {
      this.component.selection = parseUnitSelection(this, this.selection);
    }
    parseMarkGroup() {
      this.component.mark = parseMarkGroups(this);
    }
    parseAxesAndHeaders() {
      this.component.axes = parseUnitAxes(this);
    }
    assembleSelectionTopLevelSignals(signals) {
      return assembleTopLevelSignals(this, signals);
    }
    assembleSignals() {
      return [...assembleAxisSignals(this), ...assembleUnitSelectionSignals(this, [])];
    }
    assembleSelectionData(data2) {
      return assembleUnitSelectionData(this, data2);
    }
    assembleLayout() {
      return null;
    }
    assembleLayoutSignals() {
      return assembleLayoutSignals(this);
    }
    assembleMarks() {
      let marks = this.component.mark ?? [];
      if (!this.parent || !isLayerModel(this.parent)) {
        marks = assembleUnitSelectionMarks(this, marks);
      }
      return marks.map(this.correctDataNames);
    }
    assembleGroupStyle() {
      const { style: style2 } = this.view || {};
      if (style2 !== void 0) {
        return style2;
      }
      if (this.encoding.x || this.encoding.y) {
        return "cell";
      } else {
        return "view";
      }
    }
    getMapping() {
      return this.encoding;
    }
    get mark() {
      return this.markDef.type;
    }
    channelHasField(channel) {
      return channelHasField(this.encoding, channel);
    }
    fieldDef(channel) {
      const channelDef = this.encoding[channel];
      return getFieldDef(channelDef);
    }
    typedFieldDef(channel) {
      const fieldDef = this.fieldDef(channel);
      if (isTypedFieldDef(fieldDef)) {
        return fieldDef;
      }
      return null;
    }
  }
  class LayerModel extends Model {
    constructor(spec, parent, parentGivenName, parentGivenSize, config) {
      super(spec, "layer", parent, parentGivenName, config, spec.resolve, spec.view);
      const layoutSize = {
        ...parentGivenSize,
        ...spec.width ? { width: spec.width } : {},
        ...spec.height ? { height: spec.height } : {}
      };
      this.children = spec.layer.map((layer, i) => {
        if (isLayerSpec(layer)) {
          return new LayerModel(layer, this, this.getName(`layer_${i}`), layoutSize, config);
        } else if (isUnitSpec(layer)) {
          return new UnitModel(layer, this, this.getName(`layer_${i}`), layoutSize, config);
        }
        throw new Error(invalidSpec(layer));
      });
    }
    parseData() {
      this.component.data = parseData(this);
      for (const child of this.children) {
        child.parseData();
      }
    }
    parseLayoutSize() {
      parseLayerLayoutSize(this);
    }
    parseSelections() {
      this.component.selection = {};
      for (const child of this.children) {
        child.parseSelections();
        for (const key2 of keys(child.component.selection)) {
          this.component.selection[key2] = child.component.selection[key2];
        }
      }
      if (Object.values(this.component.selection).some((selCmpt) => isTimerSelection(selCmpt))) {
        error(MULTI_VIEW_ANIMATION_UNSUPPORTED);
      }
    }
    parseMarkGroup() {
      for (const child of this.children) {
        child.parseMarkGroup();
      }
    }
    parseAxesAndHeaders() {
      parseLayerAxes(this);
    }
    assembleSelectionTopLevelSignals(signals) {
      return this.children.reduce((sg, child) => child.assembleSelectionTopLevelSignals(sg), signals);
    }
    // TODO: Support same named selections across children.
    assembleSignals() {
      return this.children.reduce((signals, child) => {
        return signals.concat(child.assembleSignals());
      }, assembleAxisSignals(this));
    }
    assembleLayoutSignals() {
      return this.children.reduce((signals, child) => {
        return signals.concat(child.assembleLayoutSignals());
      }, assembleLayoutSignals(this));
    }
    assembleSelectionData(data2) {
      return this.children.reduce((db, child) => child.assembleSelectionData(db), data2);
    }
    assembleGroupStyle() {
      const uniqueStyles = /* @__PURE__ */ new Set();
      for (const child of this.children) {
        for (const style2 of array$5(child.assembleGroupStyle())) {
          uniqueStyles.add(style2);
        }
      }
      const styles = Array.from(uniqueStyles);
      return styles.length > 1 ? styles : styles.length === 1 ? styles[0] : void 0;
    }
    assembleTitle() {
      let title2 = super.assembleTitle();
      if (title2) {
        return title2;
      }
      for (const child of this.children) {
        title2 = child.assembleTitle();
        if (title2) {
          return title2;
        }
      }
      return void 0;
    }
    assembleLayout() {
      return null;
    }
    assembleMarks() {
      return assembleLayerSelectionMarks(this, this.children.flatMap((child) => {
        return child.assembleMarks();
      }));
    }
    assembleLegends() {
      return this.children.reduce((legends, child) => {
        return legends.concat(child.assembleLegends());
      }, assembleLegends(this));
    }
  }
  function buildModel(spec, parent, parentGivenName, unitSize, config) {
    if (isFacetSpec(spec)) {
      return new FacetModel(spec, parent, parentGivenName, config);
    } else if (isLayerSpec(spec)) {
      return new LayerModel(spec, parent, parentGivenName, unitSize, config);
    } else if (isUnitSpec(spec)) {
      return new UnitModel(spec, parent, parentGivenName, unitSize, config);
    } else if (isAnyConcatSpec(spec)) {
      return new ConcatModel(spec, parent, parentGivenName, config);
    }
    throw new Error(invalidSpec(spec));
  }
  function compile(inputSpec, opt = {}) {
    if (opt.logger) {
      set(opt.logger);
    }
    if (opt.fieldTitle) {
      setTitleFormatter(opt.fieldTitle);
    }
    try {
      const config = initConfig(mergeConfig(opt.config, inputSpec.config));
      const spec = normalize(inputSpec, config);
      const model = buildModel(spec, null, "", void 0, config);
      model.parse();
      optimizeDataflow(model.component.data, model);
      const vgSpec = assembleTopLevelModel(model, getTopLevelProperties(inputSpec, spec.autosize, config, model), inputSpec.datasets, inputSpec.usermeta);
      return {
        spec: vgSpec,
        normalized: spec
      };
    } finally {
      if (opt.logger) {
        reset();
      }
      if (opt.fieldTitle) {
        resetTitleFormatter();
      }
    }
  }
  function getTopLevelProperties(inputSpec, autosize, config, model) {
    const width2 = model.component.layoutSize.get("width");
    const height2 = model.component.layoutSize.get("height");
    if (autosize === void 0) {
      autosize = { type: "pad" };
      if (model.hasAxisOrientSignalRef()) {
        autosize.resize = true;
      }
    } else if (isString(autosize)) {
      autosize = { type: autosize };
    }
    if (width2 && height2 && isFitType(autosize.type)) {
      if (width2 === "step" && height2 === "step") {
        warn(droppingFit());
        autosize.type = "pad";
      } else if (width2 === "step" || height2 === "step") {
        const sizeType = width2 === "step" ? "width" : "height";
        warn(droppingFit(getPositionScaleChannel(sizeType)));
        const inverseSizeType = sizeType === "width" ? "height" : "width";
        autosize.type = getFitType(inverseSizeType);
      }
    }
    return {
      ...keys(autosize).length === 1 && autosize.type ? autosize.type === "pad" ? {} : { autosize: autosize.type } : { autosize },
      ...extractTopLevelProperties(config, false),
      ...extractTopLevelProperties(inputSpec, true)
    };
  }
  function assembleTopLevelModel(model, topLevelProperties, datasets = {}, usermeta) {
    const vgConfig = model.config ? stripAndRedirectConfig(model.config) : void 0;
    const rootData = assembleRootData(model.component.data, datasets);
    const data2 = model.assembleSelectionData(rootData);
    const projections2 = model.assembleProjections();
    const title2 = model.assembleTitle();
    const style2 = model.assembleGroupStyle();
    const encodeEntry2 = model.assembleGroupEncodeEntry(true);
    let layoutSignals = model.assembleLayoutSignals();
    layoutSignals = layoutSignals.filter((signal) => {
      if ((signal.name === "width" || signal.name === "height") && signal.value !== void 0) {
        topLevelProperties[signal.name] = +signal.value;
        return false;
      }
      return true;
    });
    const { params: params2, ...otherTopLevelProps } = topLevelProperties;
    return {
      $schema: "https://vega.github.io/schema/vega/v5.json",
      ...model.description ? { description: model.description } : {},
      ...otherTopLevelProps,
      ...title2 ? { title: title2 } : {},
      ...style2 ? { style: style2 } : {},
      ...encodeEntry2 ? { encode: { update: encodeEntry2 } } : {},
      data: data2,
      ...projections2.length > 0 ? { projections: projections2 } : {},
      ...model.assembleGroup([
        ...layoutSignals,
        ...model.assembleSelectionTopLevelSignals([]),
        ...assembleParameterSignals(params2)
      ]),
      ...vgConfig ? { config: vgConfig } : {},
      ...usermeta ? { usermeta } : {}
    };
  }
  const version$2 = pkg$1.version;
  const vegaLiteImport = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
    __proto__: null,
    accessPathDepth,
    accessPathWithDatum,
    accessWithDatumToUnescapedPath,
    compile,
    contains,
    deepEqual,
    deleteNestedProperty,
    duplicate,
    entries: entries$1,
    every,
    fieldIntersection,
    flatAccessWithDatum,
    getFirstDefined,
    hasIntersection,
    hasProperty,
    hash,
    internalField,
    isBoolean,
    isEmpty,
    isEqual,
    isInternalField,
    isNullOrFalse,
    isNumeric,
    keys,
    logicalExpr,
    mergeDeep: mergeDeep$1,
    never,
    normalize,
    normalizeAngle,
    omit,
    pick,
    prefixGenerator,
    removePathFromField,
    replaceAll,
    replacePathInField,
    resetIdCounter,
    setEqual,
    some,
    stringify: stringify$1,
    titleCase,
    unique,
    uniqueId,
    vals,
    varName,
    version: version$2
  }, Symbol.toStringTag, { value: "Module" }));
  function e(e3) {
    const [n, r] = /schema\/([\w-]+)\/([\w\.\-]+)\.json$/g.exec(e3).slice(1, 3);
    return { library: n, version: r };
  }
  var version$1 = "2.15.0";
  var pkg = {
    version: version$1
  };
  const lightColor = "#fff";
  const medColor = "#888";
  const darkTheme = {
    background: "#333",
    view: {
      stroke: medColor
    },
    title: {
      color: lightColor,
      subtitleColor: lightColor
    },
    style: {
      "guide-label": {
        fill: lightColor
      },
      "guide-title": {
        fill: lightColor
      }
    },
    axis: {
      domainColor: lightColor,
      gridColor: medColor,
      tickColor: lightColor
    }
  };
  const markColor$7 = "#4572a7";
  const excelTheme = {
    background: "#fff",
    arc: {
      fill: markColor$7
    },
    area: {
      fill: markColor$7
    },
    line: {
      stroke: markColor$7,
      strokeWidth: 2
    },
    path: {
      stroke: markColor$7
    },
    rect: {
      fill: markColor$7
    },
    shape: {
      stroke: markColor$7
    },
    symbol: {
      fill: markColor$7,
      strokeWidth: 1.5,
      size: 50
    },
    axis: {
      bandPosition: 0.5,
      grid: true,
      gridColor: "#000000",
      gridOpacity: 1,
      gridWidth: 0.5,
      labelPadding: 10,
      tickSize: 5,
      tickWidth: 0.5
    },
    axisBand: {
      grid: false,
      tickExtra: true
    },
    legend: {
      labelBaseline: "middle",
      labelFontSize: 11,
      symbolSize: 50,
      symbolType: "square"
    },
    range: {
      category: ["#4572a7", "#aa4643", "#8aa453", "#71598e", "#4598ae", "#d98445", "#94aace", "#d09393", "#b9cc98", "#a99cbc"]
    }
  };
  const markColor$6 = "#30a2da";
  const axisColor$2 = "#cbcbcb";
  const guideLabelColor = "#999";
  const guideTitleColor = "#333";
  const backgroundColor$2 = "#f0f0f0";
  const blackTitle = "#333";
  const fiveThirtyEightTheme = {
    arc: {
      fill: markColor$6
    },
    area: {
      fill: markColor$6
    },
    axis: {
      domainColor: axisColor$2,
      grid: true,
      gridColor: axisColor$2,
      gridWidth: 1,
      labelColor: guideLabelColor,
      labelFontSize: 10,
      titleColor: guideTitleColor,
      tickColor: axisColor$2,
      tickSize: 10,
      titleFontSize: 14,
      titlePadding: 10,
      labelPadding: 4
    },
    axisBand: {
      grid: false
    },
    background: backgroundColor$2,
    group: {
      fill: backgroundColor$2
    },
    legend: {
      labelColor: blackTitle,
      labelFontSize: 11,
      padding: 1,
      symbolSize: 30,
      symbolType: "square",
      titleColor: blackTitle,
      titleFontSize: 14,
      titlePadding: 10
    },
    line: {
      stroke: markColor$6,
      strokeWidth: 2
    },
    path: {
      stroke: markColor$6,
      strokeWidth: 0.5
    },
    rect: {
      fill: markColor$6
    },
    range: {
      category: ["#30a2da", "#fc4f30", "#e5ae38", "#6d904f", "#8b8b8b", "#b96db8", "#ff9e27", "#56cc60", "#52d2ca", "#52689e", "#545454", "#9fe4f8"],
      diverging: ["#cc0020", "#e77866", "#f6e7e1", "#d6e8ed", "#91bfd9", "#1d78b5"],
      heatmap: ["#d6e8ed", "#cee0e5", "#91bfd9", "#549cc6", "#1d78b5"]
    },
    point: {
      filled: true,
      shape: "circle"
    },
    shape: {
      stroke: markColor$6
    },
    bar: {
      binSpacing: 2,
      fill: markColor$6,
      stroke: null
    },
    title: {
      anchor: "start",
      fontSize: 24,
      fontWeight: 600,
      offset: 20
    }
  };
  const markColor$5 = "#000";
  const ggplot2Theme = {
    group: {
      fill: "#e5e5e5"
    },
    arc: {
      fill: markColor$5
    },
    area: {
      fill: markColor$5
    },
    line: {
      stroke: markColor$5
    },
    path: {
      stroke: markColor$5
    },
    rect: {
      fill: markColor$5
    },
    shape: {
      stroke: markColor$5
    },
    symbol: {
      fill: markColor$5,
      size: 40
    },
    axis: {
      domain: false,
      grid: true,
      gridColor: "#FFFFFF",
      gridOpacity: 1,
      labelColor: "#7F7F7F",
      labelPadding: 4,
      tickColor: "#7F7F7F",
      tickSize: 5.67,
      titleFontSize: 16,
      titleFontWeight: "normal"
    },
    legend: {
      labelBaseline: "middle",
      labelFontSize: 11,
      symbolSize: 40
    },
    range: {
      category: ["#000000", "#7F7F7F", "#1A1A1A", "#999999", "#333333", "#B0B0B0", "#4D4D4D", "#C9C9C9", "#666666", "#DCDCDC"]
    }
  };
  const headlineFontSize = 22;
  const headlineFontWeight = "normal";
  const labelFont$1 = "Benton Gothic, sans-serif";
  const labelFontSize = 11.5;
  const labelFontWeight = "normal";
  const markColor$4 = "#82c6df";
  const titleFont = "Benton Gothic Bold, sans-serif";
  const titleFontWeight = "normal";
  const titleFontSize$1 = 13;
  const colorSchemes$1 = {
    "category-6": ["#ec8431", "#829eb1", "#c89d29", "#3580b1", "#adc839", "#ab7fb4"],
    "fire-7": ["#fbf2c7", "#f9e39c", "#f8d36e", "#f4bb6a", "#e68a4f", "#d15a40", "#ab4232"],
    "fireandice-6": ["#e68a4f", "#f4bb6a", "#f9e39c", "#dadfe2", "#a6b7c6", "#849eae"]
  };
  const latimesTheme = {
    background: "#ffffff",
    title: {
      anchor: "start",
      color: "#000000",
      font: titleFont,
      fontSize: headlineFontSize,
      fontWeight: headlineFontWeight
    },
    arc: {
      fill: markColor$4
    },
    area: {
      fill: markColor$4
    },
    line: {
      stroke: markColor$4,
      strokeWidth: 2
    },
    path: {
      stroke: markColor$4
    },
    rect: {
      fill: markColor$4
    },
    shape: {
      stroke: markColor$4
    },
    symbol: {
      fill: markColor$4,
      size: 30
    },
    axis: {
      labelFont: labelFont$1,
      labelFontSize,
      labelFontWeight,
      titleFont,
      titleFontSize: titleFontSize$1,
      titleFontWeight
    },
    axisX: {
      labelAngle: 0,
      labelPadding: 4,
      tickSize: 3
    },
    axisY: {
      labelBaseline: "middle",
      maxExtent: 45,
      minExtent: 45,
      tickSize: 2,
      titleAlign: "left",
      titleAngle: 0,
      titleX: -45,
      titleY: -11
    },
    legend: {
      labelFont: labelFont$1,
      labelFontSize,
      symbolType: "square",
      titleFont,
      titleFontSize: titleFontSize$1,
      titleFontWeight
    },
    range: {
      category: colorSchemes$1["category-6"],
      diverging: colorSchemes$1["fireandice-6"],
      heatmap: colorSchemes$1["fire-7"],
      ordinal: colorSchemes$1["fire-7"],
      ramp: colorSchemes$1["fire-7"]
    }
  };
  const markColor$3 = "#ab5787";
  const axisColor$1 = "#979797";
  const quartzTheme = {
    background: "#f9f9f9",
    arc: {
      fill: markColor$3
    },
    area: {
      fill: markColor$3
    },
    line: {
      stroke: markColor$3
    },
    path: {
      stroke: markColor$3
    },
    rect: {
      fill: markColor$3
    },
    shape: {
      stroke: markColor$3
    },
    symbol: {
      fill: markColor$3,
      size: 30
    },
    axis: {
      domainColor: axisColor$1,
      domainWidth: 0.5,
      gridWidth: 0.2,
      labelColor: axisColor$1,
      tickColor: axisColor$1,
      tickWidth: 0.2,
      titleColor: axisColor$1
    },
    axisBand: {
      grid: false
    },
    axisX: {
      grid: true,
      tickSize: 10
    },
    axisY: {
      domain: false,
      grid: true,
      tickSize: 0
    },
    legend: {
      labelFontSize: 11,
      padding: 1,
      symbolSize: 30,
      symbolType: "square"
    },
    range: {
      category: ["#ab5787", "#51b2e5", "#703c5c", "#168dd9", "#d190b6", "#00609f", "#d365ba", "#154866", "#666666", "#c4c4c4"]
    }
  };
  const markColor$2 = "#3e5c69";
  const voxTheme = {
    background: "#fff",
    arc: {
      fill: markColor$2
    },
    area: {
      fill: markColor$2
    },
    line: {
      stroke: markColor$2
    },
    path: {
      stroke: markColor$2
    },
    rect: {
      fill: markColor$2
    },
    shape: {
      stroke: markColor$2
    },
    symbol: {
      fill: markColor$2
    },
    axis: {
      domainWidth: 0.5,
      grid: true,
      labelPadding: 2,
      tickSize: 5,
      tickWidth: 0.5,
      titleFontWeight: "normal"
    },
    axisBand: {
      grid: false
    },
    axisX: {
      gridWidth: 0.2
    },
    axisY: {
      gridDash: [3],
      gridWidth: 0.4
    },
    legend: {
      labelFontSize: 11,
      padding: 1,
      symbolType: "square"
    },
    range: {
      category: ["#3e5c69", "#6793a6", "#182429", "#0570b0", "#3690c0", "#74a9cf", "#a6bddb", "#e2ddf2"]
    }
  };
  const markColor$1 = "#1696d2";
  const axisColor = "#000000";
  const backgroundColor$1 = "#FFFFFF";
  const font = "Lato";
  const labelFont = "Lato";
  const sourceFont = "Lato";
  const gridColor$1 = "#DEDDDD";
  const titleFontSize = 18;
  const colorSchemes = {
    "shades-blue": ["#CFE8F3", "#A2D4EC", "#73BFE2", "#46ABDB", "#1696D2", "#12719E", "#0A4C6A", "#062635"],
    "six-groups-cat-1": ["#1696d2", "#ec008b", "#fdbf11", "#000000", "#d2d2d2", "#55b748"],
    "six-groups-seq": ["#cfe8f3", "#a2d4ec", "#73bfe2", "#46abdb", "#1696d2", "#12719e"],
    "diverging-colors": ["#ca5800", "#fdbf11", "#fdd870", "#fff2cf", "#cfe8f3", "#73bfe2", "#1696d2", "#0a4c6a"]
  };
  const urbanInstituteTheme = {
    background: backgroundColor$1,
    title: {
      anchor: "start",
      fontSize: titleFontSize,
      font
    },
    axisX: {
      domain: true,
      domainColor: axisColor,
      domainWidth: 1,
      grid: false,
      labelFontSize: 12,
      labelFont,
      labelAngle: 0,
      tickColor: axisColor,
      tickSize: 5,
      titleFontSize: 12,
      titlePadding: 10,
      titleFont: font
    },
    axisY: {
      domain: false,
      domainWidth: 1,
      grid: true,
      gridColor: gridColor$1,
      gridWidth: 1,
      labelFontSize: 12,
      labelFont,
      labelPadding: 8,
      ticks: false,
      titleFontSize: 12,
      titlePadding: 10,
      titleFont: font,
      titleAngle: 0,
      titleY: -10,
      titleX: 18
    },
    legend: {
      labelFontSize: 12,
      labelFont,
      symbolSize: 100,
      titleFontSize: 12,
      titlePadding: 10,
      titleFont: font,
      orient: "right",
      offset: 10
    },
    view: {
      stroke: "transparent"
    },
    range: {
      category: colorSchemes["six-groups-cat-1"],
      diverging: colorSchemes["diverging-colors"],
      heatmap: colorSchemes["diverging-colors"],
      ordinal: colorSchemes["six-groups-seq"],
      ramp: colorSchemes["shades-blue"]
    },
    area: {
      fill: markColor$1
    },
    rect: {
      fill: markColor$1
    },
    line: {
      color: markColor$1,
      stroke: markColor$1,
      strokeWidth: 5
    },
    trail: {
      color: markColor$1,
      stroke: markColor$1,
      strokeWidth: 0,
      size: 1
    },
    path: {
      stroke: markColor$1,
      strokeWidth: 0.5
    },
    point: {
      filled: true
    },
    text: {
      font: sourceFont,
      color: markColor$1,
      fontSize: 11,
      align: "center",
      fontWeight: 400,
      size: 11
    },
    style: {
      bar: {
        fill: markColor$1,
        stroke: null
      }
    },
    arc: {
      fill: markColor$1
    },
    shape: {
      stroke: markColor$1
    },
    symbol: {
      fill: markColor$1,
      size: 30
    }
  };
  const markColor = "#3366CC";
  const gridColor = "#ccc";
  const defaultFont$1 = "Arial, sans-serif";
  const googlechartsTheme = {
    arc: {
      fill: markColor
    },
    area: {
      fill: markColor
    },
    path: {
      stroke: markColor
    },
    rect: {
      fill: markColor
    },
    shape: {
      stroke: markColor
    },
    symbol: {
      stroke: markColor
    },
    circle: {
      fill: markColor
    },
    background: "#fff",
    padding: {
      top: 10,
      right: 10,
      bottom: 10,
      left: 10
    },
    style: {
      "guide-label": {
        font: defaultFont$1,
        fontSize: 12
      },
      "guide-title": {
        font: defaultFont$1,
        fontSize: 12
      },
      "group-title": {
        font: defaultFont$1,
        fontSize: 12
      }
    },
    title: {
      font: defaultFont$1,
      fontSize: 14,
      fontWeight: "bold",
      dy: -3,
      anchor: "start"
    },
    axis: {
      gridColor,
      tickColor: gridColor,
      domain: false,
      grid: true
    },
    range: {
      category: ["#4285F4", "#DB4437", "#F4B400", "#0F9D58", "#AB47BC", "#00ACC1", "#FF7043", "#9E9D24", "#5C6BC0", "#F06292", "#00796B", "#C2185B"],
      heatmap: ["#c6dafc", "#5e97f6", "#2a56c6"]
    }
  };
  const ptToPx = (value2) => value2 * (1 / 3 + 1);
  const fontSmallPx = ptToPx(9);
  const legendFontPx = ptToPx(10);
  const fontLargePx = ptToPx(12);
  const fontStandard = "Segoe UI";
  const fontTitle = "wf_standard-font, helvetica, arial, sans-serif";
  const firstLevelElementColor = "#252423";
  const secondLevelElementColor = "#605E5C";
  const backgroundColor = "transparent";
  const backgroundSecondaryColor = "#C8C6C4";
  const paletteColor1 = "#118DFF";
  const paletteColor2 = "#12239E";
  const paletteColor3 = "#E66C37";
  const paletteColor4 = "#6B007B";
  const paletteColor5 = "#E044A7";
  const paletteColor6 = "#744EC2";
  const paletteColor7 = "#D9B300";
  const paletteColor8 = "#D64550";
  const divergentColorMax = paletteColor1;
  const divergentColorMin = "#DEEFFF";
  const divergentPalette = [divergentColorMin, divergentColorMax];
  const ordinalPalette = [divergentColorMin, "#c7e4ff", "#b0d9ff", "#9aceff", "#83c3ff", "#6cb9ff", "#55aeff", "#3fa3ff", "#2898ff", divergentColorMax];
  const powerbiTheme = {
    view: {
      stroke: backgroundColor
    },
    background: backgroundColor,
    font: fontStandard,
    header: {
      titleFont: fontTitle,
      titleFontSize: fontLargePx,
      titleColor: firstLevelElementColor,
      labelFont: fontStandard,
      labelFontSize: legendFontPx,
      labelColor: secondLevelElementColor
    },
    axis: {
      ticks: false,
      grid: false,
      domain: false,
      labelColor: secondLevelElementColor,
      labelFontSize: fontSmallPx,
      titleFont: fontTitle,
      titleColor: firstLevelElementColor,
      titleFontSize: fontLargePx,
      titleFontWeight: "normal"
    },
    axisQuantitative: {
      tickCount: 3,
      grid: true,
      gridColor: backgroundSecondaryColor,
      gridDash: [1, 5],
      labelFlush: false
    },
    axisBand: {
      tickExtra: true
    },
    axisX: {
      labelPadding: 5
    },
    axisY: {
      labelPadding: 10
    },
    bar: {
      fill: paletteColor1
    },
    line: {
      stroke: paletteColor1,
      strokeWidth: 3,
      strokeCap: "round",
      strokeJoin: "round"
    },
    text: {
      font: fontStandard,
      fontSize: fontSmallPx,
      fill: secondLevelElementColor
    },
    arc: {
      fill: paletteColor1
    },
    area: {
      fill: paletteColor1,
      line: true,
      opacity: 0.6
    },
    path: {
      stroke: paletteColor1
    },
    rect: {
      fill: paletteColor1
    },
    point: {
      fill: paletteColor1,
      filled: true,
      size: 75
    },
    shape: {
      stroke: paletteColor1
    },
    symbol: {
      fill: paletteColor1,
      strokeWidth: 1.5,
      size: 50
    },
    legend: {
      titleFont: fontStandard,
      titleFontWeight: "bold",
      titleColor: secondLevelElementColor,
      labelFont: fontStandard,
      labelFontSize: legendFontPx,
      labelColor: secondLevelElementColor,
      symbolType: "circle",
      symbolSize: 75
    },
    range: {
      category: [paletteColor1, paletteColor2, paletteColor3, paletteColor4, paletteColor5, paletteColor6, paletteColor7, paletteColor8],
      diverging: divergentPalette,
      heatmap: divergentPalette,
      ordinal: ordinalPalette
    }
  };
  const defaultFont = 'IBM Plex Sans,system-ui,-apple-system,BlinkMacSystemFont,".sfnstext-regular",sans-serif';
  const condensedFont = 'IBM Plex Sans Condensed, system-ui, -apple-system, BlinkMacSystemFont, ".SFNSText-Regular", sans-serif';
  const fontWeight = 400;
  const TOKENS = {
    textPrimary: {
      g90: "#f4f4f4",
      g100: "#f4f4f4",
      white: "#161616",
      g10: "#161616"
    },
    textSecondary: {
      g90: "#c6c6c6",
      g100: "#c6c6c6",
      white: "#525252",
      g10: "#525252"
    },
    // layer
    layerAccent01: {
      white: "#e0e0e0",
      g10: "#e0e0e0",
      g90: "#525252",
      g100: "#393939"
    },
    // grid
    gridBg: {
      white: "#ffffff",
      g10: "#ffffff",
      g90: "#161616",
      g100: "#161616"
    }
  };
  const darkCategories = ["#8a3ffc", "#33b1ff", "#007d79", "#ff7eb6", "#fa4d56", "#fff1f1", "#6fdc8c", "#4589ff", "#d12771", "#d2a106", "#08bdba", "#bae6ff", "#ba4e00", "#d4bbff"];
  const lightCategories = ["#6929c4", "#1192e8", "#005d5d", "#9f1853", "#fa4d56", "#570408", "#198038", "#002d9c", "#ee538b", "#b28600", "#009d9a", "#012749", "#8a3800", "#a56eff"];
  function genCarbonConfig({
    theme,
    background: background2
  }) {
    const type2 = ["white", "g10"].includes(theme) ? "light" : "dark";
    const viewbg = TOKENS.gridBg[theme];
    const titleColor = TOKENS.textPrimary[theme];
    const textColor = TOKENS.textSecondary[theme];
    const category = type2 === "dark" ? darkCategories : lightCategories;
    const markColor2 = type2 === "dark" ? "#d4bbff" : "#6929c4";
    return {
      background: background2,
      arc: {
        fill: markColor2
      },
      area: {
        fill: markColor2
      },
      path: {
        stroke: markColor2
      },
      rect: {
        fill: markColor2
      },
      shape: {
        stroke: markColor2
      },
      symbol: {
        stroke: markColor2
      },
      circle: {
        fill: markColor2
      },
      view: {
        fill: viewbg,
        stroke: viewbg
      },
      group: {
        fill: viewbg
      },
      title: {
        color: titleColor,
        anchor: "start",
        dy: -15,
        fontSize: 16,
        font: defaultFont,
        fontWeight: 600
      },
      axis: {
        // Axis labels
        labelColor: textColor,
        labelFontSize: 12,
        labelFont: condensedFont,
        labelFontWeight: fontWeight,
        // Axis titles
        titleColor,
        titleFontWeight: 600,
        titleFontSize: 12,
        // MISC
        grid: true,
        gridColor: TOKENS.layerAccent01[theme],
        labelAngle: 0
      },
      axisX: {
        titlePadding: 10
      },
      axisY: {
        titlePadding: 2.5
      },
      style: {
        "guide-label": {
          font: defaultFont,
          fill: textColor,
          fontWeight
        },
        "guide-title": {
          font: defaultFont,
          fill: textColor,
          fontWeight
        }
      },
      range: {
        category,
        diverging: ["#750e13", "#a2191f", "#da1e28", "#fa4d56", "#ff8389", "#ffb3b8", "#ffd7d9", "#fff1f1", "#e5f6ff", "#bae6ff", "#82cfff", "#33b1ff", "#1192e8", "#0072c3", "#00539a", "#003a6d"],
        heatmap: ["#f6f2ff", "#e8daff", "#d4bbff", "#be95ff", "#a56eff", "#8a3ffc", "#6929c4", "#491d8b", "#31135e", "#1c0f30"]
      }
    };
  }
  const carbonwhite = genCarbonConfig({
    theme: "white",
    background: "#ffffff"
  });
  const carbong10 = genCarbonConfig({
    theme: "g10",
    background: "#f4f4f4"
  });
  const carbong90 = genCarbonConfig({
    theme: "g90",
    background: "#262626"
  });
  const carbong100 = genCarbonConfig({
    theme: "g100",
    background: "#161616"
  });
  const version = pkg.version;
  const themes = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
    __proto__: null,
    carbong10,
    carbong100,
    carbong90,
    carbonwhite,
    dark: darkTheme,
    excel: excelTheme,
    fivethirtyeight: fiveThirtyEightTheme,
    ggplot2: ggplot2Theme,
    googlecharts: googlechartsTheme,
    latimes: latimesTheme,
    powerbi: powerbiTheme,
    quartz: quartzTheme,
    urbaninstitute: urbanInstituteTheme,
    version,
    vox: voxTheme
  }, Symbol.toStringTag, { value: "Module" }));
  function formatValue(value2, valueToHtml, maxDepth2, baseURL) {
    if (isArray(value2)) {
      return `[${value2.map((v) => valueToHtml(isString(v) ? v : stringify(v, maxDepth2))).join(", ")}]`;
    }
    if (isObject(value2)) {
      let content2 = "";
      const { title: title2, image: image2, ...rest } = value2;
      if (title2) {
        content2 += `<h2>${valueToHtml(title2)}</h2>`;
      }
      if (image2) {
        content2 += `<img src="${new URL(valueToHtml(image2), baseURL || location.href).href}">`;
      }
      const keys2 = Object.keys(rest);
      if (keys2.length > 0) {
        content2 += "<table>";
        for (const key2 of keys2) {
          let val = rest[key2];
          if (val === void 0) {
            continue;
          }
          if (isObject(val)) {
            val = stringify(val, maxDepth2);
          }
          content2 += `<tr><td class="key">${valueToHtml(key2)}</td><td class="value">${valueToHtml(val)}</td></tr>`;
        }
        content2 += `</table>`;
      }
      return content2 || "{}";
    }
    return valueToHtml(value2);
  }
  function replacer(maxDepth2) {
    const stack2 = [];
    return function(key2, value2) {
      if (typeof value2 !== "object" || value2 === null) {
        return value2;
      }
      const pos = stack2.indexOf(this) + 1;
      stack2.length = pos;
      if (stack2.length > maxDepth2) {
        return "[Object]";
      }
      if (stack2.indexOf(value2) >= 0) {
        return "[Circular]";
      }
      stack2.push(value2);
      return value2;
    };
  }
  function stringify(obj, maxDepth2) {
    return JSON.stringify(obj, replacer(maxDepth2));
  }
  var defaultStyle = `#vg-tooltip-element {
  visibility: hidden;
  padding: 8px;
  position: fixed;
  z-index: 1000;
  font-family: sans-serif;
  font-size: 11px;
  border-radius: 3px;
  box-shadow: 2px 2px 4px rgba(0, 0, 0, 0.1);
  /* The default theme is the light theme. */
  background-color: rgba(255, 255, 255, 0.95);
  border: 1px solid #d9d9d9;
  color: black;
}
#vg-tooltip-element.visible {
  visibility: visible;
}
#vg-tooltip-element h2 {
  margin-top: 0;
  margin-bottom: 10px;
  font-size: 13px;
}
#vg-tooltip-element table {
  border-spacing: 0;
}
#vg-tooltip-element table tr {
  border: none;
}
#vg-tooltip-element table tr td {
  overflow: hidden;
  text-overflow: ellipsis;
  padding-top: 2px;
  padding-bottom: 2px;
}
#vg-tooltip-element table tr td.key {
  color: #808080;
  max-width: 150px;
  text-align: right;
  padding-right: 4px;
}
#vg-tooltip-element table tr td.value {
  display: block;
  max-width: 300px;
  max-height: 7em;
  text-align: left;
}
#vg-tooltip-element.dark-theme {
  background-color: rgba(32, 32, 32, 0.9);
  border: 1px solid #f5f5f5;
  color: white;
}
#vg-tooltip-element.dark-theme td.key {
  color: #bfbfbf;
}
`;
  const EL_ID = "vg-tooltip-element";
  const DEFAULT_OPTIONS = {
    offsetX: 10,
    offsetY: 10,
    id: EL_ID,
    styleId: "vega-tooltip-style",
    theme: "light",
    disableDefaultStyle: false,
    sanitize: escapeHTML,
    maxDepth: 2,
    formatTooltip: formatValue,
    baseURL: "",
    anchor: "cursor",
    position: ["top", "bottom", "left", "right", "top-left", "top-right", "bottom-left", "bottom-right"]
  };
  function escapeHTML(value2) {
    return String(value2).replace(/&/g, "&amp;").replace(/</g, "&lt;");
  }
  function createDefaultStyle(id2) {
    if (!/^[A-Za-z]+[-:.\w]*$/.test(id2)) {
      throw new Error("Invalid HTML ID");
    }
    return defaultStyle.toString().replace(EL_ID, id2);
  }
  function calculatePositionRelativeToCursor(event2, tooltipBox, { offsetX, offsetY }) {
    const positions = getPositions({ x1: event2.clientX, x2: event2.clientX, y1: event2.clientY, y2: event2.clientY }, tooltipBox, offsetX, offsetY);
    const postionArr = ["bottom-right", "bottom-left", "top-right", "top-left"];
    for (const p of postionArr) {
      if (tooltipIsInViewport(positions[p], tooltipBox)) {
        return positions[p];
      }
    }
    return positions["top-left"];
  }
  function calculatePositionRelativeToMark(handler, event2, item, tooltipBox, options) {
    const { position: position2, offsetX, offsetY } = options;
    const containerBox = handler._el.getBoundingClientRect();
    const origin = handler._origin;
    const markBounds = getMarkBounds(containerBox, origin, item);
    const positions = getPositions(markBounds, tooltipBox, offsetX, offsetY);
    const positionArr = Array.isArray(position2) ? position2 : [position2];
    for (const p of positionArr) {
      if (tooltipIsInViewport(positions[p], tooltipBox) && !mouseIsOnTooltip(event2, positions[p], tooltipBox)) {
        return positions[p];
      }
    }
    return calculatePositionRelativeToCursor(event2, tooltipBox, options);
  }
  function getMarkBounds(containerBox, origin, item) {
    const markBounds = item.isVoronoi ? item.datum.bounds : item.bounds;
    let left = containerBox.left + origin[0] + markBounds.x1;
    let top = containerBox.top + origin[1] + markBounds.y1;
    let parentItem = item;
    while (parentItem.mark.group) {
      parentItem = parentItem.mark.group;
      left += parentItem.x ?? 0;
      top += parentItem.y ?? 0;
    }
    const markWidth = markBounds.x2 - markBounds.x1;
    const markHeight = markBounds.y2 - markBounds.y1;
    return {
      x1: left,
      x2: left + markWidth,
      y1: top,
      y2: top + markHeight
    };
  }
  function getPositions(markBounds, tooltipBox, offsetX, offsetY) {
    const xc = (markBounds.x1 + markBounds.x2) / 2;
    const yc = (markBounds.y1 + markBounds.y2) / 2;
    const left = markBounds.x1 - tooltipBox.width - offsetX;
    const center = xc - tooltipBox.width / 2;
    const right = markBounds.x2 + offsetX;
    const top = markBounds.y1 - tooltipBox.height - offsetY;
    const middle = yc - tooltipBox.height / 2;
    const bottom = markBounds.y2 + offsetY;
    const positions = {
      top: { x: center, y: top },
      bottom: { x: center, y: bottom },
      left: { x: left, y: middle },
      right: { x: right, y: middle },
      "top-left": { x: left, y: top },
      "top-right": { x: right, y: top },
      "bottom-left": { x: left, y: bottom },
      "bottom-right": { x: right, y: bottom }
    };
    return positions;
  }
  function tooltipIsInViewport(position2, tooltipBox) {
    return position2.x >= 0 && position2.y >= 0 && position2.x + tooltipBox.width <= window.innerWidth && position2.y + tooltipBox.height <= window.innerHeight;
  }
  function mouseIsOnTooltip(event2, position2, tooltipBox) {
    return event2.clientX >= position2.x && event2.clientX <= position2.x + tooltipBox.width && event2.clientY >= position2.y && event2.clientY <= position2.y + tooltipBox.height;
  }
  class Handler {
    /**
     * Create the tooltip handler and initialize the element and style.
     *
     * @param options Tooltip Options
     */
    constructor(options) {
      this.options = { ...DEFAULT_OPTIONS, ...options };
      const elementId = this.options.id;
      this.el = null;
      this.call = this.tooltipHandler.bind(this);
      if (!this.options.disableDefaultStyle && !document.getElementById(this.options.styleId)) {
        const style2 = document.createElement("style");
        style2.setAttribute("id", this.options.styleId);
        style2.innerHTML = createDefaultStyle(elementId);
        const head = document.head;
        if (head.childNodes.length > 0) {
          head.insertBefore(style2, head.childNodes[0]);
        } else {
          head.appendChild(style2);
        }
      }
    }
    /**
     * The tooltip handler function.
     */
    tooltipHandler(handler, event2, item, value2) {
      this.el = document.getElementById(this.options.id);
      if (!this.el) {
        this.el = document.createElement("div");
        this.el.setAttribute("id", this.options.id);
        this.el.classList.add("vg-tooltip");
        const tooltipContainer = document.fullscreenElement ?? document.body;
        tooltipContainer.appendChild(this.el);
      }
      if (value2 == null || value2 === "") {
        this.el.classList.remove("visible", `${this.options.theme}-theme`);
        return;
      }
      this.el.innerHTML = this.options.formatTooltip(value2, this.options.sanitize, this.options.maxDepth, this.options.baseURL);
      this.el.classList.add("visible", `${this.options.theme}-theme`);
      const { x: x2, y: y2 } = this.options.anchor === "mark" ? calculatePositionRelativeToMark(handler, event2, item, this.el.getBoundingClientRect(), this.options) : calculatePositionRelativeToCursor(event2, this.el.getBoundingClientRect(), this.options);
      this.el.style.top = `${y2}px`;
      this.el.style.left = `${x2}px`;
    }
  }
  /*!
   * https://github.com/Starcounter-Jack/JSON-Patch
   * (c) 2017-2022 Joachim Wester
   * MIT licensed
   */
  var __extends = /* @__PURE__ */ function() {
    var extendStatics = function(d, b2) {
      extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b3) {
        d2.__proto__ = b3;
      } || function(d2, b3) {
        for (var p in b3) if (b3.hasOwnProperty(p)) d2[p] = b3[p];
      };
      return extendStatics(d, b2);
    };
    return function(d, b2) {
      extendStatics(d, b2);
      function __() {
        this.constructor = d;
      }
      d.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
    };
  }();
  var _hasOwnProperty = Object.prototype.hasOwnProperty;
  function hasOwnProperty(obj, key2) {
    return _hasOwnProperty.call(obj, key2);
  }
  function _objectKeys(obj) {
    if (Array.isArray(obj)) {
      var keys_1 = new Array(obj.length);
      for (var k = 0; k < keys_1.length; k++) {
        keys_1[k] = "" + k;
      }
      return keys_1;
    }
    if (Object.keys) {
      return Object.keys(obj);
    }
    var keys2 = [];
    for (var i in obj) {
      if (hasOwnProperty(obj, i)) {
        keys2.push(i);
      }
    }
    return keys2;
  }
  function _deepClone(obj) {
    switch (typeof obj) {
      case "object":
        return JSON.parse(JSON.stringify(obj));
      case "undefined":
        return null;
      default:
        return obj;
    }
  }
  function isInteger(str) {
    var i = 0;
    var len = str.length;
    var charCode;
    while (i < len) {
      charCode = str.charCodeAt(i);
      if (charCode >= 48 && charCode <= 57) {
        i++;
        continue;
      }
      return false;
    }
    return true;
  }
  function escapePathComponent(path2) {
    if (path2.indexOf("/") === -1 && path2.indexOf("~") === -1)
      return path2;
    return path2.replace(/~/g, "~0").replace(/\//g, "~1");
  }
  function unescapePathComponent(path2) {
    return path2.replace(/~1/g, "/").replace(/~0/g, "~");
  }
  function hasUndefined(obj) {
    if (obj === void 0) {
      return true;
    }
    if (obj) {
      if (Array.isArray(obj)) {
        for (var i_1 = 0, len = obj.length; i_1 < len; i_1++) {
          if (hasUndefined(obj[i_1])) {
            return true;
          }
        }
      } else if (typeof obj === "object") {
        var objKeys = _objectKeys(obj);
        var objKeysLength = objKeys.length;
        for (var i = 0; i < objKeysLength; i++) {
          if (hasUndefined(obj[objKeys[i]])) {
            return true;
          }
        }
      }
    }
    return false;
  }
  function patchErrorMessageFormatter(message, args) {
    var messageParts = [message];
    for (var key2 in args) {
      var value2 = typeof args[key2] === "object" ? JSON.stringify(args[key2], null, 2) : args[key2];
      if (typeof value2 !== "undefined") {
        messageParts.push(key2 + ": " + value2);
      }
    }
    return messageParts.join("\n");
  }
  var PatchError = (
    /** @class */
    function(_super) {
      __extends(PatchError2, _super);
      function PatchError2(message, name, index2, operation, tree2) {
        var _newTarget = this.constructor;
        var _this = _super.call(this, patchErrorMessageFormatter(message, { name, index: index2, operation, tree: tree2 })) || this;
        _this.name = name;
        _this.index = index2;
        _this.operation = operation;
        _this.tree = tree2;
        Object.setPrototypeOf(_this, _newTarget.prototype);
        _this.message = patchErrorMessageFormatter(message, { name, index: index2, operation, tree: tree2 });
        return _this;
      }
      return PatchError2;
    }(Error)
  );
  var JsonPatchError = PatchError;
  var deepClone = _deepClone;
  var objOps = {
    add: function(obj, key2, document2) {
      obj[key2] = this.value;
      return { newDocument: document2 };
    },
    remove: function(obj, key2, document2) {
      var removed = obj[key2];
      delete obj[key2];
      return { newDocument: document2, removed };
    },
    replace: function(obj, key2, document2) {
      var removed = obj[key2];
      obj[key2] = this.value;
      return { newDocument: document2, removed };
    },
    move: function(obj, key2, document2) {
      var removed = getValueByPointer(document2, this.path);
      if (removed) {
        removed = _deepClone(removed);
      }
      var originalValue = applyOperation(document2, { op: "remove", path: this.from }).removed;
      applyOperation(document2, { op: "add", path: this.path, value: originalValue });
      return { newDocument: document2, removed };
    },
    copy: function(obj, key2, document2) {
      var valueToCopy = getValueByPointer(document2, this.from);
      applyOperation(document2, { op: "add", path: this.path, value: _deepClone(valueToCopy) });
      return { newDocument: document2 };
    },
    test: function(obj, key2, document2) {
      return { newDocument: document2, test: _areEquals(obj[key2], this.value) };
    },
    _get: function(obj, key2, document2) {
      this.value = obj[key2];
      return { newDocument: document2 };
    }
  };
  var arrOps = {
    add: function(arr, i, document2) {
      if (isInteger(i)) {
        arr.splice(i, 0, this.value);
      } else {
        arr[i] = this.value;
      }
      return { newDocument: document2, index: i };
    },
    remove: function(arr, i, document2) {
      var removedList = arr.splice(i, 1);
      return { newDocument: document2, removed: removedList[0] };
    },
    replace: function(arr, i, document2) {
      var removed = arr[i];
      arr[i] = this.value;
      return { newDocument: document2, removed };
    },
    move: objOps.move,
    copy: objOps.copy,
    test: objOps.test,
    _get: objOps._get
  };
  function getValueByPointer(document2, pointer) {
    if (pointer == "") {
      return document2;
    }
    var getOriginalDestination = { op: "_get", path: pointer };
    applyOperation(document2, getOriginalDestination);
    return getOriginalDestination.value;
  }
  function applyOperation(document2, operation, validateOperation, mutateDocument, banPrototypeModifications, index2) {
    if (validateOperation === void 0) {
      validateOperation = false;
    }
    if (mutateDocument === void 0) {
      mutateDocument = true;
    }
    if (banPrototypeModifications === void 0) {
      banPrototypeModifications = true;
    }
    if (index2 === void 0) {
      index2 = 0;
    }
    if (validateOperation) {
      if (typeof validateOperation == "function") {
        validateOperation(operation, 0, document2, operation.path);
      } else {
        validator(operation, 0);
      }
    }
    if (operation.path === "") {
      var returnValue = { newDocument: document2 };
      if (operation.op === "add") {
        returnValue.newDocument = operation.value;
        return returnValue;
      } else if (operation.op === "replace") {
        returnValue.newDocument = operation.value;
        returnValue.removed = document2;
        return returnValue;
      } else if (operation.op === "move" || operation.op === "copy") {
        returnValue.newDocument = getValueByPointer(document2, operation.from);
        if (operation.op === "move") {
          returnValue.removed = document2;
        }
        return returnValue;
      } else if (operation.op === "test") {
        returnValue.test = _areEquals(document2, operation.value);
        if (returnValue.test === false) {
          throw new JsonPatchError("Test operation failed", "TEST_OPERATION_FAILED", index2, operation, document2);
        }
        returnValue.newDocument = document2;
        return returnValue;
      } else if (operation.op === "remove") {
        returnValue.removed = document2;
        returnValue.newDocument = null;
        return returnValue;
      } else if (operation.op === "_get") {
        operation.value = document2;
        return returnValue;
      } else {
        if (validateOperation) {
          throw new JsonPatchError("Operation `op` property is not one of operations defined in RFC-6902", "OPERATION_OP_INVALID", index2, operation, document2);
        } else {
          return returnValue;
        }
      }
    } else {
      if (!mutateDocument) {
        document2 = _deepClone(document2);
      }
      var path2 = operation.path || "";
      var keys2 = path2.split("/");
      var obj = document2;
      var t = 1;
      var len = keys2.length;
      var existingPathFragment = void 0;
      var key2 = void 0;
      var validateFunction = void 0;
      if (typeof validateOperation == "function") {
        validateFunction = validateOperation;
      } else {
        validateFunction = validator;
      }
      while (true) {
        key2 = keys2[t];
        if (key2 && key2.indexOf("~") != -1) {
          key2 = unescapePathComponent(key2);
        }
        if (banPrototypeModifications && (key2 == "__proto__" || key2 == "prototype" && t > 0 && keys2[t - 1] == "constructor")) {
          throw new TypeError("JSON-Patch: modifying `__proto__` or `constructor/prototype` prop is banned for security reasons, if this was on purpose, please set `banPrototypeModifications` flag false and pass it to this function. More info in fast-json-patch README");
        }
        if (validateOperation) {
          if (existingPathFragment === void 0) {
            if (obj[key2] === void 0) {
              existingPathFragment = keys2.slice(0, t).join("/");
            } else if (t == len - 1) {
              existingPathFragment = operation.path;
            }
            if (existingPathFragment !== void 0) {
              validateFunction(operation, 0, document2, existingPathFragment);
            }
          }
        }
        t++;
        if (Array.isArray(obj)) {
          if (key2 === "-") {
            key2 = obj.length;
          } else {
            if (validateOperation && !isInteger(key2)) {
              throw new JsonPatchError("Expected an unsigned base-10 integer value, making the new referenced value the array element with the zero-based index", "OPERATION_PATH_ILLEGAL_ARRAY_INDEX", index2, operation, document2);
            } else if (isInteger(key2)) {
              key2 = ~~key2;
            }
          }
          if (t >= len) {
            if (validateOperation && operation.op === "add" && key2 > obj.length) {
              throw new JsonPatchError("The specified index MUST NOT be greater than the number of elements in the array", "OPERATION_VALUE_OUT_OF_BOUNDS", index2, operation, document2);
            }
            var returnValue = arrOps[operation.op].call(operation, obj, key2, document2);
            if (returnValue.test === false) {
              throw new JsonPatchError("Test operation failed", "TEST_OPERATION_FAILED", index2, operation, document2);
            }
            return returnValue;
          }
        } else {
          if (t >= len) {
            var returnValue = objOps[operation.op].call(operation, obj, key2, document2);
            if (returnValue.test === false) {
              throw new JsonPatchError("Test operation failed", "TEST_OPERATION_FAILED", index2, operation, document2);
            }
            return returnValue;
          }
        }
        obj = obj[key2];
        if (validateOperation && t < len && (!obj || typeof obj !== "object")) {
          throw new JsonPatchError("Cannot perform operation at the desired path", "OPERATION_PATH_UNRESOLVABLE", index2, operation, document2);
        }
      }
    }
  }
  function applyPatch(document2, patch2, validateOperation, mutateDocument, banPrototypeModifications) {
    if (mutateDocument === void 0) {
      mutateDocument = true;
    }
    if (banPrototypeModifications === void 0) {
      banPrototypeModifications = true;
    }
    if (validateOperation) {
      if (!Array.isArray(patch2)) {
        throw new JsonPatchError("Patch sequence must be an array", "SEQUENCE_NOT_AN_ARRAY");
      }
    }
    if (!mutateDocument) {
      document2 = _deepClone(document2);
    }
    var results = new Array(patch2.length);
    for (var i = 0, length_1 = patch2.length; i < length_1; i++) {
      results[i] = applyOperation(document2, patch2[i], validateOperation, true, banPrototypeModifications, i);
      document2 = results[i].newDocument;
    }
    results.newDocument = document2;
    return results;
  }
  function applyReducer(document2, operation, index2) {
    var operationResult = applyOperation(document2, operation);
    if (operationResult.test === false) {
      throw new JsonPatchError("Test operation failed", "TEST_OPERATION_FAILED", index2, operation, document2);
    }
    return operationResult.newDocument;
  }
  function validator(operation, index2, document2, existingPathFragment) {
    if (typeof operation !== "object" || operation === null || Array.isArray(operation)) {
      throw new JsonPatchError("Operation is not an object", "OPERATION_NOT_AN_OBJECT", index2, operation, document2);
    } else if (!objOps[operation.op]) {
      throw new JsonPatchError("Operation `op` property is not one of operations defined in RFC-6902", "OPERATION_OP_INVALID", index2, operation, document2);
    } else if (typeof operation.path !== "string") {
      throw new JsonPatchError("Operation `path` property is not a string", "OPERATION_PATH_INVALID", index2, operation, document2);
    } else if (operation.path.indexOf("/") !== 0 && operation.path.length > 0) {
      throw new JsonPatchError('Operation `path` property must start with "/"', "OPERATION_PATH_INVALID", index2, operation, document2);
    } else if ((operation.op === "move" || operation.op === "copy") && typeof operation.from !== "string") {
      throw new JsonPatchError("Operation `from` property is not present (applicable in `move` and `copy` operations)", "OPERATION_FROM_REQUIRED", index2, operation, document2);
    } else if ((operation.op === "add" || operation.op === "replace" || operation.op === "test") && operation.value === void 0) {
      throw new JsonPatchError("Operation `value` property is not present (applicable in `add`, `replace` and `test` operations)", "OPERATION_VALUE_REQUIRED", index2, operation, document2);
    } else if ((operation.op === "add" || operation.op === "replace" || operation.op === "test") && hasUndefined(operation.value)) {
      throw new JsonPatchError("Operation `value` property is not present (applicable in `add`, `replace` and `test` operations)", "OPERATION_VALUE_CANNOT_CONTAIN_UNDEFINED", index2, operation, document2);
    } else if (document2) {
      if (operation.op == "add") {
        var pathLen = operation.path.split("/").length;
        var existingPathLen = existingPathFragment.split("/").length;
        if (pathLen !== existingPathLen + 1 && pathLen !== existingPathLen) {
          throw new JsonPatchError("Cannot perform an `add` operation at the desired path", "OPERATION_PATH_CANNOT_ADD", index2, operation, document2);
        }
      } else if (operation.op === "replace" || operation.op === "remove" || operation.op === "_get") {
        if (operation.path !== existingPathFragment) {
          throw new JsonPatchError("Cannot perform the operation at a path that does not exist", "OPERATION_PATH_UNRESOLVABLE", index2, operation, document2);
        }
      } else if (operation.op === "move" || operation.op === "copy") {
        var existingValue = { op: "_get", path: operation.from, value: void 0 };
        var error2 = validate([existingValue], document2);
        if (error2 && error2.name === "OPERATION_PATH_UNRESOLVABLE") {
          throw new JsonPatchError("Cannot perform the operation from a path that does not exist", "OPERATION_FROM_UNRESOLVABLE", index2, operation, document2);
        }
      }
    }
  }
  function validate(sequence2, document2, externalValidator) {
    try {
      if (!Array.isArray(sequence2)) {
        throw new JsonPatchError("Patch sequence must be an array", "SEQUENCE_NOT_AN_ARRAY");
      }
      if (document2) {
        applyPatch(_deepClone(document2), _deepClone(sequence2), externalValidator || true);
      } else {
        externalValidator = externalValidator || validator;
        for (var i = 0; i < sequence2.length; i++) {
          externalValidator(sequence2[i], i, document2, void 0);
        }
      }
    } catch (e3) {
      if (e3 instanceof JsonPatchError) {
        return e3;
      } else {
        throw e3;
      }
    }
  }
  function _areEquals(a2, b2) {
    if (a2 === b2)
      return true;
    if (a2 && b2 && typeof a2 == "object" && typeof b2 == "object") {
      var arrA = Array.isArray(a2), arrB = Array.isArray(b2), i, length2, key2;
      if (arrA && arrB) {
        length2 = a2.length;
        if (length2 != b2.length)
          return false;
        for (i = length2; i-- !== 0; )
          if (!_areEquals(a2[i], b2[i]))
            return false;
        return true;
      }
      if (arrA != arrB)
        return false;
      var keys2 = Object.keys(a2);
      length2 = keys2.length;
      if (length2 !== Object.keys(b2).length)
        return false;
      for (i = length2; i-- !== 0; )
        if (!b2.hasOwnProperty(keys2[i]))
          return false;
      for (i = length2; i-- !== 0; ) {
        key2 = keys2[i];
        if (!_areEquals(a2[key2], b2[key2]))
          return false;
      }
      return true;
    }
    return a2 !== a2 && b2 !== b2;
  }
  var core = /* @__PURE__ */ Object.freeze({
    __proto__: null,
    JsonPatchError,
    _areEquals,
    applyOperation,
    applyPatch,
    applyReducer,
    deepClone,
    getValueByPointer,
    validate,
    validator
  });
  /*!
   * https://github.com/Starcounter-Jack/JSON-Patch
   * (c) 2017-2021 Joachim Wester
   * MIT license
   */
  var beforeDict = /* @__PURE__ */ new WeakMap();
  var Mirror = (
    /** @class */
    /* @__PURE__ */ function() {
      function Mirror2(obj) {
        this.observers = /* @__PURE__ */ new Map();
        this.obj = obj;
      }
      return Mirror2;
    }()
  );
  var ObserverInfo = (
    /** @class */
    /* @__PURE__ */ function() {
      function ObserverInfo2(callback, observer) {
        this.callback = callback;
        this.observer = observer;
      }
      return ObserverInfo2;
    }()
  );
  function getMirror(obj) {
    return beforeDict.get(obj);
  }
  function getObserverFromMirror(mirror, callback) {
    return mirror.observers.get(callback);
  }
  function removeObserverFromMirror(mirror, observer) {
    mirror.observers.delete(observer.callback);
  }
  function unobserve(root, observer) {
    observer.unobserve();
  }
  function observe(obj, callback) {
    var patches = [];
    var observer;
    var mirror = getMirror(obj);
    if (!mirror) {
      mirror = new Mirror(obj);
      beforeDict.set(obj, mirror);
    } else {
      var observerInfo = getObserverFromMirror(mirror, callback);
      observer = observerInfo && observerInfo.observer;
    }
    if (observer) {
      return observer;
    }
    observer = {};
    mirror.value = _deepClone(obj);
    if (callback) {
      observer.callback = callback;
      observer.next = null;
      var dirtyCheck = function() {
        generate(observer);
      };
      var fastCheck = function() {
        clearTimeout(observer.next);
        observer.next = setTimeout(dirtyCheck);
      };
      if (typeof window !== "undefined") {
        window.addEventListener("mouseup", fastCheck);
        window.addEventListener("keyup", fastCheck);
        window.addEventListener("mousedown", fastCheck);
        window.addEventListener("keydown", fastCheck);
        window.addEventListener("change", fastCheck);
      }
    }
    observer.patches = patches;
    observer.object = obj;
    observer.unobserve = function() {
      generate(observer);
      clearTimeout(observer.next);
      removeObserverFromMirror(mirror, observer);
      if (typeof window !== "undefined") {
        window.removeEventListener("mouseup", fastCheck);
        window.removeEventListener("keyup", fastCheck);
        window.removeEventListener("mousedown", fastCheck);
        window.removeEventListener("keydown", fastCheck);
        window.removeEventListener("change", fastCheck);
      }
    };
    mirror.observers.set(callback, new ObserverInfo(callback, observer));
    return observer;
  }
  function generate(observer, invertible) {
    if (invertible === void 0) {
      invertible = false;
    }
    var mirror = beforeDict.get(observer.object);
    _generate(mirror.value, observer.object, observer.patches, "", invertible);
    if (observer.patches.length) {
      applyPatch(mirror.value, observer.patches);
    }
    var temp2 = observer.patches;
    if (temp2.length > 0) {
      observer.patches = [];
      if (observer.callback) {
        observer.callback(temp2);
      }
    }
    return temp2;
  }
  function _generate(mirror, obj, patches, path2, invertible) {
    if (obj === mirror) {
      return;
    }
    if (typeof obj.toJSON === "function") {
      obj = obj.toJSON();
    }
    var newKeys = _objectKeys(obj);
    var oldKeys = _objectKeys(mirror);
    var deleted = false;
    for (var t = oldKeys.length - 1; t >= 0; t--) {
      var key2 = oldKeys[t];
      var oldVal = mirror[key2];
      if (hasOwnProperty(obj, key2) && !(obj[key2] === void 0 && oldVal !== void 0 && Array.isArray(obj) === false)) {
        var newVal = obj[key2];
        if (typeof oldVal == "object" && oldVal != null && typeof newVal == "object" && newVal != null && Array.isArray(oldVal) === Array.isArray(newVal)) {
          _generate(oldVal, newVal, patches, path2 + "/" + escapePathComponent(key2), invertible);
        } else {
          if (oldVal !== newVal) {
            if (invertible) {
              patches.push({ op: "test", path: path2 + "/" + escapePathComponent(key2), value: _deepClone(oldVal) });
            }
            patches.push({ op: "replace", path: path2 + "/" + escapePathComponent(key2), value: _deepClone(newVal) });
          }
        }
      } else if (Array.isArray(mirror) === Array.isArray(obj)) {
        if (invertible) {
          patches.push({ op: "test", path: path2 + "/" + escapePathComponent(key2), value: _deepClone(oldVal) });
        }
        patches.push({ op: "remove", path: path2 + "/" + escapePathComponent(key2) });
        deleted = true;
      } else {
        if (invertible) {
          patches.push({ op: "test", path: path2, value: mirror });
        }
        patches.push({ op: "replace", path: path2, value: obj });
      }
    }
    if (!deleted && newKeys.length == oldKeys.length) {
      return;
    }
    for (var t = 0; t < newKeys.length; t++) {
      var key2 = newKeys[t];
      if (!hasOwnProperty(mirror, key2) && obj[key2] !== void 0) {
        patches.push({ op: "add", path: path2 + "/" + escapePathComponent(key2), value: _deepClone(obj[key2]) });
      }
    }
  }
  function compare(tree1, tree2, invertible) {
    if (invertible === void 0) {
      invertible = false;
    }
    var patches = [];
    _generate(tree1, tree2, patches, "", invertible);
    return patches;
  }
  var duplex = /* @__PURE__ */ Object.freeze({
    __proto__: null,
    compare,
    generate,
    observe,
    unobserve
  });
  Object.assign({}, core, duplex, {
    JsonPatchError: PatchError,
    deepClone: _deepClone,
    escapePathComponent,
    unescapePathComponent
  });
  function getDefaultExportFromCjs$1(x2) {
    return x2 && x2.__esModule && Object.prototype.hasOwnProperty.call(x2, "default") ? x2["default"] : x2;
  }
  var lrucache;
  var hasRequiredLrucache;
  function requireLrucache() {
    if (hasRequiredLrucache) return lrucache;
    hasRequiredLrucache = 1;
    class LRUCache {
      constructor() {
        this.max = 1e3;
        this.map = /* @__PURE__ */ new Map();
      }
      get(key2) {
        const value2 = this.map.get(key2);
        if (value2 === void 0) {
          return void 0;
        } else {
          this.map.delete(key2);
          this.map.set(key2, value2);
          return value2;
        }
      }
      delete(key2) {
        return this.map.delete(key2);
      }
      set(key2, value2) {
        const deleted = this.delete(key2);
        if (!deleted && value2 !== void 0) {
          if (this.map.size >= this.max) {
            const firstKey = this.map.keys().next().value;
            this.delete(firstKey);
          }
          this.map.set(key2, value2);
        }
        return this;
      }
    }
    lrucache = LRUCache;
    return lrucache;
  }
  var parseOptions_1;
  var hasRequiredParseOptions;
  function requireParseOptions() {
    if (hasRequiredParseOptions) return parseOptions_1;
    hasRequiredParseOptions = 1;
    const looseOption = Object.freeze({ loose: true });
    const emptyOpts = Object.freeze({});
    const parseOptions = (options) => {
      if (!options) {
        return emptyOpts;
      }
      if (typeof options !== "object") {
        return looseOption;
      }
      return options;
    };
    parseOptions_1 = parseOptions;
    return parseOptions_1;
  }
  var re = { exports: {} };
  var constants;
  var hasRequiredConstants;
  function requireConstants() {
    if (hasRequiredConstants) return constants;
    hasRequiredConstants = 1;
    const SEMVER_SPEC_VERSION = "2.0.0";
    const MAX_LENGTH = 256;
    const MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || /* istanbul ignore next */
    9007199254740991;
    const MAX_SAFE_COMPONENT_LENGTH = 16;
    const MAX_SAFE_BUILD_LENGTH = MAX_LENGTH - 6;
    const RELEASE_TYPES = [
      "major",
      "premajor",
      "minor",
      "preminor",
      "patch",
      "prepatch",
      "prerelease"
    ];
    constants = {
      MAX_LENGTH,
      MAX_SAFE_COMPONENT_LENGTH,
      MAX_SAFE_BUILD_LENGTH,
      MAX_SAFE_INTEGER,
      RELEASE_TYPES,
      SEMVER_SPEC_VERSION,
      FLAG_INCLUDE_PRERELEASE: 1,
      FLAG_LOOSE: 2
    };
    return constants;
  }
  var debug_1;
  var hasRequiredDebug;
  function requireDebug() {
    if (hasRequiredDebug) return debug_1;
    hasRequiredDebug = 1;
    const debug2 = typeof process === "object" && process.env && process.env.NODE_DEBUG && /\bsemver\b/i.test(process.env.NODE_DEBUG) ? (...args) => console.error("SEMVER", ...args) : () => {
    };
    debug_1 = debug2;
    return debug_1;
  }
  var hasRequiredRe;
  function requireRe() {
    if (hasRequiredRe) return re.exports;
    hasRequiredRe = 1;
    (function(module2, exports2) {
      const {
        MAX_SAFE_COMPONENT_LENGTH,
        MAX_SAFE_BUILD_LENGTH,
        MAX_LENGTH
      } = requireConstants();
      const debug2 = requireDebug();
      exports2 = module2.exports = {};
      const re2 = exports2.re = [];
      const safeRe = exports2.safeRe = [];
      const src = exports2.src = [];
      const t = exports2.t = {};
      let R = 0;
      const LETTERDASHNUMBER = "[a-zA-Z0-9-]";
      const safeRegexReplacements = [
        ["\\s", 1],
        ["\\d", MAX_LENGTH],
        [LETTERDASHNUMBER, MAX_SAFE_BUILD_LENGTH]
      ];
      const makeSafeRegex = (value2) => {
        for (const [token, max2] of safeRegexReplacements) {
          value2 = value2.split(`${token}*`).join(`${token}{0,${max2}}`).split(`${token}+`).join(`${token}{1,${max2}}`);
        }
        return value2;
      };
      const createToken = (name, value2, isGlobal) => {
        const safe = makeSafeRegex(value2);
        const index2 = R++;
        debug2(name, index2, value2);
        t[name] = index2;
        src[index2] = value2;
        re2[index2] = new RegExp(value2, isGlobal ? "g" : void 0);
        safeRe[index2] = new RegExp(safe, isGlobal ? "g" : void 0);
      };
      createToken("NUMERICIDENTIFIER", "0|[1-9]\\d*");
      createToken("NUMERICIDENTIFIERLOOSE", "\\d+");
      createToken("NONNUMERICIDENTIFIER", `\\d*[a-zA-Z-]${LETTERDASHNUMBER}*`);
      createToken("MAINVERSION", `(${src[t.NUMERICIDENTIFIER]})\\.(${src[t.NUMERICIDENTIFIER]})\\.(${src[t.NUMERICIDENTIFIER]})`);
      createToken("MAINVERSIONLOOSE", `(${src[t.NUMERICIDENTIFIERLOOSE]})\\.(${src[t.NUMERICIDENTIFIERLOOSE]})\\.(${src[t.NUMERICIDENTIFIERLOOSE]})`);
      createToken("PRERELEASEIDENTIFIER", `(?:${src[t.NUMERICIDENTIFIER]}|${src[t.NONNUMERICIDENTIFIER]})`);
      createToken("PRERELEASEIDENTIFIERLOOSE", `(?:${src[t.NUMERICIDENTIFIERLOOSE]}|${src[t.NONNUMERICIDENTIFIER]})`);
      createToken("PRERELEASE", `(?:-(${src[t.PRERELEASEIDENTIFIER]}(?:\\.${src[t.PRERELEASEIDENTIFIER]})*))`);
      createToken("PRERELEASELOOSE", `(?:-?(${src[t.PRERELEASEIDENTIFIERLOOSE]}(?:\\.${src[t.PRERELEASEIDENTIFIERLOOSE]})*))`);
      createToken("BUILDIDENTIFIER", `${LETTERDASHNUMBER}+`);
      createToken("BUILD", `(?:\\+(${src[t.BUILDIDENTIFIER]}(?:\\.${src[t.BUILDIDENTIFIER]})*))`);
      createToken("FULLPLAIN", `v?${src[t.MAINVERSION]}${src[t.PRERELEASE]}?${src[t.BUILD]}?`);
      createToken("FULL", `^${src[t.FULLPLAIN]}$`);
      createToken("LOOSEPLAIN", `[v=\\s]*${src[t.MAINVERSIONLOOSE]}${src[t.PRERELEASELOOSE]}?${src[t.BUILD]}?`);
      createToken("LOOSE", `^${src[t.LOOSEPLAIN]}$`);
      createToken("GTLT", "((?:<|>)?=?)");
      createToken("XRANGEIDENTIFIERLOOSE", `${src[t.NUMERICIDENTIFIERLOOSE]}|x|X|\\*`);
      createToken("XRANGEIDENTIFIER", `${src[t.NUMERICIDENTIFIER]}|x|X|\\*`);
      createToken("XRANGEPLAIN", `[v=\\s]*(${src[t.XRANGEIDENTIFIER]})(?:\\.(${src[t.XRANGEIDENTIFIER]})(?:\\.(${src[t.XRANGEIDENTIFIER]})(?:${src[t.PRERELEASE]})?${src[t.BUILD]}?)?)?`);
      createToken("XRANGEPLAINLOOSE", `[v=\\s]*(${src[t.XRANGEIDENTIFIERLOOSE]})(?:\\.(${src[t.XRANGEIDENTIFIERLOOSE]})(?:\\.(${src[t.XRANGEIDENTIFIERLOOSE]})(?:${src[t.PRERELEASELOOSE]})?${src[t.BUILD]}?)?)?`);
      createToken("XRANGE", `^${src[t.GTLT]}\\s*${src[t.XRANGEPLAIN]}$`);
      createToken("XRANGELOOSE", `^${src[t.GTLT]}\\s*${src[t.XRANGEPLAINLOOSE]}$`);
      createToken("COERCEPLAIN", `${"(^|[^\\d])(\\d{1,"}${MAX_SAFE_COMPONENT_LENGTH}})(?:\\.(\\d{1,${MAX_SAFE_COMPONENT_LENGTH}}))?(?:\\.(\\d{1,${MAX_SAFE_COMPONENT_LENGTH}}))?`);
      createToken("COERCE", `${src[t.COERCEPLAIN]}(?:$|[^\\d])`);
      createToken("COERCEFULL", src[t.COERCEPLAIN] + `(?:${src[t.PRERELEASE]})?(?:${src[t.BUILD]})?(?:$|[^\\d])`);
      createToken("COERCERTL", src[t.COERCE], true);
      createToken("COERCERTLFULL", src[t.COERCEFULL], true);
      createToken("LONETILDE", "(?:~>?)");
      createToken("TILDETRIM", `(\\s*)${src[t.LONETILDE]}\\s+`, true);
      exports2.tildeTrimReplace = "$1~";
      createToken("TILDE", `^${src[t.LONETILDE]}${src[t.XRANGEPLAIN]}$`);
      createToken("TILDELOOSE", `^${src[t.LONETILDE]}${src[t.XRANGEPLAINLOOSE]}$`);
      createToken("LONECARET", "(?:\\^)");
      createToken("CARETTRIM", `(\\s*)${src[t.LONECARET]}\\s+`, true);
      exports2.caretTrimReplace = "$1^";
      createToken("CARET", `^${src[t.LONECARET]}${src[t.XRANGEPLAIN]}$`);
      createToken("CARETLOOSE", `^${src[t.LONECARET]}${src[t.XRANGEPLAINLOOSE]}$`);
      createToken("COMPARATORLOOSE", `^${src[t.GTLT]}\\s*(${src[t.LOOSEPLAIN]})$|^$`);
      createToken("COMPARATOR", `^${src[t.GTLT]}\\s*(${src[t.FULLPLAIN]})$|^$`);
      createToken("COMPARATORTRIM", `(\\s*)${src[t.GTLT]}\\s*(${src[t.LOOSEPLAIN]}|${src[t.XRANGEPLAIN]})`, true);
      exports2.comparatorTrimReplace = "$1$2$3";
      createToken("HYPHENRANGE", `^\\s*(${src[t.XRANGEPLAIN]})\\s+-\\s+(${src[t.XRANGEPLAIN]})\\s*$`);
      createToken("HYPHENRANGELOOSE", `^\\s*(${src[t.XRANGEPLAINLOOSE]})\\s+-\\s+(${src[t.XRANGEPLAINLOOSE]})\\s*$`);
      createToken("STAR", "(<|>)?=?\\s*\\*");
      createToken("GTE0", "^\\s*>=\\s*0\\.0\\.0\\s*$");
      createToken("GTE0PRE", "^\\s*>=\\s*0\\.0\\.0-0\\s*$");
    })(re, re.exports);
    return re.exports;
  }
  var identifiers;
  var hasRequiredIdentifiers;
  function requireIdentifiers() {
    if (hasRequiredIdentifiers) return identifiers;
    hasRequiredIdentifiers = 1;
    const numeric = /^[0-9]+$/;
    const compareIdentifiers = (a2, b2) => {
      const anum = numeric.test(a2);
      const bnum = numeric.test(b2);
      if (anum && bnum) {
        a2 = +a2;
        b2 = +b2;
      }
      return a2 === b2 ? 0 : anum && !bnum ? -1 : bnum && !anum ? 1 : a2 < b2 ? -1 : 1;
    };
    const rcompareIdentifiers = (a2, b2) => compareIdentifiers(b2, a2);
    identifiers = {
      compareIdentifiers,
      rcompareIdentifiers
    };
    return identifiers;
  }
  var semver;
  var hasRequiredSemver;
  function requireSemver() {
    if (hasRequiredSemver) return semver;
    hasRequiredSemver = 1;
    const debug2 = requireDebug();
    const { MAX_LENGTH, MAX_SAFE_INTEGER } = requireConstants();
    const { safeRe: re2, t } = requireRe();
    const parseOptions = requireParseOptions();
    const { compareIdentifiers } = requireIdentifiers();
    class SemVer {
      constructor(version2, options) {
        options = parseOptions(options);
        if (version2 instanceof SemVer) {
          if (version2.loose === !!options.loose && version2.includePrerelease === !!options.includePrerelease) {
            return version2;
          } else {
            version2 = version2.version;
          }
        } else if (typeof version2 !== "string") {
          throw new TypeError(`Invalid version. Must be a string. Got type "${typeof version2}".`);
        }
        if (version2.length > MAX_LENGTH) {
          throw new TypeError(
            `version is longer than ${MAX_LENGTH} characters`
          );
        }
        debug2("SemVer", version2, options);
        this.options = options;
        this.loose = !!options.loose;
        this.includePrerelease = !!options.includePrerelease;
        const m2 = version2.trim().match(options.loose ? re2[t.LOOSE] : re2[t.FULL]);
        if (!m2) {
          throw new TypeError(`Invalid Version: ${version2}`);
        }
        this.raw = version2;
        this.major = +m2[1];
        this.minor = +m2[2];
        this.patch = +m2[3];
        if (this.major > MAX_SAFE_INTEGER || this.major < 0) {
          throw new TypeError("Invalid major version");
        }
        if (this.minor > MAX_SAFE_INTEGER || this.minor < 0) {
          throw new TypeError("Invalid minor version");
        }
        if (this.patch > MAX_SAFE_INTEGER || this.patch < 0) {
          throw new TypeError("Invalid patch version");
        }
        if (!m2[4]) {
          this.prerelease = [];
        } else {
          this.prerelease = m2[4].split(".").map((id2) => {
            if (/^[0-9]+$/.test(id2)) {
              const num = +id2;
              if (num >= 0 && num < MAX_SAFE_INTEGER) {
                return num;
              }
            }
            return id2;
          });
        }
        this.build = m2[5] ? m2[5].split(".") : [];
        this.format();
      }
      format() {
        this.version = `${this.major}.${this.minor}.${this.patch}`;
        if (this.prerelease.length) {
          this.version += `-${this.prerelease.join(".")}`;
        }
        return this.version;
      }
      toString() {
        return this.version;
      }
      compare(other) {
        debug2("SemVer.compare", this.version, this.options, other);
        if (!(other instanceof SemVer)) {
          if (typeof other === "string" && other === this.version) {
            return 0;
          }
          other = new SemVer(other, this.options);
        }
        if (other.version === this.version) {
          return 0;
        }
        return this.compareMain(other) || this.comparePre(other);
      }
      compareMain(other) {
        if (!(other instanceof SemVer)) {
          other = new SemVer(other, this.options);
        }
        return compareIdentifiers(this.major, other.major) || compareIdentifiers(this.minor, other.minor) || compareIdentifiers(this.patch, other.patch);
      }
      comparePre(other) {
        if (!(other instanceof SemVer)) {
          other = new SemVer(other, this.options);
        }
        if (this.prerelease.length && !other.prerelease.length) {
          return -1;
        } else if (!this.prerelease.length && other.prerelease.length) {
          return 1;
        } else if (!this.prerelease.length && !other.prerelease.length) {
          return 0;
        }
        let i = 0;
        do {
          const a2 = this.prerelease[i];
          const b2 = other.prerelease[i];
          debug2("prerelease compare", i, a2, b2);
          if (a2 === void 0 && b2 === void 0) {
            return 0;
          } else if (b2 === void 0) {
            return 1;
          } else if (a2 === void 0) {
            return -1;
          } else if (a2 === b2) {
            continue;
          } else {
            return compareIdentifiers(a2, b2);
          }
        } while (++i);
      }
      compareBuild(other) {
        if (!(other instanceof SemVer)) {
          other = new SemVer(other, this.options);
        }
        let i = 0;
        do {
          const a2 = this.build[i];
          const b2 = other.build[i];
          debug2("build compare", i, a2, b2);
          if (a2 === void 0 && b2 === void 0) {
            return 0;
          } else if (b2 === void 0) {
            return 1;
          } else if (a2 === void 0) {
            return -1;
          } else if (a2 === b2) {
            continue;
          } else {
            return compareIdentifiers(a2, b2);
          }
        } while (++i);
      }
      // preminor will bump the version up to the next minor release, and immediately
      // down to pre-release. premajor and prepatch work the same way.
      inc(release, identifier, identifierBase) {
        switch (release) {
          case "premajor":
            this.prerelease.length = 0;
            this.patch = 0;
            this.minor = 0;
            this.major++;
            this.inc("pre", identifier, identifierBase);
            break;
          case "preminor":
            this.prerelease.length = 0;
            this.patch = 0;
            this.minor++;
            this.inc("pre", identifier, identifierBase);
            break;
          case "prepatch":
            this.prerelease.length = 0;
            this.inc("patch", identifier, identifierBase);
            this.inc("pre", identifier, identifierBase);
            break;
          case "prerelease":
            if (this.prerelease.length === 0) {
              this.inc("patch", identifier, identifierBase);
            }
            this.inc("pre", identifier, identifierBase);
            break;
          case "major":
            if (this.minor !== 0 || this.patch !== 0 || this.prerelease.length === 0) {
              this.major++;
            }
            this.minor = 0;
            this.patch = 0;
            this.prerelease = [];
            break;
          case "minor":
            if (this.patch !== 0 || this.prerelease.length === 0) {
              this.minor++;
            }
            this.patch = 0;
            this.prerelease = [];
            break;
          case "patch":
            if (this.prerelease.length === 0) {
              this.patch++;
            }
            this.prerelease = [];
            break;
          case "pre": {
            const base = Number(identifierBase) ? 1 : 0;
            if (!identifier && identifierBase === false) {
              throw new Error("invalid increment argument: identifier is empty");
            }
            if (this.prerelease.length === 0) {
              this.prerelease = [base];
            } else {
              let i = this.prerelease.length;
              while (--i >= 0) {
                if (typeof this.prerelease[i] === "number") {
                  this.prerelease[i]++;
                  i = -2;
                }
              }
              if (i === -1) {
                if (identifier === this.prerelease.join(".") && identifierBase === false) {
                  throw new Error("invalid increment argument: identifier already exists");
                }
                this.prerelease.push(base);
              }
            }
            if (identifier) {
              let prerelease = [identifier, base];
              if (identifierBase === false) {
                prerelease = [identifier];
              }
              if (compareIdentifiers(this.prerelease[0], identifier) === 0) {
                if (isNaN(this.prerelease[1])) {
                  this.prerelease = prerelease;
                }
              } else {
                this.prerelease = prerelease;
              }
            }
            break;
          }
          default:
            throw new Error(`invalid increment argument: ${release}`);
        }
        this.raw = this.format();
        if (this.build.length) {
          this.raw += `+${this.build.join(".")}`;
        }
        return this;
      }
    }
    semver = SemVer;
    return semver;
  }
  var compare_1;
  var hasRequiredCompare;
  function requireCompare() {
    if (hasRequiredCompare) return compare_1;
    hasRequiredCompare = 1;
    const SemVer = requireSemver();
    const compare2 = (a2, b2, loose) => new SemVer(a2, loose).compare(new SemVer(b2, loose));
    compare_1 = compare2;
    return compare_1;
  }
  var eq_1;
  var hasRequiredEq;
  function requireEq() {
    if (hasRequiredEq) return eq_1;
    hasRequiredEq = 1;
    const compare2 = requireCompare();
    const eq = (a2, b2, loose) => compare2(a2, b2, loose) === 0;
    eq_1 = eq;
    return eq_1;
  }
  var neq_1;
  var hasRequiredNeq;
  function requireNeq() {
    if (hasRequiredNeq) return neq_1;
    hasRequiredNeq = 1;
    const compare2 = requireCompare();
    const neq = (a2, b2, loose) => compare2(a2, b2, loose) !== 0;
    neq_1 = neq;
    return neq_1;
  }
  var gt_1;
  var hasRequiredGt;
  function requireGt() {
    if (hasRequiredGt) return gt_1;
    hasRequiredGt = 1;
    const compare2 = requireCompare();
    const gt = (a2, b2, loose) => compare2(a2, b2, loose) > 0;
    gt_1 = gt;
    return gt_1;
  }
  var gte_1;
  var hasRequiredGte;
  function requireGte() {
    if (hasRequiredGte) return gte_1;
    hasRequiredGte = 1;
    const compare2 = requireCompare();
    const gte = (a2, b2, loose) => compare2(a2, b2, loose) >= 0;
    gte_1 = gte;
    return gte_1;
  }
  var lt_1;
  var hasRequiredLt;
  function requireLt() {
    if (hasRequiredLt) return lt_1;
    hasRequiredLt = 1;
    const compare2 = requireCompare();
    const lt = (a2, b2, loose) => compare2(a2, b2, loose) < 0;
    lt_1 = lt;
    return lt_1;
  }
  var lte_1;
  var hasRequiredLte;
  function requireLte() {
    if (hasRequiredLte) return lte_1;
    hasRequiredLte = 1;
    const compare2 = requireCompare();
    const lte = (a2, b2, loose) => compare2(a2, b2, loose) <= 0;
    lte_1 = lte;
    return lte_1;
  }
  var cmp_1;
  var hasRequiredCmp;
  function requireCmp() {
    if (hasRequiredCmp) return cmp_1;
    hasRequiredCmp = 1;
    const eq = requireEq();
    const neq = requireNeq();
    const gt = requireGt();
    const gte = requireGte();
    const lt = requireLt();
    const lte = requireLte();
    const cmp = (a2, op, b2, loose) => {
      switch (op) {
        case "===":
          if (typeof a2 === "object") {
            a2 = a2.version;
          }
          if (typeof b2 === "object") {
            b2 = b2.version;
          }
          return a2 === b2;
        case "!==":
          if (typeof a2 === "object") {
            a2 = a2.version;
          }
          if (typeof b2 === "object") {
            b2 = b2.version;
          }
          return a2 !== b2;
        case "":
        case "=":
        case "==":
          return eq(a2, b2, loose);
        case "!=":
          return neq(a2, b2, loose);
        case ">":
          return gt(a2, b2, loose);
        case ">=":
          return gte(a2, b2, loose);
        case "<":
          return lt(a2, b2, loose);
        case "<=":
          return lte(a2, b2, loose);
        default:
          throw new TypeError(`Invalid operator: ${op}`);
      }
    };
    cmp_1 = cmp;
    return cmp_1;
  }
  var comparator;
  var hasRequiredComparator;
  function requireComparator() {
    if (hasRequiredComparator) return comparator;
    hasRequiredComparator = 1;
    const ANY = Symbol("SemVer ANY");
    class Comparator {
      static get ANY() {
        return ANY;
      }
      constructor(comp, options) {
        options = parseOptions(options);
        if (comp instanceof Comparator) {
          if (comp.loose === !!options.loose) {
            return comp;
          } else {
            comp = comp.value;
          }
        }
        comp = comp.trim().split(/\s+/).join(" ");
        debug2("comparator", comp, options);
        this.options = options;
        this.loose = !!options.loose;
        this.parse(comp);
        if (this.semver === ANY) {
          this.value = "";
        } else {
          this.value = this.operator + this.semver.version;
        }
        debug2("comp", this);
      }
      parse(comp) {
        const r = this.options.loose ? re2[t.COMPARATORLOOSE] : re2[t.COMPARATOR];
        const m2 = comp.match(r);
        if (!m2) {
          throw new TypeError(`Invalid comparator: ${comp}`);
        }
        this.operator = m2[1] !== void 0 ? m2[1] : "";
        if (this.operator === "=") {
          this.operator = "";
        }
        if (!m2[2]) {
          this.semver = ANY;
        } else {
          this.semver = new SemVer(m2[2], this.options.loose);
        }
      }
      toString() {
        return this.value;
      }
      test(version2) {
        debug2("Comparator.test", version2, this.options.loose);
        if (this.semver === ANY || version2 === ANY) {
          return true;
        }
        if (typeof version2 === "string") {
          try {
            version2 = new SemVer(version2, this.options);
          } catch (er) {
            return false;
          }
        }
        return cmp(version2, this.operator, this.semver, this.options);
      }
      intersects(comp, options) {
        if (!(comp instanceof Comparator)) {
          throw new TypeError("a Comparator is required");
        }
        if (this.operator === "") {
          if (this.value === "") {
            return true;
          }
          return new Range(comp.value, options).test(this.value);
        } else if (comp.operator === "") {
          if (comp.value === "") {
            return true;
          }
          return new Range(this.value, options).test(comp.semver);
        }
        options = parseOptions(options);
        if (options.includePrerelease && (this.value === "<0.0.0-0" || comp.value === "<0.0.0-0")) {
          return false;
        }
        if (!options.includePrerelease && (this.value.startsWith("<0.0.0") || comp.value.startsWith("<0.0.0"))) {
          return false;
        }
        if (this.operator.startsWith(">") && comp.operator.startsWith(">")) {
          return true;
        }
        if (this.operator.startsWith("<") && comp.operator.startsWith("<")) {
          return true;
        }
        if (this.semver.version === comp.semver.version && this.operator.includes("=") && comp.operator.includes("=")) {
          return true;
        }
        if (cmp(this.semver, "<", comp.semver, options) && this.operator.startsWith(">") && comp.operator.startsWith("<")) {
          return true;
        }
        if (cmp(this.semver, ">", comp.semver, options) && this.operator.startsWith("<") && comp.operator.startsWith(">")) {
          return true;
        }
        return false;
      }
    }
    comparator = Comparator;
    const parseOptions = requireParseOptions();
    const { safeRe: re2, t } = requireRe();
    const cmp = requireCmp();
    const debug2 = requireDebug();
    const SemVer = requireSemver();
    const Range = requireRange();
    return comparator;
  }
  var range;
  var hasRequiredRange;
  function requireRange() {
    if (hasRequiredRange) return range;
    hasRequiredRange = 1;
    const SPACE_CHARACTERS = /\s+/g;
    class Range {
      constructor(range2, options) {
        options = parseOptions(options);
        if (range2 instanceof Range) {
          if (range2.loose === !!options.loose && range2.includePrerelease === !!options.includePrerelease) {
            return range2;
          } else {
            return new Range(range2.raw, options);
          }
        }
        if (range2 instanceof Comparator) {
          this.raw = range2.value;
          this.set = [[range2]];
          this.formatted = void 0;
          return this;
        }
        this.options = options;
        this.loose = !!options.loose;
        this.includePrerelease = !!options.includePrerelease;
        this.raw = range2.trim().replace(SPACE_CHARACTERS, " ");
        this.set = this.raw.split("||").map((r) => this.parseRange(r.trim())).filter((c2) => c2.length);
        if (!this.set.length) {
          throw new TypeError(`Invalid SemVer Range: ${this.raw}`);
        }
        if (this.set.length > 1) {
          const first = this.set[0];
          this.set = this.set.filter((c2) => !isNullSet(c2[0]));
          if (this.set.length === 0) {
            this.set = [first];
          } else if (this.set.length > 1) {
            for (const c2 of this.set) {
              if (c2.length === 1 && isAny(c2[0])) {
                this.set = [c2];
                break;
              }
            }
          }
        }
        this.formatted = void 0;
      }
      get range() {
        if (this.formatted === void 0) {
          this.formatted = "";
          for (let i = 0; i < this.set.length; i++) {
            if (i > 0) {
              this.formatted += "||";
            }
            const comps = this.set[i];
            for (let k = 0; k < comps.length; k++) {
              if (k > 0) {
                this.formatted += " ";
              }
              this.formatted += comps[k].toString().trim();
            }
          }
        }
        return this.formatted;
      }
      format() {
        return this.range;
      }
      toString() {
        return this.range;
      }
      parseRange(range2) {
        const memoOpts = (this.options.includePrerelease && FLAG_INCLUDE_PRERELEASE) | (this.options.loose && FLAG_LOOSE);
        const memoKey = memoOpts + ":" + range2;
        const cached = cache2.get(memoKey);
        if (cached) {
          return cached;
        }
        const loose = this.options.loose;
        const hr = loose ? re2[t.HYPHENRANGELOOSE] : re2[t.HYPHENRANGE];
        range2 = range2.replace(hr, hyphenReplace(this.options.includePrerelease));
        debug2("hyphen replace", range2);
        range2 = range2.replace(re2[t.COMPARATORTRIM], comparatorTrimReplace);
        debug2("comparator trim", range2);
        range2 = range2.replace(re2[t.TILDETRIM], tildeTrimReplace);
        debug2("tilde trim", range2);
        range2 = range2.replace(re2[t.CARETTRIM], caretTrimReplace);
        debug2("caret trim", range2);
        let rangeList = range2.split(" ").map((comp) => parseComparator(comp, this.options)).join(" ").split(/\s+/).map((comp) => replaceGTE0(comp, this.options));
        if (loose) {
          rangeList = rangeList.filter((comp) => {
            debug2("loose invalid filter", comp, this.options);
            return !!comp.match(re2[t.COMPARATORLOOSE]);
          });
        }
        debug2("range list", rangeList);
        const rangeMap = /* @__PURE__ */ new Map();
        const comparators = rangeList.map((comp) => new Comparator(comp, this.options));
        for (const comp of comparators) {
          if (isNullSet(comp)) {
            return [comp];
          }
          rangeMap.set(comp.value, comp);
        }
        if (rangeMap.size > 1 && rangeMap.has("")) {
          rangeMap.delete("");
        }
        const result = [...rangeMap.values()];
        cache2.set(memoKey, result);
        return result;
      }
      intersects(range2, options) {
        if (!(range2 instanceof Range)) {
          throw new TypeError("a Range is required");
        }
        return this.set.some((thisComparators) => {
          return isSatisfiable(thisComparators, options) && range2.set.some((rangeComparators) => {
            return isSatisfiable(rangeComparators, options) && thisComparators.every((thisComparator) => {
              return rangeComparators.every((rangeComparator) => {
                return thisComparator.intersects(rangeComparator, options);
              });
            });
          });
        });
      }
      // if ANY of the sets match ALL of its comparators, then pass
      test(version2) {
        if (!version2) {
          return false;
        }
        if (typeof version2 === "string") {
          try {
            version2 = new SemVer(version2, this.options);
          } catch (er) {
            return false;
          }
        }
        for (let i = 0; i < this.set.length; i++) {
          if (testSet(this.set[i], version2, this.options)) {
            return true;
          }
        }
        return false;
      }
    }
    range = Range;
    const LRU = requireLrucache();
    const cache2 = new LRU();
    const parseOptions = requireParseOptions();
    const Comparator = requireComparator();
    const debug2 = requireDebug();
    const SemVer = requireSemver();
    const {
      safeRe: re2,
      t,
      comparatorTrimReplace,
      tildeTrimReplace,
      caretTrimReplace
    } = requireRe();
    const { FLAG_INCLUDE_PRERELEASE, FLAG_LOOSE } = requireConstants();
    const isNullSet = (c2) => c2.value === "<0.0.0-0";
    const isAny = (c2) => c2.value === "";
    const isSatisfiable = (comparators, options) => {
      let result = true;
      const remainingComparators = comparators.slice();
      let testComparator = remainingComparators.pop();
      while (result && remainingComparators.length) {
        result = remainingComparators.every((otherComparator) => {
          return testComparator.intersects(otherComparator, options);
        });
        testComparator = remainingComparators.pop();
      }
      return result;
    };
    const parseComparator = (comp, options) => {
      debug2("comp", comp, options);
      comp = replaceCarets(comp, options);
      debug2("caret", comp);
      comp = replaceTildes(comp, options);
      debug2("tildes", comp);
      comp = replaceXRanges(comp, options);
      debug2("xrange", comp);
      comp = replaceStars(comp, options);
      debug2("stars", comp);
      return comp;
    };
    const isX2 = (id2) => !id2 || id2.toLowerCase() === "x" || id2 === "*";
    const replaceTildes = (comp, options) => {
      return comp.trim().split(/\s+/).map((c2) => replaceTilde(c2, options)).join(" ");
    };
    const replaceTilde = (comp, options) => {
      const r = options.loose ? re2[t.TILDELOOSE] : re2[t.TILDE];
      return comp.replace(r, (_, M2, m2, p, pr) => {
        debug2("tilde", comp, _, M2, m2, p, pr);
        let ret;
        if (isX2(M2)) {
          ret = "";
        } else if (isX2(m2)) {
          ret = `>=${M2}.0.0 <${+M2 + 1}.0.0-0`;
        } else if (isX2(p)) {
          ret = `>=${M2}.${m2}.0 <${M2}.${+m2 + 1}.0-0`;
        } else if (pr) {
          debug2("replaceTilde pr", pr);
          ret = `>=${M2}.${m2}.${p}-${pr} <${M2}.${+m2 + 1}.0-0`;
        } else {
          ret = `>=${M2}.${m2}.${p} <${M2}.${+m2 + 1}.0-0`;
        }
        debug2("tilde return", ret);
        return ret;
      });
    };
    const replaceCarets = (comp, options) => {
      return comp.trim().split(/\s+/).map((c2) => replaceCaret(c2, options)).join(" ");
    };
    const replaceCaret = (comp, options) => {
      debug2("caret", comp, options);
      const r = options.loose ? re2[t.CARETLOOSE] : re2[t.CARET];
      const z = options.includePrerelease ? "-0" : "";
      return comp.replace(r, (_, M2, m2, p, pr) => {
        debug2("caret", comp, _, M2, m2, p, pr);
        let ret;
        if (isX2(M2)) {
          ret = "";
        } else if (isX2(m2)) {
          ret = `>=${M2}.0.0${z} <${+M2 + 1}.0.0-0`;
        } else if (isX2(p)) {
          if (M2 === "0") {
            ret = `>=${M2}.${m2}.0${z} <${M2}.${+m2 + 1}.0-0`;
          } else {
            ret = `>=${M2}.${m2}.0${z} <${+M2 + 1}.0.0-0`;
          }
        } else if (pr) {
          debug2("replaceCaret pr", pr);
          if (M2 === "0") {
            if (m2 === "0") {
              ret = `>=${M2}.${m2}.${p}-${pr} <${M2}.${m2}.${+p + 1}-0`;
            } else {
              ret = `>=${M2}.${m2}.${p}-${pr} <${M2}.${+m2 + 1}.0-0`;
            }
          } else {
            ret = `>=${M2}.${m2}.${p}-${pr} <${+M2 + 1}.0.0-0`;
          }
        } else {
          debug2("no pr");
          if (M2 === "0") {
            if (m2 === "0") {
              ret = `>=${M2}.${m2}.${p}${z} <${M2}.${m2}.${+p + 1}-0`;
            } else {
              ret = `>=${M2}.${m2}.${p}${z} <${M2}.${+m2 + 1}.0-0`;
            }
          } else {
            ret = `>=${M2}.${m2}.${p} <${+M2 + 1}.0.0-0`;
          }
        }
        debug2("caret return", ret);
        return ret;
      });
    };
    const replaceXRanges = (comp, options) => {
      debug2("replaceXRanges", comp, options);
      return comp.split(/\s+/).map((c2) => replaceXRange(c2, options)).join(" ");
    };
    const replaceXRange = (comp, options) => {
      comp = comp.trim();
      const r = options.loose ? re2[t.XRANGELOOSE] : re2[t.XRANGE];
      return comp.replace(r, (ret, gtlt, M2, m2, p, pr) => {
        debug2("xRange", comp, ret, gtlt, M2, m2, p, pr);
        const xM = isX2(M2);
        const xm = xM || isX2(m2);
        const xp = xm || isX2(p);
        const anyX = xp;
        if (gtlt === "=" && anyX) {
          gtlt = "";
        }
        pr = options.includePrerelease ? "-0" : "";
        if (xM) {
          if (gtlt === ">" || gtlt === "<") {
            ret = "<0.0.0-0";
          } else {
            ret = "*";
          }
        } else if (gtlt && anyX) {
          if (xm) {
            m2 = 0;
          }
          p = 0;
          if (gtlt === ">") {
            gtlt = ">=";
            if (xm) {
              M2 = +M2 + 1;
              m2 = 0;
              p = 0;
            } else {
              m2 = +m2 + 1;
              p = 0;
            }
          } else if (gtlt === "<=") {
            gtlt = "<";
            if (xm) {
              M2 = +M2 + 1;
            } else {
              m2 = +m2 + 1;
            }
          }
          if (gtlt === "<") {
            pr = "-0";
          }
          ret = `${gtlt + M2}.${m2}.${p}${pr}`;
        } else if (xm) {
          ret = `>=${M2}.0.0${pr} <${+M2 + 1}.0.0-0`;
        } else if (xp) {
          ret = `>=${M2}.${m2}.0${pr} <${M2}.${+m2 + 1}.0-0`;
        }
        debug2("xRange return", ret);
        return ret;
      });
    };
    const replaceStars = (comp, options) => {
      debug2("replaceStars", comp, options);
      return comp.trim().replace(re2[t.STAR], "");
    };
    const replaceGTE0 = (comp, options) => {
      debug2("replaceGTE0", comp, options);
      return comp.trim().replace(re2[options.includePrerelease ? t.GTE0PRE : t.GTE0], "");
    };
    const hyphenReplace = (incPr) => ($0, from, fM, fm, fp, fpr, fb, to, tM, tm, tp, tpr) => {
      if (isX2(fM)) {
        from = "";
      } else if (isX2(fm)) {
        from = `>=${fM}.0.0${incPr ? "-0" : ""}`;
      } else if (isX2(fp)) {
        from = `>=${fM}.${fm}.0${incPr ? "-0" : ""}`;
      } else if (fpr) {
        from = `>=${from}`;
      } else {
        from = `>=${from}${incPr ? "-0" : ""}`;
      }
      if (isX2(tM)) {
        to = "";
      } else if (isX2(tm)) {
        to = `<${+tM + 1}.0.0-0`;
      } else if (isX2(tp)) {
        to = `<${tM}.${+tm + 1}.0-0`;
      } else if (tpr) {
        to = `<=${tM}.${tm}.${tp}-${tpr}`;
      } else if (incPr) {
        to = `<${tM}.${tm}.${+tp + 1}-0`;
      } else {
        to = `<=${to}`;
      }
      return `${from} ${to}`.trim();
    };
    const testSet = (set2, version2, options) => {
      for (let i = 0; i < set2.length; i++) {
        if (!set2[i].test(version2)) {
          return false;
        }
      }
      if (version2.prerelease.length && !options.includePrerelease) {
        for (let i = 0; i < set2.length; i++) {
          debug2(set2[i].semver);
          if (set2[i].semver === Comparator.ANY) {
            continue;
          }
          if (set2[i].semver.prerelease.length > 0) {
            const allowed = set2[i].semver;
            if (allowed.major === version2.major && allowed.minor === version2.minor && allowed.patch === version2.patch) {
              return true;
            }
          }
        }
        return false;
      }
      return true;
    };
    return range;
  }
  var satisfies_1;
  var hasRequiredSatisfies;
  function requireSatisfies() {
    if (hasRequiredSatisfies) return satisfies_1;
    hasRequiredSatisfies = 1;
    const Range = requireRange();
    const satisfies2 = (version2, range2, options) => {
      try {
        range2 = new Range(range2, options);
      } catch (er) {
        return false;
      }
      return range2.test(version2);
    };
    satisfies_1 = satisfies2;
    return satisfies_1;
  }
  var satisfiesExports = requireSatisfies();
  var satisfies = /* @__PURE__ */ getDefaultExportFromCjs$1(satisfiesExports);
  function post(window2, url, data2) {
    const editor = window2.open(url);
    const step = 250;
    const { origin } = new URL(url);
    let count2 = 40;
    function listen2(evt) {
      if (evt.source === editor) {
        count2 = 0;
        window2.removeEventListener("message", listen2, false);
      }
    }
    window2.addEventListener("message", listen2, false);
    function send2() {
      if (count2 <= 0) {
        return;
      }
      editor.postMessage(data2, origin);
      setTimeout(send2, step);
      count2 -= 1;
    }
    setTimeout(send2, step);
  }
  var embedStyle = `.vega-embed {
  position: relative;
  display: inline-block;
  box-sizing: border-box;
}
.vega-embed.has-actions {
  padding-right: 38px;
}
.vega-embed details:not([open]) > :not(summary) {
  display: none !important;
}
.vega-embed summary {
  list-style: none;
  position: absolute;
  top: 0;
  right: 0;
  padding: 6px;
  z-index: 1000;
  background: white;
  box-shadow: 1px 1px 3px rgba(0, 0, 0, 0.1);
  color: #1b1e23;
  border: 1px solid #aaa;
  border-radius: 999px;
  opacity: 0.2;
  transition: opacity 0.4s ease-in;
  cursor: pointer;
  line-height: 0px;
}
.vega-embed summary::-webkit-details-marker {
  display: none;
}
.vega-embed summary:active {
  box-shadow: #aaa 0px 0px 0px 1px inset;
}
.vega-embed summary svg {
  width: 14px;
  height: 14px;
}
.vega-embed details[open] summary {
  opacity: 0.7;
}
.vega-embed:hover summary, .vega-embed:focus-within summary {
  opacity: 1 !important;
  transition: opacity 0.2s ease;
}
.vega-embed .vega-actions {
  position: absolute;
  z-index: 1001;
  top: 35px;
  right: -9px;
  display: flex;
  flex-direction: column;
  padding-bottom: 8px;
  padding-top: 8px;
  border-radius: 4px;
  box-shadow: 0 2px 8px 0 rgba(0, 0, 0, 0.2);
  border: 1px solid #d9d9d9;
  background: white;
  animation-duration: 0.15s;
  animation-name: scale-in;
  animation-timing-function: cubic-bezier(0.2, 0, 0.13, 1.5);
  text-align: left;
}
.vega-embed .vega-actions a {
  padding: 8px 16px;
  font-family: sans-serif;
  font-size: 14px;
  font-weight: 600;
  white-space: nowrap;
  color: #434a56;
  text-decoration: none;
}
.vega-embed .vega-actions a:hover, .vega-embed .vega-actions a:focus {
  background-color: #f7f7f9;
  color: black;
}
.vega-embed .vega-actions::before, .vega-embed .vega-actions::after {
  content: "";
  display: inline-block;
  position: absolute;
}
.vega-embed .vega-actions::before {
  left: auto;
  right: 14px;
  top: -16px;
  border: 8px solid rgba(0, 0, 0, 0);
  border-bottom-color: #d9d9d9;
}
.vega-embed .vega-actions::after {
  left: auto;
  right: 15px;
  top: -14px;
  border: 7px solid rgba(0, 0, 0, 0);
  border-bottom-color: #fff;
}
.vega-embed .chart-wrapper.fit-x {
  width: 100%;
}
.vega-embed .chart-wrapper.fit-y {
  height: 100%;
}

.vega-embed-wrapper {
  max-width: 100%;
  overflow: auto;
  padding-right: 14px;
}

@keyframes scale-in {
  from {
    opacity: 0;
    transform: scale(0.6);
  }
  to {
    opacity: 1;
    transform: scale(1);
  }
}
`;
  function mergeDeep(dest, ...src) {
    for (const s of src) {
      deepMerge_(dest, s);
    }
    return dest;
  }
  function deepMerge_(dest, src) {
    for (const property2 of Object.keys(src)) {
      writeConfig(dest, property2, src[property2], true);
    }
  }
  const vega = vegaImport;
  let vegaLite = vegaLiteImport;
  const w = typeof window !== "undefined" ? window : void 0;
  if (vegaLite === void 0 && ((_a = w == null ? void 0 : w.vl) == null ? void 0 : _a.compile)) {
    vegaLite = w.vl;
  }
  const DEFAULT_ACTIONS = { export: { svg: true, png: true }, source: true, compiled: true, editor: true };
  const I18N = {
    CLICK_TO_VIEW_ACTIONS: "Click to view actions",
    COMPILED_ACTION: "View Compiled Vega",
    EDITOR_ACTION: "Open in Vega Editor",
    PNG_ACTION: "Save as PNG",
    SOURCE_ACTION: "View Source",
    SVG_ACTION: "Save as SVG"
  };
  const NAMES = {
    vega: "Vega",
    "vega-lite": "Vega-Lite"
  };
  const VERSION = {
    vega: vega.version,
    "vega-lite": vegaLite ? vegaLite.version : "not available"
  };
  const PREPROCESSOR = {
    vega: (vgSpec) => vgSpec,
    "vega-lite": (vlSpec, config) => vegaLite.compile(vlSpec, { config }).spec
  };
  const SVG_CIRCLES = `
<svg viewBox="0 0 16 16" fill="currentColor" stroke="none" stroke-width="1" stroke-linecap="round" stroke-linejoin="round">
  <circle r="2" cy="8" cx="2"></circle>
  <circle r="2" cy="8" cx="8"></circle>
  <circle r="2" cy="8" cx="14"></circle>
</svg>`;
  const CHART_WRAPPER_CLASS = "chart-wrapper";
  function isTooltipHandler(h2) {
    return typeof h2 === "function";
  }
  function viewSource(source2, sourceHeader, sourceFooter, mode2) {
    const header = `<html><head>${sourceHeader}</head><body><pre><code class="json">`;
    const footer = `</code></pre>${sourceFooter}</body></html>`;
    const win = window.open("");
    win.document.write(header + source2 + footer);
    win.document.title = `${NAMES[mode2]} JSON Source`;
  }
  function guessMode(spec, providedMode) {
    if (spec.$schema) {
      const parsed = e(spec.$schema);
      if (providedMode && providedMode !== parsed.library) {
        console.warn(`The given visualization spec is written in ${NAMES[parsed.library]}, but mode argument sets ${NAMES[providedMode] ?? providedMode}.`);
      }
      const mode2 = parsed.library;
      if (!satisfies(VERSION[mode2], `^${parsed.version.slice(1)}`)) {
        console.warn(`The input spec uses ${NAMES[mode2]} ${parsed.version}, but the current version of ${NAMES[mode2]} is v${VERSION[mode2]}.`);
      }
      return mode2;
    }
    if ("mark" in spec || "encoding" in spec || "layer" in spec || "hconcat" in spec || "vconcat" in spec || "facet" in spec || "repeat" in spec) {
      return "vega-lite";
    }
    if ("marks" in spec || "signals" in spec || "scales" in spec || "axes" in spec) {
      return "vega";
    }
    return providedMode ?? "vega";
  }
  function isLoader(o) {
    return !!(o && "load" in o);
  }
  function createLoader(opts) {
    return isLoader(opts) ? opts : vega.loader(opts);
  }
  function embedOptionsFromUsermeta(parsedSpec) {
    var _a2;
    const opts = ((_a2 = parsedSpec.usermeta) == null ? void 0 : _a2.embedOptions) ?? {};
    if (isString(opts.defaultStyle)) {
      opts.defaultStyle = false;
    }
    return opts;
  }
  async function embed(el, spec, opts = {}) {
    let parsedSpec;
    let loader2;
    if (isString(spec)) {
      loader2 = createLoader(opts.loader);
      parsedSpec = JSON.parse(await loader2.load(spec));
    } else {
      parsedSpec = spec;
    }
    const loadedEmbedOptions = embedOptionsFromUsermeta(parsedSpec);
    const usermetaLoader = loadedEmbedOptions.loader;
    if (!loader2 || usermetaLoader) {
      loader2 = createLoader(opts.loader ?? usermetaLoader);
    }
    const usermetaOpts = await loadOpts(loadedEmbedOptions, loader2);
    const parsedOpts = await loadOpts(opts, loader2);
    const mergedOpts = {
      ...mergeDeep(parsedOpts, usermetaOpts),
      config: mergeConfig(parsedOpts.config ?? {}, usermetaOpts.config ?? {})
    };
    return await _embed(el, parsedSpec, mergedOpts, loader2);
  }
  async function loadOpts(opt, loader2) {
    const config = isString(opt.config) ? JSON.parse(await loader2.load(opt.config)) : opt.config ?? {};
    const patch2 = isString(opt.patch) ? JSON.parse(await loader2.load(opt.patch)) : opt.patch;
    return {
      ...opt,
      ...patch2 ? { patch: patch2 } : {},
      ...config ? { config } : {}
    };
  }
  function getRoot(el) {
    const possibleRoot = el.getRootNode ? el.getRootNode() : document;
    return possibleRoot instanceof ShadowRoot ? { root: possibleRoot, rootContainer: possibleRoot } : { root: document, rootContainer: document.head ?? document.body };
  }
  async function _embed(el, spec, opts = {}, loader2) {
    const config = opts.theme ? mergeConfig(themes[opts.theme], opts.config ?? {}) : opts.config;
    const actions = isBoolean$2(opts.actions) ? opts.actions : mergeDeep({}, DEFAULT_ACTIONS, opts.actions ?? {});
    const i18n = { ...I18N, ...opts.i18n };
    const renderer = opts.renderer ?? "canvas";
    const logLevel = opts.logLevel ?? vega.Warn;
    const downloadFileName = opts.downloadFileName ?? "visualization";
    const element2 = typeof el === "string" ? document.querySelector(el) : el;
    if (!element2) {
      throw new Error(`${el} does not exist`);
    }
    if (opts.defaultStyle !== false) {
      const ID = "vega-embed-style";
      const { root, rootContainer } = getRoot(element2);
      if (!root.getElementById(ID)) {
        const style2 = document.createElement("style");
        style2.id = ID;
        style2.innerHTML = opts.defaultStyle === void 0 || opts.defaultStyle === true ? embedStyle.toString() : opts.defaultStyle;
        rootContainer.appendChild(style2);
      }
    }
    const mode2 = guessMode(spec, opts.mode);
    let vgSpec = PREPROCESSOR[mode2](spec, config);
    if (mode2 === "vega-lite") {
      if (vgSpec.$schema) {
        const parsed = e(vgSpec.$schema);
        if (!satisfies(VERSION.vega, `^${parsed.version.slice(1)}`)) {
          console.warn(`The compiled spec uses Vega ${parsed.version}, but current version is v${VERSION.vega}.`);
        }
      }
    }
    element2.classList.add("vega-embed");
    if (actions) {
      element2.classList.add("has-actions");
    }
    element2.innerHTML = "";
    let container = element2;
    if (actions) {
      const chartWrapper = document.createElement("div");
      chartWrapper.classList.add(CHART_WRAPPER_CLASS);
      element2.appendChild(chartWrapper);
      container = chartWrapper;
    }
    const patch2 = opts.patch;
    if (patch2) {
      vgSpec = patch2 instanceof Function ? patch2(vgSpec) : applyPatch(vgSpec, patch2, true, false).newDocument;
    }
    if (opts.formatLocale) {
      vega.formatLocale(opts.formatLocale);
    }
    if (opts.timeFormatLocale) {
      vega.timeFormatLocale(opts.timeFormatLocale);
    }
    if (opts.expressionFunctions) {
      for (const name in opts.expressionFunctions) {
        const expressionFunction2 = opts.expressionFunctions[name];
        if ("fn" in expressionFunction2) {
          vega.expressionFunction(name, expressionFunction2.fn, expressionFunction2["visitor"]);
        } else if (expressionFunction2 instanceof Function) {
          vega.expressionFunction(name, expressionFunction2);
        }
      }
    }
    const { ast } = opts;
    const runtime2 = vega.parse(vgSpec, mode2 === "vega-lite" ? {} : config, { ast });
    const view = new (opts.viewClass || vega.View)(runtime2, {
      loader: loader2,
      logLevel,
      renderer,
      ...ast ? { expr: vega.expressionInterpreter ?? opts.expr ?? expression$1 } : {}
    });
    view.addSignalListener("autosize", (_, autosize) => {
      const { type: type2 } = autosize;
      if (type2 == "fit-x") {
        container.classList.add("fit-x");
        container.classList.remove("fit-y");
      } else if (type2 == "fit-y") {
        container.classList.remove("fit-x");
        container.classList.add("fit-y");
      } else if (type2 == "fit") {
        container.classList.add("fit-x", "fit-y");
      } else {
        container.classList.remove("fit-x", "fit-y");
      }
    });
    if (opts.tooltip !== false) {
      const { loader: loader_, tooltip: tooltip2 } = opts;
      const baseURL = loader_ && !isLoader(loader_) ? loader_ == null ? void 0 : loader_.baseURL : void 0;
      const handler = isTooltipHandler(tooltip2) ? tooltip2 : (
        // user provided boolean true or tooltip options
        new Handler({ baseURL, ...tooltip2 === true ? {} : tooltip2 }).call
      );
      view.tooltip(handler);
    }
    let { hover: hover2 } = opts;
    if (hover2 === void 0) {
      hover2 = mode2 === "vega";
    }
    if (hover2) {
      const { hoverSet, updateSet } = typeof hover2 === "boolean" ? {} : hover2;
      view.hover(hoverSet, updateSet);
    }
    if (opts) {
      if (opts.width != null) {
        view.width(opts.width);
      }
      if (opts.height != null) {
        view.height(opts.height);
      }
      if (opts.padding != null) {
        view.padding(opts.padding);
      }
    }
    await view.initialize(container, opts.bind).runAsync();
    let documentClickHandler;
    if (actions !== false) {
      let wrapper = element2;
      if (opts.defaultStyle !== false || opts.forceActionsMenu) {
        const details = document.createElement("details");
        details.title = i18n.CLICK_TO_VIEW_ACTIONS;
        element2.append(details);
        wrapper = details;
        const summary = document.createElement("summary");
        summary.innerHTML = SVG_CIRCLES;
        details.append(summary);
        documentClickHandler = (ev) => {
          if (!details.contains(ev.target)) {
            details.removeAttribute("open");
          }
        };
        document.addEventListener("click", documentClickHandler);
      }
      const ctrl = document.createElement("div");
      wrapper.append(ctrl);
      ctrl.classList.add("vega-actions");
      if (actions === true || actions.export !== false) {
        for (const ext of ["svg", "png"]) {
          if (actions === true || actions.export === true || actions.export[ext]) {
            const i18nExportAction = i18n[`${ext.toUpperCase()}_ACTION`];
            const exportLink = document.createElement("a");
            const scaleFactor = isObject(opts.scaleFactor) ? opts.scaleFactor[ext] : opts.scaleFactor;
            exportLink.text = i18nExportAction;
            exportLink.href = "#";
            exportLink.target = "_blank";
            exportLink.download = `${downloadFileName}.${ext}`;
            exportLink.addEventListener("mousedown", async function(e3) {
              e3.preventDefault();
              const url = await view.toImageURL(ext, scaleFactor);
              this.href = url;
            });
            ctrl.append(exportLink);
          }
        }
      }
      if (actions === true || actions.source !== false) {
        const viewSourceLink = document.createElement("a");
        viewSourceLink.text = i18n.SOURCE_ACTION;
        viewSourceLink.href = "#";
        viewSourceLink.addEventListener("click", function(e3) {
          viewSource(stringify$2(spec), opts.sourceHeader ?? "", opts.sourceFooter ?? "", mode2);
          e3.preventDefault();
        });
        ctrl.append(viewSourceLink);
      }
      if (mode2 === "vega-lite" && (actions === true || actions.compiled !== false)) {
        const compileLink = document.createElement("a");
        compileLink.text = i18n.COMPILED_ACTION;
        compileLink.href = "#";
        compileLink.addEventListener("click", function(e3) {
          viewSource(stringify$2(vgSpec), opts.sourceHeader ?? "", opts.sourceFooter ?? "", "vega");
          e3.preventDefault();
        });
        ctrl.append(compileLink);
      }
      if (actions === true || actions.editor !== false) {
        const editorUrl = opts.editorUrl ?? "https://vega.github.io/editor/";
        const editorLink = document.createElement("a");
        editorLink.text = i18n.EDITOR_ACTION;
        editorLink.href = "#";
        editorLink.addEventListener("click", function(e3) {
          post(window, editorUrl, {
            config,
            mode: patch2 ? "vega" : mode2,
            renderer,
            spec: stringify$2(patch2 ? vgSpec : spec)
          });
          e3.preventDefault();
        });
        ctrl.append(editorLink);
      }
    }
    function finalize2() {
      if (documentClickHandler) {
        document.removeEventListener("click", documentClickHandler);
      }
      view.finalize();
    }
    return { view, spec, vgSpec, finalize: finalize2, embedOptions: opts };
  }
  const WIDTH_HEIGHT = /* @__PURE__ */ new Set(["width", "height"]);
  function getDefaultExportFromCjs(x2) {
    return x2 && x2.__esModule && Object.prototype.hasOwnProperty.call(x2, "default") ? x2["default"] : x2;
  }
  var fastDeepEqual = function equal2(a2, b2) {
    if (a2 === b2) return true;
    if (a2 && b2 && typeof a2 == "object" && typeof b2 == "object") {
      if (a2.constructor !== b2.constructor) return false;
      var length2, i, keys2;
      if (Array.isArray(a2)) {
        length2 = a2.length;
        if (length2 != b2.length) return false;
        for (i = length2; i-- !== 0; )
          if (!equal2(a2[i], b2[i])) return false;
        return true;
      }
      if (a2.constructor === RegExp) return a2.source === b2.source && a2.flags === b2.flags;
      if (a2.valueOf !== Object.prototype.valueOf) return a2.valueOf() === b2.valueOf();
      if (a2.toString !== Object.prototype.toString) return a2.toString() === b2.toString();
      keys2 = Object.keys(a2);
      length2 = keys2.length;
      if (length2 !== Object.keys(b2).length) return false;
      for (i = length2; i-- !== 0; )
        if (!Object.prototype.hasOwnProperty.call(b2, keys2[i])) return false;
      for (i = length2; i-- !== 0; ) {
        var key2 = keys2[i];
        if (!equal2(a2[key2], b2[key2])) return false;
      }
      return true;
    }
    return a2 !== a2 && b2 !== b2;
  };
  const equal = /* @__PURE__ */ getDefaultExportFromCjs(fastDeepEqual);
  function updateMultipleDatasetsInView(view, data2) {
    for (const [name, value2] of Object.entries(data2)) {
      const getType = {};
      if (value2) {
        if (!!value2 && getType.toString.call(value2) === "[object Function]") {
          const parsedValue = value2;
          parsedValue(view.data(name));
        } else {
          view.change(name, changeset().remove(() => true).insert(value2));
        }
      }
    }
  }
  function shallowEqual(a2 = {}, b2 = {}, ignore = /* @__PURE__ */ new Set()) {
    const aKeys = Object.keys(a2);
    const bKeys = Object.keys(b2);
    return a2 === b2 || aKeys.length === bKeys.length && aKeys.filter((k) => !ignore.has(k)).every((key2) => a2[key2] === b2[key2]);
  }
  function removeSignalListenersFromView(view, signalListeners) {
    const signalNames = Object.keys(signalListeners);
    for (const signalName of signalNames) {
      try {
        view.removeSignalListener(signalName, signalListeners[signalName]);
      } catch (error2) {
        console.warn("Cannot remove invalid signal listener.", error2);
      }
    }
    return signalNames.length > 0;
  }
  function addSignalListenersToView(view, signalListeners) {
    const signalNames = Object.keys(signalListeners);
    for (const signalName of signalNames) {
      try {
        view.addSignalListener(signalName, signalListeners[signalName]);
      } catch (error2) {
        console.warn("Cannot add invalid signal listener.", error2);
      }
    }
    return signalNames.length > 0;
  }
  function getUniqueFieldNames(specs) {
    return new Set(specs.flatMap((o) => Object.keys(o)));
  }
  function computeSpecChanges(newSpec, oldSpec) {
    if (newSpec === oldSpec)
      return false;
    const changes = {
      width: false,
      height: false,
      isExpensive: false
    };
    const hasWidth = "width" in newSpec || "width" in oldSpec;
    const hasHeight = "height" in newSpec || "height" in oldSpec;
    if (hasWidth && (!("width" in newSpec) || !("width" in oldSpec) || newSpec.width !== oldSpec.width)) {
      if ("width" in newSpec && typeof newSpec.width === "number") {
        changes.width = newSpec.width;
      } else {
        changes.isExpensive = true;
      }
    }
    if (hasHeight && (!("height" in newSpec) || !("height" in oldSpec) || newSpec.height !== oldSpec.height)) {
      if ("height" in newSpec && typeof newSpec.height === "number") {
        changes.height = newSpec.height;
      } else {
        changes.isExpensive = true;
      }
    }
    const fieldNames2 = [...getUniqueFieldNames([newSpec, oldSpec])].filter((f) => f !== "width" && f !== "height");
    if (fieldNames2.some((field2) => !(field2 in newSpec) || !(field2 in oldSpec) || !equal(newSpec[field2], oldSpec[field2]))) {
      changes.isExpensive = true;
    }
    return changes.width !== false || changes.height !== false || changes.isExpensive ? changes : false;
  }
  function combineSpecWithDimension(spec, options) {
    const { width: width2, height: height2 } = options;
    if (typeof width2 !== "undefined" && typeof height2 !== "undefined") {
      return { ...spec, width: width2, height: height2 };
    }
    if (typeof width2 !== "undefined") {
      return { ...spec, width: width2 };
    }
    if (typeof height2 !== "undefined") {
      return { ...spec, height: height2 };
    }
    return spec;
  }
  function create_fragment$e(ctx) {
    let div;
    return {
      c() {
        div = element$2("div");
      },
      m(target2, anchor) {
        insert$1(target2, div, anchor);
        ctx[11](div);
      },
      p: noop$5,
      i: noop$5,
      o: noop$5,
      d(detaching) {
        if (detaching) {
          detach(div);
        }
        ctx[11](null);
      }
    };
  }
  function instance$e($$self, $$props, $$invalidate) {
    let { options } = $$props;
    let { spec } = $$props;
    let { view } = $$props;
    let { signalListeners = {} } = $$props;
    let { data: data2 = {} } = $$props;
    const dispatch2 = createEventDispatcher();
    let result = void 0;
    let prevOptions = {};
    let prevSignalListeners = {};
    let prevSpec = {};
    let prevData = {};
    let chartContainer;
    onDestroy(() => {
      clearView();
    });
    async function createView() {
      clearView();
      try {
        $$invalidate(6, result = await embed(chartContainer, spec, options));
        $$invalidate(1, view = result.view);
        if (addSignalListenersToView(view, signalListeners)) {
          view.runAsync();
        }
        onNewView(view);
      } catch (e3) {
        handleError(e3);
      }
    }
    function clearView() {
      if (result) {
        result.finalize();
        $$invalidate(6, result = void 0);
        $$invalidate(1, view = void 0);
      }
    }
    function handleError(error2) {
      dispatch2("onError", { error: error2 });
      console.warn(error2);
    }
    function onNewView(view2) {
      update2();
      dispatch2("onNewView", { view: view2 });
    }
    async function update2() {
      if (data2 && Object.keys(data2).length > 0 && result !== void 0) {
        $$invalidate(1, view = result.view);
        updateMultipleDatasetsInView(view, data2);
        await view.resize().runAsync();
      }
    }
    function div_binding($$value) {
      binding_callbacks[$$value ? "unshift" : "push"](() => {
        chartContainer = $$value;
        $$invalidate(0, chartContainer);
      });
    }
    $$self.$$set = ($$props2) => {
      if ("options" in $$props2) $$invalidate(2, options = $$props2.options);
      if ("spec" in $$props2) $$invalidate(3, spec = $$props2.spec);
      if ("view" in $$props2) $$invalidate(1, view = $$props2.view);
      if ("signalListeners" in $$props2) $$invalidate(4, signalListeners = $$props2.signalListeners);
      if ("data" in $$props2) $$invalidate(5, data2 = $$props2.data);
    };
    $$self.$$.update = () => {
      if ($$self.$$.dirty & /*data, prevData*/
      1056) {
        {
          if (!shallowEqual(data2, prevData)) {
            update2();
          }
          $$invalidate(10, prevData = data2);
        }
      }
      if ($$self.$$.dirty & /*chartContainer, options, prevOptions, spec, prevSpec, signalListeners, prevSignalListeners, result, view*/
      991) {
        {
          if (chartContainer !== void 0) {
            if (!shallowEqual(options, prevOptions, WIDTH_HEIGHT)) {
              createView();
            } else {
              const specChanges = computeSpecChanges(combineSpecWithDimension(spec, options), combineSpecWithDimension(prevSpec, prevOptions));
              const newSignalListeners = signalListeners;
              const oldSignalListeners = prevSignalListeners;
              if (specChanges) {
                if (specChanges.isExpensive) {
                  createView();
                } else if (result !== void 0) {
                  const areSignalListenersChanged = !shallowEqual(newSignalListeners, oldSignalListeners);
                  $$invalidate(1, view = result.view);
                  if (specChanges.width !== false) {
                    view.width(specChanges.width);
                  }
                  if (specChanges.height !== false) {
                    view.height(specChanges.height);
                  }
                  if (areSignalListenersChanged) {
                    if (oldSignalListeners) {
                      removeSignalListenersFromView(view, oldSignalListeners);
                    }
                    if (newSignalListeners) {
                      addSignalListenersToView(view, newSignalListeners);
                    }
                  }
                  view.runAsync();
                }
              } else if (!shallowEqual(newSignalListeners, oldSignalListeners) && result !== void 0) {
                $$invalidate(1, view = result.view);
                if (oldSignalListeners) {
                  removeSignalListenersFromView(view, oldSignalListeners);
                }
                if (newSignalListeners) {
                  addSignalListenersToView(view, newSignalListeners);
                }
                view.runAsync();
              }
            }
            $$invalidate(7, prevOptions = options);
            $$invalidate(8, prevSignalListeners = signalListeners);
            $$invalidate(9, prevSpec = spec);
          }
        }
      }
    };
    return [
      chartContainer,
      view,
      options,
      spec,
      signalListeners,
      data2,
      result,
      prevOptions,
      prevSignalListeners,
      prevSpec,
      prevData,
      div_binding
    ];
  }
  class VegaEmbed extends SvelteComponent {
    constructor(options) {
      super();
      init$1(this, options, instance$e, create_fragment$e, safe_not_equal, {
        options: 2,
        spec: 3,
        view: 1,
        signalListeners: 4,
        data: 5
      });
    }
  }
  function create_fragment$d(ctx) {
    let vegaembed;
    let updating_view;
    let current2;
    function vegaembed_view_binding(value2) {
      ctx[6](value2);
    }
    let vegaembed_props = {
      spec: (
        /*spec*/
        ctx[1]
      ),
      data: (
        /*data*/
        ctx[2]
      ),
      signalListeners: (
        /*signalListeners*/
        ctx[3]
      ),
      options: (
        /*vegaOptions*/
        ctx[4]
      )
    };
    if (
      /*view*/
      ctx[0] !== void 0
    ) {
      vegaembed_props.view = /*view*/
      ctx[0];
    }
    vegaembed = new VegaEmbed({ props: vegaembed_props });
    binding_callbacks.push(() => bind$2(vegaembed, "view", vegaembed_view_binding));
    vegaembed.$on(
      "onNewView",
      /*onNewView_handler*/
      ctx[7]
    );
    vegaembed.$on(
      "onError",
      /*onError_handler*/
      ctx[8]
    );
    return {
      c() {
        create_component(vegaembed.$$.fragment);
      },
      m(target2, anchor) {
        mount_component(vegaembed, target2, anchor);
        current2 = true;
      },
      p(ctx2, [dirty]) {
        const vegaembed_changes = {};
        if (dirty & /*spec*/
        2) vegaembed_changes.spec = /*spec*/
        ctx2[1];
        if (dirty & /*data*/
        4) vegaembed_changes.data = /*data*/
        ctx2[2];
        if (dirty & /*signalListeners*/
        8) vegaembed_changes.signalListeners = /*signalListeners*/
        ctx2[3];
        if (dirty & /*vegaOptions*/
        16) vegaembed_changes.options = /*vegaOptions*/
        ctx2[4];
        if (!updating_view && dirty & /*view*/
        1) {
          updating_view = true;
          vegaembed_changes.view = /*view*/
          ctx2[0];
          add_flush_callback(() => updating_view = false);
        }
        vegaembed.$set(vegaembed_changes);
      },
      i(local) {
        if (current2) return;
        transition_in(vegaembed.$$.fragment, local);
        current2 = true;
      },
      o(local) {
        transition_out(vegaembed.$$.fragment, local);
        current2 = false;
      },
      d(detaching) {
        destroy_component(vegaembed, detaching);
      }
    };
  }
  const mode = "vega";
  function instance$d($$self, $$props, $$invalidate) {
    let vegaOptions;
    let { spec } = $$props;
    let { options = {} } = $$props;
    let { data: data2 = {} } = $$props;
    let { signalListeners = {} } = $$props;
    let { view = void 0 } = $$props;
    function vegaembed_view_binding(value2) {
      view = value2;
      $$invalidate(0, view);
    }
    function onNewView_handler(event2) {
      bubble.call(this, $$self, event2);
    }
    function onError_handler(event2) {
      bubble.call(this, $$self, event2);
    }
    $$self.$$set = ($$props2) => {
      if ("spec" in $$props2) $$invalidate(1, spec = $$props2.spec);
      if ("options" in $$props2) $$invalidate(5, options = $$props2.options);
      if ("data" in $$props2) $$invalidate(2, data2 = $$props2.data);
      if ("signalListeners" in $$props2) $$invalidate(3, signalListeners = $$props2.signalListeners);
      if ("view" in $$props2) $$invalidate(0, view = $$props2.view);
    };
    $$self.$$.update = () => {
      if ($$self.$$.dirty & /*options*/
      32) {
        $$invalidate(4, vegaOptions = { ...options, mode });
      }
    };
    return [
      view,
      spec,
      data2,
      signalListeners,
      vegaOptions,
      options,
      vegaembed_view_binding,
      onNewView_handler,
      onError_handler
    ];
  }
  class Vega extends SvelteComponent {
    constructor(options) {
      super();
      init$1(this, options, instance$d, create_fragment$d, safe_not_equal, {
        spec: 1,
        options: 5,
        data: 2,
        signalListeners: 3,
        view: 0
      });
    }
  }
  function create_else_block$3(ctx) {
    let vega2;
    let current2;
    vega2 = new Vega({
      props: {
        spec: (
          /*spec*/
          ctx[1]
        ),
        options: (
          /*options*/
          ctx[0]
        )
      }
    });
    return {
      c() {
        create_component(vega2.$$.fragment);
      },
      m(target2, anchor) {
        mount_component(vega2, target2, anchor);
        current2 = true;
      },
      p(ctx2, dirty) {
        const vega_changes = {};
        if (dirty & /*spec*/
        2) vega_changes.spec = /*spec*/
        ctx2[1];
        if (dirty & /*options*/
        1) vega_changes.options = /*options*/
        ctx2[0];
        vega2.$set(vega_changes);
      },
      i(local) {
        if (current2) return;
        transition_in(vega2.$$.fragment, local);
        current2 = true;
      },
      o(local) {
        transition_out(vega2.$$.fragment, local);
        current2 = false;
      },
      d(detaching) {
        destroy_component(vega2, detaching);
      }
    };
  }
  function create_if_block$9(ctx) {
    let vega2;
    let current2;
    vega2 = new Vega({
      props: {
        data: (
          /*data*/
          ctx[2]
        ),
        spec: (
          /*spec*/
          ctx[1]
        ),
        options: (
          /*options*/
          ctx[0]
        )
      }
    });
    return {
      c() {
        create_component(vega2.$$.fragment);
      },
      m(target2, anchor) {
        mount_component(vega2, target2, anchor);
        current2 = true;
      },
      p(ctx2, dirty) {
        const vega_changes = {};
        if (dirty & /*data*/
        4) vega_changes.data = /*data*/
        ctx2[2];
        if (dirty & /*spec*/
        2) vega_changes.spec = /*spec*/
        ctx2[1];
        if (dirty & /*options*/
        1) vega_changes.options = /*options*/
        ctx2[0];
        vega2.$set(vega_changes);
      },
      i(local) {
        if (current2) return;
        transition_in(vega2.$$.fragment, local);
        current2 = true;
      },
      o(local) {
        transition_out(vega2.$$.fragment, local);
        current2 = false;
      },
      d(detaching) {
        destroy_component(vega2, detaching);
      }
    };
  }
  function create_fragment$c(ctx) {
    let current_block_type_index;
    let if_block;
    let if_block_anchor;
    let current2;
    const if_block_creators = [create_if_block$9, create_else_block$3];
    const if_blocks = [];
    function select_block_type(ctx2, dirty) {
      if (
        /*data*/
        ctx2[2] && /*spec*/
        ctx2[1]
      ) return 0;
      return 1;
    }
    current_block_type_index = select_block_type(ctx);
    if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    return {
      c() {
        if_block.c();
        if_block_anchor = empty();
      },
      m(target2, anchor) {
        if_blocks[current_block_type_index].m(target2, anchor);
        insert$1(target2, if_block_anchor, anchor);
        current2 = true;
      },
      p(ctx2, [dirty]) {
        let previous_block_index = current_block_type_index;
        current_block_type_index = select_block_type(ctx2);
        if (current_block_type_index === previous_block_index) {
          if_blocks[current_block_type_index].p(ctx2, dirty);
        } else {
          group_outros();
          transition_out(if_blocks[previous_block_index], 1, 1, () => {
            if_blocks[previous_block_index] = null;
          });
          check_outros();
          if_block = if_blocks[current_block_type_index];
          if (!if_block) {
            if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
            if_block.c();
          } else {
            if_block.p(ctx2, dirty);
          }
          transition_in(if_block, 1);
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      },
      i(local) {
        if (current2) return;
        transition_in(if_block);
        current2 = true;
      },
      o(local) {
        transition_out(if_block);
        current2 = false;
      },
      d(detaching) {
        if (detaching) {
          detach(if_block_anchor);
        }
        if_blocks[current_block_type_index].d(detaching);
      }
    };
  }
  function instance$c($$self, $$props, $$invalidate) {
    let data2;
    let spec;
    let options;
    let { componentData } = $$props;
    $$self.$$set = ($$props2) => {
      if ("componentData" in $$props2) $$invalidate(3, componentData = $$props2.componentData);
    };
    $$self.$$.update = () => {
      if ($$self.$$.dirty & /*componentData*/
      8) {
        $$invalidate(2, { data: data2, spec, options } = componentData, data2, ($$invalidate(1, spec), $$invalidate(3, componentData)), ($$invalidate(0, options), $$invalidate(3, componentData)));
      }
    };
    return [options, spec, data2, componentData];
  }
  class Vega_chart extends SvelteComponent {
    constructor(options) {
      super();
      init$1(this, options, instance$c, create_fragment$c, safe_not_equal, { componentData: 3 });
    }
  }
  function create_fragment$b(ctx) {
    var _a2;
    let p;
    let t_value = (
      /*componentData*/
      (((_a2 = ctx[0]) == null ? void 0 : _a2.text) || "") + ""
    );
    let t;
    return {
      c() {
        p = element$2("p");
        t = text$3(t_value);
        attr$6(p, "data-component", "text");
      },
      m(target2, anchor) {
        insert$1(target2, p, anchor);
        append$2(p, t);
      },
      p(ctx2, [dirty]) {
        var _a3;
        if (dirty & /*componentData*/
        1 && t_value !== (t_value = /*componentData*/
        (((_a3 = ctx2[0]) == null ? void 0 : _a3.text) || "") + "")) set_data(t, t_value);
      },
      i: noop$5,
      o: noop$5,
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function instance$b($$self, $$props, $$invalidate) {
    let { componentData } = $$props;
    $$self.$$set = ($$props2) => {
      if ("componentData" in $$props2) $$invalidate(0, componentData = $$props2.componentData);
    };
    return [componentData];
  }
  class Text extends SvelteComponent {
    constructor(options) {
      super();
      init$1(this, options, instance$b, create_fragment$b, safe_not_equal, { componentData: 0 });
    }
  }
  function create_fragment$a(ctx) {
    let pre;
    let code;
    let t0_value = (
      /*componentData*/
      ctx[0].data + ""
    );
    let t02;
    let t12;
    let t22;
    return {
      c() {
        pre = element$2("pre");
        code = element$2("code");
        t02 = text$3(t0_value);
        t12 = text$3("\n  ");
        t22 = text$3("\n");
        attr$6(code, "class", "language-python");
        attr$6(pre, "data-component", "pythonCode");
      },
      m(target2, anchor) {
        insert$1(target2, pre, anchor);
        append$2(pre, code);
        append$2(code, t02);
        append$2(code, t12);
        ctx[2](code);
        append$2(pre, t22);
      },
      p(ctx2, [dirty]) {
        if (dirty & /*componentData*/
        1 && t0_value !== (t0_value = /*componentData*/
        ctx2[0].data + "")) set_data(t02, t0_value);
      },
      i: noop$5,
      o: noop$5,
      d(detaching) {
        if (detaching) {
          detach(pre);
        }
        ctx[2](null);
      }
    };
  }
  function instance$a($$self, $$props, $$invalidate) {
    let { componentData } = $$props;
    let el;
    function highlightCode() {
      var _a2;
      el && ((_a2 = window == null ? void 0 : window.Prism) == null ? void 0 : _a2.highlightElement(el));
    }
    function code_binding($$value) {
      binding_callbacks[$$value ? "unshift" : "push"](() => {
        el = $$value;
        $$invalidate(1, el);
      });
    }
    $$self.$$set = ($$props2) => {
      if ("componentData" in $$props2) $$invalidate(0, componentData = $$props2.componentData);
    };
    $$self.$$.update = () => {
      if ($$self.$$.dirty & /*el*/
      2) {
        el ? highlightCode() : null;
      }
    };
    return [componentData, el, code_binding];
  }
  class Python_code extends SvelteComponent {
    constructor(options) {
      super();
      init$1(this, options, instance$a, create_fragment$a, safe_not_equal, { componentData: 0 });
    }
  }
  function create_else_block$2(ctx) {
    let t;
    return {
      c() {
        t = text$3(
          /*componentData*/
          ctx[0]
        );
      },
      m(target2, anchor) {
        insert$1(target2, t, anchor);
      },
      p(ctx2, dirty) {
        if (dirty & /*componentData*/
        1) set_data(
          t,
          /*componentData*/
          ctx2[0]
        );
      },
      i: noop$5,
      o: noop$5,
      d(detaching) {
        if (detaching) {
          detach(t);
        }
      }
    };
  }
  function create_if_block$8(ctx) {
    let switch_instance;
    let switch_instance_anchor;
    let current2;
    var switch_value = (
      /*component*/
      ctx[1]
    );
    function switch_props(ctx2, dirty) {
      return {
        props: { componentData: (
          /*componentData*/
          ctx2[0]
        ) }
      };
    }
    if (switch_value) {
      switch_instance = construct_svelte_component(switch_value, switch_props(ctx));
    }
    return {
      c() {
        if (switch_instance) create_component(switch_instance.$$.fragment);
        switch_instance_anchor = empty();
      },
      m(target2, anchor) {
        if (switch_instance) mount_component(switch_instance, target2, anchor);
        insert$1(target2, switch_instance_anchor, anchor);
        current2 = true;
      },
      p(ctx2, dirty) {
        if (dirty & /*component*/
        2 && switch_value !== (switch_value = /*component*/
        ctx2[1])) {
          if (switch_instance) {
            group_outros();
            const old_component = switch_instance;
            transition_out(old_component.$$.fragment, 1, 0, () => {
              destroy_component(old_component, 1);
            });
            check_outros();
          }
          if (switch_value) {
            switch_instance = construct_svelte_component(switch_value, switch_props(ctx2));
            create_component(switch_instance.$$.fragment);
            transition_in(switch_instance.$$.fragment, 1);
            mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
          } else {
            switch_instance = null;
          }
        } else if (switch_value) {
          const switch_instance_changes = {};
          if (dirty & /*componentData*/
          1) switch_instance_changes.componentData = /*componentData*/
          ctx2[0];
          switch_instance.$set(switch_instance_changes);
        }
      },
      i(local) {
        if (current2) return;
        if (switch_instance) transition_in(switch_instance.$$.fragment, local);
        current2 = true;
      },
      o(local) {
        if (switch_instance) transition_out(switch_instance.$$.fragment, local);
        current2 = false;
      },
      d(detaching) {
        if (detaching) {
          detach(switch_instance_anchor);
        }
        if (switch_instance) destroy_component(switch_instance, detaching);
      }
    };
  }
  function create_fragment$9(ctx) {
    let current_block_type_index;
    let if_block;
    let if_block_anchor;
    let current2;
    const if_block_creators = [create_if_block$8, create_else_block$2];
    const if_blocks = [];
    function select_block_type(ctx2, dirty) {
      if (
        /*component*/
        ctx2[1]
      ) return 0;
      return 1;
    }
    current_block_type_index = select_block_type(ctx);
    if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    return {
      c() {
        if_block.c();
        if_block_anchor = empty();
      },
      m(target2, anchor) {
        if_blocks[current_block_type_index].m(target2, anchor);
        insert$1(target2, if_block_anchor, anchor);
        current2 = true;
      },
      p(ctx2, [dirty]) {
        let previous_block_index = current_block_type_index;
        current_block_type_index = select_block_type(ctx2);
        if (current_block_type_index === previous_block_index) {
          if_blocks[current_block_type_index].p(ctx2, dirty);
        } else {
          group_outros();
          transition_out(if_blocks[previous_block_index], 1, 1, () => {
            if_blocks[previous_block_index] = null;
          });
          check_outros();
          if_block = if_blocks[current_block_type_index];
          if (!if_block) {
            if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
            if_block.c();
          } else {
            if_block.p(ctx2, dirty);
          }
          transition_in(if_block, 1);
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      },
      i(local) {
        if (current2) return;
        transition_in(if_block);
        current2 = true;
      },
      o(local) {
        transition_out(if_block);
        current2 = false;
      },
      d(detaching) {
        if (detaching) {
          detach(if_block_anchor);
        }
        if_blocks[current_block_type_index].d(detaching);
      }
    };
  }
  function instance$9($$self, $$props, $$invalidate) {
    let { componentData } = $$props;
    let component;
    const typesMap = {
      artifacts: Artifacts,
      dag: Dag,
      heading: Heading$1,
      image: Image$2,
      log: Log$1,
      markdown: Markdown,
      progressBar: Progress_bar,
      text: Text,
      vegaChart: Vega_chart,
      pythonCode: Python_code
    };
    const type2 = componentData == null ? void 0 : componentData.type;
    if (type2) {
      component = typesMap == null ? void 0 : typesMap[type2];
      if (!component) {
        console.error("Unknown component type: ", type2);
      }
    }
    $$self.$$set = ($$props2) => {
      if ("componentData" in $$props2) $$invalidate(0, componentData = $$props2.componentData);
    };
    return [componentData, component];
  }
  class Table_data_renderer extends SvelteComponent {
    constructor(options) {
      super();
      init$1(this, options, instance$9, create_fragment$9, safe_not_equal, { componentData: 0 });
    }
  }
  function get_each_context$4(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[3] = list[i];
    child_ctx[5] = i;
    return child_ctx;
  }
  function get_each_context_1$2(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[6] = list[i];
    return child_ctx;
  }
  function create_if_block$7(ctx) {
    let div;
    let table;
    let tbody;
    let current2;
    let each_value = ensure_array_like(
      /*columns*/
      ctx[1]
    );
    let each_blocks = [];
    for (let i = 0; i < each_value.length; i += 1) {
      each_blocks[i] = create_each_block$4(get_each_context$4(ctx, each_value, i));
    }
    const out = (i) => transition_out(each_blocks[i], 1, 1, () => {
      each_blocks[i] = null;
    });
    return {
      c() {
        div = element$2("div");
        table = element$2("table");
        tbody = element$2("tbody");
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        attr$6(div, "class", "tableContainer");
        attr$6(div, "data-component", "table-vertical");
      },
      m(target2, anchor) {
        insert$1(target2, div, anchor);
        append$2(div, table);
        append$2(table, tbody);
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(tbody, null);
          }
        }
        current2 = true;
      },
      p(ctx2, dirty) {
        if (dirty & /*data, columns*/
        3) {
          each_value = ensure_array_like(
            /*columns*/
            ctx2[1]
          );
          let i;
          for (i = 0; i < each_value.length; i += 1) {
            const child_ctx = get_each_context$4(ctx2, each_value, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
              transition_in(each_blocks[i], 1);
            } else {
              each_blocks[i] = create_each_block$4(child_ctx);
              each_blocks[i].c();
              transition_in(each_blocks[i], 1);
              each_blocks[i].m(tbody, null);
            }
          }
          group_outros();
          for (i = each_value.length; i < each_blocks.length; i += 1) {
            out(i);
          }
          check_outros();
        }
      },
      i(local) {
        if (current2) return;
        for (let i = 0; i < each_value.length; i += 1) {
          transition_in(each_blocks[i]);
        }
        current2 = true;
      },
      o(local) {
        each_blocks = each_blocks.filter(Boolean);
        for (let i = 0; i < each_blocks.length; i += 1) {
          transition_out(each_blocks[i]);
        }
        current2 = false;
      },
      d(detaching) {
        if (detaching) {
          detach(div);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_each_block_1$2(ctx) {
    let td;
    let datarenderer;
    let current2;
    datarenderer = new Table_data_renderer({
      props: {
        componentData: (
          /*row*/
          ctx[6][
            /*i*/
            ctx[5]
          ]
        )
      }
    });
    return {
      c() {
        td = element$2("td");
        create_component(datarenderer.$$.fragment);
        attr$6(td, "class", "svelte-gl9h79");
      },
      m(target2, anchor) {
        insert$1(target2, td, anchor);
        mount_component(datarenderer, td, null);
        current2 = true;
      },
      p(ctx2, dirty) {
        const datarenderer_changes = {};
        if (dirty & /*data*/
        1) datarenderer_changes.componentData = /*row*/
        ctx2[6][
          /*i*/
          ctx2[5]
        ];
        datarenderer.$set(datarenderer_changes);
      },
      i(local) {
        if (current2) return;
        transition_in(datarenderer.$$.fragment, local);
        current2 = true;
      },
      o(local) {
        transition_out(datarenderer.$$.fragment, local);
        current2 = false;
      },
      d(detaching) {
        if (detaching) {
          detach(td);
        }
        destroy_component(datarenderer);
      }
    };
  }
  function create_each_block$4(ctx) {
    let tr2;
    let td;
    let t0_value = (
      /*column*/
      ctx[3] + ""
    );
    let t02;
    let t12;
    let t22;
    let current2;
    let each_value_1 = ensure_array_like(
      /*data*/
      ctx[0]
    );
    let each_blocks = [];
    for (let i = 0; i < each_value_1.length; i += 1) {
      each_blocks[i] = create_each_block_1$2(get_each_context_1$2(ctx, each_value_1, i));
    }
    const out = (i) => transition_out(each_blocks[i], 1, 1, () => {
      each_blocks[i] = null;
    });
    return {
      c() {
        tr2 = element$2("tr");
        td = element$2("td");
        t02 = text$3(t0_value);
        t12 = space();
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        t22 = space();
        attr$6(td, "class", "labelColumn svelte-gl9h79");
      },
      m(target2, anchor) {
        insert$1(target2, tr2, anchor);
        append$2(tr2, td);
        append$2(td, t02);
        append$2(tr2, t12);
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(tr2, null);
          }
        }
        append$2(tr2, t22);
        current2 = true;
      },
      p(ctx2, dirty) {
        if ((!current2 || dirty & /*columns*/
        2) && t0_value !== (t0_value = /*column*/
        ctx2[3] + "")) set_data(t02, t0_value);
        if (dirty & /*data*/
        1) {
          each_value_1 = ensure_array_like(
            /*data*/
            ctx2[0]
          );
          let i;
          for (i = 0; i < each_value_1.length; i += 1) {
            const child_ctx = get_each_context_1$2(ctx2, each_value_1, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
              transition_in(each_blocks[i], 1);
            } else {
              each_blocks[i] = create_each_block_1$2(child_ctx);
              each_blocks[i].c();
              transition_in(each_blocks[i], 1);
              each_blocks[i].m(tr2, t22);
            }
          }
          group_outros();
          for (i = each_value_1.length; i < each_blocks.length; i += 1) {
            out(i);
          }
          check_outros();
        }
      },
      i(local) {
        if (current2) return;
        for (let i = 0; i < each_value_1.length; i += 1) {
          transition_in(each_blocks[i]);
        }
        current2 = true;
      },
      o(local) {
        each_blocks = each_blocks.filter(Boolean);
        for (let i = 0; i < each_blocks.length; i += 1) {
          transition_out(each_blocks[i]);
        }
        current2 = false;
      },
      d(detaching) {
        if (detaching) {
          detach(tr2);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_fragment$8(ctx) {
    let if_block_anchor;
    let current2;
    let if_block = (
      /*columns*/
      ctx[1] && /*data*/
      ctx[0] && create_if_block$7(ctx)
    );
    return {
      c() {
        if (if_block) if_block.c();
        if_block_anchor = empty();
      },
      m(target2, anchor) {
        if (if_block) if_block.m(target2, anchor);
        insert$1(target2, if_block_anchor, anchor);
        current2 = true;
      },
      p(ctx2, [dirty]) {
        if (
          /*columns*/
          ctx2[1] && /*data*/
          ctx2[0]
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
            if (dirty & /*columns, data*/
            3) {
              transition_in(if_block, 1);
            }
          } else {
            if_block = create_if_block$7(ctx2);
            if_block.c();
            transition_in(if_block, 1);
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          group_outros();
          transition_out(if_block, 1, 1, () => {
            if_block = null;
          });
          check_outros();
        }
      },
      i(local) {
        if (current2) return;
        transition_in(if_block);
        current2 = true;
      },
      o(local) {
        transition_out(if_block);
        current2 = false;
      },
      d(detaching) {
        if (detaching) {
          detach(if_block_anchor);
        }
        if (if_block) if_block.d(detaching);
      }
    };
  }
  function instance$8($$self, $$props, $$invalidate) {
    let columns;
    let data2;
    let { componentData } = $$props;
    $$self.$$set = ($$props2) => {
      if ("componentData" in $$props2) $$invalidate(2, componentData = $$props2.componentData);
    };
    $$self.$$.update = () => {
      if ($$self.$$.dirty & /*componentData*/
      4) {
        $$invalidate(1, { columns, data: data2 } = componentData, columns, ($$invalidate(0, data2), $$invalidate(2, componentData)));
      }
    };
    return [data2, columns, componentData];
  }
  class Table_vertical extends SvelteComponent {
    constructor(options) {
      super();
      init$1(this, options, instance$8, create_fragment$8, safe_not_equal, { componentData: 2 });
    }
  }
  function get_each_context$3(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[3] = list[i];
    return child_ctx;
  }
  function get_each_context_1$1(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[6] = list[i];
    return child_ctx;
  }
  function get_each_context_2(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[9] = list[i];
    return child_ctx;
  }
  function create_if_block$6(ctx) {
    let div;
    let table;
    let thead;
    let tr2;
    let t;
    let tbody;
    let current2;
    let each_value_2 = ensure_array_like(
      /*columns*/
      ctx[1]
    );
    let each_blocks_1 = [];
    for (let i = 0; i < each_value_2.length; i += 1) {
      each_blocks_1[i] = create_each_block_2(get_each_context_2(ctx, each_value_2, i));
    }
    let each_value = ensure_array_like(
      /*data*/
      ctx[0]
    );
    let each_blocks = [];
    for (let i = 0; i < each_value.length; i += 1) {
      each_blocks[i] = create_each_block$3(get_each_context$3(ctx, each_value, i));
    }
    const out = (i) => transition_out(each_blocks[i], 1, 1, () => {
      each_blocks[i] = null;
    });
    return {
      c() {
        div = element$2("div");
        table = element$2("table");
        thead = element$2("thead");
        tr2 = element$2("tr");
        for (let i = 0; i < each_blocks_1.length; i += 1) {
          each_blocks_1[i].c();
        }
        t = space();
        tbody = element$2("tbody");
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        attr$6(div, "class", "tableContainer svelte-q3hq57");
        attr$6(div, "data-component", "table-horizontal");
      },
      m(target2, anchor) {
        insert$1(target2, div, anchor);
        append$2(div, table);
        append$2(table, thead);
        append$2(thead, tr2);
        for (let i = 0; i < each_blocks_1.length; i += 1) {
          if (each_blocks_1[i]) {
            each_blocks_1[i].m(tr2, null);
          }
        }
        append$2(table, t);
        append$2(table, tbody);
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(tbody, null);
          }
        }
        current2 = true;
      },
      p(ctx2, dirty) {
        if (dirty & /*columns*/
        2) {
          each_value_2 = ensure_array_like(
            /*columns*/
            ctx2[1]
          );
          let i;
          for (i = 0; i < each_value_2.length; i += 1) {
            const child_ctx = get_each_context_2(ctx2, each_value_2, i);
            if (each_blocks_1[i]) {
              each_blocks_1[i].p(child_ctx, dirty);
            } else {
              each_blocks_1[i] = create_each_block_2(child_ctx);
              each_blocks_1[i].c();
              each_blocks_1[i].m(tr2, null);
            }
          }
          for (; i < each_blocks_1.length; i += 1) {
            each_blocks_1[i].d(1);
          }
          each_blocks_1.length = each_value_2.length;
        }
        if (dirty & /*data*/
        1) {
          each_value = ensure_array_like(
            /*data*/
            ctx2[0]
          );
          let i;
          for (i = 0; i < each_value.length; i += 1) {
            const child_ctx = get_each_context$3(ctx2, each_value, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
              transition_in(each_blocks[i], 1);
            } else {
              each_blocks[i] = create_each_block$3(child_ctx);
              each_blocks[i].c();
              transition_in(each_blocks[i], 1);
              each_blocks[i].m(tbody, null);
            }
          }
          group_outros();
          for (i = each_value.length; i < each_blocks.length; i += 1) {
            out(i);
          }
          check_outros();
        }
      },
      i(local) {
        if (current2) return;
        for (let i = 0; i < each_value.length; i += 1) {
          transition_in(each_blocks[i]);
        }
        current2 = true;
      },
      o(local) {
        each_blocks = each_blocks.filter(Boolean);
        for (let i = 0; i < each_blocks.length; i += 1) {
          transition_out(each_blocks[i]);
        }
        current2 = false;
      },
      d(detaching) {
        if (detaching) {
          detach(div);
        }
        destroy_each(each_blocks_1, detaching);
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_each_block_2(ctx) {
    let th;
    let t_value = (
      /*column*/
      ctx[9] + ""
    );
    let t;
    return {
      c() {
        th = element$2("th");
        t = text$3(t_value);
        attr$6(th, "class", "svelte-q3hq57");
      },
      m(target2, anchor) {
        insert$1(target2, th, anchor);
        append$2(th, t);
      },
      p(ctx2, dirty) {
        if (dirty & /*columns*/
        2 && t_value !== (t_value = /*column*/
        ctx2[9] + "")) set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(th);
        }
      }
    };
  }
  function create_each_block_1$1(ctx) {
    let td;
    let datarenderer;
    let current2;
    datarenderer = new Table_data_renderer({ props: { componentData: (
      /*col*/
      ctx[6]
    ) } });
    return {
      c() {
        td = element$2("td");
        create_component(datarenderer.$$.fragment);
      },
      m(target2, anchor) {
        insert$1(target2, td, anchor);
        mount_component(datarenderer, td, null);
        current2 = true;
      },
      p(ctx2, dirty) {
        const datarenderer_changes = {};
        if (dirty & /*data*/
        1) datarenderer_changes.componentData = /*col*/
        ctx2[6];
        datarenderer.$set(datarenderer_changes);
      },
      i(local) {
        if (current2) return;
        transition_in(datarenderer.$$.fragment, local);
        current2 = true;
      },
      o(local) {
        transition_out(datarenderer.$$.fragment, local);
        current2 = false;
      },
      d(detaching) {
        if (detaching) {
          detach(td);
        }
        destroy_component(datarenderer);
      }
    };
  }
  function create_each_block$3(ctx) {
    let tr2;
    let t;
    let current2;
    let each_value_1 = ensure_array_like(
      /*row*/
      ctx[3]
    );
    let each_blocks = [];
    for (let i = 0; i < each_value_1.length; i += 1) {
      each_blocks[i] = create_each_block_1$1(get_each_context_1$1(ctx, each_value_1, i));
    }
    const out = (i) => transition_out(each_blocks[i], 1, 1, () => {
      each_blocks[i] = null;
    });
    return {
      c() {
        tr2 = element$2("tr");
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        t = space();
      },
      m(target2, anchor) {
        insert$1(target2, tr2, anchor);
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(tr2, null);
          }
        }
        append$2(tr2, t);
        current2 = true;
      },
      p(ctx2, dirty) {
        if (dirty & /*data*/
        1) {
          each_value_1 = ensure_array_like(
            /*row*/
            ctx2[3]
          );
          let i;
          for (i = 0; i < each_value_1.length; i += 1) {
            const child_ctx = get_each_context_1$1(ctx2, each_value_1, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
              transition_in(each_blocks[i], 1);
            } else {
              each_blocks[i] = create_each_block_1$1(child_ctx);
              each_blocks[i].c();
              transition_in(each_blocks[i], 1);
              each_blocks[i].m(tr2, t);
            }
          }
          group_outros();
          for (i = each_value_1.length; i < each_blocks.length; i += 1) {
            out(i);
          }
          check_outros();
        }
      },
      i(local) {
        if (current2) return;
        for (let i = 0; i < each_value_1.length; i += 1) {
          transition_in(each_blocks[i]);
        }
        current2 = true;
      },
      o(local) {
        each_blocks = each_blocks.filter(Boolean);
        for (let i = 0; i < each_blocks.length; i += 1) {
          transition_out(each_blocks[i]);
        }
        current2 = false;
      },
      d(detaching) {
        if (detaching) {
          detach(tr2);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_fragment$7(ctx) {
    let if_block_anchor;
    let current2;
    let if_block = (
      /*columns*/
      ctx[1] && /*data*/
      ctx[0] && create_if_block$6(ctx)
    );
    return {
      c() {
        if (if_block) if_block.c();
        if_block_anchor = empty();
      },
      m(target2, anchor) {
        if (if_block) if_block.m(target2, anchor);
        insert$1(target2, if_block_anchor, anchor);
        current2 = true;
      },
      p(ctx2, [dirty]) {
        if (
          /*columns*/
          ctx2[1] && /*data*/
          ctx2[0]
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
            if (dirty & /*columns, data*/
            3) {
              transition_in(if_block, 1);
            }
          } else {
            if_block = create_if_block$6(ctx2);
            if_block.c();
            transition_in(if_block, 1);
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          group_outros();
          transition_out(if_block, 1, 1, () => {
            if_block = null;
          });
          check_outros();
        }
      },
      i(local) {
        if (current2) return;
        transition_in(if_block);
        current2 = true;
      },
      o(local) {
        transition_out(if_block);
        current2 = false;
      },
      d(detaching) {
        if (detaching) {
          detach(if_block_anchor);
        }
        if (if_block) if_block.d(detaching);
      }
    };
  }
  function instance$7($$self, $$props, $$invalidate) {
    let columns;
    let data2;
    let { componentData } = $$props;
    $$self.$$set = ($$props2) => {
      if ("componentData" in $$props2) $$invalidate(2, componentData = $$props2.componentData);
    };
    $$self.$$.update = () => {
      if ($$self.$$.dirty & /*componentData*/
      4) {
        $$invalidate(1, { columns, data: data2 } = componentData, columns, ($$invalidate(0, data2), $$invalidate(2, componentData)));
      }
    };
    return [data2, columns, componentData];
  }
  class Table_horizontal extends SvelteComponent {
    constructor(options) {
      super();
      init$1(this, options, instance$7, create_fragment$7, safe_not_equal, { componentData: 2 });
    }
  }
  function create_if_block$5(ctx) {
    let switch_instance;
    let switch_instance_anchor;
    let current2;
    var switch_value = (
      /*component*/
      ctx[3]
    );
    function switch_props(ctx2, dirty) {
      return {
        props: { componentData: (
          /*componentData*/
          ctx2[0]
        ) }
      };
    }
    if (switch_value) {
      switch_instance = construct_svelte_component(switch_value, switch_props(ctx));
    }
    return {
      c() {
        if (switch_instance) create_component(switch_instance.$$.fragment);
        switch_instance_anchor = empty();
      },
      m(target2, anchor) {
        if (switch_instance) mount_component(switch_instance, target2, anchor);
        insert$1(target2, switch_instance_anchor, anchor);
        current2 = true;
      },
      p(ctx2, dirty) {
        if (switch_value !== (switch_value = /*component*/
        ctx2[3])) {
          if (switch_instance) {
            group_outros();
            const old_component = switch_instance;
            transition_out(old_component.$$.fragment, 1, 0, () => {
              destroy_component(old_component, 1);
            });
            check_outros();
          }
          if (switch_value) {
            switch_instance = construct_svelte_component(switch_value, switch_props(ctx2));
            create_component(switch_instance.$$.fragment);
            transition_in(switch_instance.$$.fragment, 1);
            mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
          } else {
            switch_instance = null;
          }
        } else if (switch_value) {
          const switch_instance_changes = {};
          if (dirty & /*componentData*/
          1) switch_instance_changes.componentData = /*componentData*/
          ctx2[0];
          switch_instance.$set(switch_instance_changes);
        }
      },
      i(local) {
        if (current2) return;
        if (switch_instance) transition_in(switch_instance.$$.fragment, local);
        current2 = true;
      },
      o(local) {
        if (switch_instance) transition_out(switch_instance.$$.fragment, local);
        current2 = false;
      },
      d(detaching) {
        if (detaching) {
          detach(switch_instance_anchor);
        }
        if (switch_instance) destroy_component(switch_instance, detaching);
      }
    };
  }
  function create_fragment$6(ctx) {
    let if_block_anchor;
    let current2;
    let if_block = (
      /*columns*/
      ctx[2] && /*data*/
      ctx[1] && create_if_block$5(ctx)
    );
    return {
      c() {
        if (if_block) if_block.c();
        if_block_anchor = empty();
      },
      m(target2, anchor) {
        if (if_block) if_block.m(target2, anchor);
        insert$1(target2, if_block_anchor, anchor);
        current2 = true;
      },
      p(ctx2, [dirty]) {
        if (
          /*columns*/
          ctx2[2] && /*data*/
          ctx2[1]
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
            if (dirty & /*columns, data*/
            6) {
              transition_in(if_block, 1);
            }
          } else {
            if_block = create_if_block$5(ctx2);
            if_block.c();
            transition_in(if_block, 1);
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          group_outros();
          transition_out(if_block, 1, 1, () => {
            if_block = null;
          });
          check_outros();
        }
      },
      i(local) {
        if (current2) return;
        transition_in(if_block);
        current2 = true;
      },
      o(local) {
        transition_out(if_block);
        current2 = false;
      },
      d(detaching) {
        if (detaching) {
          detach(if_block_anchor);
        }
        if (if_block) if_block.d(detaching);
      }
    };
  }
  function instance$6($$self, $$props, $$invalidate) {
    let columns;
    let data2;
    let vertical;
    let { componentData } = $$props;
    const component = vertical ? Table_vertical : Table_horizontal;
    $$self.$$set = ($$props2) => {
      if ("componentData" in $$props2) $$invalidate(0, componentData = $$props2.componentData);
    };
    $$self.$$.update = () => {
      if ($$self.$$.dirty & /*componentData*/
      1) {
        $$invalidate(2, { columns, data: data2, vertical } = componentData, columns, ($$invalidate(1, data2), $$invalidate(0, componentData)));
      }
    };
    return [componentData, data2, columns, component];
  }
  class Table extends SvelteComponent {
    constructor(options) {
      super();
      init$1(this, options, instance$6, create_fragment$6, safe_not_equal, { componentData: 0 });
    }
  }
  function get_each_context$2(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[3] = list[i];
    return child_ctx;
  }
  function create_if_block$4(ctx) {
    let current_block_type_index;
    let if_block;
    let if_block_anchor;
    let current2;
    const if_block_creators = [create_if_block_1$1, create_else_block$1];
    const if_blocks = [];
    function select_block_type(ctx2, dirty) {
      var _a2;
      if (
        /*componentData*/
        (ctx2[0].type === "page" || /*componentData*/
        ctx2[0].type === "section") && /*componentData*/
        ((_a2 = ctx2[0]) == null ? void 0 : _a2.contents)
      ) return 0;
      return 1;
    }
    current_block_type_index = select_block_type(ctx);
    if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    return {
      c() {
        if_block.c();
        if_block_anchor = empty();
      },
      m(target2, anchor) {
        if_blocks[current_block_type_index].m(target2, anchor);
        insert$1(target2, if_block_anchor, anchor);
        current2 = true;
      },
      p(ctx2, dirty) {
        let previous_block_index = current_block_type_index;
        current_block_type_index = select_block_type(ctx2);
        if (current_block_type_index === previous_block_index) {
          if_blocks[current_block_type_index].p(ctx2, dirty);
        } else {
          group_outros();
          transition_out(if_blocks[previous_block_index], 1, 1, () => {
            if_blocks[previous_block_index] = null;
          });
          check_outros();
          if_block = if_blocks[current_block_type_index];
          if (!if_block) {
            if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
            if_block.c();
          } else {
            if_block.p(ctx2, dirty);
          }
          transition_in(if_block, 1);
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      },
      i(local) {
        if (current2) return;
        transition_in(if_block);
        current2 = true;
      },
      o(local) {
        transition_out(if_block);
        current2 = false;
      },
      d(detaching) {
        if (detaching) {
          detach(if_block_anchor);
        }
        if_blocks[current_block_type_index].d(detaching);
      }
    };
  }
  function create_else_block$1(ctx) {
    let switch_instance;
    let switch_instance_anchor;
    let current2;
    var switch_value = (
      /*component*/
      ctx[1]
    );
    function switch_props(ctx2, dirty) {
      return {
        props: { componentData: (
          /*componentData*/
          ctx2[0]
        ) }
      };
    }
    if (switch_value) {
      switch_instance = construct_svelte_component(switch_value, switch_props(ctx));
    }
    return {
      c() {
        if (switch_instance) create_component(switch_instance.$$.fragment);
        switch_instance_anchor = empty();
      },
      m(target2, anchor) {
        if (switch_instance) mount_component(switch_instance, target2, anchor);
        insert$1(target2, switch_instance_anchor, anchor);
        current2 = true;
      },
      p(ctx2, dirty) {
        if (switch_value !== (switch_value = /*component*/
        ctx2[1])) {
          if (switch_instance) {
            group_outros();
            const old_component = switch_instance;
            transition_out(old_component.$$.fragment, 1, 0, () => {
              destroy_component(old_component, 1);
            });
            check_outros();
          }
          if (switch_value) {
            switch_instance = construct_svelte_component(switch_value, switch_props(ctx2));
            create_component(switch_instance.$$.fragment);
            transition_in(switch_instance.$$.fragment, 1);
            mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
          } else {
            switch_instance = null;
          }
        } else if (switch_value) {
          const switch_instance_changes = {};
          if (dirty & /*componentData*/
          1) switch_instance_changes.componentData = /*componentData*/
          ctx2[0];
          switch_instance.$set(switch_instance_changes);
        }
      },
      i(local) {
        if (current2) return;
        if (switch_instance) transition_in(switch_instance.$$.fragment, local);
        current2 = true;
      },
      o(local) {
        if (switch_instance) transition_out(switch_instance.$$.fragment, local);
        current2 = false;
      },
      d(detaching) {
        if (detaching) {
          detach(switch_instance_anchor);
        }
        if (switch_instance) destroy_component(switch_instance, detaching);
      }
    };
  }
  function create_if_block_1$1(ctx) {
    let switch_instance;
    let switch_instance_anchor;
    let current2;
    var switch_value = (
      /*component*/
      ctx[1]
    );
    function switch_props(ctx2, dirty) {
      return {
        props: {
          componentData: (
            /*componentData*/
            ctx2[0]
          ),
          $$slots: { default: [create_default_slot$1] },
          $$scope: { ctx: ctx2 }
        }
      };
    }
    if (switch_value) {
      switch_instance = construct_svelte_component(switch_value, switch_props(ctx));
    }
    return {
      c() {
        if (switch_instance) create_component(switch_instance.$$.fragment);
        switch_instance_anchor = empty();
      },
      m(target2, anchor) {
        if (switch_instance) mount_component(switch_instance, target2, anchor);
        insert$1(target2, switch_instance_anchor, anchor);
        current2 = true;
      },
      p(ctx2, dirty) {
        if (switch_value !== (switch_value = /*component*/
        ctx2[1])) {
          if (switch_instance) {
            group_outros();
            const old_component = switch_instance;
            transition_out(old_component.$$.fragment, 1, 0, () => {
              destroy_component(old_component, 1);
            });
            check_outros();
          }
          if (switch_value) {
            switch_instance = construct_svelte_component(switch_value, switch_props(ctx2));
            create_component(switch_instance.$$.fragment);
            transition_in(switch_instance.$$.fragment, 1);
            mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
          } else {
            switch_instance = null;
          }
        } else if (switch_value) {
          const switch_instance_changes = {};
          if (dirty & /*componentData*/
          1) switch_instance_changes.componentData = /*componentData*/
          ctx2[0];
          if (dirty & /*$$scope, componentData*/
          65) {
            switch_instance_changes.$$scope = { dirty, ctx: ctx2 };
          }
          switch_instance.$set(switch_instance_changes);
        }
      },
      i(local) {
        if (current2) return;
        if (switch_instance) transition_in(switch_instance.$$.fragment, local);
        current2 = true;
      },
      o(local) {
        if (switch_instance) transition_out(switch_instance.$$.fragment, local);
        current2 = false;
      },
      d(detaching) {
        if (detaching) {
          detach(switch_instance_anchor);
        }
        if (switch_instance) destroy_component(switch_instance, detaching);
      }
    };
  }
  function create_each_block$2(ctx) {
    let card_component_renderer;
    let current2;
    card_component_renderer = new Card_component_renderer({
      props: { componentData: (
        /*child*/
        ctx[3]
      ) }
    });
    return {
      c() {
        create_component(card_component_renderer.$$.fragment);
      },
      m(target2, anchor) {
        mount_component(card_component_renderer, target2, anchor);
        current2 = true;
      },
      p(ctx2, dirty) {
        const card_component_renderer_changes = {};
        if (dirty & /*componentData*/
        1) card_component_renderer_changes.componentData = /*child*/
        ctx2[3];
        card_component_renderer.$set(card_component_renderer_changes);
      },
      i(local) {
        if (current2) return;
        transition_in(card_component_renderer.$$.fragment, local);
        current2 = true;
      },
      o(local) {
        transition_out(card_component_renderer.$$.fragment, local);
        current2 = false;
      },
      d(detaching) {
        destroy_component(card_component_renderer, detaching);
      }
    };
  }
  function create_default_slot$1(ctx) {
    let each_1_anchor;
    let current2;
    let each_value = ensure_array_like(
      /*componentData*/
      ctx[0].contents
    );
    let each_blocks = [];
    for (let i = 0; i < each_value.length; i += 1) {
      each_blocks[i] = create_each_block$2(get_each_context$2(ctx, each_value, i));
    }
    const out = (i) => transition_out(each_blocks[i], 1, 1, () => {
      each_blocks[i] = null;
    });
    return {
      c() {
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        each_1_anchor = empty();
      },
      m(target2, anchor) {
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(target2, anchor);
          }
        }
        insert$1(target2, each_1_anchor, anchor);
        current2 = true;
      },
      p(ctx2, dirty) {
        if (dirty & /*componentData*/
        1) {
          each_value = ensure_array_like(
            /*componentData*/
            ctx2[0].contents
          );
          let i;
          for (i = 0; i < each_value.length; i += 1) {
            const child_ctx = get_each_context$2(ctx2, each_value, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
              transition_in(each_blocks[i], 1);
            } else {
              each_blocks[i] = create_each_block$2(child_ctx);
              each_blocks[i].c();
              transition_in(each_blocks[i], 1);
              each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
            }
          }
          group_outros();
          for (i = each_value.length; i < each_blocks.length; i += 1) {
            out(i);
          }
          check_outros();
        }
      },
      i(local) {
        if (current2) return;
        for (let i = 0; i < each_value.length; i += 1) {
          transition_in(each_blocks[i]);
        }
        current2 = true;
      },
      o(local) {
        each_blocks = each_blocks.filter(Boolean);
        for (let i = 0; i < each_blocks.length; i += 1) {
          transition_out(each_blocks[i]);
        }
        current2 = false;
      },
      d(detaching) {
        if (detaching) {
          detach(each_1_anchor);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_fragment$5(ctx) {
    let if_block_anchor;
    let current2;
    let if_block = (
      /*component*/
      ctx[1] && create_if_block$4(ctx)
    );
    return {
      c() {
        if (if_block) if_block.c();
        if_block_anchor = empty();
      },
      m(target2, anchor) {
        if (if_block) if_block.m(target2, anchor);
        insert$1(target2, if_block_anchor, anchor);
        current2 = true;
      },
      p(ctx2, [dirty]) {
        if (
          /*component*/
          ctx2[1]
        ) if_block.p(ctx2, dirty);
      },
      i(local) {
        if (current2) return;
        transition_in(if_block);
        current2 = true;
      },
      o(local) {
        transition_out(if_block);
        current2 = false;
      },
      d(detaching) {
        if (detaching) {
          detach(if_block_anchor);
        }
        if (if_block) if_block.d(detaching);
      }
    };
  }
  function instance$5($$self, $$props, $$invalidate) {
    let { componentData } = $$props;
    const typesMap = {
      artifacts: Artifacts,
      dag: Dag,
      heading: Heading$1,
      image: Image$2,
      log: Log$1,
      markdown: Markdown,
      page: Page,
      progressBar: Progress_bar,
      section: Section,
      subtitle: Subtitle,
      table: Table,
      text: Text,
      title: Title,
      vegaChart: Vega_chart,
      pythonCode: Python_code
    };
    let component = typesMap == null ? void 0 : typesMap[componentData.type];
    if (!component) {
      console.error("Unknown component type: ", componentData.type);
    }
    $$self.$$set = ($$props2) => {
      if ("componentData" in $$props2) $$invalidate(0, componentData = $$props2.componentData);
    };
    return [componentData, component];
  }
  class Card_component_renderer extends SvelteComponent {
    constructor(options) {
      super();
      init$1(this, options, instance$5, create_fragment$5, safe_not_equal, { componentData: 0 });
    }
  }
  function create_fragment$4(ctx) {
    let main2;
    let div;
    let current2;
    const default_slot_template = (
      /*#slots*/
      ctx[1].default
    );
    const default_slot = create_slot(
      default_slot_template,
      ctx,
      /*$$scope*/
      ctx[0],
      null
    );
    return {
      c() {
        main2 = element$2("main");
        div = element$2("div");
        if (default_slot) default_slot.c();
        attr$6(div, "class", "mainContainer svelte-mqeomk");
        attr$6(main2, "class", "svelte-mqeomk");
      },
      m(target2, anchor) {
        insert$1(target2, main2, anchor);
        append$2(main2, div);
        if (default_slot) {
          default_slot.m(div, null);
        }
        current2 = true;
      },
      p(ctx2, [dirty]) {
        if (default_slot) {
          if (default_slot.p && (!current2 || dirty & /*$$scope*/
          1)) {
            update_slot_base(
              default_slot,
              default_slot_template,
              ctx2,
              /*$$scope*/
              ctx2[0],
              !current2 ? get_all_dirty_from_scope(
                /*$$scope*/
                ctx2[0]
              ) : get_slot_changes(
                default_slot_template,
                /*$$scope*/
                ctx2[0],
                dirty,
                null
              ),
              null
            );
          }
        }
      },
      i(local) {
        if (current2) return;
        transition_in(default_slot, local);
        current2 = true;
      },
      o(local) {
        transition_out(default_slot, local);
        current2 = false;
      },
      d(detaching) {
        if (detaching) {
          detach(main2);
        }
        if (default_slot) default_slot.d(detaching);
      }
    };
  }
  function instance$4($$self, $$props, $$invalidate) {
    let { $$slots: slots = {}, $$scope } = $$props;
    $$self.$$set = ($$props2) => {
      if ("$$scope" in $$props2) $$invalidate(0, $$scope = $$props2.$$scope);
    };
    return [$$scope, slots];
  }
  class Main extends SvelteComponent {
    constructor(options) {
      super();
      init$1(this, options, instance$4, create_fragment$4, safe_not_equal, {});
    }
  }
  const matchIconName = /^[a-z0-9]+(-[a-z0-9]+)*$/;
  const stringToIcon = (value2, validate2, allowSimpleName, provider = "") => {
    const colonSeparated = value2.split(":");
    if (value2.slice(0, 1) === "@") {
      if (colonSeparated.length < 2 || colonSeparated.length > 3) {
        return null;
      }
      provider = colonSeparated.shift().slice(1);
    }
    if (colonSeparated.length > 3 || !colonSeparated.length) {
      return null;
    }
    if (colonSeparated.length > 1) {
      const name2 = colonSeparated.pop();
      const prefix = colonSeparated.pop();
      const result = {
        // Allow provider without '@': "provider:prefix:name"
        provider: colonSeparated.length > 0 ? colonSeparated[0] : provider,
        prefix,
        name: name2
      };
      return validate2 && !validateIconName(result) ? null : result;
    }
    const name = colonSeparated[0];
    const dashSeparated = name.split("-");
    if (dashSeparated.length > 1) {
      const result = {
        provider,
        prefix: dashSeparated.shift(),
        name: dashSeparated.join("-")
      };
      return validate2 && !validateIconName(result) ? null : result;
    }
    if (allowSimpleName && provider === "") {
      const result = {
        provider,
        prefix: "",
        name
      };
      return validate2 && !validateIconName(result, allowSimpleName) ? null : result;
    }
    return null;
  };
  const validateIconName = (icon, allowSimpleName) => {
    if (!icon) {
      return false;
    }
    return !!((icon.provider === "" || icon.provider.match(matchIconName)) && (allowSimpleName && icon.prefix === "" || icon.prefix.match(matchIconName)) && icon.name.match(matchIconName));
  };
  const defaultIconDimensions = Object.freeze(
    {
      left: 0,
      top: 0,
      width: 16,
      height: 16
    }
  );
  const defaultIconTransformations = Object.freeze({
    rotate: 0,
    vFlip: false,
    hFlip: false
  });
  const defaultIconProps = Object.freeze({
    ...defaultIconDimensions,
    ...defaultIconTransformations
  });
  const defaultExtendedIconProps = Object.freeze({
    ...defaultIconProps,
    body: "",
    hidden: false
  });
  function mergeIconTransformations(obj1, obj2) {
    const result = {};
    if (!obj1.hFlip !== !obj2.hFlip) {
      result.hFlip = true;
    }
    if (!obj1.vFlip !== !obj2.vFlip) {
      result.vFlip = true;
    }
    const rotate2 = ((obj1.rotate || 0) + (obj2.rotate || 0)) % 4;
    if (rotate2) {
      result.rotate = rotate2;
    }
    return result;
  }
  function mergeIconData(parent, child) {
    const result = mergeIconTransformations(parent, child);
    for (const key2 in defaultExtendedIconProps) {
      if (key2 in defaultIconTransformations) {
        if (key2 in parent && !(key2 in result)) {
          result[key2] = defaultIconTransformations[key2];
        }
      } else if (key2 in child) {
        result[key2] = child[key2];
      } else if (key2 in parent) {
        result[key2] = parent[key2];
      }
    }
    return result;
  }
  function getIconsTree(data2, names) {
    const icons = data2.icons;
    const aliases = data2.aliases || /* @__PURE__ */ Object.create(null);
    const resolved = /* @__PURE__ */ Object.create(null);
    function resolve2(name) {
      if (icons[name]) {
        return resolved[name] = [];
      }
      if (!(name in resolved)) {
        resolved[name] = null;
        const parent = aliases[name] && aliases[name].parent;
        const value2 = parent && resolve2(parent);
        if (value2) {
          resolved[name] = [parent].concat(value2);
        }
      }
      return resolved[name];
    }
    Object.keys(icons).concat(Object.keys(aliases)).forEach(resolve2);
    return resolved;
  }
  function internalGetIconData(data2, name, tree2) {
    const icons = data2.icons;
    const aliases = data2.aliases || /* @__PURE__ */ Object.create(null);
    let currentProps = {};
    function parse2(name2) {
      currentProps = mergeIconData(
        icons[name2] || aliases[name2],
        currentProps
      );
    }
    parse2(name);
    tree2.forEach(parse2);
    return mergeIconData(data2, currentProps);
  }
  function parseIconSet(data2, callback) {
    const names = [];
    if (typeof data2 !== "object" || typeof data2.icons !== "object") {
      return names;
    }
    if (data2.not_found instanceof Array) {
      data2.not_found.forEach((name) => {
        callback(name, null);
        names.push(name);
      });
    }
    const tree2 = getIconsTree(data2);
    for (const name in tree2) {
      const item = tree2[name];
      if (item) {
        callback(name, internalGetIconData(data2, name, item));
        names.push(name);
      }
    }
    return names;
  }
  const optionalPropertyDefaults = {
    provider: "",
    aliases: {},
    not_found: {},
    ...defaultIconDimensions
  };
  function checkOptionalProps(item, defaults2) {
    for (const prop in defaults2) {
      if (prop in item && typeof item[prop] !== typeof defaults2[prop]) {
        return false;
      }
    }
    return true;
  }
  function quicklyValidateIconSet(obj) {
    if (typeof obj !== "object" || obj === null) {
      return null;
    }
    const data2 = obj;
    if (typeof data2.prefix !== "string" || !obj.icons || typeof obj.icons !== "object") {
      return null;
    }
    if (!checkOptionalProps(obj, optionalPropertyDefaults)) {
      return null;
    }
    const icons = data2.icons;
    for (const name in icons) {
      const icon = icons[name];
      if (!name.match(matchIconName) || typeof icon.body !== "string" || !checkOptionalProps(
        icon,
        defaultExtendedIconProps
      )) {
        return null;
      }
    }
    const aliases = data2.aliases || /* @__PURE__ */ Object.create(null);
    for (const name in aliases) {
      const icon = aliases[name];
      const parent = icon.parent;
      if (!name.match(matchIconName) || typeof parent !== "string" || !icons[parent] && !aliases[parent] || !checkOptionalProps(
        icon,
        defaultExtendedIconProps
      )) {
        return null;
      }
    }
    return data2;
  }
  const dataStorage = /* @__PURE__ */ Object.create(null);
  function newStorage(provider, prefix) {
    return {
      provider,
      prefix,
      icons: /* @__PURE__ */ Object.create(null),
      missing: /* @__PURE__ */ new Set()
    };
  }
  function getStorage(provider, prefix) {
    const providerStorage = dataStorage[provider] || (dataStorage[provider] = /* @__PURE__ */ Object.create(null));
    return providerStorage[prefix] || (providerStorage[prefix] = newStorage(provider, prefix));
  }
  function addIconSet(storage2, data2) {
    if (!quicklyValidateIconSet(data2)) {
      return [];
    }
    return parseIconSet(data2, (name, icon) => {
      if (icon) {
        storage2.icons[name] = icon;
      } else {
        storage2.missing.add(name);
      }
    });
  }
  function addIconToStorage(storage2, name, icon) {
    try {
      if (typeof icon.body === "string") {
        storage2.icons[name] = { ...icon };
        return true;
      }
    } catch (err) {
    }
    return false;
  }
  let simpleNames = false;
  function allowSimpleNames(allow) {
    if (typeof allow === "boolean") {
      simpleNames = allow;
    }
    return simpleNames;
  }
  function getIconData(name) {
    const icon = typeof name === "string" ? stringToIcon(name, true, simpleNames) : name;
    if (icon) {
      const storage2 = getStorage(icon.provider, icon.prefix);
      const iconName = icon.name;
      return storage2.icons[iconName] || (storage2.missing.has(iconName) ? null : void 0);
    }
  }
  function addIcon(name, data2) {
    const icon = stringToIcon(name, true, simpleNames);
    if (!icon) {
      return false;
    }
    const storage2 = getStorage(icon.provider, icon.prefix);
    return addIconToStorage(storage2, icon.name, data2);
  }
  function addCollection(data2, provider) {
    if (typeof data2 !== "object") {
      return false;
    }
    if (typeof provider !== "string") {
      provider = data2.provider || "";
    }
    if (simpleNames && !provider && !data2.prefix) {
      let added = false;
      if (quicklyValidateIconSet(data2)) {
        data2.prefix = "";
        parseIconSet(data2, (name, icon) => {
          if (icon && addIcon(name, icon)) {
            added = true;
          }
        });
      }
      return added;
    }
    const prefix = data2.prefix;
    if (!validateIconName({
      provider,
      prefix,
      name: "a"
    })) {
      return false;
    }
    const storage2 = getStorage(provider, prefix);
    return !!addIconSet(storage2, data2);
  }
  const defaultIconSizeCustomisations = Object.freeze({
    width: null,
    height: null
  });
  const defaultIconCustomisations = Object.freeze({
    // Dimensions
    ...defaultIconSizeCustomisations,
    // Transformations
    ...defaultIconTransformations
  });
  const unitsSplit = /(-?[0-9.]*[0-9]+[0-9.]*)/g;
  const unitsTest = /^-?[0-9.]*[0-9]+[0-9.]*$/g;
  function calculateSize(size, ratio, precision) {
    if (ratio === 1) {
      return size;
    }
    precision = precision || 100;
    if (typeof size === "number") {
      return Math.ceil(size * ratio * precision) / precision;
    }
    if (typeof size !== "string") {
      return size;
    }
    const oldParts = size.split(unitsSplit);
    if (oldParts === null || !oldParts.length) {
      return size;
    }
    const newParts = [];
    let code = oldParts.shift();
    let isNumber2 = unitsTest.test(code);
    while (true) {
      if (isNumber2) {
        const num = parseFloat(code);
        if (isNaN(num)) {
          newParts.push(code);
        } else {
          newParts.push(Math.ceil(num * ratio * precision) / precision);
        }
      } else {
        newParts.push(code);
      }
      code = oldParts.shift();
      if (code === void 0) {
        return newParts.join("");
      }
      isNumber2 = !isNumber2;
    }
  }
  function splitSVGDefs(content2, tag = "defs") {
    let defs = "";
    const index2 = content2.indexOf("<" + tag);
    while (index2 >= 0) {
      const start = content2.indexOf(">", index2);
      const end = content2.indexOf("</" + tag);
      if (start === -1 || end === -1) {
        break;
      }
      const endEnd = content2.indexOf(">", end);
      if (endEnd === -1) {
        break;
      }
      defs += content2.slice(start + 1, end).trim();
      content2 = content2.slice(0, index2).trim() + content2.slice(endEnd + 1);
    }
    return {
      defs,
      content: content2
    };
  }
  function mergeDefsAndContent(defs, content2) {
    return defs ? "<defs>" + defs + "</defs>" + content2 : content2;
  }
  function wrapSVGContent(body, start, end) {
    const split = splitSVGDefs(body);
    return mergeDefsAndContent(split.defs, start + split.content + end);
  }
  const isUnsetKeyword = (value2) => value2 === "unset" || value2 === "undefined" || value2 === "none";
  function iconToSVG(icon, customisations) {
    const fullIcon = {
      ...defaultIconProps,
      ...icon
    };
    const fullCustomisations = {
      ...defaultIconCustomisations,
      ...customisations
    };
    const box = {
      left: fullIcon.left,
      top: fullIcon.top,
      width: fullIcon.width,
      height: fullIcon.height
    };
    let body = fullIcon.body;
    [fullIcon, fullCustomisations].forEach((props) => {
      const transformations = [];
      const hFlip = props.hFlip;
      const vFlip = props.vFlip;
      let rotation2 = props.rotate;
      if (hFlip) {
        if (vFlip) {
          rotation2 += 2;
        } else {
          transformations.push(
            "translate(" + (box.width + box.left).toString() + " " + (0 - box.top).toString() + ")"
          );
          transformations.push("scale(-1 1)");
          box.top = box.left = 0;
        }
      } else if (vFlip) {
        transformations.push(
          "translate(" + (0 - box.left).toString() + " " + (box.height + box.top).toString() + ")"
        );
        transformations.push("scale(1 -1)");
        box.top = box.left = 0;
      }
      let tempValue;
      if (rotation2 < 0) {
        rotation2 -= Math.floor(rotation2 / 4) * 4;
      }
      rotation2 = rotation2 % 4;
      switch (rotation2) {
        case 1:
          tempValue = box.height / 2 + box.top;
          transformations.unshift(
            "rotate(90 " + tempValue.toString() + " " + tempValue.toString() + ")"
          );
          break;
        case 2:
          transformations.unshift(
            "rotate(180 " + (box.width / 2 + box.left).toString() + " " + (box.height / 2 + box.top).toString() + ")"
          );
          break;
        case 3:
          tempValue = box.width / 2 + box.left;
          transformations.unshift(
            "rotate(-90 " + tempValue.toString() + " " + tempValue.toString() + ")"
          );
          break;
      }
      if (rotation2 % 2 === 1) {
        if (box.left !== box.top) {
          tempValue = box.left;
          box.left = box.top;
          box.top = tempValue;
        }
        if (box.width !== box.height) {
          tempValue = box.width;
          box.width = box.height;
          box.height = tempValue;
        }
      }
      if (transformations.length) {
        body = wrapSVGContent(
          body,
          '<g transform="' + transformations.join(" ") + '">',
          "</g>"
        );
      }
    });
    const customisationsWidth = fullCustomisations.width;
    const customisationsHeight = fullCustomisations.height;
    const boxWidth = box.width;
    const boxHeight = box.height;
    let width2;
    let height2;
    if (customisationsWidth === null) {
      height2 = customisationsHeight === null ? "1em" : customisationsHeight === "auto" ? boxHeight : customisationsHeight;
      width2 = calculateSize(height2, boxWidth / boxHeight);
    } else {
      width2 = customisationsWidth === "auto" ? boxWidth : customisationsWidth;
      height2 = customisationsHeight === null ? calculateSize(width2, boxHeight / boxWidth) : customisationsHeight === "auto" ? boxHeight : customisationsHeight;
    }
    const attributes = {};
    const setAttr = (prop, value2) => {
      if (!isUnsetKeyword(value2)) {
        attributes[prop] = value2.toString();
      }
    };
    setAttr("width", width2);
    setAttr("height", height2);
    const viewBox = [box.left, box.top, boxWidth, boxHeight];
    attributes.viewBox = viewBox.join(" ");
    return {
      attributes,
      viewBox,
      body
    };
  }
  const regex = /\sid="(\S+)"/g;
  const randomPrefix = "IconifyId" + Date.now().toString(16) + (Math.random() * 16777216 | 0).toString(16);
  let counter = 0;
  function replaceIDs(body, prefix = randomPrefix) {
    const ids = [];
    let match2;
    while (match2 = regex.exec(body)) {
      ids.push(match2[1]);
    }
    if (!ids.length) {
      return body;
    }
    const suffix = "suffix" + (Math.random() * 16777216 | Date.now()).toString(16);
    ids.forEach((id2) => {
      const newID = typeof prefix === "function" ? prefix(id2) : prefix + (counter++).toString();
      const escapedID = id2.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
      body = body.replace(
        // Allowed characters before id: [#;"]
        // Allowed characters after id: [)"], .[a-z]
        new RegExp('([#;"])(' + escapedID + ')([")]|\\.[a-z])', "g"),
        "$1" + newID + suffix + "$3"
      );
    });
    body = body.replace(new RegExp(suffix, "g"), "");
    return body;
  }
  const storage = /* @__PURE__ */ Object.create(null);
  function setAPIModule(provider, item) {
    storage[provider] = item;
  }
  function getAPIModule(provider) {
    return storage[provider] || storage[""];
  }
  function createAPIConfig(source2) {
    let resources;
    if (typeof source2.resources === "string") {
      resources = [source2.resources];
    } else {
      resources = source2.resources;
      if (!(resources instanceof Array) || !resources.length) {
        return null;
      }
    }
    const result = {
      // API hosts
      resources,
      // Root path
      path: source2.path || "/",
      // URL length limit
      maxURL: source2.maxURL || 500,
      // Timeout before next host is used.
      rotate: source2.rotate || 750,
      // Timeout before failing query.
      timeout: source2.timeout || 5e3,
      // Randomise default API end point.
      random: source2.random === true,
      // Start index
      index: source2.index || 0,
      // Receive data after time out (used if time out kicks in first, then API module sends data anyway).
      dataAfterTimeout: source2.dataAfterTimeout !== false
    };
    return result;
  }
  const configStorage = /* @__PURE__ */ Object.create(null);
  const fallBackAPISources = [
    "https://api.simplesvg.com",
    "https://api.unisvg.com"
  ];
  const fallBackAPI = [];
  while (fallBackAPISources.length > 0) {
    if (fallBackAPISources.length === 1) {
      fallBackAPI.push(fallBackAPISources.shift());
    } else {
      if (Math.random() > 0.5) {
        fallBackAPI.push(fallBackAPISources.shift());
      } else {
        fallBackAPI.push(fallBackAPISources.pop());
      }
    }
  }
  configStorage[""] = createAPIConfig({
    resources: ["https://api.iconify.design"].concat(fallBackAPI)
  });
  function addAPIProvider(provider, customConfig) {
    const config = createAPIConfig(customConfig);
    if (config === null) {
      return false;
    }
    configStorage[provider] = config;
    return true;
  }
  function getAPIConfig(provider) {
    return configStorage[provider];
  }
  const detectFetch = () => {
    let callback;
    try {
      callback = fetch;
      if (typeof callback === "function") {
        return callback;
      }
    } catch (err) {
    }
  };
  let fetchModule = detectFetch();
  function calculateMaxLength(provider, prefix) {
    const config = getAPIConfig(provider);
    if (!config) {
      return 0;
    }
    let result;
    if (!config.maxURL) {
      result = 0;
    } else {
      let maxHostLength = 0;
      config.resources.forEach((item) => {
        const host = item;
        maxHostLength = Math.max(maxHostLength, host.length);
      });
      const url = prefix + ".json?icons=";
      result = config.maxURL - maxHostLength - config.path.length - url.length;
    }
    return result;
  }
  function shouldAbort(status) {
    return status === 404;
  }
  const prepare = (provider, prefix, icons) => {
    const results = [];
    const maxLength = calculateMaxLength(provider, prefix);
    const type2 = "icons";
    let item = {
      type: type2,
      provider,
      prefix,
      icons: []
    };
    let length2 = 0;
    icons.forEach((name, index2) => {
      length2 += name.length + 1;
      if (length2 >= maxLength && index2 > 0) {
        results.push(item);
        item = {
          type: type2,
          provider,
          prefix,
          icons: []
        };
        length2 = name.length;
      }
      item.icons.push(name);
    });
    results.push(item);
    return results;
  };
  function getPath(provider) {
    if (typeof provider === "string") {
      const config = getAPIConfig(provider);
      if (config) {
        return config.path;
      }
    }
    return "/";
  }
  const send = (host, params2, callback) => {
    if (!fetchModule) {
      callback("abort", 424);
      return;
    }
    let path2 = getPath(params2.provider);
    switch (params2.type) {
      case "icons": {
        const prefix = params2.prefix;
        const icons = params2.icons;
        const iconsList = icons.join(",");
        const urlParams = new URLSearchParams({
          icons: iconsList
        });
        path2 += prefix + ".json?" + urlParams.toString();
        break;
      }
      case "custom": {
        const uri = params2.uri;
        path2 += uri.slice(0, 1) === "/" ? uri.slice(1) : uri;
        break;
      }
      default:
        callback("abort", 400);
        return;
    }
    let defaultError = 503;
    fetchModule(host + path2).then((response) => {
      const status = response.status;
      if (status !== 200) {
        setTimeout(() => {
          callback(shouldAbort(status) ? "abort" : "next", status);
        });
        return;
      }
      defaultError = 501;
      return response.json();
    }).then((data2) => {
      if (typeof data2 !== "object" || data2 === null) {
        setTimeout(() => {
          if (data2 === 404) {
            callback("abort", data2);
          } else {
            callback("next", defaultError);
          }
        });
        return;
      }
      setTimeout(() => {
        callback("success", data2);
      });
    }).catch(() => {
      callback("next", defaultError);
    });
  };
  const fetchAPIModule = {
    prepare,
    send
  };
  function sortIcons(icons) {
    const result = {
      loaded: [],
      missing: [],
      pending: []
    };
    const storage2 = /* @__PURE__ */ Object.create(null);
    icons.sort((a2, b2) => {
      if (a2.provider !== b2.provider) {
        return a2.provider.localeCompare(b2.provider);
      }
      if (a2.prefix !== b2.prefix) {
        return a2.prefix.localeCompare(b2.prefix);
      }
      return a2.name.localeCompare(b2.name);
    });
    let lastIcon = {
      provider: "",
      prefix: "",
      name: ""
    };
    icons.forEach((icon) => {
      if (lastIcon.name === icon.name && lastIcon.prefix === icon.prefix && lastIcon.provider === icon.provider) {
        return;
      }
      lastIcon = icon;
      const provider = icon.provider;
      const prefix = icon.prefix;
      const name = icon.name;
      const providerStorage = storage2[provider] || (storage2[provider] = /* @__PURE__ */ Object.create(null));
      const localStorage = providerStorage[prefix] || (providerStorage[prefix] = getStorage(provider, prefix));
      let list;
      if (name in localStorage.icons) {
        list = result.loaded;
      } else if (prefix === "" || localStorage.missing.has(name)) {
        list = result.missing;
      } else {
        list = result.pending;
      }
      const item = {
        provider,
        prefix,
        name
      };
      list.push(item);
    });
    return result;
  }
  function removeCallback(storages, id2) {
    storages.forEach((storage2) => {
      const items = storage2.loaderCallbacks;
      if (items) {
        storage2.loaderCallbacks = items.filter((row) => row.id !== id2);
      }
    });
  }
  function updateCallbacks(storage2) {
    if (!storage2.pendingCallbacksFlag) {
      storage2.pendingCallbacksFlag = true;
      setTimeout(() => {
        storage2.pendingCallbacksFlag = false;
        const items = storage2.loaderCallbacks ? storage2.loaderCallbacks.slice(0) : [];
        if (!items.length) {
          return;
        }
        let hasPending = false;
        const provider = storage2.provider;
        const prefix = storage2.prefix;
        items.forEach((item) => {
          const icons = item.icons;
          const oldLength = icons.pending.length;
          icons.pending = icons.pending.filter((icon) => {
            if (icon.prefix !== prefix) {
              return true;
            }
            const name = icon.name;
            if (storage2.icons[name]) {
              icons.loaded.push({
                provider,
                prefix,
                name
              });
            } else if (storage2.missing.has(name)) {
              icons.missing.push({
                provider,
                prefix,
                name
              });
            } else {
              hasPending = true;
              return true;
            }
            return false;
          });
          if (icons.pending.length !== oldLength) {
            if (!hasPending) {
              removeCallback([storage2], item.id);
            }
            item.callback(
              icons.loaded.slice(0),
              icons.missing.slice(0),
              icons.pending.slice(0),
              item.abort
            );
          }
        });
      });
    }
  }
  let idCounter = 0;
  function storeCallback(callback, icons, pendingSources) {
    const id2 = idCounter++;
    const abort = removeCallback.bind(null, pendingSources, id2);
    if (!icons.pending.length) {
      return abort;
    }
    const item = {
      id: id2,
      icons,
      callback,
      abort
    };
    pendingSources.forEach((storage2) => {
      (storage2.loaderCallbacks || (storage2.loaderCallbacks = [])).push(item);
    });
    return abort;
  }
  function listToIcons(list, validate2 = true, simpleNames2 = false) {
    const result = [];
    list.forEach((item) => {
      const icon = typeof item === "string" ? stringToIcon(item, validate2, simpleNames2) : item;
      if (icon) {
        result.push(icon);
      }
    });
    return result;
  }
  var defaultConfig = {
    resources: [],
    index: 0,
    timeout: 2e3,
    rotate: 750,
    random: false,
    dataAfterTimeout: false
  };
  function sendQuery(config, payload, query, done) {
    const resourcesCount = config.resources.length;
    const startIndex = config.random ? Math.floor(Math.random() * resourcesCount) : config.index;
    let resources;
    if (config.random) {
      let list = config.resources.slice(0);
      resources = [];
      while (list.length > 1) {
        const nextIndex = Math.floor(Math.random() * list.length);
        resources.push(list[nextIndex]);
        list = list.slice(0, nextIndex).concat(list.slice(nextIndex + 1));
      }
      resources = resources.concat(list);
    } else {
      resources = config.resources.slice(startIndex).concat(config.resources.slice(0, startIndex));
    }
    const startTime = Date.now();
    let status = "pending";
    let queriesSent = 0;
    let lastError;
    let timer2 = null;
    let queue = [];
    let doneCallbacks = [];
    if (typeof done === "function") {
      doneCallbacks.push(done);
    }
    function resetTimer() {
      if (timer2) {
        clearTimeout(timer2);
        timer2 = null;
      }
    }
    function abort() {
      if (status === "pending") {
        status = "aborted";
      }
      resetTimer();
      queue.forEach((item) => {
        if (item.status === "pending") {
          item.status = "aborted";
        }
      });
      queue = [];
    }
    function subscribe2(callback, overwrite) {
      if (overwrite) {
        doneCallbacks = [];
      }
      if (typeof callback === "function") {
        doneCallbacks.push(callback);
      }
    }
    function getQueryStatus() {
      return {
        startTime,
        payload,
        status,
        queriesSent,
        queriesPending: queue.length,
        subscribe: subscribe2,
        abort
      };
    }
    function failQuery() {
      status = "failed";
      doneCallbacks.forEach((callback) => {
        callback(void 0, lastError);
      });
    }
    function clearQueue() {
      queue.forEach((item) => {
        if (item.status === "pending") {
          item.status = "aborted";
        }
      });
      queue = [];
    }
    function moduleResponse(item, response, data2) {
      const isError = response !== "success";
      queue = queue.filter((queued) => queued !== item);
      switch (status) {
        case "pending":
          break;
        case "failed":
          if (isError || !config.dataAfterTimeout) {
            return;
          }
          break;
        default:
          return;
      }
      if (response === "abort") {
        lastError = data2;
        failQuery();
        return;
      }
      if (isError) {
        lastError = data2;
        if (!queue.length) {
          if (!resources.length) {
            failQuery();
          } else {
            execNext();
          }
        }
        return;
      }
      resetTimer();
      clearQueue();
      if (!config.random) {
        const index2 = config.resources.indexOf(item.resource);
        if (index2 !== -1 && index2 !== config.index) {
          config.index = index2;
        }
      }
      status = "completed";
      doneCallbacks.forEach((callback) => {
        callback(data2);
      });
    }
    function execNext() {
      if (status !== "pending") {
        return;
      }
      resetTimer();
      const resource = resources.shift();
      if (resource === void 0) {
        if (queue.length) {
          timer2 = setTimeout(() => {
            resetTimer();
            if (status === "pending") {
              clearQueue();
              failQuery();
            }
          }, config.timeout);
          return;
        }
        failQuery();
        return;
      }
      const item = {
        status: "pending",
        resource,
        callback: (status2, data2) => {
          moduleResponse(item, status2, data2);
        }
      };
      queue.push(item);
      queriesSent++;
      timer2 = setTimeout(execNext, config.rotate);
      query(resource, payload, item.callback);
    }
    setTimeout(execNext);
    return getQueryStatus;
  }
  function initRedundancy(cfg) {
    const config = {
      ...defaultConfig,
      ...cfg
    };
    let queries = [];
    function cleanup() {
      queries = queries.filter((item) => item().status === "pending");
    }
    function query(payload, queryCallback, doneCallback) {
      const query2 = sendQuery(
        config,
        payload,
        queryCallback,
        (data2, error2) => {
          cleanup();
          if (doneCallback) {
            doneCallback(data2, error2);
          }
        }
      );
      queries.push(query2);
      return query2;
    }
    function find2(callback) {
      return queries.find((value2) => {
        return callback(value2);
      }) || null;
    }
    const instance2 = {
      query,
      find: find2,
      setIndex: (index2) => {
        config.index = index2;
      },
      getIndex: () => config.index,
      cleanup
    };
    return instance2;
  }
  function emptyCallback$1() {
  }
  const redundancyCache = /* @__PURE__ */ Object.create(null);
  function getRedundancyCache(provider) {
    if (!redundancyCache[provider]) {
      const config = getAPIConfig(provider);
      if (!config) {
        return;
      }
      const redundancy = initRedundancy(config);
      const cachedReundancy = {
        config,
        redundancy
      };
      redundancyCache[provider] = cachedReundancy;
    }
    return redundancyCache[provider];
  }
  function sendAPIQuery(target2, query, callback) {
    let redundancy;
    let send2;
    if (typeof target2 === "string") {
      const api = getAPIModule(target2);
      if (!api) {
        callback(void 0, 424);
        return emptyCallback$1;
      }
      send2 = api.send;
      const cached = getRedundancyCache(target2);
      if (cached) {
        redundancy = cached.redundancy;
      }
    } else {
      const config = createAPIConfig(target2);
      if (config) {
        redundancy = initRedundancy(config);
        const moduleKey = target2.resources ? target2.resources[0] : "";
        const api = getAPIModule(moduleKey);
        if (api) {
          send2 = api.send;
        }
      }
    }
    if (!redundancy || !send2) {
      callback(void 0, 424);
      return emptyCallback$1;
    }
    return redundancy.query(query, send2, callback)().abort;
  }
  const browserCacheVersion = "iconify2";
  const browserCachePrefix = "iconify";
  const browserCacheCountKey = browserCachePrefix + "-count";
  const browserCacheVersionKey = browserCachePrefix + "-version";
  const browserStorageHour = 36e5;
  const browserStorageCacheExpiration = 168;
  const browserStorageLimit = 50;
  function getStoredItem(func, key2) {
    try {
      return func.getItem(key2);
    } catch (err) {
    }
  }
  function setStoredItem(func, key2, value2) {
    try {
      func.setItem(key2, value2);
      return true;
    } catch (err) {
    }
  }
  function removeStoredItem(func, key2) {
    try {
      func.removeItem(key2);
    } catch (err) {
    }
  }
  function setBrowserStorageItemsCount(storage2, value2) {
    return setStoredItem(storage2, browserCacheCountKey, value2.toString());
  }
  function getBrowserStorageItemsCount(storage2) {
    return parseInt(getStoredItem(storage2, browserCacheCountKey)) || 0;
  }
  const browserStorageConfig = {
    local: true,
    session: true
  };
  const browserStorageEmptyItems = {
    local: /* @__PURE__ */ new Set(),
    session: /* @__PURE__ */ new Set()
  };
  let browserStorageStatus = false;
  function setBrowserStorageStatus(status) {
    browserStorageStatus = status;
  }
  let _window = typeof window === "undefined" ? {} : window;
  function getBrowserStorage(key2) {
    const attr2 = key2 + "Storage";
    try {
      if (_window && _window[attr2] && typeof _window[attr2].length === "number") {
        return _window[attr2];
      }
    } catch (err) {
    }
    browserStorageConfig[key2] = false;
  }
  function iterateBrowserStorage(key2, callback) {
    const func = getBrowserStorage(key2);
    if (!func) {
      return;
    }
    const version2 = getStoredItem(func, browserCacheVersionKey);
    if (version2 !== browserCacheVersion) {
      if (version2) {
        const total2 = getBrowserStorageItemsCount(func);
        for (let i = 0; i < total2; i++) {
          removeStoredItem(func, browserCachePrefix + i.toString());
        }
      }
      setStoredItem(func, browserCacheVersionKey, browserCacheVersion);
      setBrowserStorageItemsCount(func, 0);
      return;
    }
    const minTime = Math.floor(Date.now() / browserStorageHour) - browserStorageCacheExpiration;
    const parseItem = (index2) => {
      const name = browserCachePrefix + index2.toString();
      const item = getStoredItem(func, name);
      if (typeof item !== "string") {
        return;
      }
      try {
        const data2 = JSON.parse(item);
        if (typeof data2 === "object" && typeof data2.cached === "number" && data2.cached > minTime && typeof data2.provider === "string" && typeof data2.data === "object" && typeof data2.data.prefix === "string" && // Valid item: run callback
        callback(data2, index2)) {
          return true;
        }
      } catch (err) {
      }
      removeStoredItem(func, name);
    };
    let total = getBrowserStorageItemsCount(func);
    for (let i = total - 1; i >= 0; i--) {
      if (!parseItem(i)) {
        if (i === total - 1) {
          total--;
          setBrowserStorageItemsCount(func, total);
        } else {
          browserStorageEmptyItems[key2].add(i);
        }
      }
    }
  }
  function initBrowserStorage() {
    if (browserStorageStatus) {
      return;
    }
    setBrowserStorageStatus(true);
    for (const key2 in browserStorageConfig) {
      iterateBrowserStorage(key2, (item) => {
        const iconSet = item.data;
        const provider = item.provider;
        const prefix = iconSet.prefix;
        const storage2 = getStorage(
          provider,
          prefix
        );
        if (!addIconSet(storage2, iconSet).length) {
          return false;
        }
        const lastModified = iconSet.lastModified || -1;
        storage2.lastModifiedCached = storage2.lastModifiedCached ? Math.min(storage2.lastModifiedCached, lastModified) : lastModified;
        return true;
      });
    }
  }
  function updateLastModified(storage2, lastModified) {
    const lastValue = storage2.lastModifiedCached;
    if (
      // Matches or newer
      lastValue && lastValue >= lastModified
    ) {
      return lastValue === lastModified;
    }
    storage2.lastModifiedCached = lastModified;
    if (lastValue) {
      for (const key2 in browserStorageConfig) {
        iterateBrowserStorage(key2, (item) => {
          const iconSet = item.data;
          return item.provider !== storage2.provider || iconSet.prefix !== storage2.prefix || iconSet.lastModified === lastModified;
        });
      }
    }
    return true;
  }
  function storeInBrowserStorage(storage2, data2) {
    if (!browserStorageStatus) {
      initBrowserStorage();
    }
    function store(key2) {
      let func;
      if (!browserStorageConfig[key2] || !(func = getBrowserStorage(key2))) {
        return;
      }
      const set2 = browserStorageEmptyItems[key2];
      let index2;
      if (set2.size) {
        set2.delete(index2 = Array.from(set2).shift());
      } else {
        index2 = getBrowserStorageItemsCount(func);
        if (index2 >= browserStorageLimit || !setBrowserStorageItemsCount(func, index2 + 1)) {
          return;
        }
      }
      const item = {
        cached: Math.floor(Date.now() / browserStorageHour),
        provider: storage2.provider,
        data: data2
      };
      return setStoredItem(
        func,
        browserCachePrefix + index2.toString(),
        JSON.stringify(item)
      );
    }
    if (data2.lastModified && !updateLastModified(storage2, data2.lastModified)) {
      return;
    }
    if (!Object.keys(data2.icons).length) {
      return;
    }
    if (data2.not_found) {
      data2 = Object.assign({}, data2);
      delete data2.not_found;
    }
    if (!store("local")) {
      store("session");
    }
  }
  function emptyCallback() {
  }
  function loadedNewIcons(storage2) {
    if (!storage2.iconsLoaderFlag) {
      storage2.iconsLoaderFlag = true;
      setTimeout(() => {
        storage2.iconsLoaderFlag = false;
        updateCallbacks(storage2);
      });
    }
  }
  function loadNewIcons(storage2, icons) {
    if (!storage2.iconsToLoad) {
      storage2.iconsToLoad = icons;
    } else {
      storage2.iconsToLoad = storage2.iconsToLoad.concat(icons).sort();
    }
    if (!storage2.iconsQueueFlag) {
      storage2.iconsQueueFlag = true;
      setTimeout(() => {
        storage2.iconsQueueFlag = false;
        const { provider, prefix } = storage2;
        const icons2 = storage2.iconsToLoad;
        delete storage2.iconsToLoad;
        let api;
        if (!icons2 || !(api = getAPIModule(provider))) {
          return;
        }
        const params2 = api.prepare(provider, prefix, icons2);
        params2.forEach((item) => {
          sendAPIQuery(provider, item, (data2) => {
            if (typeof data2 !== "object") {
              item.icons.forEach((name) => {
                storage2.missing.add(name);
              });
            } else {
              try {
                const parsed = addIconSet(
                  storage2,
                  data2
                );
                if (!parsed.length) {
                  return;
                }
                const pending = storage2.pendingIcons;
                if (pending) {
                  parsed.forEach((name) => {
                    pending.delete(name);
                  });
                }
                storeInBrowserStorage(storage2, data2);
              } catch (err) {
                console.error(err);
              }
            }
            loadedNewIcons(storage2);
          });
        });
      });
    }
  }
  const loadIcons = (icons, callback) => {
    const cleanedIcons = listToIcons(icons, true, allowSimpleNames());
    const sortedIcons = sortIcons(cleanedIcons);
    if (!sortedIcons.pending.length) {
      let callCallback = true;
      if (callback) {
        setTimeout(() => {
          if (callCallback) {
            callback(
              sortedIcons.loaded,
              sortedIcons.missing,
              sortedIcons.pending,
              emptyCallback
            );
          }
        });
      }
      return () => {
        callCallback = false;
      };
    }
    const newIcons = /* @__PURE__ */ Object.create(null);
    const sources = [];
    let lastProvider, lastPrefix;
    sortedIcons.pending.forEach((icon) => {
      const { provider, prefix } = icon;
      if (prefix === lastPrefix && provider === lastProvider) {
        return;
      }
      lastProvider = provider;
      lastPrefix = prefix;
      sources.push(getStorage(provider, prefix));
      const providerNewIcons = newIcons[provider] || (newIcons[provider] = /* @__PURE__ */ Object.create(null));
      if (!providerNewIcons[prefix]) {
        providerNewIcons[prefix] = [];
      }
    });
    sortedIcons.pending.forEach((icon) => {
      const { provider, prefix, name } = icon;
      const storage2 = getStorage(provider, prefix);
      const pendingQueue = storage2.pendingIcons || (storage2.pendingIcons = /* @__PURE__ */ new Set());
      if (!pendingQueue.has(name)) {
        pendingQueue.add(name);
        newIcons[provider][prefix].push(name);
      }
    });
    sources.forEach((storage2) => {
      const { provider, prefix } = storage2;
      if (newIcons[provider][prefix].length) {
        loadNewIcons(storage2, newIcons[provider][prefix]);
      }
    });
    return callback ? storeCallback(callback, sortedIcons, sources) : emptyCallback;
  };
  function mergeCustomisations(defaults2, item) {
    const result = {
      ...defaults2
    };
    for (const key2 in item) {
      const value2 = item[key2];
      const valueType = typeof value2;
      if (key2 in defaultIconSizeCustomisations) {
        if (value2 === null || value2 && (valueType === "string" || valueType === "number")) {
          result[key2] = value2;
        }
      } else if (valueType === typeof result[key2]) {
        result[key2] = key2 === "rotate" ? value2 % 4 : value2;
      }
    }
    return result;
  }
  const separator = /[\s,]+/;
  function flipFromString(custom2, flip2) {
    flip2.split(separator).forEach((str) => {
      const value2 = str.trim();
      switch (value2) {
        case "horizontal":
          custom2.hFlip = true;
          break;
        case "vertical":
          custom2.vFlip = true;
          break;
      }
    });
  }
  function rotateFromString(value2, defaultValue = 0) {
    const units = value2.replace(/^-?[0-9.]*/, "");
    function cleanup(value22) {
      while (value22 < 0) {
        value22 += 4;
      }
      return value22 % 4;
    }
    if (units === "") {
      const num = parseInt(value2);
      return isNaN(num) ? 0 : cleanup(num);
    } else if (units !== value2) {
      let split = 0;
      switch (units) {
        case "%":
          split = 25;
          break;
        case "deg":
          split = 90;
      }
      if (split) {
        let num = parseFloat(value2.slice(0, value2.length - units.length));
        if (isNaN(num)) {
          return 0;
        }
        num = num / split;
        return num % 1 === 0 ? cleanup(num) : 0;
      }
    }
    return defaultValue;
  }
  function iconToHTML(body, attributes) {
    let renderAttribsHTML = body.indexOf("xlink:") === -1 ? "" : ' xmlns:xlink="http://www.w3.org/1999/xlink"';
    for (const attr2 in attributes) {
      renderAttribsHTML += " " + attr2 + '="' + attributes[attr2] + '"';
    }
    return '<svg xmlns="http://www.w3.org/2000/svg"' + renderAttribsHTML + ">" + body + "</svg>";
  }
  function encodeSVGforURL(svg) {
    return svg.replace(/"/g, "'").replace(/%/g, "%25").replace(/#/g, "%23").replace(/</g, "%3C").replace(/>/g, "%3E").replace(/\s+/g, " ");
  }
  function svgToData(svg) {
    return "data:image/svg+xml," + encodeSVGforURL(svg);
  }
  function svgToURL(svg) {
    return 'url("' + svgToData(svg) + '")';
  }
  const defaultExtendedIconCustomisations = {
    ...defaultIconCustomisations,
    inline: false
  };
  const svgDefaults = {
    "xmlns": "http://www.w3.org/2000/svg",
    "xmlns:xlink": "http://www.w3.org/1999/xlink",
    "aria-hidden": true,
    "role": "img"
  };
  const commonProps = {
    display: "inline-block"
  };
  const monotoneProps = {
    "background-color": "currentColor"
  };
  const coloredProps = {
    "background-color": "transparent"
  };
  const propsToAdd = {
    image: "var(--svg)",
    repeat: "no-repeat",
    size: "100% 100%"
  };
  const propsToAddTo = {
    "-webkit-mask": monotoneProps,
    "mask": monotoneProps,
    "background": coloredProps
  };
  for (const prefix in propsToAddTo) {
    const list = propsToAddTo[prefix];
    for (const prop in propsToAdd) {
      list[prefix + "-" + prop] = propsToAdd[prop];
    }
  }
  function fixSize(value2) {
    return value2 + (value2.match(/^[-0-9.]+$/) ? "px" : "");
  }
  function render(icon, props) {
    const customisations = mergeCustomisations(defaultExtendedIconCustomisations, props);
    const mode2 = props.mode || "svg";
    const componentProps = mode2 === "svg" ? { ...svgDefaults } : {};
    if (icon.body.indexOf("xlink:") === -1) {
      delete componentProps["xmlns:xlink"];
    }
    let style2 = typeof props.style === "string" ? props.style : "";
    for (let key2 in props) {
      const value2 = props[key2];
      if (value2 === void 0) {
        continue;
      }
      switch (key2) {
        case "icon":
        case "style":
        case "onLoad":
        case "mode":
          break;
        case "inline":
        case "hFlip":
        case "vFlip":
          customisations[key2] = value2 === true || value2 === "true" || value2 === 1;
          break;
        case "flip":
          if (typeof value2 === "string") {
            flipFromString(customisations, value2);
          }
          break;
        case "color":
          style2 = style2 + (style2.length > 0 && style2.trim().slice(-1) !== ";" ? ";" : "") + "color: " + value2 + "; ";
          break;
        case "rotate":
          if (typeof value2 === "string") {
            customisations[key2] = rotateFromString(value2);
          } else if (typeof value2 === "number") {
            customisations[key2] = value2;
          }
          break;
        case "ariaHidden":
        case "aria-hidden":
          if (value2 !== true && value2 !== "true") {
            delete componentProps["aria-hidden"];
          }
          break;
        default:
          if (key2.slice(0, 3) === "on:") {
            break;
          }
          if (defaultExtendedIconCustomisations[key2] === void 0) {
            componentProps[key2] = value2;
          }
      }
    }
    const item = iconToSVG(icon, customisations);
    const renderAttribs = item.attributes;
    if (customisations.inline) {
      style2 = "vertical-align: -0.125em; " + style2;
    }
    if (mode2 === "svg") {
      Object.assign(componentProps, renderAttribs);
      if (style2 !== "") {
        componentProps.style = style2;
      }
      let localCounter = 0;
      let id2 = props.id;
      if (typeof id2 === "string") {
        id2 = id2.replace(/-/g, "_");
      }
      return {
        svg: true,
        attributes: componentProps,
        body: replaceIDs(item.body, id2 ? () => id2 + "ID" + localCounter++ : "iconifySvelte")
      };
    }
    const { body, width: width2, height: height2 } = icon;
    const useMask = mode2 === "mask" || (mode2 === "bg" ? false : body.indexOf("currentColor") !== -1);
    const html = iconToHTML(body, {
      ...renderAttribs,
      width: width2 + "",
      height: height2 + ""
    });
    const url = svgToURL(html);
    const styles = {
      "--svg": url
    };
    const size = (prop) => {
      const value2 = renderAttribs[prop];
      if (value2) {
        styles[prop] = fixSize(value2);
      }
    };
    size("width");
    size("height");
    Object.assign(styles, commonProps, useMask ? monotoneProps : coloredProps);
    let customStyle = "";
    for (const key2 in styles) {
      customStyle += key2 + ": " + styles[key2] + ";";
    }
    componentProps.style = customStyle + style2;
    return {
      svg: false,
      attributes: componentProps
    };
  }
  allowSimpleNames(true);
  setAPIModule("", fetchAPIModule);
  if (typeof document !== "undefined" && typeof window !== "undefined") {
    initBrowserStorage();
    const _window2 = window;
    if (_window2.IconifyPreload !== void 0) {
      const preload2 = _window2.IconifyPreload;
      const err = "Invalid IconifyPreload syntax.";
      if (typeof preload2 === "object" && preload2 !== null) {
        (preload2 instanceof Array ? preload2 : [preload2]).forEach((item) => {
          try {
            if (
              // Check if item is an object and not null/array
              typeof item !== "object" || item === null || item instanceof Array || // Check for 'icons' and 'prefix'
              typeof item.icons !== "object" || typeof item.prefix !== "string" || // Add icon set
              !addCollection(item)
            ) {
              console.error(err);
            }
          } catch (e3) {
            console.error(err);
          }
        });
      }
    }
    if (_window2.IconifyProviders !== void 0) {
      const providers = _window2.IconifyProviders;
      if (typeof providers === "object" && providers !== null) {
        for (let key2 in providers) {
          const err = "IconifyProviders[" + key2 + "] is invalid.";
          try {
            const value2 = providers[key2];
            if (typeof value2 !== "object" || !value2 || value2.resources === void 0) {
              continue;
            }
            if (!addAPIProvider(key2, value2)) {
              console.error(err);
            }
          } catch (e3) {
            console.error(err);
          }
        }
      }
    }
  }
  function checkIconState(icon, state, mounted, callback, onload) {
    function abortLoading() {
      if (state.loading) {
        state.loading.abort();
        state.loading = null;
      }
    }
    if (typeof icon === "object" && icon !== null && typeof icon.body === "string") {
      state.name = "";
      abortLoading();
      return { data: { ...defaultIconProps, ...icon } };
    }
    let iconName;
    if (typeof icon !== "string" || (iconName = stringToIcon(icon, false, true)) === null) {
      abortLoading();
      return null;
    }
    const data2 = getIconData(iconName);
    if (!data2) {
      if (mounted && (!state.loading || state.loading.name !== icon)) {
        abortLoading();
        state.name = "";
        state.loading = {
          name: icon,
          abort: loadIcons([iconName], callback)
        };
      }
      return null;
    }
    abortLoading();
    if (state.name !== icon) {
      state.name = icon;
      if (onload && !state.destroyed) {
        onload(icon);
      }
    }
    const classes = ["iconify"];
    if (iconName.prefix !== "") {
      classes.push("iconify--" + iconName.prefix);
    }
    if (iconName.provider !== "") {
      classes.push("iconify--" + iconName.provider);
    }
    return { data: data2, classes };
  }
  function generateIcon(icon, props) {
    return icon ? render({
      ...defaultIconProps,
      ...icon
    }, props) : null;
  }
  function create_if_block$3(ctx) {
    let if_block_anchor;
    function select_block_type(ctx2, dirty) {
      if (
        /*data*/
        ctx2[0].svg
      ) return create_if_block_1;
      return create_else_block;
    }
    let current_block_type = select_block_type(ctx);
    let if_block = current_block_type(ctx);
    return {
      c() {
        if_block.c();
        if_block_anchor = empty();
      },
      m(target2, anchor) {
        if_block.m(target2, anchor);
        insert$1(target2, if_block_anchor, anchor);
      },
      p(ctx2, dirty) {
        if (current_block_type === (current_block_type = select_block_type(ctx2)) && if_block) {
          if_block.p(ctx2, dirty);
        } else {
          if_block.d(1);
          if_block = current_block_type(ctx2);
          if (if_block) {
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        }
      },
      d(detaching) {
        if (detaching) {
          detach(if_block_anchor);
        }
        if_block.d(detaching);
      }
    };
  }
  function create_else_block(ctx) {
    let span2;
    let span_levels = [
      /*data*/
      ctx[0].attributes
    ];
    let span_data = {};
    for (let i = 0; i < span_levels.length; i += 1) {
      span_data = assign(span_data, span_levels[i]);
    }
    return {
      c() {
        span2 = element$2("span");
        set_attributes(span2, span_data);
      },
      m(target2, anchor) {
        insert$1(target2, span2, anchor);
      },
      p(ctx2, dirty) {
        set_attributes(span2, span_data = get_spread_update(span_levels, [dirty & /*data*/
        1 && /*data*/
        ctx2[0].attributes]));
      },
      d(detaching) {
        if (detaching) {
          detach(span2);
        }
      }
    };
  }
  function create_if_block_1(ctx) {
    let svg;
    let raw_value = (
      /*data*/
      ctx[0].body + ""
    );
    let svg_levels = [
      /*data*/
      ctx[0].attributes
    ];
    let svg_data = {};
    for (let i = 0; i < svg_levels.length; i += 1) {
      svg_data = assign(svg_data, svg_levels[i]);
    }
    return {
      c() {
        svg = svg_element("svg");
        set_svg_attributes(svg, svg_data);
      },
      m(target2, anchor) {
        insert$1(target2, svg, anchor);
        svg.innerHTML = raw_value;
      },
      p(ctx2, dirty) {
        if (dirty & /*data*/
        1 && raw_value !== (raw_value = /*data*/
        ctx2[0].body + "")) svg.innerHTML = raw_value;
        set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [dirty & /*data*/
        1 && /*data*/
        ctx2[0].attributes]));
      },
      d(detaching) {
        if (detaching) {
          detach(svg);
        }
      }
    };
  }
  function create_fragment$3(ctx) {
    let if_block_anchor;
    let if_block = (
      /*data*/
      ctx[0] && create_if_block$3(ctx)
    );
    return {
      c() {
        if (if_block) if_block.c();
        if_block_anchor = empty();
      },
      m(target2, anchor) {
        if (if_block) if_block.m(target2, anchor);
        insert$1(target2, if_block_anchor, anchor);
      },
      p(ctx2, [dirty]) {
        if (
          /*data*/
          ctx2[0]
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block$3(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      i: noop$5,
      o: noop$5,
      d(detaching) {
        if (detaching) {
          detach(if_block_anchor);
        }
        if (if_block) if_block.d(detaching);
      }
    };
  }
  function instance$3($$self, $$props, $$invalidate) {
    const state = {
      // Last icon name
      name: "",
      // Loading status
      loading: null,
      // Destroyed status
      destroyed: false
    };
    let mounted = false;
    let counter2 = 0;
    let data2;
    const onLoad = (icon) => {
      if (typeof $$props.onLoad === "function") {
        $$props.onLoad(icon);
      }
      const dispatch2 = createEventDispatcher();
      dispatch2("load", { icon });
    };
    function loaded() {
      $$invalidate(3, counter2++, counter2);
    }
    onMount(() => {
      $$invalidate(2, mounted = true);
    });
    onDestroy(() => {
      $$invalidate(1, state.destroyed = true, state);
      if (state.loading) {
        state.loading.abort();
        $$invalidate(1, state.loading = null, state);
      }
    });
    $$self.$$set = ($$new_props) => {
      $$invalidate(6, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    };
    $$self.$$.update = () => {
      {
        const iconData = checkIconState($$props.icon, state, mounted, loaded, onLoad);
        $$invalidate(0, data2 = iconData ? generateIcon(iconData.data, $$props) : null);
        if (data2 && iconData.classes) {
          $$invalidate(
            0,
            data2.attributes["class"] = (typeof $$props["class"] === "string" ? $$props["class"] + " " : "") + iconData.classes.join(" "),
            data2
          );
        }
      }
    };
    $$props = exclude_internal_props($$props);
    return [data2, state, mounted, counter2];
  }
  class Icon extends SvelteComponent {
    constructor(options) {
      super();
      init$1(this, options, instance$3, create_fragment$3, safe_not_equal, {});
    }
  }
  function create_if_block$2(ctx) {
    let div1;
    let span2;
    let icon;
    let t;
    let div0;
    let componentrenderer;
    let current2;
    let mounted;
    let dispose;
    icon = new Icon({ props: { icon: "mdi:close" } });
    componentrenderer = new Card_component_renderer({
      props: { componentData: (
        /*$modal*/
        ctx[1]
      ) }
    });
    return {
      c() {
        div1 = element$2("div");
        span2 = element$2("span");
        create_component(icon.$$.fragment);
        t = space();
        div0 = element$2("div");
        create_component(componentrenderer.$$.fragment);
        attr$6(span2, "class", "cancelButton svelte-1hhf5ym");
        attr$6(div0, "class", "modalContainer");
        attr$6(div1, "class", "modal svelte-1hhf5ym");
        attr$6(div1, "data-component", "modal");
      },
      m(target2, anchor) {
        insert$1(target2, div1, anchor);
        append$2(div1, span2);
        mount_component(icon, span2, null);
        append$2(div1, t);
        append$2(div1, div0);
        mount_component(componentrenderer, div0, null);
        current2 = true;
        if (!mounted) {
          dispose = [
            listen(div0, "click", click_handler),
            listen(
              div1,
              "click",
              /*handleModalClick*/
              ctx[3]
            )
          ];
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        const componentrenderer_changes = {};
        if (dirty & /*$modal*/
        2) componentrenderer_changes.componentData = /*$modal*/
        ctx2[1];
        componentrenderer.$set(componentrenderer_changes);
      },
      i(local) {
        if (current2) return;
        transition_in(icon.$$.fragment, local);
        transition_in(componentrenderer.$$.fragment, local);
        current2 = true;
      },
      o(local) {
        transition_out(icon.$$.fragment, local);
        transition_out(componentrenderer.$$.fragment, local);
        current2 = false;
      },
      d(detaching) {
        if (detaching) {
          detach(div1);
        }
        destroy_component(icon);
        destroy_component(componentrenderer);
        mounted = false;
        run_all(dispose);
      }
    };
  }
  function create_fragment$2(ctx) {
    let if_block_anchor;
    let current2;
    let mounted;
    let dispose;
    let if_block = (
      /*componentData*/
      ctx[0] && /*$modal*/
      ctx[1] && create_if_block$2(ctx)
    );
    return {
      c() {
        if (if_block) if_block.c();
        if_block_anchor = empty();
      },
      m(target2, anchor) {
        if (if_block) if_block.m(target2, anchor);
        insert$1(target2, if_block_anchor, anchor);
        current2 = true;
        if (!mounted) {
          dispose = listen(
            window,
            "keyup",
            /*handleEscapeKey*/
            ctx[2]
          );
          mounted = true;
        }
      },
      p(ctx2, [dirty]) {
        if (
          /*componentData*/
          ctx2[0] && /*$modal*/
          ctx2[1]
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
            if (dirty & /*componentData, $modal*/
            3) {
              transition_in(if_block, 1);
            }
          } else {
            if_block = create_if_block$2(ctx2);
            if_block.c();
            transition_in(if_block, 1);
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          group_outros();
          transition_out(if_block, 1, 1, () => {
            if_block = null;
          });
          check_outros();
        }
      },
      i(local) {
        if (current2) return;
        transition_in(if_block);
        current2 = true;
      },
      o(local) {
        transition_out(if_block);
        current2 = false;
      },
      d(detaching) {
        if (detaching) {
          detach(if_block_anchor);
        }
        if (if_block) if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  const click_handler = (e3) => {
    e3 == null ? void 0 : e3.stopImmediatePropagation();
  };
  function instance$2($$self, $$props, $$invalidate) {
    let $modal;
    component_subscribe($$self, modal, ($$value) => $$invalidate(1, $modal = $$value));
    let { componentData } = $$props;
    function handleEscapeKey(e3) {
      if (e3.code === "Escape") {
        modal.set(void 0);
      }
    }
    function handleModalClick(e3) {
      e3.stopImmediatePropagation();
      modal.set(void 0);
    }
    $$self.$$set = ($$props2) => {
      if ("componentData" in $$props2) $$invalidate(0, componentData = $$props2.componentData);
    };
    return [componentData, $modal, handleEscapeKey, handleModalClick];
  }
  class Modal extends SvelteComponent {
    constructor(options) {
      super();
      init$1(this, options, instance$2, create_fragment$2, safe_not_equal, { componentData: 0 });
    }
  }
  function get_each_context$1(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[2] = list[i][0];
    child_ctx[3] = list[i][1];
    return child_ctx;
  }
  function get_each_context_1(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[6] = list[i];
    return child_ctx;
  }
  function create_if_block$1(ctx) {
    let span2;
    let t_value = (
      /*pageId*/
      ctx[2] + ""
    );
    let t;
    return {
      c() {
        span2 = element$2("span");
        t = text$3(t_value);
        attr$6(span2, "class", "pageId svelte-1kdpgko");
      },
      m(target2, anchor) {
        insert$1(target2, span2, anchor);
        append$2(span2, t);
      },
      p(ctx2, dirty) {
        if (dirty & /*pageHierarchy*/
        1 && t_value !== (t_value = /*pageId*/
        ctx2[2] + "")) set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(span2);
        }
      }
    };
  }
  function create_each_block_1(ctx) {
    let li;
    let button;
    let t0_value = (
      /*section*/
      ctx[6] + ""
    );
    let t02;
    let t12;
    let mounted;
    let dispose;
    function click_handler2() {
      return (
        /*click_handler*/
        ctx[1](
          /*section*/
          ctx[6]
        )
      );
    }
    return {
      c() {
        li = element$2("li");
        button = element$2("button");
        t02 = text$3(t0_value);
        t12 = space();
        attr$6(button, "class", "textButton");
        attr$6(li, "class", "sectionLink svelte-1kdpgko");
      },
      m(target2, anchor) {
        insert$1(target2, li, anchor);
        append$2(li, button);
        append$2(button, t02);
        append$2(li, t12);
        if (!mounted) {
          dispose = listen(button, "click", click_handler2);
          mounted = true;
        }
      },
      p(new_ctx, dirty) {
        ctx = new_ctx;
        if (dirty & /*pageHierarchy*/
        1 && t0_value !== (t0_value = /*section*/
        ctx[6] + "")) set_data(t02, t0_value);
      },
      d(detaching) {
        if (detaching) {
          detach(li);
        }
        mounted = false;
        dispose();
      }
    };
  }
  function create_each_block$1(ctx) {
    let li;
    let t02;
    let ul;
    let t12;
    let if_block = (
      /*pageId*/
      ctx[2] && create_if_block$1(ctx)
    );
    let each_value_1 = ensure_array_like(
      /*sections*/
      ctx[3] || []
    );
    let each_blocks = [];
    for (let i = 0; i < each_value_1.length; i += 1) {
      each_blocks[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
    }
    return {
      c() {
        li = element$2("li");
        if (if_block) if_block.c();
        t02 = space();
        ul = element$2("ul");
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        t12 = space();
        attr$6(ul, "class", "navItem svelte-1kdpgko");
        attr$6(li, "class", "svelte-1kdpgko");
      },
      m(target2, anchor) {
        insert$1(target2, li, anchor);
        if (if_block) if_block.m(li, null);
        append$2(li, t02);
        append$2(li, ul);
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(ul, null);
          }
        }
        append$2(li, t12);
      },
      p(ctx2, dirty) {
        if (
          /*pageId*/
          ctx2[2]
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block$1(ctx2);
            if_block.c();
            if_block.m(li, t02);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
        if (dirty & /*handleScroll, Object, pageHierarchy*/
        1) {
          each_value_1 = ensure_array_like(
            /*sections*/
            ctx2[3] || []
          );
          let i;
          for (i = 0; i < each_value_1.length; i += 1) {
            const child_ctx = get_each_context_1(ctx2, each_value_1, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
            } else {
              each_blocks[i] = create_each_block_1(child_ctx);
              each_blocks[i].c();
              each_blocks[i].m(ul, null);
            }
          }
          for (; i < each_blocks.length; i += 1) {
            each_blocks[i].d(1);
          }
          each_blocks.length = each_value_1.length;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(li);
        }
        if (if_block) if_block.d();
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_fragment$1(ctx) {
    let nav;
    let ul;
    let each_value = ensure_array_like(Object.entries(
      /*pageHierarchy*/
      ctx[0]
    ));
    let each_blocks = [];
    for (let i = 0; i < each_value.length; i += 1) {
      each_blocks[i] = create_each_block$1(get_each_context$1(ctx, each_value, i));
    }
    return {
      c() {
        nav = element$2("nav");
        ul = element$2("ul");
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        attr$6(ul, "class", "navList svelte-1kdpgko");
        attr$6(nav, "class", "nav svelte-1kdpgko");
      },
      m(target2, anchor) {
        insert$1(target2, nav, anchor);
        append$2(nav, ul);
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(ul, null);
          }
        }
      },
      p(ctx2, [dirty]) {
        if (dirty & /*Object, pageHierarchy, handleScroll*/
        1) {
          each_value = ensure_array_like(Object.entries(
            /*pageHierarchy*/
            ctx2[0]
          ));
          let i;
          for (i = 0; i < each_value.length; i += 1) {
            const child_ctx = get_each_context$1(ctx2, each_value, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
            } else {
              each_blocks[i] = create_each_block$1(child_ctx);
              each_blocks[i].c();
              each_blocks[i].m(ul, null);
            }
          }
          for (; i < each_blocks.length; i += 1) {
            each_blocks[i].d(1);
          }
          each_blocks.length = each_value.length;
        }
      },
      i: noop$5,
      o: noop$5,
      d(detaching) {
        if (detaching) {
          detach(nav);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function handleScroll(section) {
    const el = document.querySelector(`[data-section-id="${section}"]`);
    el == null ? void 0 : el.scrollIntoView({ behavior: "smooth" });
  }
  function instance$1($$self, $$props, $$invalidate) {
    let { pageHierarchy = {} } = $$props;
    const click_handler2 = (section) => handleScroll(section);
    $$self.$$set = ($$props2) => {
      if ("pageHierarchy" in $$props2) $$invalidate(0, pageHierarchy = $$props2.pageHierarchy);
    };
    return [pageHierarchy, click_handler2];
  }
  class Aside_nav extends SvelteComponent {
    constructor(options) {
      super();
      init$1(this, options, instance$1, create_fragment$1, safe_not_equal, { pageHierarchy: 0 });
    }
  }
  const { Boolean: Boolean_1 } = globals;
  function get_each_context(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[5] = list[i];
    return child_ctx;
  }
  function create_default_slot_1(ctx) {
    var _a2;
    let nav;
    let current2;
    nav = new Aside_nav({
      props: {
        pageHierarchy: getPageHierarchy(
          /*$cardData*/
          (_a2 = ctx[0]) == null ? void 0 : _a2.components
        )
      }
    });
    return {
      c() {
        create_component(nav.$$.fragment);
      },
      m(target2, anchor) {
        mount_component(nav, target2, anchor);
        current2 = true;
      },
      p(ctx2, dirty) {
        var _a3;
        const nav_changes = {};
        if (dirty & /*$cardData*/
        1) nav_changes.pageHierarchy = getPageHierarchy(
          /*$cardData*/
          (_a3 = ctx2[0]) == null ? void 0 : _a3.components
        );
        nav.$set(nav_changes);
      },
      i(local) {
        if (current2) return;
        transition_in(nav.$$.fragment, local);
        current2 = true;
      },
      o(local) {
        transition_out(nav.$$.fragment, local);
        current2 = false;
      },
      d(detaching) {
        destroy_component(nav, detaching);
      }
    };
  }
  function create_each_block(ctx) {
    let componentrenderer;
    let current2;
    componentrenderer = new Card_component_renderer({
      props: { componentData: (
        /*componentData*/
        ctx[5]
      ) }
    });
    return {
      c() {
        create_component(componentrenderer.$$.fragment);
      },
      m(target2, anchor) {
        mount_component(componentrenderer, target2, anchor);
        current2 = true;
      },
      p(ctx2, dirty) {
        const componentrenderer_changes = {};
        if (dirty & /*$cardData*/
        1) componentrenderer_changes.componentData = /*componentData*/
        ctx2[5];
        componentrenderer.$set(componentrenderer_changes);
      },
      i(local) {
        if (current2) return;
        transition_in(componentrenderer.$$.fragment, local);
        current2 = true;
      },
      o(local) {
        transition_out(componentrenderer.$$.fragment, local);
        current2 = false;
      },
      d(detaching) {
        destroy_component(componentrenderer, detaching);
      }
    };
  }
  function create_default_slot(ctx) {
    var _a2;
    let each_1_anchor;
    let current2;
    let each_value = ensure_array_like(
      /*$cardData*/
      ((_a2 = ctx[0]) == null ? void 0 : _a2.components) || []
    );
    let each_blocks = [];
    for (let i = 0; i < each_value.length; i += 1) {
      each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
    }
    const out = (i) => transition_out(each_blocks[i], 1, 1, () => {
      each_blocks[i] = null;
    });
    return {
      c() {
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        each_1_anchor = empty();
      },
      m(target2, anchor) {
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(target2, anchor);
          }
        }
        insert$1(target2, each_1_anchor, anchor);
        current2 = true;
      },
      p(ctx2, dirty) {
        var _a3;
        if (dirty & /*$cardData*/
        1) {
          each_value = ensure_array_like(
            /*$cardData*/
            ((_a3 = ctx2[0]) == null ? void 0 : _a3.components) || []
          );
          let i;
          for (i = 0; i < each_value.length; i += 1) {
            const child_ctx = get_each_context(ctx2, each_value, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
              transition_in(each_blocks[i], 1);
            } else {
              each_blocks[i] = create_each_block(child_ctx);
              each_blocks[i].c();
              transition_in(each_blocks[i], 1);
              each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
            }
          }
          group_outros();
          for (i = each_value.length; i < each_blocks.length; i += 1) {
            out(i);
          }
          check_outros();
        }
      },
      i(local) {
        if (current2) return;
        for (let i = 0; i < each_value.length; i += 1) {
          transition_in(each_blocks[i]);
        }
        current2 = true;
      },
      o(local) {
        each_blocks = each_blocks.filter(Boolean_1);
        for (let i = 0; i < each_blocks.length; i += 1) {
          transition_out(each_blocks[i]);
        }
        current2 = false;
      },
      d(detaching) {
        if (detaching) {
          detach(each_1_anchor);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_if_block(ctx) {
    let modal_1;
    let current2;
    modal_1 = new Modal({
      props: { componentData: (
        /*$modal*/
        ctx[1]
      ) }
    });
    return {
      c() {
        create_component(modal_1.$$.fragment);
      },
      m(target2, anchor) {
        mount_component(modal_1, target2, anchor);
        current2 = true;
      },
      p(ctx2, dirty) {
        const modal_1_changes = {};
        if (dirty & /*$modal*/
        2) modal_1_changes.componentData = /*$modal*/
        ctx2[1];
        modal_1.$set(modal_1_changes);
      },
      i(local) {
        if (current2) return;
        transition_in(modal_1.$$.fragment, local);
        current2 = true;
      },
      o(local) {
        transition_out(modal_1.$$.fragment, local);
        current2 = false;
      },
      d(detaching) {
        destroy_component(modal_1, detaching);
      }
    };
  }
  function create_fragment(ctx) {
    let div;
    let aside;
    let t02;
    let main2;
    let t12;
    let if_block_anchor;
    let current2;
    aside = new Aside({
      props: {
        $$slots: { default: [create_default_slot_1] },
        $$scope: { ctx }
      }
    });
    main2 = new Main({
      props: {
        $$slots: { default: [create_default_slot] },
        $$scope: { ctx }
      }
    });
    let if_block = (
      /*$modal*/
      ctx[1] && create_if_block(ctx)
    );
    return {
      c() {
        div = element$2("div");
        create_component(aside.$$.fragment);
        t02 = space();
        create_component(main2.$$.fragment);
        t12 = space();
        if (if_block) if_block.c();
        if_block_anchor = empty();
        attr$6(div, "class", "container mf-card svelte-teyund");
        toggle_class(
          div,
          "embed",
          /*embed*/
          ctx[2]
        );
      },
      m(target2, anchor) {
        insert$1(target2, div, anchor);
        mount_component(aside, div, null);
        append$2(div, t02);
        mount_component(main2, div, null);
        insert$1(target2, t12, anchor);
        if (if_block) if_block.m(target2, anchor);
        insert$1(target2, if_block_anchor, anchor);
        current2 = true;
      },
      p(ctx2, [dirty]) {
        const aside_changes = {};
        if (dirty & /*$$scope, $cardData*/
        257) {
          aside_changes.$$scope = { dirty, ctx: ctx2 };
        }
        aside.$set(aside_changes);
        const main_changes = {};
        if (dirty & /*$$scope, $cardData*/
        257) {
          main_changes.$$scope = { dirty, ctx: ctx2 };
        }
        main2.$set(main_changes);
        if (
          /*$modal*/
          ctx2[1]
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
            if (dirty & /*$modal*/
            2) {
              transition_in(if_block, 1);
            }
          } else {
            if_block = create_if_block(ctx2);
            if_block.c();
            transition_in(if_block, 1);
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          group_outros();
          transition_out(if_block, 1, 1, () => {
            if_block = null;
          });
          check_outros();
        }
      },
      i(local) {
        if (current2) return;
        transition_in(aside.$$.fragment, local);
        transition_in(main2.$$.fragment, local);
        transition_in(if_block);
        current2 = true;
      },
      o(local) {
        transition_out(aside.$$.fragment, local);
        transition_out(main2.$$.fragment, local);
        transition_out(if_block);
        current2 = false;
      },
      d(detaching) {
        if (detaching) {
          detach(div);
          detach(t12);
          detach(if_block_anchor);
        }
        destroy_component(aside);
        destroy_component(main2);
        if (if_block) if_block.d(detaching);
      }
    };
  }
  function instance($$self, $$props, $$invalidate) {
    let $cardData;
    let $modal;
    component_subscribe($$self, cardData, ($$value) => $$invalidate(0, $cardData = $$value));
    component_subscribe($$self, modal, ($$value) => $$invalidate(1, $modal = $$value));
    let { cardDataId } = $$props;
    setCardData(cardDataId);
    const urlParams = new URLSearchParams(window == null ? void 0 : window.location.search);
    let embed2 = Boolean(urlParams.get("embed"));
    $$self.$$set = ($$props2) => {
      if ("cardDataId" in $$props2) $$invalidate(3, cardDataId = $$props2.cardDataId);
    };
    return [$cardData, $modal, embed2, cardDataId];
  }
  class App extends SvelteComponent {
    constructor(options) {
      super();
      init$1(this, options, instance, create_fragment, safe_not_equal, { cardDataId: 3 });
    }
  }
  let app;
  try {
    const cardDataId = window.mfCardDataId;
    const containerId = window.mfContainerId;
    const containedApp = (_b = document.querySelector(`[data-container="${containerId}"]`)) == null ? void 0 : _b.querySelector(".card_app");
    app = new App({
      target: containedApp ?? document.querySelector(".card_app"),
      props: { cardDataId }
    });
  } catch (err) {
    throw new Error(err);
  }
  const app$1 = app;
  return app$1;
});
